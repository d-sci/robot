Disassembly Listing for user_interface
Generated From:
C:/Users/Doge/Documents/GitHub/robot/user_interface.X/dist/default/production/user_interface.X.production.cof
29-Jan-2014 5:01:09 PM

---  C:/Users/Doge/Documents/GitHub/robot/user_interface.X/interface.asm  -------------------------------
                                                  1:         list p=16f877                 ; list directive to define processor
                                                  2:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  3:           __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  4:     
                                                  5:     
                                                  6:     ;***************************************
                                                  7:     ; VARIABLES
                                                  8:     ;***************************************
                                                  9:         cblock	0x20
                                                  10:            ; for use in code
                                                  11:            keytemp
                                                  12:            statustemp
                                                  13:    		Table_Counter
                                                  14:    		com
                                                  15:    		dat
                                                  16:            lcd_d1
                                                  17:            lcd_d2
                                                  18:            COUNTH
                                                  19:            COUNTM
                                                  20:            COUNTL
                                                  21:            ; values to display (generated by main machine code)
                                                  22:            op_time     ; in seconds
                                                  23:            status1     ;where   0 = none      1 = pass
                                                  24:            status2      ;       2 = led fail  3 = flicker fail
                                                  25:            status3
                                                  26:            status4
                                                  27:            status5
                                                  28:            status6
                                                  29:            status7
                                                  30:            status8
                                                  31:            status9
                                                  32:            num_dis
                                                  33:            num_tot
                                                  34:    	endc
                                                  35:    
                                                  36:    
                                                  37:    ;***************************************
                                                  38:    ; DEFINITIONS
                                                  39:    ;***************************************
                                                  40:        #define	RS 	PORTD,2
                                                  41:    	#define	E 	PORTD,3
                                                  42:    
                                                  43:    
                                                  44:    ;***************************************
                                                  45:    ; MACROS
                                                  46:    ;***************************************
                                                  47:    LCD_DELAY macro
                                                  48:    	movlw   0xFF
                                                  49:    	movwf   lcd_d1
                                                  50:    	decfsz  lcd_d1,f
                                                  51:    	goto    $-1
                                                  52:    	endm
                                                  53:    
                                                  54:    Display macro	Message
                                                  55:    		local	loop_
                                                  56:    		local 	end_
                                                  57:    		clrf	Table_Counter
                                                  58:    		clrw
                                                  59:    loop_	movf	Table_Counter,W
                                                  60:    		call 	Message
                                                  61:    		xorlw	B'00000000' ;check WORK reg to see if 0 is returned
                                                  62:    		btfsc	STATUS,Z
                                                  63:    		goto	end_
                                                  64:    		call	WR_DATA
                                                  65:    		incf	Table_Counter,F
                                                  66:    		goto	loop_
                                                  67:    end_
                                                  68:    		endm
                                                  69:    
                                                  70:    movlf   macro   l, f
                                                  71:            movlw   l
                                                  72:            movwf   f
                                                  73:            endm
                                                  74:    
                                                  75:    writenum    macro   number
                                                  76:                movlw    number
                                                  77:                addlw   B'00110000'
                                                  78:                movwf   dat
                                                  79:                call WR_DATA
                                                  80:                endm
                                                  81:    
                                                  82:    writenum_reg    macro   reg
                                                  83:                movfw    reg
                                                  84:                addlw   B'00110000'
                                                  85:                movwf   dat
                                                  86:                call WR_DATA
                                                  87:                endm
                                                  88:    
                                                  89:    ;***************************************
                                                  90:    ; MAIN CODE
                                                  91:    ;***************************************
                                                  92:    
                                                  93:        ORG       0x0000             ;RESET vector must always be at 0x00
0000  2801     GOTO 0x1                           94:             goto      init          ;Just jump to the main code section.
                                                  95:    
                                                  96:    init
0001  018B     CLRF INTCON                        97:             clrf      INTCON         ; No interrupts
                                                  98:    
0002  1683     BSF STATUS, 0x5                    99:             bsf       STATUS,RP0     ; select bank 1
0003  0185     CLRF PORTA                         100:            clrf      TRISA          ; All port A is output
0004  30F2     MOVLW 0xF2                         101:            movlw     b'11110010'    ; Set required keypad inputs
0005  0086     MOVWF PORTB                        102:            movwf     TRISB
0006  0187     CLRF PORTC                         103:            clrf      TRISC          ; All port C is output
0007  0188     CLRF PORTD                         104:            clrf      TRISD          ; All port D is output
                                                  105:   
0008  1283     BCF STATUS, 0x5                    106:            bcf       STATUS,RP0     ; select bank 0
0009  0185     CLRF PORTA                         107:            clrf      PORTA
000A  0186     CLRF PORTB                         108:            clrf      PORTB
000B  0187     CLRF PORTC                         109:            clrf      PORTC
000C  0188     CLRF PORTD                         110:            clrf      PORTD
                                                  111:   
000D  2206     CALL 0x206                         112:            call      InitLCD    ;Initialize the LCD
000E  01A2     CLRF 0x22                          113:            Display   Standby_Msg
000F  0103     CLRW
0010  0822     MOVF 0x22, W
0011  2077     CALL 0x77
0012  3A00     XORLW 0x0
0013  1903     BTFSC STATUS, 0x2
0014  2818     GOTO 0x18
0015  2239     CALL 0x239
0016  0AA2     INCF 0x22, F
0017  2810     GOTO 0x10
                                                  114:   
0018  1C86     BTFSS PORTB, 0x1                   115:   waiting  btfss		PORTB,1     ;Wait until data is available from the keypad
0019  2818     GOTO 0x18                          116:            goto		$-1
                                                  117:   
001A  0E06     SWAPF PORTB, W                     118:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
001B  390F     ANDLW 0xF                          119:            andlw		0x0F
001C  3A03     XORLW 0x3                          120:            xorlw      0x3         ;will be all zeros if its "START:
001D  1903     BTFSC STATUS, 0x2                  121:            btfsc      STATUS,Z    ;and Z will be high, so skip if not high
001E  2822     GOTO 0x22                          122:            goto       start
                                                  123:   
001F  1886     BTFSC PORTB, 0x1                   124:            btfsc		PORTB,1     ;Wait until key is released
0020  281F     GOTO 0x1F                          125:            goto		$-1
0021  2818     GOTO 0x18                          126:            goto       waiting
                                                  127:   
                                                  128:   ;--------------------------------------
                                                  129:   ;       ACTUAL OPERATION (im just adding values manually now)
                                                  130:   
                                                  131:   start
0022  2224     CALL 0x224                         132:           call        Clear_Display
0023  01A2     CLRF 0x22                          133:           Display     Start_Msg
0024  0103     CLRW
0025  0822     MOVF 0x22, W
0026  2080     CALL 0x80
0027  3A00     XORLW 0x0
0028  1903     BTFSC STATUS, 0x2
0029  282D     GOTO 0x2D
002A  2239     CALL 0x239
002B  0AA2     INCF 0x22, F
002C  2825     GOTO 0x25
                                                  134:   
                                                  135:   ; just shitting around
002D  2253     CALL 0x253                         136:           call    HalfS
002E  2224     CALL 0x224                         137:           call Clear_Display
002F  3005     MOVLW 0x5                          138:           writenum    0x5
0030  3E30     ADDLW 0x30
0031  00A4     MOVWF 0x24
0032  2239     CALL 0x239
0033  2253     CALL 0x253                         139:           call    HalfS
0034  2224     CALL 0x224                         140:           call Clear_Display
0035  3004     MOVLW 0x4                          141:           writenum    0x4
0036  3E30     ADDLW 0x30
0037  00A4     MOVWF 0x24
0038  2239     CALL 0x239
0039  2253     CALL 0x253                         142:           call    HalfS
003A  2224     CALL 0x224                         143:           call Clear_Display
003B  3003     MOVLW 0x3                          144:           writenum    0x3
003C  3E30     ADDLW 0x30
003D  00A4     MOVWF 0x24
003E  2239     CALL 0x239
003F  2253     CALL 0x253                         145:           call    HalfS
0040  2224     CALL 0x224                         146:           call Clear_Display
0041  3002     MOVLW 0x2                          147:           writenum    0x2
0042  3E30     ADDLW 0x30
0043  00A4     MOVWF 0x24
0044  2239     CALL 0x239
0045  2253     CALL 0x253                         148:           call    HalfS
0046  2224     CALL 0x224                         149:           call Clear_Display
0047  3001     MOVLW 0x1                          150:           writenum    0x1
0048  3E30     ADDLW 0x30
0049  00A4     MOVWF 0x24
004A  2239     CALL 0x239
004B  2253     CALL 0x253                         151:           call    HalfS
                                                  152:   
                                                  153:   ; Putting values in manually. This will be done automatically in main program
004C  302F     MOVLW 0x2F                         154:            movlf     D'47', op_time
004D  00AA     MOVWF 0x2A
004E  3000     MOVLW 0x0                          155:            movlf     B'00', status1
004F  00AB     MOVWF 0x2B
0050  3001     MOVLW 0x1                          156:            movlf     B'01', status2
0051  00AC     MOVWF 0x2C
0052  3002     MOVLW 0x2                          157:            movlf     B'10', status3
0053  00AD     MOVWF 0x2D
0054  3003     MOVLW 0x3                          158:            movlf     B'11', status4
0055  00AE     MOVWF 0x2E
0056  3001     MOVLW 0x1                          159:            movlf     B'01', status5
0057  00AF     MOVWF 0x2F
0058  3001     MOVLW 0x1                          160:            movlf     B'01', status6
0059  00B0     MOVWF 0x30
005A  3001     MOVLW 0x1                          161:            movlf     B'01', status7
005B  00B1     MOVWF 0x31
005C  3001     MOVLW 0x1                          162:            movlf     B'01', status8
005D  00B2     MOVWF 0x32
005E  3000     MOVLW 0x0                          163:            movlf     B'00', status9
005F  00B3     MOVWF 0x33
0060  3002     MOVLW 0x2                          164:            movlf     D'2', num_dis
0061  00B4     MOVWF 0x34
0062  3007     MOVLW 0x7                          165:            movlf     D'7', num_tot
0063  00B5     MOVWF 0x35
                                                  166:   
                                                  167:   
0064  2224     CALL 0x224                         168:           call        Clear_Display
0065  01A2     CLRF 0x22                          169:           Display    End_Msg
0066  0103     CLRW
0067  0822     MOVF 0x22, W
0068  208C     CALL 0x8C
0069  3A00     XORLW 0x0
006A  1903     BTFSC STATUS, 0x2
006B  286F     GOTO 0x6F
006C  2239     CALL 0x239
006D  0AA2     INCF 0x22, F
006E  2867     GOTO 0x67
                                                  170:   ;-----------------------------------------------------------------------
                                                  171:   
                                                  172:   ; Data display interface
                                                  173:   
006F  1C86     BTFSS PORTB, 0x1                   174:   poll     btfss		PORTB,1     ;Wait until data is available from the keypad
0070  286F     GOTO 0x6F                          175:            goto		$-1
                                                  176:   
0071  0E06     SWAPF PORTB, W                     177:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0072  390F     ANDLW 0xF                          178:            andlw		0x0F
0073  20FF     CALL 0xFF                          179:            call       information
                                                  180:   
0074  1886     BTFSC PORTB, 0x1                   181:            btfsc		PORTB,1     ;Wait until key is released
0075  2874     GOTO 0x74                          182:            goto		$-1
0076  286F     GOTO 0x6F                          183:            goto       poll
                                                  184:   
                                                  185:   ;-------------------------------------------------------------------------
                                                  186:   
                                                  187:   ;***************************************
                                                  188:   ; LOOK UP TABLE (MESSAGES)
                                                  189:   ;***************************************
                                                  190:   Standby_Msg
0077  0782     ADDWF PCL, F                       191:   		addwf	PCL,F
0078  3453     RETLW 0x53                         192:   		dt		"STANDBY", 0
0079  3454     RETLW 0x54
007A  3441     RETLW 0x41
007B  344E     RETLW 0x4E
007C  3444     RETLW 0x44
007D  3442     RETLW 0x42
007E  3459     RETLW 0x59
007F  3400     RETLW 0x0
                                                  193:   Start_Msg
0080  0782     ADDWF PCL, F                       194:           addwf   PCL,F
0081  3449     RETLW 0x49                         195:           dt      "Inspecting",0
0082  346E     RETLW 0x6E
0083  3473     RETLW 0x73
0084  3470     RETLW 0x70
0085  3465     RETLW 0x65
0086  3463     RETLW 0x63
0087  3474     RETLW 0x74
0088  3469     RETLW 0x69
0089  346E     RETLW 0x6E
008A  3467     RETLW 0x67
008B  3400     RETLW 0x0
                                                  196:   End_Msg
008C  0782     ADDWF PCL, F                       197:           addwf   PCL,F
008D  3443     RETLW 0x43                         198:           dt      "Complete",0
008E  346F     RETLW 0x6F
008F  346D     RETLW 0x6D
0090  3470     RETLW 0x70
0091  346C     RETLW 0x6C
0092  3465     RETLW 0x65
0093  3474     RETLW 0x74
0094  3465     RETLW 0x65
0095  3400     RETLW 0x0
                                                  199:   Time_Msg
0096  0782     ADDWF PCL, F                       200:   		addwf	PCL,F
0097  344F     RETLW 0x4F                         201:   		dt		"Operation time:",0
0098  3470     RETLW 0x70
0099  3465     RETLW 0x65
009A  3472     RETLW 0x72
009B  3461     RETLW 0x61
009C  3474     RETLW 0x74
009D  3469     RETLW 0x69
009E  346F     RETLW 0x6F
009F  346E     RETLW 0x6E
00A0  3420     RETLW 0x20
00A1  3474     RETLW 0x74
00A2  3469     RETLW 0x69
00A3  346D     RETLW 0x6D
00A4  3465     RETLW 0x65
00A5  343A     RETLW 0x3A
00A6  3400     RETLW 0x0
                                                  202:   Seconds
00A7  0782     ADDWF PCL, F                       203:           addwf   PCL,F
00A8  3420     RETLW 0x20                         204:           dt      " seconds", 0
00A9  3473     RETLW 0x73
00AA  3465     RETLW 0x65
00AB  3463     RETLW 0x63
00AC  346F     RETLW 0x6F
00AD  346E     RETLW 0x6E
00AE  3464     RETLW 0x64
00AF  3473     RETLW 0x73
00B0  3400     RETLW 0x0
                                                  205:   None
00B1  0782     ADDWF PCL, F                       206:           addwf   PCL,F
00B2  343A     RETLW 0x3A                         207:           dt      ": not present",0
00B3  3420     RETLW 0x20
00B4  346E     RETLW 0x6E
00B5  346F     RETLW 0x6F
00B6  3474     RETLW 0x74
00B7  3420     RETLW 0x20
00B8  3470     RETLW 0x70
00B9  3472     RETLW 0x72
00BA  3465     RETLW 0x65
00BB  3473     RETLW 0x73
00BC  3465     RETLW 0x65
00BD  346E     RETLW 0x6E
00BE  3474     RETLW 0x74
00BF  3400     RETLW 0x0
                                                  208:   Pass
00C0  0782     ADDWF PCL, F                       209:   		addwf	PCL,F
00C1  343A     RETLW 0x3A                         210:   		dt		": pass",0
00C2  3420     RETLW 0x20
00C3  3470     RETLW 0x70
00C4  3461     RETLW 0x61
00C5  3473     RETLW 0x73
00C6  3473     RETLW 0x73
00C7  3400     RETLW 0x0
                                                  211:   LED_fail
00C8  0782     ADDWF PCL, F                       212:   		addwf	PCL,F
00C9  343A     RETLW 0x3A                         213:   		dt		": LED fail",0
00CA  3420     RETLW 0x20
00CB  344C     RETLW 0x4C
00CC  3445     RETLW 0x45
00CD  3444     RETLW 0x44
00CE  3420     RETLW 0x20
00CF  3466     RETLW 0x66
00D0  3461     RETLW 0x61
00D1  3469     RETLW 0x69
00D2  346C     RETLW 0x6C
00D3  3400     RETLW 0x0
                                                  214:   Flick_fail
00D4  0782     ADDWF PCL, F                       215:   		addwf	PCL,F
00D5  343A     RETLW 0x3A                         216:   		dt		": flicker fail",0
00D6  3420     RETLW 0x20
00D7  3466     RETLW 0x66
00D8  346C     RETLW 0x6C
00D9  3469     RETLW 0x69
00DA  3463     RETLW 0x63
00DB  346B     RETLW 0x6B
00DC  3465     RETLW 0x65
00DD  3472     RETLW 0x72
00DE  3420     RETLW 0x20
00DF  3466     RETLW 0x66
00E0  3461     RETLW 0x61
00E1  3469     RETLW 0x69
00E2  346C     RETLW 0x6C
00E3  3400     RETLW 0x0
                                                  217:   Of
00E4  0782     ADDWF PCL, F                       218:           addwf   PCL,F
00E5  3420     RETLW 0x20                         219:           dt      " of ",0
00E6  346F     RETLW 0x6F
00E7  3466     RETLW 0x66
00E8  3420     RETLW 0x20
00E9  3400     RETLW 0x0
                                                  220:   Candles
00EA  0782     ADDWF PCL, F                       221:           addwf   PCL,F
00EB  3420     RETLW 0x20                         222:           dt      " candles",0
00EC  3463     RETLW 0x63
00ED  3461     RETLW 0x61
00EE  346E     RETLW 0x6E
00EF  3464     RETLW 0x64
00F0  346C     RETLW 0x6C
00F1  3465     RETLW 0x65
00F2  3473     RETLW 0x73
00F3  3400     RETLW 0x0
                                                  223:   Defective
00F4  0782     ADDWF PCL, F                       224:           addwf   PCL,F
00F5  3464     RETLW 0x64                         225:           dt      "defective",0
00F6  3465     RETLW 0x65
00F7  3466     RETLW 0x66
00F8  3465     RETLW 0x65
00F9  3463     RETLW 0x63
00FA  3474     RETLW 0x74
00FB  3469     RETLW 0x69
00FC  3476     RETLW 0x76
00FD  3465     RETLW 0x65
00FE  3400     RETLW 0x0
                                                  226:   
                                                  227:   
                                                  228:   ;***************************************
                                                  229:   ; KEY SELECTOR ROUTINE (written by me)
                                                  230:   ;***************************************
                                                  231:   information
00FF  00A0     MOVWF 0x20                         232:       movwf   keytemp             ; save value of W in msgtemp
                                                  233:   
                                                  234:   check_1
0100  3A00     XORLW 0x0                          235:       xorlw   0x0         ;will be all zeros if its 1
0101  1D03     BTFSS STATUS, 0x2                  236:       btfss   STATUS,Z    ;and Z will be high, so skip 
0102  290B     GOTO 0x10B                         237:       goto check_2
0103  2224     CALL 0x224                         238:       call Clear_Display
0104  3001     MOVLW 0x1                          239:       writenum 0x1
0105  3E30     ADDLW 0x30
0106  00A4     MOVWF 0x24
0107  2239     CALL 0x239
0108  082B     MOVF 0x2B, W                       240:       movf status1, W
0109  21C0     CALL 0x1C0                         241:       call display_status
010A  0008     RETURN                             242:       return
                                                  243:   
                                                  244:   check_2
010B  0820     MOVF 0x20, W                       245:       movf    keytemp, W
010C  3A01     XORLW 0x1                          246:       xorlw   0x1         
010D  1D03     BTFSS STATUS, 0x2                  247:       btfss   STATUS,Z    
010E  2917     GOTO 0x117                         248:       goto check_3
010F  2224     CALL 0x224                         249:       call Clear_Display
0110  3002     MOVLW 0x2                          250:       writenum 0x2
0111  3E30     ADDLW 0x30
0112  00A4     MOVWF 0x24
0113  2239     CALL 0x239
0114  082C     MOVF 0x2C, W                       251:       movf status2, W
0115  21C0     CALL 0x1C0                         252:       call display_status
0116  0008     RETURN                             253:       return
                                                  254:   
                                                  255:   check_3
0117  0820     MOVF 0x20, W                       256:       movf    keytemp, W
0118  3A02     XORLW 0x2                          257:       xorlw   0x2
0119  1D03     BTFSS STATUS, 0x2                  258:       btfss   STATUS,Z
011A  2923     GOTO 0x123                         259:       goto check_4
011B  2224     CALL 0x224                         260:       call Clear_Display
011C  3003     MOVLW 0x3                          261:       writenum 0x3
011D  3E30     ADDLW 0x30
011E  00A4     MOVWF 0x24
011F  2239     CALL 0x239
0120  082D     MOVF 0x2D, W                       262:       movf status3, W
0121  21C0     CALL 0x1C0                         263:       call display_status
0122  0008     RETURN                             264:       return
                                                  265:   
                                                  266:   check_4
0123  0820     MOVF 0x20, W                       267:       movf    keytemp, W
0124  3A04     XORLW 0x4                          268:       xorlw   0x4
0125  1D03     BTFSS STATUS, 0x2                  269:       btfss   STATUS,Z
0126  292F     GOTO 0x12F                         270:       goto check_5
0127  2224     CALL 0x224                         271:       call Clear_Display
0128  3004     MOVLW 0x4                          272:       writenum 0x4
0129  3E30     ADDLW 0x30
012A  00A4     MOVWF 0x24
012B  2239     CALL 0x239
012C  082E     MOVF 0x2E, W                       273:       movf status4, W
012D  21C0     CALL 0x1C0                         274:       call display_status
012E  0008     RETURN                             275:       return
                                                  276:   
                                                  277:   check_5
012F  0820     MOVF 0x20, W                       278:       movf    keytemp, W
0130  3A05     XORLW 0x5                          279:       xorlw   0x5
0131  1D03     BTFSS STATUS, 0x2                  280:       btfss   STATUS,Z
0132  293B     GOTO 0x13B                         281:       goto check_6
0133  2224     CALL 0x224                         282:       call Clear_Display
0134  3005     MOVLW 0x5                          283:       writenum 0x5
0135  3E30     ADDLW 0x30
0136  00A4     MOVWF 0x24
0137  2239     CALL 0x239
0138  082F     MOVF 0x2F, W                       284:       movf status5, W
0139  21C0     CALL 0x1C0                         285:       call display_status
013A  0008     RETURN                             286:       return
                                                  287:   
                                                  288:   check_6
013B  0820     MOVF 0x20, W                       289:       movf    keytemp, W
013C  3A06     XORLW 0x6                          290:       xorlw   0x6
013D  1D03     BTFSS STATUS, 0x2                  291:       btfss   STATUS,Z
013E  2947     GOTO 0x147                         292:       goto check_7
013F  2224     CALL 0x224                         293:       call Clear_Display
0140  3006     MOVLW 0x6                          294:       writenum 0x6
0141  3E30     ADDLW 0x30
0142  00A4     MOVWF 0x24
0143  2239     CALL 0x239
0144  0830     MOVF 0x30, W                       295:       movf status6, W
0145  21C0     CALL 0x1C0                         296:       call display_status
0146  0008     RETURN                             297:       return
                                                  298:   
                                                  299:   check_7
0147  0820     MOVF 0x20, W                       300:       movf    keytemp, W
0148  3A08     XORLW 0x8                          301:       xorlw   0x8
0149  1D03     BTFSS STATUS, 0x2                  302:       btfss   STATUS,Z
014A  2953     GOTO 0x153                         303:       goto check_8
014B  2224     CALL 0x224                         304:       call Clear_Display
014C  3007     MOVLW 0x7                          305:       writenum 0x7
014D  3E30     ADDLW 0x30
014E  00A4     MOVWF 0x24
014F  2239     CALL 0x239
0150  0831     MOVF 0x31, W                       306:       movf status7, W
0151  21C0     CALL 0x1C0                         307:       call display_status
0152  0008     RETURN                             308:       return
                                                  309:   
                                                  310:   check_8
0153  0820     MOVF 0x20, W                       311:       movf    keytemp, W
0154  3A09     XORLW 0x9                          312:       xorlw   0x9
0155  1D03     BTFSS STATUS, 0x2                  313:       btfss   STATUS,Z
0156  295F     GOTO 0x15F                         314:       goto check_9
0157  2224     CALL 0x224                         315:       call Clear_Display
0158  3008     MOVLW 0x8                          316:       writenum 0x8
0159  3E30     ADDLW 0x30
015A  00A4     MOVWF 0x24
015B  2239     CALL 0x239
015C  0832     MOVF 0x32, W                       317:       movf status8, W
015D  21C0     CALL 0x1C0                         318:       call display_status
015E  0008     RETURN                             319:       return
                                                  320:   
                                                  321:   check_9
015F  0820     MOVF 0x20, W                       322:       movf    keytemp, W
0160  3A0A     XORLW 0xA                          323:       xorlw   0xA
0161  1D03     BTFSS STATUS, 0x2                  324:       btfss   STATUS,Z
0162  296B     GOTO 0x16B                         325:       goto check_summary
0163  2224     CALL 0x224                         326:       call Clear_Display
0164  3009     MOVLW 0x9                          327:       writenum 0x9
0165  3E30     ADDLW 0x30
0166  00A4     MOVWF 0x24
0167  2239     CALL 0x239
0168  0833     MOVF 0x33, W                       328:       movf status9, W
0169  21C0     CALL 0x1C0                         329:       call display_status
016A  0008     RETURN                             330:       return
                                                  331:   
                                                  332:   check_summary           
016B  0820     MOVF 0x20, W                       333:       movf    keytemp, W
016C  3A07     XORLW 0x7                          334:       xorlw   0x7
016D  1D03     BTFSS STATUS, 0x2                  335:       btfss   STATUS,Z
016E  2998     GOTO 0x198                         336:       goto check_time
016F  2224     CALL 0x224                         337:       call Clear_Display
0170  0834     MOVF 0x34, W                       338:       writenum_reg num_dis
0171  3E30     ADDLW 0x30
0172  00A4     MOVWF 0x24
0173  2239     CALL 0x239
0174  01A2     CLRF 0x22                          339:       Display Of
0175  0103     CLRW
0176  0822     MOVF 0x22, W
0177  20E4     CALL 0xE4
0178  3A00     XORLW 0x0
0179  1903     BTFSC STATUS, 0x2
017A  297E     GOTO 0x17E
017B  2239     CALL 0x239
017C  0AA2     INCF 0x22, F
017D  2976     GOTO 0x176
017E  0835     MOVF 0x35, W                       340:       writenum_reg num_tot
017F  3E30     ADDLW 0x30
0180  00A4     MOVWF 0x24
0181  2239     CALL 0x239
0182  01A2     CLRF 0x22                          341:       Display Candles
0183  0103     CLRW
0184  0822     MOVF 0x22, W
0185  20EA     CALL 0xEA
0186  3A00     XORLW 0x0
0187  1903     BTFSC STATUS, 0x2
0188  298C     GOTO 0x18C
0189  2239     CALL 0x239
018A  0AA2     INCF 0x22, F
018B  2984     GOTO 0x184
018C  2227     CALL 0x227                         342:       call Switch_Lines
018D  01A2     CLRF 0x22                          343:       Display Defective
018E  0103     CLRW
018F  0822     MOVF 0x22, W
0190  20F4     CALL 0xF4
0191  3A00     XORLW 0x0
0192  1903     BTFSC STATUS, 0x2
0193  2997     GOTO 0x197
0194  2239     CALL 0x239
0195  0AA2     INCF 0x22, F
0196  298F     GOTO 0x18F
0197  0008     RETURN                             344:       return
                                                  345:   
                                                  346:   check_time
0198  0820     MOVF 0x20, W                       347:       movf    keytemp, W
0199  3A0B     XORLW 0xB                          348:       xorlw   0xB
019A  1D03     BTFSS STATUS, 0x2                  349:       btfss   STATUS,Z
019B  29B5     GOTO 0x1B5                         350:       goto check_start
019C  2224     CALL 0x224                         351:       call Clear_Display
019D  01A2     CLRF 0x22                          352:       Display Time_Msg
019E  0103     CLRW
019F  0822     MOVF 0x22, W
01A0  2096     CALL 0x96
01A1  3A00     XORLW 0x0
01A2  1903     BTFSC STATUS, 0x2
01A3  29A7     GOTO 0x1A7
01A4  2239     CALL 0x239
01A5  0AA2     INCF 0x22, F
01A6  299F     GOTO 0x19F
01A7  2227     CALL 0x227                         353:       call Switch_Lines
01A8  082A     MOVF 0x2A, W                       354:       movf    op_time, W
01A9  21FD     CALL 0x1FD                         355:       call    big_number      ; this doesnt actually work
01AA  01A2     CLRF 0x22                          356:       Display Seconds
01AB  0103     CLRW
01AC  0822     MOVF 0x22, W
01AD  20A7     CALL 0xA7
01AE  3A00     XORLW 0x0
01AF  1903     BTFSC STATUS, 0x2
01B0  29B4     GOTO 0x1B4
01B1  2239     CALL 0x239
01B2  0AA2     INCF 0x22, F
01B3  29AC     GOTO 0x1AC
01B4  0008     RETURN                             357:       return
                                                  358:   
                                                  359:   check_start
01B5  0820     MOVF 0x20, W                       360:       movf    keytemp, W
01B6  3A03     XORLW 0x3                          361:       xorlw   0x3
01B7  1D03     BTFSS STATUS, 0x2                  362:       btfss   STATUS,Z
01B8  29BA     GOTO 0x1BA                         363:       goto check_standby
01B9  2822     GOTO 0x22                          364:       goto start
                                                  365:   
                                                  366:   check_standby
01BA  0820     MOVF 0x20, W                       367:       movf    keytemp, W
01BB  3A0F     XORLW 0xF                          368:       xorlw   0xF
01BC  1D03     BTFSS STATUS, 0x2                  369:       btfss   STATUS,Z
01BD  29BF     GOTO 0x1BF                         370:       goto default_key
01BE  2801     GOTO 0x1                           371:       goto init
                                                  372:   
                                                  373:   default_key
01BF  0008     RETURN                             374:       return
                                                  375:   
                                                  376:   
                                                  377:   ;***************************************
                                                  378:   ; STATUS SLECECTOR ROUTINE (written by me)
                                                  379:   ;***************************************
                                                  380:   display_status
01C0  00A1     MOVWF 0x21                         381:       movwf  statustemp
                                                  382:   
                                                  383:   check_none
01C1  3A00     XORLW 0x0                          384:       xorlw   0x0
01C2  1D03     BTFSS STATUS, 0x2                  385:       btfss   STATUS,Z
01C3  29CF     GOTO 0x1CF                         386:       goto check_pass
01C4  01A2     CLRF 0x22                          387:       Display None
01C5  0103     CLRW
01C6  0822     MOVF 0x22, W
01C7  20B1     CALL 0xB1
01C8  3A00     XORLW 0x0
01C9  1903     BTFSC STATUS, 0x2
01CA  29CE     GOTO 0x1CE
01CB  2239     CALL 0x239
01CC  0AA2     INCF 0x22, F
01CD  29C6     GOTO 0x1C6
01CE  0008     RETURN                             388:       return
                                                  389:   
                                                  390:   check_pass
01CF  0821     MOVF 0x21, W                       391:       movf    statustemp, W
01D0  3A01     XORLW 0x1                          392:       xorlw   0x1
01D1  1D03     BTFSS STATUS, 0x2                  393:       btfss   STATUS,Z
01D2  29DE     GOTO 0x1DE                         394:       goto check_LED
01D3  01A2     CLRF 0x22                          395:       Display Pass
01D4  0103     CLRW
01D5  0822     MOVF 0x22, W
01D6  20C0     CALL 0xC0
01D7  3A00     XORLW 0x0
01D8  1903     BTFSC STATUS, 0x2
01D9  29DD     GOTO 0x1DD
01DA  2239     CALL 0x239
01DB  0AA2     INCF 0x22, F
01DC  29D5     GOTO 0x1D5
01DD  0008     RETURN                             396:       return
                                                  397:   
                                                  398:   check_LED
01DE  0821     MOVF 0x21, W                       399:       movf    statustemp, W
01DF  3A02     XORLW 0x2                          400:       xorlw   0x2
01E0  1D03     BTFSS STATUS, 0x2                  401:       btfss   STATUS,Z
01E1  29ED     GOTO 0x1ED                         402:       goto check_flick
01E2  01A2     CLRF 0x22                          403:       Display LED_fail
01E3  0103     CLRW
01E4  0822     MOVF 0x22, W
01E5  20C8     CALL 0xC8
01E6  3A00     XORLW 0x0
01E7  1903     BTFSC STATUS, 0x2
01E8  29EC     GOTO 0x1EC
01E9  2239     CALL 0x239
01EA  0AA2     INCF 0x22, F
01EB  29E4     GOTO 0x1E4
01EC  0008     RETURN                             404:       return
                                                  405:   
                                                  406:   check_flick
01ED  0821     MOVF 0x21, W                       407:       movf    statustemp, W
01EE  3A03     XORLW 0x3                          408:       xorlw   0x3
01EF  1D03     BTFSS STATUS, 0x2                  409:       btfss   STATUS,Z
01F0  29FC     GOTO 0x1FC                         410:       goto default_status
01F1  01A2     CLRF 0x22                          411:       Display Flick_fail
01F2  0103     CLRW
01F3  0822     MOVF 0x22, W
01F4  20D4     CALL 0xD4
01F5  3A00     XORLW 0x0
01F6  1903     BTFSC STATUS, 0x2
01F7  29FB     GOTO 0x1FB
01F8  2239     CALL 0x239
01F9  0AA2     INCF 0x22, F
01FA  29F3     GOTO 0x1F3
01FB  0008     RETURN                             412:       return
                                                  413:   
                                                  414:   default_status
01FC  0008     RETURN                             415:       return
                                                  416:   
                                                  417:   ;***************************************
                                                  418:   ; DISPLAY BIG NUMBER ROUTINE (written by me)
                                                  419:   ;***************************************
                                                  420:   
                                                  421:   big_number      ;WRITE THIS!!!
01FD  3009     MOVLW 0x9                          422:       writenum 0x9
01FE  3E30     ADDLW 0x30
01FF  00A4     MOVWF 0x24
0200  2239     CALL 0x239
0201  3000     MOVLW 0x0                          423:       writenum 0x0
0202  3E30     ADDLW 0x30
0203  00A4     MOVWF 0x24
0204  2239     CALL 0x239
0205  0008     RETURN                             424:       return
                                                  425:   
                                                  426:   
                                                  427:   ;***************************************
                                                  428:   ; DISPLAY ROUTINES (copied from sample code)
                                                  429:   ;***************************************
                                                  430:   
                                                  431:   InitLCD
0206  1283     BCF STATUS, 0x5                    432:   	bcf STATUS,RP0
0207  1588     BSF PORTD, 0x3                     433:   	bsf E     ;E default high
                                                  434:   
                                                  435:   	;Wait for LCD POR to finish (~15ms)
0208  224A     CALL 0x24A                         436:   	call lcdLongDelay
0209  224A     CALL 0x24A                         437:   	call lcdLongDelay
020A  224A     CALL 0x24A                         438:   	call lcdLongDelay
                                                  439:   
                                                  440:   	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  441:   	; -> Send b'0011' 3 times
020B  3033     MOVLW 0x33                         442:   	movlw	b'00110011'
020C  222A     CALL 0x22A                         443:   	call	WR_INS
020D  224A     CALL 0x24A                         444:   	call lcdLongDelay
020E  224A     CALL 0x24A                         445:   	call lcdLongDelay
020F  3032     MOVLW 0x32                         446:   	movlw	b'00110010'
0210  222A     CALL 0x22A                         447:   	call	WR_INS
0211  224A     CALL 0x24A                         448:   	call lcdLongDelay
0212  224A     CALL 0x24A                         449:   	call lcdLongDelay
                                                  450:   
                                                  451:   	; 4 bits, 2 lines, 5x7 dots
0213  3028     MOVLW 0x28                         452:   	movlw	b'00101000'
0214  222A     CALL 0x22A                         453:   	call	WR_INS
0215  224A     CALL 0x24A                         454:   	call lcdLongDelay
0216  224A     CALL 0x24A                         455:   	call lcdLongDelay
                                                  456:   
                                                  457:   	; display on/off
0217  300C     MOVLW 0xC                          458:   	movlw	b'00001100'
0218  222A     CALL 0x22A                         459:   	call	WR_INS
0219  224A     CALL 0x24A                         460:   	call lcdLongDelay
021A  224A     CALL 0x24A                         461:   	call lcdLongDelay
                                                  462:   
                                                  463:   	; Entry mode
021B  3006     MOVLW 0x6                          464:   	movlw	b'00000110'
021C  222A     CALL 0x22A                         465:   	call	WR_INS
021D  224A     CALL 0x24A                         466:   	call lcdLongDelay
021E  224A     CALL 0x24A                         467:   	call lcdLongDelay
                                                  468:   
                                                  469:   	; Clear ram
021F  3001     MOVLW 0x1                          470:   	movlw	b'00000001'
0220  222A     CALL 0x22A                         471:   	call	WR_INS
0221  224A     CALL 0x24A                         472:   	call lcdLongDelay
0222  224A     CALL 0x24A                         473:   	call lcdLongDelay
0223  0008     RETURN                             474:   	return
                                                  475:   
                                                  476:   
                                                  477:   Clear_Display
0224  3001     MOVLW 0x1                          478:   		movlw	B'00000001'
0225  222A     CALL 0x22A                         479:   		call	WR_INS
0226  0008     RETURN                             480:   		return
                                                  481:   
                                                  482:   Switch_Lines
0227  30C0     MOVLW 0xC0                         483:   		movlw	B'11000000'
0228  222A     CALL 0x22A                         484:   		call	WR_INS
0229  0008     RETURN                             485:   		return
                                                  486:   
                                                  487:   WR_INS
022A  1108     BCF PORTD, 0x2                     488:   	bcf		RS				;clear RS
022B  00A3     MOVWF 0x23                         489:   	movwf	com				;W --> com
022C  39F0     ANDLW 0xF0                         490:   	andlw	0xF0			;mask 4 bits MSB w = X0
022D  0088     MOVWF PORTD                        491:   	movwf	PORTD			;Send 4 bits MSB
022E  1588     BSF PORTD, 0x3                     492:   	bsf		E				;
022F  224A     CALL 0x24A                         493:   	call	lcdLongDelay	;__    __
0230  1188     BCF PORTD, 0x3                     494:   	bcf		E				;  |__|
0231  0E23     SWAPF 0x23, W                      495:   	swapf	com,w
0232  39F0     ANDLW 0xF0                         496:   	andlw	0xF0			;1111 0010
0233  0088     MOVWF PORTD                        497:   	movwf	PORTD			;send 4 bits LSB
0234  1588     BSF PORTD, 0x3                     498:   	bsf		E				;
0235  224A     CALL 0x24A                         499:   	call	lcdLongDelay	;__    __
0236  1188     BCF PORTD, 0x3                     500:   	bcf		E				;  |__|
0237  224A     CALL 0x24A                         501:   	call	lcdLongDelay
0238  0008     RETURN                             502:   	return
                                                  503:   
                                                  504:   
                                                  505:   WR_DATA
0239  1508     BSF PORTD, 0x2                     506:   	bsf		RS
023A  00A4     MOVWF 0x24                         507:   	movwf	dat
023B  0824     MOVF 0x24, W                       508:   	movf	dat,w
023C  39F0     ANDLW 0xF0                         509:   	andlw	0xF0
023D  3E04     ADDLW 0x4                          510:   	addlw	4
023E  0088     MOVWF PORTD                        511:   	movwf	PORTD
023F  1588     BSF PORTD, 0x3                     512:   	bsf		E				;
0240  224A     CALL 0x24A                         513:   	call	lcdLongDelay	;__    __
0241  1188     BCF PORTD, 0x3                     514:   	bcf		E				;  |__|
0242  0E24     SWAPF 0x24, W                      515:   	swapf	dat,w
0243  39F0     ANDLW 0xF0                         516:   	andlw	0xF0
0244  3E04     ADDLW 0x4                          517:   	addlw	4
0245  0088     MOVWF PORTD                        518:   	movwf	PORTD
0246  1588     BSF PORTD, 0x3                     519:   	bsf		E				;
0247  224A     CALL 0x24A                         520:   	call	lcdLongDelay	;__    __
0248  1188     BCF PORTD, 0x3                     521:   	bcf		E				;  |__|
0249  0008     RETURN                             522:   	return
                                                  523:   
                                                  524:   lcdLongDelay
024A  3014     MOVLW 0x14                         525:       movlw d'20'
024B  00A6     MOVWF 0x26                         526:       movwf lcd_d2
                                                  527:   LLD_LOOP
024C  30FF     MOVLW 0xFF                         528:       LCD_DELAY
024D  00A5     MOVWF 0x25
024E  0BA5     DECFSZ 0x25, F
024F  2A4E     GOTO 0x24E
0250  0BA6     DECFSZ 0x26, F                     529:       decfsz lcd_d2,f
0251  2A4C     GOTO 0x24C                         530:       goto LLD_LOOP
0252  0008     RETURN                             531:       return
                                                  532:   
                                                  533:       
                                                  534:   
                                                  535:   
                                                  536:   ;***************************************
                                                  537:   ; Delay 0.5s
                                                  538:   ;***************************************
                                                  539:   HalfS
                                                  540:   	local	HalfS_0
0253  3088     MOVLW 0x88                         541:         movlw 0x88
0254  00A7     MOVWF 0x27                         542:         movwf COUNTH
0255  30BD     MOVLW 0xBD                         543:         movlw 0xBD
0256  00A8     MOVWF 0x28                         544:         movwf COUNTM
0257  3003     MOVLW 0x3                          545:         movlw 0x03
0258  00A9     MOVWF 0x29                         546:         movwf COUNTL
                                                  547:   
                                                  548:   HalfS_0
0259  0BA7     DECFSZ 0x27, F                     549:         decfsz COUNTH, f
025A  2A5C     GOTO 0x25C                         550:         goto   $+2
025B  0BA8     DECFSZ 0x28, F                     551:         decfsz COUNTM, f
025C  2A5E     GOTO 0x25E                         552:         goto   $+2
025D  0BA9     DECFSZ 0x29, F                     553:         decfsz COUNTL, f
025E  2A59     GOTO 0x259                         554:         goto   HalfS_0
                                                  555:   
025F  2A60     GOTO 0x260                         556:         goto $+1
0260  0000     NOP                                557:         nop
0261  0000     NOP                                558:         nop
0262  0008     RETURN                             559:   		return
                                                  560:   
2007  0000     NOP                                561:       END
