Disassembly Listing for user_interface
Generated From:
C:/Users/Doge/Documents/GitHub/robot/user_interface.X/dist/default/production/user_interface.X.production.cof
29-Jan-2014 5:44:13 PM

---  C:/Users/Doge/Documents/GitHub/robot/user_interface.X/interface.asm  -------------------------------
                                                  1:         list p=16f877                 ; list directive to define processor
                                                  2:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  3:           __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  4:     
                                                  5:     
                                                  6:     ;***************************************
                                                  7:     ; VARIABLES
                                                  8:     ;***************************************
                                                  9:         cblock	0x20
                                                  10:            ; for use in code
                                                  11:            keytemp
                                                  12:            statustemp
                                                  13:    		Table_Counter
                                                  14:    		com
                                                  15:    		dat
                                                  16:            lcd_d1
                                                  17:            lcd_d2
                                                  18:            COUNTH
                                                  19:            COUNTM
                                                  20:            COUNTL
                                                  21:            ; values to display (generated by main machine code)
                                                  22:            op_time     ; in seconds
                                                  23:            status1     ;where   0 = none      1 = pass
                                                  24:            status2      ;       2 = led fail  3 = flicker fail
                                                  25:            status3
                                                  26:            status4
                                                  27:            status5
                                                  28:            status6
                                                  29:            status7
                                                  30:            status8
                                                  31:            status9
                                                  32:            num_dis
                                                  33:            num_tot
                                                  34:            huns
                                                  35:            tens
                                                  36:            ones
                                                  37:            count
                                                  38:    	endc
                                                  39:    
                                                  40:    
                                                  41:    ;***************************************
                                                  42:    ; DEFINITIONS
                                                  43:    ;***************************************
                                                  44:        #define	RS 	PORTD,2
                                                  45:    	#define	E 	PORTD,3
                                                  46:    
                                                  47:    
                                                  48:    ;***************************************
                                                  49:    ; MACROS
                                                  50:    ;***************************************
                                                  51:    LCD_DELAY macro
                                                  52:    	movlw   0xFF
                                                  53:    	movwf   lcd_d1
                                                  54:    	decfsz  lcd_d1,f
                                                  55:    	goto    $-1
                                                  56:    	endm
                                                  57:    
                                                  58:    Display macro	Message
                                                  59:    		local	loop_
                                                  60:    		local 	end_
                                                  61:    		clrf	Table_Counter
                                                  62:    		clrw
                                                  63:    loop_	movf	Table_Counter,W
                                                  64:    		call 	Message
                                                  65:    		xorlw	B'00000000' ;check WORK reg to see if 0 is returned
                                                  66:    		btfsc	STATUS,Z
                                                  67:    		goto	end_
                                                  68:    		call	WR_DATA
                                                  69:    		incf	Table_Counter,F
                                                  70:    		goto	loop_
                                                  71:    end_
                                                  72:    		endm
                                                  73:    
                                                  74:    movlf   macro   l, f
                                                  75:            movlw   l
                                                  76:            movwf   f
                                                  77:            endm
                                                  78:    
                                                  79:    writenum    macro   number
                                                  80:                movlw    number
                                                  81:                addlw   B'00110000'
                                                  82:                movwf   dat
                                                  83:                call WR_DATA
                                                  84:                endm
                                                  85:    
                                                  86:    writenum_reg    macro   reg
                                                  87:                movfw    reg
                                                  88:                addlw   B'00110000'
                                                  89:                movwf   dat
                                                  90:                call WR_DATA
                                                  91:                endm
                                                  92:    
                                                  93:    ;***************************************
                                                  94:    ; MAIN CODE
                                                  95:    ;***************************************
                                                  96:    
                                                  97:        ORG       0x0000             ;RESET vector must always be at 0x00
0000  2801     GOTO 0x1                           98:             goto      init          ;Just jump to the main code section.
                                                  99:    
                                                  100:   init
0001  018B     CLRF INTCON                        101:            clrf      INTCON         ; No interrupts
                                                  102:   
0002  1683     BSF STATUS, 0x5                    103:            bsf       STATUS,RP0     ; select bank 1
0003  0185     CLRF PORTA                         104:            clrf      TRISA          ; All port A is output
0004  30F2     MOVLW 0xF2                         105:            movlw     b'11110010'    ; Set required keypad inputs
0005  0086     MOVWF PORTB                        106:            movwf     TRISB
0006  0187     CLRF PORTC                         107:            clrf      TRISC          ; All port C is output
0007  0188     CLRF PORTD                         108:            clrf      TRISD          ; All port D is output
                                                  109:   
0008  1283     BCF STATUS, 0x5                    110:            bcf       STATUS,RP0     ; select bank 0
0009  0185     CLRF PORTA                         111:            clrf      PORTA
000A  0186     CLRF PORTB                         112:            clrf      PORTB
000B  0187     CLRF PORTC                         113:            clrf      PORTC
000C  0188     CLRF PORTD                         114:            clrf      PORTD
                                                  115:   
000D  2238     CALL 0x238                         116:            call      InitLCD    ;Initialize the LCD
000E  01A2     CLRF 0x22                          117:            Display   Standby_Msg
000F  0103     CLRW
0010  0822     MOVF 0x22, W
0011  2077     CALL 0x77
0012  3A00     XORLW 0x0
0013  1903     BTFSC STATUS, 0x2
0014  2818     GOTO 0x18
0015  226B     CALL 0x26B
0016  0AA2     INCF 0x22, F
0017  2810     GOTO 0x10
                                                  118:   
0018  1C86     BTFSS PORTB, 0x1                   119:   waiting  btfss		PORTB,1     ;Wait until data is available from the keypad
0019  2818     GOTO 0x18                          120:            goto		$-1
                                                  121:   
001A  0E06     SWAPF PORTB, W                     122:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
001B  390F     ANDLW 0xF                          123:            andlw		0x0F
001C  3A03     XORLW 0x3                          124:            xorlw      0x3         ;will be all zeros if its "START:
001D  1903     BTFSC STATUS, 0x2                  125:            btfsc      STATUS,Z    ;and Z will be high, so skip if not high
001E  2822     GOTO 0x22                          126:            goto       start
                                                  127:   
001F  1886     BTFSC PORTB, 0x1                   128:            btfsc		PORTB,1     ;Wait until key is released
0020  281F     GOTO 0x1F                          129:            goto		$-1
0021  2818     GOTO 0x18                          130:            goto       waiting
                                                  131:   
                                                  132:   ;--------------------------------------
                                                  133:   ;       ACTUAL OPERATION (im just adding values manually now)
                                                  134:   
                                                  135:   start
0022  2256     CALL 0x256                         136:           call        Clear_Display
0023  01A2     CLRF 0x22                          137:           Display     Start_Msg
0024  0103     CLRW
0025  0822     MOVF 0x22, W
0026  2080     CALL 0x80
0027  3A00     XORLW 0x0
0028  1903     BTFSC STATUS, 0x2
0029  282D     GOTO 0x2D
002A  226B     CALL 0x26B
002B  0AA2     INCF 0x22, F
002C  2825     GOTO 0x25
                                                  138:   
                                                  139:   ; just shitting around
002D  2285     CALL 0x285                         140:           call    HalfS
002E  2256     CALL 0x256                         141:           call Clear_Display
002F  3005     MOVLW 0x5                          142:           writenum    0x5
0030  3E30     ADDLW 0x30
0031  00A4     MOVWF 0x24
0032  226B     CALL 0x26B
0033  2285     CALL 0x285                         143:           call    HalfS
0034  2256     CALL 0x256                         144:           call Clear_Display
0035  3004     MOVLW 0x4                          145:           writenum    0x4
0036  3E30     ADDLW 0x30
0037  00A4     MOVWF 0x24
0038  226B     CALL 0x26B
0039  2285     CALL 0x285                         146:           call    HalfS
003A  2256     CALL 0x256                         147:           call Clear_Display
003B  3003     MOVLW 0x3                          148:           writenum    0x3
003C  3E30     ADDLW 0x30
003D  00A4     MOVWF 0x24
003E  226B     CALL 0x26B
003F  2285     CALL 0x285                         149:           call    HalfS
0040  2256     CALL 0x256                         150:           call Clear_Display
0041  3002     MOVLW 0x2                          151:           writenum    0x2
0042  3E30     ADDLW 0x30
0043  00A4     MOVWF 0x24
0044  226B     CALL 0x26B
0045  2285     CALL 0x285                         152:           call    HalfS
0046  2256     CALL 0x256                         153:           call Clear_Display
0047  3001     MOVLW 0x1                          154:           writenum    0x1
0048  3E30     ADDLW 0x30
0049  00A4     MOVWF 0x24
004A  226B     CALL 0x26B
004B  2285     CALL 0x285                         155:           call    HalfS
                                                  156:   
                                                  157:   ; Putting values in manually. This will be done automatically in main program
004C  302F     MOVLW 0x2F                         158:            movlf     D'47', op_time
004D  00AA     MOVWF 0x2A
004E  3000     MOVLW 0x0                          159:            movlf     B'00', status1
004F  00AB     MOVWF 0x2B
0050  3001     MOVLW 0x1                          160:            movlf     B'01', status2
0051  00AC     MOVWF 0x2C
0052  3002     MOVLW 0x2                          161:            movlf     B'10', status3
0053  00AD     MOVWF 0x2D
0054  3003     MOVLW 0x3                          162:            movlf     B'11', status4
0055  00AE     MOVWF 0x2E
0056  3001     MOVLW 0x1                          163:            movlf     B'01', status5
0057  00AF     MOVWF 0x2F
0058  3001     MOVLW 0x1                          164:            movlf     B'01', status6
0059  00B0     MOVWF 0x30
005A  3001     MOVLW 0x1                          165:            movlf     B'01', status7
005B  00B1     MOVWF 0x31
005C  3001     MOVLW 0x1                          166:            movlf     B'01', status8
005D  00B2     MOVWF 0x32
005E  3000     MOVLW 0x0                          167:            movlf     B'00', status9
005F  00B3     MOVWF 0x33
0060  3002     MOVLW 0x2                          168:            movlf     D'2', num_dis
0061  00B4     MOVWF 0x34
0062  3007     MOVLW 0x7                          169:            movlf     D'7', num_tot
0063  00B5     MOVWF 0x35
                                                  170:   
                                                  171:   
0064  2256     CALL 0x256                         172:           call        Clear_Display
0065  01A2     CLRF 0x22                          173:           Display    End_Msg
0066  0103     CLRW
0067  0822     MOVF 0x22, W
0068  208C     CALL 0x8C
0069  3A00     XORLW 0x0
006A  1903     BTFSC STATUS, 0x2
006B  286F     GOTO 0x6F
006C  226B     CALL 0x26B
006D  0AA2     INCF 0x22, F
006E  2867     GOTO 0x67
                                                  174:   ;-----------------------------------------------------------------------
                                                  175:   
                                                  176:   ; Data display interface
                                                  177:   
006F  1C86     BTFSS PORTB, 0x1                   178:   poll     btfss		PORTB,1     ;Wait until data is available from the keypad
0070  286F     GOTO 0x6F                          179:            goto		$-1
                                                  180:   
0071  0E06     SWAPF PORTB, W                     181:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0072  390F     ANDLW 0xF                          182:            andlw		0x0F
0073  20FF     CALL 0xFF                          183:            call       information
                                                  184:   
0074  1886     BTFSC PORTB, 0x1                   185:            btfsc		PORTB,1     ;Wait until key is released
0075  2874     GOTO 0x74                          186:            goto		$-1
0076  286F     GOTO 0x6F                          187:            goto       poll
                                                  188:   
                                                  189:   ;-------------------------------------------------------------------------
                                                  190:   
                                                  191:   ;***************************************
                                                  192:   ; LOOK UP TABLE (MESSAGES)
                                                  193:   ;***************************************
                                                  194:   Standby_Msg
0077  0782     ADDWF PCL, F                       195:   		addwf	PCL,F
0078  3453     RETLW 0x53                         196:   		dt		"STANDBY", 0
0079  3454     RETLW 0x54
007A  3441     RETLW 0x41
007B  344E     RETLW 0x4E
007C  3444     RETLW 0x44
007D  3442     RETLW 0x42
007E  3459     RETLW 0x59
007F  3400     RETLW 0x0
                                                  197:   Start_Msg
0080  0782     ADDWF PCL, F                       198:           addwf   PCL,F
0081  3449     RETLW 0x49                         199:           dt      "Inspecting",0
0082  346E     RETLW 0x6E
0083  3473     RETLW 0x73
0084  3470     RETLW 0x70
0085  3465     RETLW 0x65
0086  3463     RETLW 0x63
0087  3474     RETLW 0x74
0088  3469     RETLW 0x69
0089  346E     RETLW 0x6E
008A  3467     RETLW 0x67
008B  3400     RETLW 0x0
                                                  200:   End_Msg
008C  0782     ADDWF PCL, F                       201:           addwf   PCL,F
008D  3443     RETLW 0x43                         202:           dt      "Complete",0
008E  346F     RETLW 0x6F
008F  346D     RETLW 0x6D
0090  3470     RETLW 0x70
0091  346C     RETLW 0x6C
0092  3465     RETLW 0x65
0093  3474     RETLW 0x74
0094  3465     RETLW 0x65
0095  3400     RETLW 0x0
                                                  203:   Time_Msg
0096  0782     ADDWF PCL, F                       204:   		addwf	PCL,F
0097  344F     RETLW 0x4F                         205:   		dt		"Operation time:",0
0098  3470     RETLW 0x70
0099  3465     RETLW 0x65
009A  3472     RETLW 0x72
009B  3461     RETLW 0x61
009C  3474     RETLW 0x74
009D  3469     RETLW 0x69
009E  346F     RETLW 0x6F
009F  346E     RETLW 0x6E
00A0  3420     RETLW 0x20
00A1  3474     RETLW 0x74
00A2  3469     RETLW 0x69
00A3  346D     RETLW 0x6D
00A4  3465     RETLW 0x65
00A5  343A     RETLW 0x3A
00A6  3400     RETLW 0x0
                                                  206:   Seconds
00A7  0782     ADDWF PCL, F                       207:           addwf   PCL,F
00A8  3420     RETLW 0x20                         208:           dt      " seconds", 0
00A9  3473     RETLW 0x73
00AA  3465     RETLW 0x65
00AB  3463     RETLW 0x63
00AC  346F     RETLW 0x6F
00AD  346E     RETLW 0x6E
00AE  3464     RETLW 0x64
00AF  3473     RETLW 0x73
00B0  3400     RETLW 0x0
                                                  209:   None
00B1  0782     ADDWF PCL, F                       210:           addwf   PCL,F
00B2  343A     RETLW 0x3A                         211:           dt      ": not present",0
00B3  3420     RETLW 0x20
00B4  346E     RETLW 0x6E
00B5  346F     RETLW 0x6F
00B6  3474     RETLW 0x74
00B7  3420     RETLW 0x20
00B8  3470     RETLW 0x70
00B9  3472     RETLW 0x72
00BA  3465     RETLW 0x65
00BB  3473     RETLW 0x73
00BC  3465     RETLW 0x65
00BD  346E     RETLW 0x6E
00BE  3474     RETLW 0x74
00BF  3400     RETLW 0x0
                                                  212:   Pass
00C0  0782     ADDWF PCL, F                       213:   		addwf	PCL,F
00C1  343A     RETLW 0x3A                         214:   		dt		": pass",0
00C2  3420     RETLW 0x20
00C3  3470     RETLW 0x70
00C4  3461     RETLW 0x61
00C5  3473     RETLW 0x73
00C6  3473     RETLW 0x73
00C7  3400     RETLW 0x0
                                                  215:   LED_fail
00C8  0782     ADDWF PCL, F                       216:   		addwf	PCL,F
00C9  343A     RETLW 0x3A                         217:   		dt		": LED fail",0
00CA  3420     RETLW 0x20
00CB  344C     RETLW 0x4C
00CC  3445     RETLW 0x45
00CD  3444     RETLW 0x44
00CE  3420     RETLW 0x20
00CF  3466     RETLW 0x66
00D0  3461     RETLW 0x61
00D1  3469     RETLW 0x69
00D2  346C     RETLW 0x6C
00D3  3400     RETLW 0x0
                                                  218:   Flick_fail
00D4  0782     ADDWF PCL, F                       219:   		addwf	PCL,F
00D5  343A     RETLW 0x3A                         220:   		dt		": flicker fail",0
00D6  3420     RETLW 0x20
00D7  3466     RETLW 0x66
00D8  346C     RETLW 0x6C
00D9  3469     RETLW 0x69
00DA  3463     RETLW 0x63
00DB  346B     RETLW 0x6B
00DC  3465     RETLW 0x65
00DD  3472     RETLW 0x72
00DE  3420     RETLW 0x20
00DF  3466     RETLW 0x66
00E0  3461     RETLW 0x61
00E1  3469     RETLW 0x69
00E2  346C     RETLW 0x6C
00E3  3400     RETLW 0x0
                                                  221:   Of
00E4  0782     ADDWF PCL, F                       222:           addwf   PCL,F
00E5  3420     RETLW 0x20                         223:           dt      " of ",0
00E6  346F     RETLW 0x6F
00E7  3466     RETLW 0x66
00E8  3420     RETLW 0x20
00E9  3400     RETLW 0x0
                                                  224:   Candles
00EA  0782     ADDWF PCL, F                       225:           addwf   PCL,F
00EB  3420     RETLW 0x20                         226:           dt      " candles",0
00EC  3463     RETLW 0x63
00ED  3461     RETLW 0x61
00EE  346E     RETLW 0x6E
00EF  3464     RETLW 0x64
00F0  346C     RETLW 0x6C
00F1  3465     RETLW 0x65
00F2  3473     RETLW 0x73
00F3  3400     RETLW 0x0
                                                  227:   Defective
00F4  0782     ADDWF PCL, F                       228:           addwf   PCL,F
00F5  3464     RETLW 0x64                         229:           dt      "defective",0
00F6  3465     RETLW 0x65
00F7  3466     RETLW 0x66
00F8  3465     RETLW 0x65
00F9  3463     RETLW 0x63
00FA  3474     RETLW 0x74
00FB  3469     RETLW 0x69
00FC  3476     RETLW 0x76
00FD  3465     RETLW 0x65
00FE  3400     RETLW 0x0
                                                  230:   
                                                  231:   
                                                  232:   ;***************************************
                                                  233:   ; KEY SELECTOR ROUTINE (written by me)
                                                  234:   ;***************************************
                                                  235:   information
00FF  00A0     MOVWF 0x20                         236:       movwf   keytemp             ; save value of W in msgtemp
                                                  237:   
                                                  238:   check_1
0100  3A00     XORLW 0x0                          239:       xorlw   0x0         ;will be all zeros if its 1
0101  1D03     BTFSS STATUS, 0x2                  240:       btfss   STATUS,Z    ;and Z will be high, so skip 
0102  290B     GOTO 0x10B                         241:       goto check_2
0103  2256     CALL 0x256                         242:       call Clear_Display
0104  3001     MOVLW 0x1                          243:       writenum 0x1
0105  3E30     ADDLW 0x30
0106  00A4     MOVWF 0x24
0107  226B     CALL 0x26B
0108  082B     MOVF 0x2B, W                       244:       movf status1, W
0109  21CC     CALL 0x1CC                         245:       call display_status
010A  0008     RETURN                             246:       return
                                                  247:   
                                                  248:   check_2
010B  0820     MOVF 0x20, W                       249:       movf    keytemp, W
010C  3A01     XORLW 0x1                          250:       xorlw   0x1         
010D  1D03     BTFSS STATUS, 0x2                  251:       btfss   STATUS,Z    
010E  2917     GOTO 0x117                         252:       goto check_3
010F  2256     CALL 0x256                         253:       call Clear_Display
0110  3002     MOVLW 0x2                          254:       writenum 0x2
0111  3E30     ADDLW 0x30
0112  00A4     MOVWF 0x24
0113  226B     CALL 0x26B
0114  082C     MOVF 0x2C, W                       255:       movf status2, W
0115  21CC     CALL 0x1CC                         256:       call display_status
0116  0008     RETURN                             257:       return
                                                  258:   
                                                  259:   check_3
0117  0820     MOVF 0x20, W                       260:       movf    keytemp, W
0118  3A02     XORLW 0x2                          261:       xorlw   0x2
0119  1D03     BTFSS STATUS, 0x2                  262:       btfss   STATUS,Z
011A  2923     GOTO 0x123                         263:       goto check_4
011B  2256     CALL 0x256                         264:       call Clear_Display
011C  3003     MOVLW 0x3                          265:       writenum 0x3
011D  3E30     ADDLW 0x30
011E  00A4     MOVWF 0x24
011F  226B     CALL 0x26B
0120  082D     MOVF 0x2D, W                       266:       movf status3, W
0121  21CC     CALL 0x1CC                         267:       call display_status
0122  0008     RETURN                             268:       return
                                                  269:   
                                                  270:   check_4
0123  0820     MOVF 0x20, W                       271:       movf    keytemp, W
0124  3A04     XORLW 0x4                          272:       xorlw   0x4
0125  1D03     BTFSS STATUS, 0x2                  273:       btfss   STATUS,Z
0126  292F     GOTO 0x12F                         274:       goto check_5
0127  2256     CALL 0x256                         275:       call Clear_Display
0128  3004     MOVLW 0x4                          276:       writenum 0x4
0129  3E30     ADDLW 0x30
012A  00A4     MOVWF 0x24
012B  226B     CALL 0x26B
012C  082E     MOVF 0x2E, W                       277:       movf status4, W
012D  21CC     CALL 0x1CC                         278:       call display_status
012E  0008     RETURN                             279:       return
                                                  280:   
                                                  281:   check_5
012F  0820     MOVF 0x20, W                       282:       movf    keytemp, W
0130  3A05     XORLW 0x5                          283:       xorlw   0x5
0131  1D03     BTFSS STATUS, 0x2                  284:       btfss   STATUS,Z
0132  293B     GOTO 0x13B                         285:       goto check_6
0133  2256     CALL 0x256                         286:       call Clear_Display
0134  3005     MOVLW 0x5                          287:       writenum 0x5
0135  3E30     ADDLW 0x30
0136  00A4     MOVWF 0x24
0137  226B     CALL 0x26B
0138  082F     MOVF 0x2F, W                       288:       movf status5, W
0139  21CC     CALL 0x1CC                         289:       call display_status
013A  0008     RETURN                             290:       return
                                                  291:   
                                                  292:   check_6
013B  0820     MOVF 0x20, W                       293:       movf    keytemp, W
013C  3A06     XORLW 0x6                          294:       xorlw   0x6
013D  1D03     BTFSS STATUS, 0x2                  295:       btfss   STATUS,Z
013E  2947     GOTO 0x147                         296:       goto check_7
013F  2256     CALL 0x256                         297:       call Clear_Display
0140  3006     MOVLW 0x6                          298:       writenum 0x6
0141  3E30     ADDLW 0x30
0142  00A4     MOVWF 0x24
0143  226B     CALL 0x26B
0144  0830     MOVF 0x30, W                       299:       movf status6, W
0145  21CC     CALL 0x1CC                         300:       call display_status
0146  0008     RETURN                             301:       return
                                                  302:   
                                                  303:   check_7
0147  0820     MOVF 0x20, W                       304:       movf    keytemp, W
0148  3A08     XORLW 0x8                          305:       xorlw   0x8
0149  1D03     BTFSS STATUS, 0x2                  306:       btfss   STATUS,Z
014A  2953     GOTO 0x153                         307:       goto check_8
014B  2256     CALL 0x256                         308:       call Clear_Display
014C  3007     MOVLW 0x7                          309:       writenum 0x7
014D  3E30     ADDLW 0x30
014E  00A4     MOVWF 0x24
014F  226B     CALL 0x26B
0150  0831     MOVF 0x31, W                       310:       movf status7, W
0151  21CC     CALL 0x1CC                         311:       call display_status
0152  0008     RETURN                             312:       return
                                                  313:   
                                                  314:   check_8
0153  0820     MOVF 0x20, W                       315:       movf    keytemp, W
0154  3A09     XORLW 0x9                          316:       xorlw   0x9
0155  1D03     BTFSS STATUS, 0x2                  317:       btfss   STATUS,Z
0156  295F     GOTO 0x15F                         318:       goto check_9
0157  2256     CALL 0x256                         319:       call Clear_Display
0158  3008     MOVLW 0x8                          320:       writenum 0x8
0159  3E30     ADDLW 0x30
015A  00A4     MOVWF 0x24
015B  226B     CALL 0x26B
015C  0832     MOVF 0x32, W                       321:       movf status8, W
015D  21CC     CALL 0x1CC                         322:       call display_status
015E  0008     RETURN                             323:       return
                                                  324:   
                                                  325:   check_9
015F  0820     MOVF 0x20, W                       326:       movf    keytemp, W
0160  3A0A     XORLW 0xA                          327:       xorlw   0xA
0161  1D03     BTFSS STATUS, 0x2                  328:       btfss   STATUS,Z
0162  296B     GOTO 0x16B                         329:       goto check_summary
0163  2256     CALL 0x256                         330:       call Clear_Display
0164  3009     MOVLW 0x9                          331:       writenum 0x9
0165  3E30     ADDLW 0x30
0166  00A4     MOVWF 0x24
0167  226B     CALL 0x26B
0168  0833     MOVF 0x33, W                       332:       movf status9, W
0169  21CC     CALL 0x1CC                         333:       call display_status
016A  0008     RETURN                             334:       return
                                                  335:   
                                                  336:   check_summary           
016B  0820     MOVF 0x20, W                       337:       movf    keytemp, W
016C  3A07     XORLW 0x7                          338:       xorlw   0x7
016D  1D03     BTFSS STATUS, 0x2                  339:       btfss   STATUS,Z
016E  2998     GOTO 0x198                         340:       goto check_time
016F  2256     CALL 0x256                         341:       call Clear_Display
0170  0834     MOVF 0x34, W                       342:       writenum_reg num_dis
0171  3E30     ADDLW 0x30
0172  00A4     MOVWF 0x24
0173  226B     CALL 0x26B
0174  01A2     CLRF 0x22                          343:       Display Of
0175  0103     CLRW
0176  0822     MOVF 0x22, W
0177  20E4     CALL 0xE4
0178  3A00     XORLW 0x0
0179  1903     BTFSC STATUS, 0x2
017A  297E     GOTO 0x17E
017B  226B     CALL 0x26B
017C  0AA2     INCF 0x22, F
017D  2976     GOTO 0x176
017E  0835     MOVF 0x35, W                       344:       writenum_reg num_tot
017F  3E30     ADDLW 0x30
0180  00A4     MOVWF 0x24
0181  226B     CALL 0x26B
0182  01A2     CLRF 0x22                          345:       Display Candles
0183  0103     CLRW
0184  0822     MOVF 0x22, W
0185  20EA     CALL 0xEA
0186  3A00     XORLW 0x0
0187  1903     BTFSC STATUS, 0x2
0188  298C     GOTO 0x18C
0189  226B     CALL 0x26B
018A  0AA2     INCF 0x22, F
018B  2984     GOTO 0x184
018C  2259     CALL 0x259                         346:       call Switch_Lines
018D  01A2     CLRF 0x22                          347:       Display Defective
018E  0103     CLRW
018F  0822     MOVF 0x22, W
0190  20F4     CALL 0xF4
0191  3A00     XORLW 0x0
0192  1903     BTFSC STATUS, 0x2
0193  2997     GOTO 0x197
0194  226B     CALL 0x26B
0195  0AA2     INCF 0x22, F
0196  298F     GOTO 0x18F
0197  0008     RETURN                             348:       return
                                                  349:   
                                                  350:   check_time
0198  0820     MOVF 0x20, W                       351:       movf    keytemp, W
0199  3A0B     XORLW 0xB                          352:       xorlw   0xB
019A  1D03     BTFSS STATUS, 0x2                  353:       btfss   STATUS,Z
019B  29C1     GOTO 0x1C1                         354:       goto check_start
019C  2256     CALL 0x256                         355:       call Clear_Display
019D  01A2     CLRF 0x22                          356:       Display Time_Msg
019E  0103     CLRW
019F  0822     MOVF 0x22, W
01A0  2096     CALL 0x96
01A1  3A00     XORLW 0x0
01A2  1903     BTFSC STATUS, 0x2
01A3  29A7     GOTO 0x1A7
01A4  226B     CALL 0x26B
01A5  0AA2     INCF 0x22, F
01A6  299F     GOTO 0x19F
01A7  2259     CALL 0x259                         357:       call Switch_Lines
01A8  082A     MOVF 0x2A, W                       358:       movf    op_time, W
01A9  2209     CALL 0x209                         359:       call    big_number      ; this doesnt actually work
01AA  0836     MOVF 0x36, W                       360:       writenum_reg    huns
01AB  3E30     ADDLW 0x30
01AC  00A4     MOVWF 0x24
01AD  226B     CALL 0x26B
01AE  0837     MOVF 0x37, W                       361:       writenum_reg    tens
01AF  3E30     ADDLW 0x30
01B0  00A4     MOVWF 0x24
01B1  226B     CALL 0x26B
01B2  0838     MOVF 0x38, W                       362:       writenum_reg    ones
01B3  3E30     ADDLW 0x30
01B4  00A4     MOVWF 0x24
01B5  226B     CALL 0x26B
01B6  01A2     CLRF 0x22                          363:       Display Seconds
01B7  0103     CLRW
01B8  0822     MOVF 0x22, W
01B9  20A7     CALL 0xA7
01BA  3A00     XORLW 0x0
01BB  1903     BTFSC STATUS, 0x2
01BC  29C0     GOTO 0x1C0
01BD  226B     CALL 0x26B
01BE  0AA2     INCF 0x22, F
01BF  29B8     GOTO 0x1B8
01C0  0008     RETURN                             364:       return
                                                  365:   
                                                  366:   check_start
01C1  0820     MOVF 0x20, W                       367:       movf    keytemp, W
01C2  3A03     XORLW 0x3                          368:       xorlw   0x3
01C3  1D03     BTFSS STATUS, 0x2                  369:       btfss   STATUS,Z
01C4  29C6     GOTO 0x1C6                         370:       goto check_standby
01C5  2822     GOTO 0x22                          371:       goto start
                                                  372:   
                                                  373:   check_standby
01C6  0820     MOVF 0x20, W                       374:       movf    keytemp, W
01C7  3A0F     XORLW 0xF                          375:       xorlw   0xF
01C8  1D03     BTFSS STATUS, 0x2                  376:       btfss   STATUS,Z
01C9  29CB     GOTO 0x1CB                         377:       goto default_key
01CA  2801     GOTO 0x1                           378:       goto init
                                                  379:   
                                                  380:   default_key
01CB  0008     RETURN                             381:       return
                                                  382:   
                                                  383:   
                                                  384:   ;***************************************
                                                  385:   ; STATUS SLECECTOR ROUTINE (written by me)
                                                  386:   ;***************************************
                                                  387:   display_status
01CC  00A1     MOVWF 0x21                         388:       movwf  statustemp
                                                  389:   
                                                  390:   check_none
01CD  3A00     XORLW 0x0                          391:       xorlw   0x0
01CE  1D03     BTFSS STATUS, 0x2                  392:       btfss   STATUS,Z
01CF  29DB     GOTO 0x1DB                         393:       goto check_pass
01D0  01A2     CLRF 0x22                          394:       Display None
01D1  0103     CLRW
01D2  0822     MOVF 0x22, W
01D3  20B1     CALL 0xB1
01D4  3A00     XORLW 0x0
01D5  1903     BTFSC STATUS, 0x2
01D6  29DA     GOTO 0x1DA
01D7  226B     CALL 0x26B
01D8  0AA2     INCF 0x22, F
01D9  29D2     GOTO 0x1D2
01DA  0008     RETURN                             395:       return
                                                  396:   
                                                  397:   check_pass
01DB  0821     MOVF 0x21, W                       398:       movf    statustemp, W
01DC  3A01     XORLW 0x1                          399:       xorlw   0x1
01DD  1D03     BTFSS STATUS, 0x2                  400:       btfss   STATUS,Z
01DE  29EA     GOTO 0x1EA                         401:       goto check_LED
01DF  01A2     CLRF 0x22                          402:       Display Pass
01E0  0103     CLRW
01E1  0822     MOVF 0x22, W
01E2  20C0     CALL 0xC0
01E3  3A00     XORLW 0x0
01E4  1903     BTFSC STATUS, 0x2
01E5  29E9     GOTO 0x1E9
01E6  226B     CALL 0x26B
01E7  0AA2     INCF 0x22, F
01E8  29E1     GOTO 0x1E1
01E9  0008     RETURN                             403:       return
                                                  404:   
                                                  405:   check_LED
01EA  0821     MOVF 0x21, W                       406:       movf    statustemp, W
01EB  3A02     XORLW 0x2                          407:       xorlw   0x2
01EC  1D03     BTFSS STATUS, 0x2                  408:       btfss   STATUS,Z
01ED  29F9     GOTO 0x1F9                         409:       goto check_flick
01EE  01A2     CLRF 0x22                          410:       Display LED_fail
01EF  0103     CLRW
01F0  0822     MOVF 0x22, W
01F1  20C8     CALL 0xC8
01F2  3A00     XORLW 0x0
01F3  1903     BTFSC STATUS, 0x2
01F4  29F8     GOTO 0x1F8
01F5  226B     CALL 0x26B
01F6  0AA2     INCF 0x22, F
01F7  29F0     GOTO 0x1F0
01F8  0008     RETURN                             411:       return
                                                  412:   
                                                  413:   check_flick
01F9  0821     MOVF 0x21, W                       414:       movf    statustemp, W
01FA  3A03     XORLW 0x3                          415:       xorlw   0x3
01FB  1D03     BTFSS STATUS, 0x2                  416:       btfss   STATUS,Z
01FC  2A08     GOTO 0x208                         417:       goto default_status
01FD  01A2     CLRF 0x22                          418:       Display Flick_fail
01FE  0103     CLRW
01FF  0822     MOVF 0x22, W
0200  20D4     CALL 0xD4
0201  3A00     XORLW 0x0
0202  1903     BTFSC STATUS, 0x2
0203  2A07     GOTO 0x207
0204  226B     CALL 0x26B
0205  0AA2     INCF 0x22, F
0206  29FF     GOTO 0x1FF
0207  0008     RETURN                             419:       return
                                                  420:   
                                                  421:   default_status
0208  0008     RETURN                             422:       return
                                                  423:   
                                                  424:   ;***************************************
                                                  425:   ; DISPLAY BIG NUMBER ROUTINE http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                                                  426:   ;***************************************
                                                  427:   
                                                  428:   big_number      
0209  3008     MOVLW 0x8                          429:       movlw 8
020A  00B9     MOVWF 0x39                         430:       movwf count
020B  01B6     CLRF 0x36                          431:       clrf huns
020C  01B7     CLRF 0x37                          432:       clrf tens
020D  01B8     CLRF 0x38                          433:       clrf ones
                                                  434:   
                                                  435:   BCDADD3
                                                  436:   
020E  3005     MOVLW 0x5                          437:       movlw 5
020F  0236     SUBWF 0x36, W                      438:       subwf huns, 0
0210  1803     BTFSC STATUS, 0x0                  439:       btfsc STATUS, C
0211  2229     CALL 0x229                         440:       CALL ADD3HUNS
                                                  441:   
0212  3005     MOVLW 0x5                          442:       movlw 5
0213  0237     SUBWF 0x37, W                      443:       subwf tens, 0
0214  1803     BTFSC STATUS, 0x0                  444:       btfsc STATUS, C
0215  222C     CALL 0x22C                         445:       CALL ADD3TENS
                                                  446:   
0216  3005     MOVLW 0x5                          447:       movlw 5
0217  0238     SUBWF 0x38, W                      448:       subwf ones, 0
0218  1803     BTFSC STATUS, 0x0                  449:       btfsc STATUS, C
0219  222F     CALL 0x22F                         450:       CALL ADD3ONES
                                                  451:   
021A  03B9     DECF 0x39, F                       452:       decf count, 1
021B  1003     BCF STATUS, 0x0                    453:       bcf STATUS, C
021C  0DAA     RLF 0x2A, F                        454:       rlf op_time, 1
021D  0DB8     RLF 0x38, F                        455:       rlf ones, 1
021E  1A38     BTFSC 0x38, 0x4                    456:       btfsc ones,4 ;
021F  2232     CALL 0x232                         457:       CALL CARRYONES
0220  0DB7     RLF 0x37, F                        458:       rlf tens, 1
                                                  459:   
0221  1A37     BTFSC 0x37, 0x4                    460:       btfsc tens,4 ;
0222  2235     CALL 0x235                         461:       CALL CARRYTENS
0223  0DB6     RLF 0x36, F                        462:       rlf huns,1
0224  1003     BCF STATUS, 0x0                    463:       bcf STATUS, C
                                                  464:   
0225  0839     MOVF 0x39, W                       465:       movf count, 0
0226  1D03     BTFSS STATUS, 0x2                  466:       btfss STATUS, Z
0227  2A0E     GOTO 0x20E                         467:       GOTO BCDADD3
                                                  468:   
                                                  469:   
                                                  470:   ;    movf huns, 0 ; add ASCII Offset
                                                  471:   ;    addlw h'30'
                                                  472:   ;    movwf huns
                                                  473:   ;
                                                  474:   ;    movf tens, 0 ; add ASCII Offset
                                                  475:   ;    addlw h'30'
                                                  476:   ;    movwf tens
                                                  477:   ;
                                                  478:   ;    movf ones, 0 ; add ASCII Offset
                                                  479:   ;    addlw h'30'
                                                  480:   ;    movwf ones
                                                  481:   
0228  0008     RETURN                             482:       RETURN
                                                  483:   
                                                  484:   ADD3HUNS
                                                  485:   
0229  3003     MOVLW 0x3                          486:       movlw 3
022A  07B6     ADDWF 0x36, F                      487:       addwf huns,1
                                                  488:   
022B  0008     RETURN                             489:       RETURN
                                                  490:   
                                                  491:   ADD3TENS
                                                  492:   
022C  3003     MOVLW 0x3                          493:       movlw 3
022D  07B7     ADDWF 0x37, F                      494:       addwf tens,1
                                                  495:   
022E  0008     RETURN                             496:       RETURN
                                                  497:   
                                                  498:   ADD3ONES
                                                  499:   
022F  3003     MOVLW 0x3                          500:       movlw 3
0230  07B8     ADDWF 0x38, F                      501:       addwf ones,1
                                                  502:   
0231  0008     RETURN                             503:       RETURN
                                                  504:   
                                                  505:   CARRYONES
0232  1238     BCF 0x38, 0x4                      506:       bcf ones, 4
0233  1403     BSF STATUS, 0x0                    507:       bsf STATUS, C
0234  0008     RETURN                             508:       RETURN
                                                  509:   
                                                  510:   CARRYTENS
0235  1237     BCF 0x37, 0x4                      511:       bcf tens, 4
0236  1403     BSF STATUS, 0x0                    512:       bsf STATUS, C
0237  0008     RETURN                             513:       RETURN
                                                  514:       
                                                  515:   
                                                  516:   
                                                  517:   ;***************************************
                                                  518:   ; DISPLAY ROUTINES (copied from sample code)
                                                  519:   ;***************************************
                                                  520:   
                                                  521:   InitLCD
0238  1283     BCF STATUS, 0x5                    522:   	bcf STATUS,RP0
0239  1588     BSF PORTD, 0x3                     523:   	bsf E     ;E default high
                                                  524:   
                                                  525:   	;Wait for LCD POR to finish (~15ms)
023A  227C     CALL 0x27C                         526:   	call lcdLongDelay
023B  227C     CALL 0x27C                         527:   	call lcdLongDelay
023C  227C     CALL 0x27C                         528:   	call lcdLongDelay
                                                  529:   
                                                  530:   	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  531:   	; -> Send b'0011' 3 times
023D  3033     MOVLW 0x33                         532:   	movlw	b'00110011'
023E  225C     CALL 0x25C                         533:   	call	WR_INS
023F  227C     CALL 0x27C                         534:   	call lcdLongDelay
0240  227C     CALL 0x27C                         535:   	call lcdLongDelay
0241  3032     MOVLW 0x32                         536:   	movlw	b'00110010'
0242  225C     CALL 0x25C                         537:   	call	WR_INS
0243  227C     CALL 0x27C                         538:   	call lcdLongDelay
0244  227C     CALL 0x27C                         539:   	call lcdLongDelay
                                                  540:   
                                                  541:   	; 4 bits, 2 lines, 5x7 dots
0245  3028     MOVLW 0x28                         542:   	movlw	b'00101000'
0246  225C     CALL 0x25C                         543:   	call	WR_INS
0247  227C     CALL 0x27C                         544:   	call lcdLongDelay
0248  227C     CALL 0x27C                         545:   	call lcdLongDelay
                                                  546:   
                                                  547:   	; display on/off
0249  300C     MOVLW 0xC                          548:   	movlw	b'00001100'
024A  225C     CALL 0x25C                         549:   	call	WR_INS
024B  227C     CALL 0x27C                         550:   	call lcdLongDelay
024C  227C     CALL 0x27C                         551:   	call lcdLongDelay
                                                  552:   
                                                  553:   	; Entry mode
024D  3006     MOVLW 0x6                          554:   	movlw	b'00000110'
024E  225C     CALL 0x25C                         555:   	call	WR_INS
024F  227C     CALL 0x27C                         556:   	call lcdLongDelay
0250  227C     CALL 0x27C                         557:   	call lcdLongDelay
                                                  558:   
                                                  559:   	; Clear ram
0251  3001     MOVLW 0x1                          560:   	movlw	b'00000001'
0252  225C     CALL 0x25C                         561:   	call	WR_INS
0253  227C     CALL 0x27C                         562:   	call lcdLongDelay
0254  227C     CALL 0x27C                         563:   	call lcdLongDelay
0255  0008     RETURN                             564:   	return
                                                  565:   
                                                  566:   
                                                  567:   Clear_Display
0256  3001     MOVLW 0x1                          568:   		movlw	B'00000001'
0257  225C     CALL 0x25C                         569:   		call	WR_INS
0258  0008     RETURN                             570:   		return
                                                  571:   
                                                  572:   Switch_Lines
0259  30C0     MOVLW 0xC0                         573:   		movlw	B'11000000'
025A  225C     CALL 0x25C                         574:   		call	WR_INS
025B  0008     RETURN                             575:   		return
                                                  576:   
                                                  577:   WR_INS
025C  1108     BCF PORTD, 0x2                     578:   	bcf		RS				;clear RS
025D  00A3     MOVWF 0x23                         579:   	movwf	com				;W --> com
025E  39F0     ANDLW 0xF0                         580:   	andlw	0xF0			;mask 4 bits MSB w = X0
025F  0088     MOVWF PORTD                        581:   	movwf	PORTD			;Send 4 bits MSB
0260  1588     BSF PORTD, 0x3                     582:   	bsf		E				;
0261  227C     CALL 0x27C                         583:   	call	lcdLongDelay	;__    __
0262  1188     BCF PORTD, 0x3                     584:   	bcf		E				;  |__|
0263  0E23     SWAPF 0x23, W                      585:   	swapf	com,w
0264  39F0     ANDLW 0xF0                         586:   	andlw	0xF0			;1111 0010
0265  0088     MOVWF PORTD                        587:   	movwf	PORTD			;send 4 bits LSB
0266  1588     BSF PORTD, 0x3                     588:   	bsf		E				;
0267  227C     CALL 0x27C                         589:   	call	lcdLongDelay	;__    __
0268  1188     BCF PORTD, 0x3                     590:   	bcf		E				;  |__|
0269  227C     CALL 0x27C                         591:   	call	lcdLongDelay
026A  0008     RETURN                             592:   	return
                                                  593:   
                                                  594:   
                                                  595:   WR_DATA
026B  1508     BSF PORTD, 0x2                     596:   	bsf		RS
026C  00A4     MOVWF 0x24                         597:   	movwf	dat
026D  0824     MOVF 0x24, W                       598:   	movf	dat,w
026E  39F0     ANDLW 0xF0                         599:   	andlw	0xF0
026F  3E04     ADDLW 0x4                          600:   	addlw	4
0270  0088     MOVWF PORTD                        601:   	movwf	PORTD
0271  1588     BSF PORTD, 0x3                     602:   	bsf		E				;
0272  227C     CALL 0x27C                         603:   	call	lcdLongDelay	;__    __
0273  1188     BCF PORTD, 0x3                     604:   	bcf		E				;  |__|
0274  0E24     SWAPF 0x24, W                      605:   	swapf	dat,w
0275  39F0     ANDLW 0xF0                         606:   	andlw	0xF0
0276  3E04     ADDLW 0x4                          607:   	addlw	4
0277  0088     MOVWF PORTD                        608:   	movwf	PORTD
0278  1588     BSF PORTD, 0x3                     609:   	bsf		E				;
0279  227C     CALL 0x27C                         610:   	call	lcdLongDelay	;__    __
027A  1188     BCF PORTD, 0x3                     611:   	bcf		E				;  |__|
027B  0008     RETURN                             612:   	return
                                                  613:   
                                                  614:   lcdLongDelay
027C  3014     MOVLW 0x14                         615:       movlw d'20'
027D  00A6     MOVWF 0x26                         616:       movwf lcd_d2
                                                  617:   LLD_LOOP
027E  30FF     MOVLW 0xFF                         618:       LCD_DELAY
027F  00A5     MOVWF 0x25
0280  0BA5     DECFSZ 0x25, F
0281  2A80     GOTO 0x280
0282  0BA6     DECFSZ 0x26, F                     619:       decfsz lcd_d2,f
0283  2A7E     GOTO 0x27E                         620:       goto LLD_LOOP
0284  0008     RETURN                             621:       return
                                                  622:   
                                                  623:       
                                                  624:   
                                                  625:   
                                                  626:   ;***************************************
                                                  627:   ; Delay 0.5s
                                                  628:   ;***************************************
                                                  629:   HalfS
                                                  630:   	local	HalfS_0
0285  3088     MOVLW 0x88                         631:         movlw 0x88
0286  00A7     MOVWF 0x27                         632:         movwf COUNTH
0287  30BD     MOVLW 0xBD                         633:         movlw 0xBD
0288  00A8     MOVWF 0x28                         634:         movwf COUNTM
0289  3003     MOVLW 0x3                          635:         movlw 0x03
028A  00A9     MOVWF 0x29                         636:         movwf COUNTL
                                                  637:   
                                                  638:   HalfS_0
028B  0BA7     DECFSZ 0x27, F                     639:         decfsz COUNTH, f
028C  2A8E     GOTO 0x28E                         640:         goto   $+2
028D  0BA8     DECFSZ 0x28, F                     641:         decfsz COUNTM, f
028E  2A90     GOTO 0x290                         642:         goto   $+2
028F  0BA9     DECFSZ 0x29, F                     643:         decfsz COUNTL, f
0290  2A8B     GOTO 0x28B                         644:         goto   HalfS_0
                                                  645:   
0291  2A92     GOTO 0x292                         646:         goto $+1
0292  0000     NOP                                647:         nop
0293  0000     NOP                                648:         nop
0294  0008     RETURN                             649:   		return
                                                  650:   
2007  0000     NOP                                651:       END
