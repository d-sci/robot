Disassembly Listing for go_go_gadget_candlelight
Generated From:
C:/Users/Doge/Documents/GitHub/robot/go_go_gadget_candlelight.X/dist/default/production/go_go_gadget_candlelight.X.production.cof
17-Feb-2014 6:21:08 PM

---  C:/Users/Doge/Documents/GitHub/robot/realtimeclock.X/i2c_common.asm  -------------------------------
                                                  1:         include <p16f877.inc>
                                                  2:     	errorlevel	-302
                                                  3:     	errorlevel	-305
                                                  4:     
                                                  5:     ;global labels
                                                  6:     
                                                  7:     	global	write_rtc,read_rtc,rtc_convert,i2c_common_setup,p2p_write,p2p_read
                                                  8:     
                                                  9:     ;Definition and variable declarations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  10:            cblock    0x71			;these variable names are for reference only. The following
                                                  11:            i2c_dt1			;0x71		 addresses are used for the RTC module
                                                  12:            i2c_dt2			;0x72
                                                  13:            i2c_ADD			;0x73
                                                  14:            i2c_DAT			;0x74
                                                  15:            i2c_DOUT		;0x75
                                                  16:            i2c_B1			;0x76
                                                  17:    		i2c_dig10		;0x77
                                                  18:    		i2c_dig1		;0x78
                                                  19:            endc
                                                  20:    
                                                  21:    ;I2C lowest layer macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  22:    
                                                  23:    i2c_common_check_ack	macro	err_address		;If bad ACK bit received, goto err_address
                                                  24:    	banksel		SSPCON2
                                                  25:        btfsc       SSPCON2,ACKSTAT
                                                  26:        goto        err_address
                                                  27:    	endm
                                                  28:    
                                                  29:    i2c_common_start	macro
                                                  30:    ;input:		none
                                                  31:    ;output:	none
                                                  32:    ;desc:		initiate start conditionon the bus
                                                  33:    	banksel     SSPCON2
                                                  34:        bsf         SSPCON2,SEN
                                                  35:        btfsc       SSPCON2,SEN
                                                  36:        goto        $-1
                                                  37:    	endm
                                                  38:    
                                                  39:    i2c_common_stop	macro
                                                  40:    ;input: 	none
                                                  41:    ;output:	none
                                                  42:    ;desc:		initiate stop condition on the bus
                                                  43:    	banksel     SSPCON2
                                                  44:        bsf         SSPCON2,PEN
                                                  45:        btfsc       SSPCON2,PEN
                                                  46:        goto        $-1
                                                  47:    	endm
                                                  48:    
                                                  49:    i2c_common_repeatedstart	macro
                                                  50:    ;input:		none
                                                  51:    ;output:	none
                                                  52:    ;desc:		initiate repeated start on the bus. Usually used for
                                                  53:    ;			changing direction of SDA without STOP event
                                                  54:    	banksel     SSPCON2
                                                  55:        bsf         SSPCON2,RSEN
                                                  56:        btfsc       SSPCON2,RSEN
                                                  57:        goto        $-1
                                                  58:    	endm
                                                  59:    
                                                  60:    i2c_common_ack		macro
                                                  61:    ;input:		none
                                                  62:    ;output:	none
                                                  63:    ;desc:		send an acknowledge to slave device
                                                  64:        banksel     SSPCON2
                                                  65:        bcf         SSPCON2,ACKDT
                                                  66:        bsf         SSPCON2,ACKEN
                                                  67:        btfsc       SSPCON2,ACKEN
                                                  68:        goto        $-1
                                                  69:        endm
                                                  70:    
                                                  71:    i2c_common_nack	macro
                                                  72:    ;input:		none
                                                  73:    ;output:	none
                                                  74:    ;desc:		send an not acknowledge to slave device
                                                  75:       banksel     SSPCON2
                                                  76:       bsf         SSPCON2,ACKDT
                                                  77:       bsf         SSPCON2,ACKEN
                                                  78:       btfsc       SSPCON2,ACKEN
                                                  79:       goto        $-1
                                                  80:       endm
                                                  81:    
                                                  82:    i2c_common_write	macro	
                                                  83:    ;input:		W
                                                  84:    ;output:	to slave device
                                                  85:    ;desc:		writes W to SSPBUF and send to slave device. Make sure
                                                  86:    ;			transmit is finished before continuing
                                                  87:       banksel     SSPBUF
                                                  88:       movwf       SSPBUF
                                                  89:       banksel     SSPSTAT
                                                  90:       btfsc       SSPSTAT,R_W 		;While transmit is in progress, wait
                                                  91:       goto        $-1
                                                  92:       banksel     SSPCON2
                                                  93:       endm
                                                  94:    
                                                  95:    i2c_common_read	macro
                                                  96:    ;input:		none
                                                  97:    ;output:	W
                                                  98:    ;desc:		reads data from slave and saves it in W.
                                                  99:       banksel     SSPCON2
                                                  100:      bsf         SSPCON2,RCEN    ;Begin receiving byte from
                                                  101:      btfsc       SSPCON2,RCEN
                                                  102:      goto        $-1
                                                  103:      banksel     SSPBUF
                                                  104:      movf        SSPBUF,w
                                                  105:      endm
                                                  106:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  107:   
                                                  108:   	code
                                                  109:   
                                                  110:   i2c_common_setup
                                                  111:   ;input:		none
                                                  112:   ;output:	none
                                                  113:   ;desc:		sets up I2C as master device with 100kHz baud rate
0544  1683     BSF STATUS, 0x5                    114:   	banksel		SSPSTAT
0545  1303     BCF STATUS, 0x6
0546  0194     CLRF SSPCON                        115:       clrf        SSPSTAT         ;I2C line levels, and clear all flags
0547  3018     MOVLW 0x18                         116:       movlw       d'24'         	;100kHz baud rate: 10MHz osc / [4*(24+1)]
0548  1683     BSF STATUS, 0x5                    117:   	banksel		SSPADD
0549  1303     BCF STATUS, 0x6
054A  0093     MOVWF SSPBUF                       118:       movwf       SSPADD          ;RTC only supports 100kHz
                                                  119:   
054B  3008     MOVLW 0x8                          120:       movlw       b'00001000'     ;Config SSP for Master Mode I2C
054C  1283     BCF STATUS, 0x5                    121:   	banksel		SSPCON
054D  1303     BCF STATUS, 0x6
054E  0094     MOVWF SSPCON                       122:       movwf       SSPCON
054F  1694     BSF SSPCON, 0x5                    123:       bsf         SSPCON,SSPEN    ;Enable SSP module
0550  1683     BSF STATUS, 0x5                    124:       i2c_common_stop        		;Ensure the bus is free
0551  1303     BCF STATUS, 0x6
0552  1511     BSF TMR2, 0x2
0553  1911     BTFSC TMR2, 0x2
0554  2D53     GOTO 0x553
0555  0008     RETURN                             125:   	return
                                                  126:   
                                                  127:   ;rtc Algorithms;;;;;;
                                                  128:   
                                                  129:   write_rtc
                                                  130:   ;input:		address of register in RTC
                                                  131:   ;output:	none
                                                  132:   ;Desc:		handles writing data to RTC
                                                  133:           ;Select the DS1307 on the bus, in WRITE mode
0556  1683     BSF STATUS, 0x5                    134:           i2c_common_start
0557  1303     BCF STATUS, 0x6
0558  1411     BSF TMR2, 0x0
0559  1811     BTFSC TMR2, 0x0
055A  2D59     GOTO 0x559
055B  30D0     MOVLW 0xD0                         135:           movlw       0xD0        ;DS1307 address | WRITE bit
055C  1283     BCF STATUS, 0x5                    136:           i2c_common_write
055D  1303     BCF STATUS, 0x6
055E  0093     MOVWF SSPBUF
055F  1683     BSF STATUS, 0x5
0560  1303     BCF STATUS, 0x6
0561  1914     BTFSC SSPCON, 0x2
0562  2D61     GOTO 0x561
0563  1683     BSF STATUS, 0x5
0564  1303     BCF STATUS, 0x6
0565  1683     BSF STATUS, 0x5                    137:           i2c_common_check_ack   WR_ERR
0566  1303     BCF STATUS, 0x6
0567  1B11     BTFSC TMR2, 0x6
0568  2D8A     GOTO 0x58A
                                                  138:   
                                                  139:           ;Write data to I2C bus (Register Address in RTC)
0569  1283     BCF STATUS, 0x5                    140:   		banksel		0x73
056A  1303     BCF STATUS, 0x6
056B  0873     MOVF 0x73, W                       141:           movf        0x73,w       ;Set register pointer in RTC
056C  1283     BCF STATUS, 0x5                    142:           i2c_common_write
056D  1303     BCF STATUS, 0x6
056E  0093     MOVWF SSPBUF
056F  1683     BSF STATUS, 0x5
0570  1303     BCF STATUS, 0x6
0571  1914     BTFSC SSPCON, 0x2
0572  2D71     GOTO 0x571
0573  1683     BSF STATUS, 0x5
0574  1303     BCF STATUS, 0x6
0575  1683     BSF STATUS, 0x5                    143:           i2c_common_check_ack   WR_ERR
0576  1303     BCF STATUS, 0x6
0577  1B11     BTFSC TMR2, 0x6
0578  2D8A     GOTO 0x58A
                                                  144:   
                                                  145:           ;Write data to I2C bus (Data to be placed in RTC register)
0579  1283     BCF STATUS, 0x5                    146:   		banksel		0x74
057A  1303     BCF STATUS, 0x6
057B  0874     MOVF 0x74, W                       147:           movf        0x74,w       ;Write data to register in RTC
057C  1283     BCF STATUS, 0x5                    148:           i2c_common_write
057D  1303     BCF STATUS, 0x6
057E  0093     MOVWF SSPBUF
057F  1683     BSF STATUS, 0x5
0580  1303     BCF STATUS, 0x6
0581  1914     BTFSC SSPCON, 0x2
0582  2D81     GOTO 0x581
0583  1683     BSF STATUS, 0x5
0584  1303     BCF STATUS, 0x6
0585  1683     BSF STATUS, 0x5                    149:           i2c_common_check_ack   WR_ERR
0586  1303     BCF STATUS, 0x6
0587  1B11     BTFSC TMR2, 0x6
0588  2D8A     GOTO 0x58A
0589  2D8B     GOTO 0x58B                         150:           goto        WR_END
                                                  151:   WR_ERR
058A  0000     NOP                                152:           nop
                                                  153:   WR_END  
058B  1683     BSF STATUS, 0x5                    154:   		i2c_common_stop	;Release the I2C bus
058C  1303     BCF STATUS, 0x6
058D  1511     BSF TMR2, 0x2
058E  1911     BTFSC TMR2, 0x2
058F  2D8E     GOTO 0x58E
0590  0008     RETURN                             155:           return
                                                  156:   
                                                  157:   read_rtc
                                                  158:   ;input:		address of RTC
                                                  159:   ;output:	DOUT or 0x75
                                                  160:   ;Desc:		This reads from the selected address of the RTC
                                                  161:   ;			and saves it into DOUT or address 0x75
                                                  162:           ;Select the DS1307 on the bus, in WRITE mode
0591  1683     BSF STATUS, 0x5                    163:           i2c_common_start
0592  1303     BCF STATUS, 0x6
0593  1411     BSF TMR2, 0x0
0594  1811     BTFSC TMR2, 0x0
0595  2D94     GOTO 0x594
0596  30D0     MOVLW 0xD0                         164:           movlw       0xD0        ;DS1307 address | WRITE bit
0597  1283     BCF STATUS, 0x5                    165:           i2c_common_write
0598  1303     BCF STATUS, 0x6
0599  0093     MOVWF SSPBUF
059A  1683     BSF STATUS, 0x5
059B  1303     BCF STATUS, 0x6
059C  1914     BTFSC SSPCON, 0x2
059D  2D9C     GOTO 0x59C
059E  1683     BSF STATUS, 0x5
059F  1303     BCF STATUS, 0x6
05A0  1683     BSF STATUS, 0x5                    166:           i2c_common_check_ack   RD_ERR
05A1  1303     BCF STATUS, 0x6
05A2  1B11     BTFSC TMR2, 0x6
05A3  2DD9     GOTO 0x5D9
                                                  167:   
                                                  168:           ;Write data to I2C bus (Register Address in RTC)
05A4  1283     BCF STATUS, 0x5                    169:   		banksel		0x73
05A5  1303     BCF STATUS, 0x6
05A6  0873     MOVF 0x73, W                       170:           movf        0x73,w       ;Set register pointer in RTC
05A7  1283     BCF STATUS, 0x5                    171:           i2c_common_write
05A8  1303     BCF STATUS, 0x6
05A9  0093     MOVWF SSPBUF
05AA  1683     BSF STATUS, 0x5
05AB  1303     BCF STATUS, 0x6
05AC  1914     BTFSC SSPCON, 0x2
05AD  2DAC     GOTO 0x5AC
05AE  1683     BSF STATUS, 0x5
05AF  1303     BCF STATUS, 0x6
05B0  1683     BSF STATUS, 0x5                    172:           i2c_common_check_ack   RD_ERR
05B1  1303     BCF STATUS, 0x6
05B2  1B11     BTFSC TMR2, 0x6
05B3  2DD9     GOTO 0x5D9
                                                  173:   
                                                  174:           ;Re-Select the DS1307 on the bus, in READ mode
05B4  1683     BSF STATUS, 0x5                    175:           i2c_common_repeatedstart
05B5  1303     BCF STATUS, 0x6
05B6  1491     BSF TMR2, 0x1
05B7  1891     BTFSC TMR2, 0x1
05B8  2DB7     GOTO 0x5B7
05B9  30D1     MOVLW 0xD1                         176:           movlw       0xD1        ;DS1307 address | READ bit
05BA  1283     BCF STATUS, 0x5                    177:           i2c_common_write
05BB  1303     BCF STATUS, 0x6
05BC  0093     MOVWF SSPBUF
05BD  1683     BSF STATUS, 0x5
05BE  1303     BCF STATUS, 0x6
05BF  1914     BTFSC SSPCON, 0x2
05C0  2DBF     GOTO 0x5BF
05C1  1683     BSF STATUS, 0x5
05C2  1303     BCF STATUS, 0x6
05C3  1683     BSF STATUS, 0x5                    178:           i2c_common_check_ack   RD_ERR
05C4  1303     BCF STATUS, 0x6
05C5  1B11     BTFSC TMR2, 0x6
05C6  2DD9     GOTO 0x5D9
                                                  179:   
                                                  180:           ;Read data from I2C bus (Contents of Register in RTC)
05C7  1683     BSF STATUS, 0x5                    181:           i2c_common_read
05C8  1303     BCF STATUS, 0x6
05C9  1591     BSF TMR2, 0x3
05CA  1991     BTFSC TMR2, 0x3
05CB  2DCA     GOTO 0x5CA
05CC  1283     BCF STATUS, 0x5
05CD  1303     BCF STATUS, 0x6
05CE  0813     MOVF SSPBUF, W
05CF  1283     BCF STATUS, 0x5                    182:   		banksel		0x75
05D0  1303     BCF STATUS, 0x6
05D1  00F5     MOVWF 0x75                         183:           movwf       0x75
05D2  1683     BSF STATUS, 0x5                    184:           i2c_common_nack      ;Send acknowledgement of data reception
05D3  1303     BCF STATUS, 0x6
05D4  1691     BSF TMR2, 0x5
05D5  1611     BSF TMR2, 0x4
05D6  1A11     BTFSC TMR2, 0x4
05D7  2DD6     GOTO 0x5D6
                                                  185:           
05D8  2DDA     GOTO 0x5DA                         186:           goto        RD_END
                                                  187:   
                                                  188:   RD_ERR 
05D9  0000     NOP                                189:           nop
                                                  190:           
                                                  191:           ;Release the I2C bus
05DA  1683     BSF STATUS, 0x5                    192:   RD_END  i2c_common_stop
05DB  1303     BCF STATUS, 0x6
05DC  1511     BSF TMR2, 0x2
05DD  1911     BTFSC TMR2, 0x2
05DE  2DDD     GOTO 0x5DD
05DF  0008     RETURN                             193:           return
                                                  194:   
                                                  195:   rtc_convert   
                                                  196:   ;input:		W
                                                  197:   ;output:	dig10 (0x77), dig1 (0x78)
                                                  198:   ;desc:		This subroutine converts the binary number
                                                  199:   ;			in W into a two digit ASCII number and place
                                                  200:   ;			each digit into the corresponding registers
                                                  201:   ;			dig10 or dig1
05E0  1283     BCF STATUS, 0x5                    202:   	banksel	0x76
05E1  1303     BCF STATUS, 0x6
05E2  00F6     MOVWF 0x76                         203:   	movwf   0x76             ; B1 = HHHH LLLL
05E3  0E76     SWAPF 0x76, W                      204:       swapf   0x76,w           ; W  = LLLL HHHH
05E4  390F     ANDLW 0xF                          205:       andlw   0x0f           ; Mask upper four bits 0000 HHHH
05E5  3E30     ADDLW 0x30                         206:       addlw   0x30           ; convert to ASCII
05E6  00F7     MOVWF 0x77                         207:       movwf	0x77		   ;saves into 10ths digit
                                                  208:   
05E7  1283     BCF STATUS, 0x5                    209:   	banksel	0x76
05E8  1303     BCF STATUS, 0x6
05E9  0876     MOVF 0x76, W                       210:       movf    0x76,w
05EA  390F     ANDLW 0xF                          211:       andlw   0x0f           ; w  = 0000 LLLL
05EB  3E30     ADDLW 0x30                         212:       addlw   0x30           ; convert to ASCII		
05EC  00F8     MOVWF 0x78                         213:       movwf	0x78	       ; saves into 1s digit
05ED  0008     RETURN                             214:      	return
                                                  215:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  216:   
                                                  217:   
                                                  218:   ;pic to pic subroutines;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  219:   p2p_write
                                                  220:           ;Select the DS1307 on the bus, in WRITE mode
05EE  1683     BSF STATUS, 0x5                    221:           i2c_common_start
05EF  1303     BCF STATUS, 0x6
05F0  1411     BSF TMR2, 0x0
05F1  1811     BTFSC TMR2, 0x0
05F2  2DF1     GOTO 0x5F1
05F3  3010     MOVLW 0x10                         222:           movlw       b'00010000'
05F4  1283     BCF STATUS, 0x5                    223:           i2c_common_write
05F5  1303     BCF STATUS, 0x6
05F6  0093     MOVWF SSPBUF
05F7  1683     BSF STATUS, 0x5
05F8  1303     BCF STATUS, 0x6
05F9  1914     BTFSC SSPCON, 0x2
05FA  2DF9     GOTO 0x5F9
05FB  1683     BSF STATUS, 0x5
05FC  1303     BCF STATUS, 0x6
05FD  1683     BSF STATUS, 0x5                    224:           i2c_common_check_ack   W_END 
05FE  1303     BCF STATUS, 0x6
05FF  1B11     BTFSC TMR2, 0x6
0600  2E12     GOTO 0x612
                                                  225:   
0601  1283     BCF STATUS, 0x5                    226:   		banksel	0x70
0602  1303     BCF STATUS, 0x6
0603  0870     MOVF 0x70, W                       227:   		movf	0x70, W
0604  1283     BCF STATUS, 0x5                    228:           i2c_common_write
0605  1303     BCF STATUS, 0x6
0606  0093     MOVWF SSPBUF
0607  1683     BSF STATUS, 0x5
0608  1303     BCF STATUS, 0x6
0609  1914     BTFSC SSPCON, 0x2
060A  2E09     GOTO 0x609
060B  1683     BSF STATUS, 0x5
060C  1303     BCF STATUS, 0x6
060D  1683     BSF STATUS, 0x5                    229:           i2c_common_check_ack   W_END 
060E  1303     BCF STATUS, 0x6
060F  1B11     BTFSC TMR2, 0x6
0610  2E12     GOTO 0x612
0611  2E12     GOTO 0x612                         230:           goto        W_END
                                                  231:   W_END  
0612  1683     BSF STATUS, 0x5                    232:   		i2c_common_stop	;Release the I2C bus
0613  1303     BCF STATUS, 0x6
0614  1511     BSF TMR2, 0x2
0615  1911     BTFSC TMR2, 0x2
0616  2E15     GOTO 0x615
0617  0008     RETURN                             233:           return
                                                  234:   
                                                  235:   
                                                  236:   p2p_read
                                                  237:           ;Select the DS1307 on the bus, in WRITE mode
0618  1683     BSF STATUS, 0x5                    238:           i2c_common_start
0619  1303     BCF STATUS, 0x6
061A  1411     BSF TMR2, 0x0
061B  1811     BTFSC TMR2, 0x0
061C  2E1B     GOTO 0x61B
061D  3011     MOVLW 0x11                         239:   		movlw       b'00010001'
061E  1283     BCF STATUS, 0x5                    240:           i2c_common_write
061F  1303     BCF STATUS, 0x6
0620  0093     MOVWF SSPBUF
0621  1683     BSF STATUS, 0x5
0622  1303     BCF STATUS, 0x6
0623  1914     BTFSC SSPCON, 0x2
0624  2E23     GOTO 0x623
0625  1683     BSF STATUS, 0x5
0626  1303     BCF STATUS, 0x6
0627  1683     BSF STATUS, 0x5                    241:   		i2c_common_check_ack   R_END
0628  1303     BCF STATUS, 0x6
0629  1B11     BTFSC TMR2, 0x6
062A  2E3C     GOTO 0x63C
                                                  242:   
062B  1683     BSF STATUS, 0x5                    243:           i2c_common_read
062C  1303     BCF STATUS, 0x6
062D  1591     BSF TMR2, 0x3
062E  1991     BTFSC TMR2, 0x3
062F  2E2E     GOTO 0x62E
0630  1283     BCF STATUS, 0x5
0631  1303     BCF STATUS, 0x6
0632  0813     MOVF SSPBUF, W
0633  1283     BCF STATUS, 0x5                    244:   		banksel		0x70
0634  1303     BCF STATUS, 0x6
0635  00F0     MOVWF 0x70                         245:           movwf       0x70
0636  1683     BSF STATUS, 0x5                    246:           i2c_common_nack      ;Send acknowledgement of data reception
0637  1303     BCF STATUS, 0x6
0638  1691     BSF TMR2, 0x5
0639  1611     BSF TMR2, 0x4
063A  1A11     BTFSC TMR2, 0x4
063B  2E3A     GOTO 0x63A
                                                  247:   R_END
063C  1683     BSF STATUS, 0x5                    248:   		i2c_common_stop
063D  1303     BCF STATUS, 0x6
063E  1511     BSF TMR2, 0x2
063F  1911     BTFSC TMR2, 0x2
0640  2E3F     GOTO 0x63F
0641  0008     RETURN                             249:           return
                                                  250:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  251:   
                                                  252:   	end
---  C:/Users/Doge/Documents/GitHub/robot/go_go_gadget_candlelight.X/main.asm  --------------------------
                                                  1:         list p=16f877                 ; list directive to define processor
                                                  2:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  3:           __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  4:     
                                                  5:           #include <rtc_macros.inc>
                                                  6:     
                                                  7:     
                                                  8:     ;***************************************
                                                  9:     ; DEFINITIONS
                                                  10:    ;***************************************
                                                  11:        #define	RS 	PORTD,2
                                                  12:    	#define	E 	PORTD,3
                                                  13:        #define threshold1  D'15'
                                                  14:        #define threshold2  D'65'
                                                  15:        #define IRLIGHT    PORTA, 0
                                                  16:        #define IRDATA     PORTA, 1
                                                  17:        #define PHOTODATA  PORTA, 2
                                                  18:       ; note: check analog v digital!
                                                  19:    
                                                  20:    
                                                  21:    ;***************************************
                                                  22:    ; VARIABLES
                                                  23:    ;***************************************
                                                  24:    
                                                  25:    ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                                                  26:    
                                                  27:        cblock	0x20
                                                  28:        ; Important information (will be displayed)
                                                  29:            op_time    ;in seconds    
                                                  30:            state1     ;where   0 = none      1 = pass
                                                  31:            state2     ;        2 = led fail  3 = flicker fail
                                                  32:            state3
                                                  33:            state4
                                                  34:            state5
                                                  35:            state6
                                                  36:            state7
                                                  37:            state8
                                                  38:            state9
                                                  39:            num_LF      ;BCD
                                                  40:            num_FF      ;BCD
                                                  41:            num_tot     ;BCD
                                                  42:            start_year10    ;starting time (for log)
                                                  43:            start_year1     ; note: these are all ALREADY ASCII!
                                                  44:            start_month10
                                                  45:            start_month1
                                                  46:            start_date10
                                                  47:            start_date1
                                                  48:            start_hour10
                                                  49:            start_hour1
                                                  50:            start_min10
                                                  51:            start_min1
                                                  52:    ; For general program / interface: temps, counters, etc.
                                                  53:            keytemp         ; for data display mode
                                                  54:            statetemp
                                                  55:    		Table_Counter   ; for LCD stuff
                                                  56:    		com
                                                  57:    		dat
                                                  58:            del1            ; for delay 5ms delay routine
                                                  59:            del2
                                                  60:            hdelH          ;for delay 0.5s routine
                                                  61:            hdelM
                                                  62:            hdelL
                                                  63:            op_time_save    ;for operation time
                                                  64:            huns
                                                  65:            tens
                                                  66:            ones
                                                  67:            bignumcount
                                                  68:            count38         ;for isr
                                                  69:    ; For machine program: temps, counters, etc.
                                                  70:            candle_index
                                                  71:            photocount
                                                  72:            photoval
                                                  73:    
                                                  74:        endc
                                                  75:    
                                                  76:        cblock  0x79        ;ISR stuff that needs to be in all registers
                                                  77:            w_isr           
                                                  78:            status_isr
                                                  79:    	endc
                                                  80:    
                                                  81:    
                                                  82:    ;***************************************
                                                  83:    ; MACROS
                                                  84:    ;***************************************
                                                  85:    
                                                  86:    ; Display a msg on LCD
                                                  87:    Display macro	Message
                                                  88:    		local	loop_disp
                                                  89:    		local 	end_disp
                                                  90:    		clrf	Table_Counter
                                                  91:    		clrw
                                                  92:    loop_disp
                                                  93:        	movf	Table_Counter,W
                                                  94:    		call 	Message
                                                  95:    		xorlw	B'00000000' ;check WORK reg to see if 0 is returned
                                                  96:    		btfsc	STATUS,Z
                                                  97:    		goto	end_disp
                                                  98:    		call	WR_DATA
                                                  99:    		incf	Table_Counter,F
                                                  100:   		goto	loop_disp
                                                  101:   end_disp
                                                  102:   		endm
                                                  103:   
                                                  104:   ;Move cursor right one position
                                                  105:   spacebar    macro
                                                  106:               movlw   B'00010100'
                                                  107:               call    WR_INS
                                                  108:               endm
                                                  109:   
                                                  110:   ;Shortcuts for moving literals / registers
                                                  111:   movlf   macro   l, f
                                                  112:           movlw   l
                                                  113:           movwf   f
                                                  114:           endm
                                                  115:   
                                                  116:   movff   macro   source, dest
                                                  117:           movf    source, W
                                                  118:           movwf   dest
                                                  119:           endm
                                                  120:   
                                                  121:   ; Display a BCD on LCD as decimal
                                                  122:   writenum    macro   number          ; literal
                                                  123:               movlw    number
                                                  124:               addlw   B'00110000'
                                                  125:               movwf   dat
                                                  126:               call WR_DATA
                                                  127:               endm
                                                  128:   
                                                  129:   writenum_reg    macro   reg         ; from a register containing BCD
                                                  130:               movf    reg,W
                                                  131:               addlw   B'00110000'
                                                  132:               movwf   dat
                                                  133:               call WR_DATA
                                                  134:               endm
                                                  135:   
                                                  136:   ;Write to PC (hyperterminal)
                                                  137:   printchar   macro   char            ;direct ASCII code literal (or in "")
                                                  138:               movlw   char
                                                  139:               call    writetoPC
                                                  140:               endm
                                                  141:   
                                                  142:   printASC    macro   reg            ;ASCII code inside a register
                                                  143:               banksel reg
                                                  144:               movf    reg,W
                                                  145:               call    writetoPC
                                                  146:               endm
                                                  147:   
                                                  148:   printBCD    macro   BCD            ;BCD inside a register
                                                  149:               banksel BCD
                                                  150:               movf    BCD, W
                                                  151:               addlw   0x30
                                                  152:               call    writetoPC
                                                  153:               endm
                                                  154:   
                                                  155:   
                                                  156:   newline     macro
                                                  157:               printchar   0xA ;changes line
                                                  158:               printchar   0xD ;goes back to left
                                                  159:               endm
                                                  160:   ;***************************************
                                                  161:   ; VECTORS
                                                  162:   ;***************************************
                                                  163:   
                                                  164:       ORG       0x000
0000  28BE     GOTO 0xBE                          165:            goto      init
                                                  166:       ORG       0x004
0004  2D35     GOTO 0x535                         167:           goto    isr
                                                  168:   
                                                  169:   
                                                  170:   ;***************************************
                                                  171:   ; TABLES (MESSAGES)
                                                  172:   ;***************************************
                                                  173:   Standby_Msg
0005  0782     ADDWF PCL, F                       174:   		addwf	PCL,F
0006  3453     RETLW 0x53                         175:   		dt		"STANDBY", 0
0007  3454     RETLW 0x54
0008  3441     RETLW 0x41
0009  344E     RETLW 0x4E
000A  3444     RETLW 0x44
000B  3442     RETLW 0x42
000C  3459     RETLW 0x59
000D  3400     RETLW 0x0
                                                  176:   Start_Msg
000E  0782     ADDWF PCL, F                       177:           addwf   PCL,F
000F  3449     RETLW 0x49                         178:           dt      "Inspecting . . .",0
0010  346E     RETLW 0x6E
0011  3473     RETLW 0x73
0012  3470     RETLW 0x70
0013  3465     RETLW 0x65
0014  3463     RETLW 0x63
0015  3474     RETLW 0x74
0016  3469     RETLW 0x69
0017  346E     RETLW 0x6E
0018  3467     RETLW 0x67
0019  3420     RETLW 0x20
001A  342E     RETLW 0x2E
001B  3420     RETLW 0x20
001C  342E     RETLW 0x2E
001D  3420     RETLW 0x20
001E  342E     RETLW 0x2E
001F  3400     RETLW 0x0
                                                  179:   End_Msg
0020  0782     ADDWF PCL, F                       180:           addwf   PCL,F
0021  3443     RETLW 0x43                         181:           dt      "Complete",0
0022  346F     RETLW 0x6F
0023  346D     RETLW 0x6D
0024  3470     RETLW 0x70
0025  346C     RETLW 0x6C
0026  3465     RETLW 0x65
0027  3474     RETLW 0x74
0028  3465     RETLW 0x65
0029  3400     RETLW 0x0
                                                  182:   Time_Msg
002A  0782     ADDWF PCL, F                       183:   		addwf	PCL,F
002B  344F     RETLW 0x4F                         184:   		dt		"Operation time:",0
002C  3470     RETLW 0x70
002D  3465     RETLW 0x65
002E  3472     RETLW 0x72
002F  3461     RETLW 0x61
0030  3474     RETLW 0x74
0031  3469     RETLW 0x69
0032  346F     RETLW 0x6F
0033  346E     RETLW 0x6E
0034  3420     RETLW 0x20
0035  3474     RETLW 0x74
0036  3469     RETLW 0x69
0037  346D     RETLW 0x6D
0038  3465     RETLW 0x65
0039  343A     RETLW 0x3A
003A  3400     RETLW 0x0
                                                  185:   Seconds
003B  0782     ADDWF PCL, F                       186:           addwf   PCL,F
003C  3420     RETLW 0x20                         187:           dt      " seconds", 0
003D  3473     RETLW 0x73
003E  3465     RETLW 0x65
003F  3463     RETLW 0x63
0040  346F     RETLW 0x6F
0041  346E     RETLW 0x6E
0042  3464     RETLW 0x64
0043  3473     RETLW 0x73
0044  3400     RETLW 0x0
                                                  188:   Not_present
0045  0782     ADDWF PCL, F                       189:           addwf   PCL,F
0046  343A     RETLW 0x3A                         190:           dt      ": Not present",0
0047  3420     RETLW 0x20
0048  344E     RETLW 0x4E
0049  346F     RETLW 0x6F
004A  3474     RETLW 0x74
004B  3420     RETLW 0x20
004C  3470     RETLW 0x70
004D  3472     RETLW 0x72
004E  3465     RETLW 0x65
004F  3473     RETLW 0x73
0050  3465     RETLW 0x65
0051  346E     RETLW 0x6E
0052  3474     RETLW 0x74
0053  3400     RETLW 0x0
                                                  191:   Pass
0054  0782     ADDWF PCL, F                       192:   		addwf	PCL,F
0055  343A     RETLW 0x3A                         193:   		dt		": Pass",0
0056  3420     RETLW 0x20
0057  3450     RETLW 0x50
0058  3461     RETLW 0x61
0059  3473     RETLW 0x73
005A  3473     RETLW 0x73
005B  3400     RETLW 0x0
                                                  194:   LED_fail
005C  0782     ADDWF PCL, F                       195:   		addwf	PCL,F
005D  343A     RETLW 0x3A                         196:   		dt		": LED fail",0
005E  3420     RETLW 0x20
005F  344C     RETLW 0x4C
0060  3445     RETLW 0x45
0061  3444     RETLW 0x44
0062  3420     RETLW 0x20
0063  3466     RETLW 0x66
0064  3461     RETLW 0x61
0065  3469     RETLW 0x69
0066  346C     RETLW 0x6C
0067  3400     RETLW 0x0
                                                  197:   Flick_fail
0068  0782     ADDWF PCL, F                       198:   		addwf	PCL,F
0069  343A     RETLW 0x3A                         199:   		dt		": Flicker fail",0
006A  3420     RETLW 0x20
006B  3446     RETLW 0x46
006C  346C     RETLW 0x6C
006D  3469     RETLW 0x69
006E  3463     RETLW 0x63
006F  346B     RETLW 0x6B
0070  3465     RETLW 0x65
0071  3472     RETLW 0x72
0072  3420     RETLW 0x20
0073  3466     RETLW 0x66
0074  3461     RETLW 0x61
0075  3469     RETLW 0x69
0076  346C     RETLW 0x6C
0077  3400     RETLW 0x0
                                                  200:   Total_Msg
0078  0782     ADDWF PCL, F                       201:           addwf   PCL,F
0079  3454     RETLW 0x54                         202:           dt      "Total candles: ",0
007A  346F     RETLW 0x6F
007B  3474     RETLW 0x74
007C  3461     RETLW 0x61
007D  346C     RETLW 0x6C
007E  3420     RETLW 0x20
007F  3463     RETLW 0x63
0080  3461     RETLW 0x61
0081  346E     RETLW 0x6E
0082  3464     RETLW 0x64
0083  346C     RETLW 0x6C
0084  3465     RETLW 0x65
0085  3473     RETLW 0x73
0086  343A     RETLW 0x3A
0087  3420     RETLW 0x20
0088  3400     RETLW 0x0
                                                  203:   LF
0089  0782     ADDWF PCL, F                       204:           addwf   PCL,F
008A  344C     RETLW 0x4C                         205:           dt      "LF: ",0
008B  3446     RETLW 0x46
008C  343A     RETLW 0x3A
008D  3420     RETLW 0x20
008E  3400     RETLW 0x0
                                                  206:   FF
008F  0782     ADDWF PCL, F                       207:           addwf   PCL,F
0090  3446     RETLW 0x46                         208:           dt      "FF: ",0
0091  3446     RETLW 0x46
0092  343A     RETLW 0x3A
0093  3420     RETLW 0x20
0094  3400     RETLW 0x0
                                                  209:   None
0095  0782     ADDWF PCL, F                       210:           addwf   PCL,F
0096  343C     RETLW 0x3C                         211:           dt      "<none>", 0
0097  346E     RETLW 0x6E
0098  346F     RETLW 0x6F
0099  346E     RETLW 0x6E
009A  3465     RETLW 0x65
009B  343E     RETLW 0x3E
009C  3400     RETLW 0x0
                                                  212:   Logs_Msg1
009D  0782     ADDWF PCL, F                       213:           addwf   PCL,F
009E  3431     RETLW 0x31                         214:           dt      "1-4 to see log",0
009F  342D     RETLW 0x2D
00A0  3434     RETLW 0x34
00A1  3420     RETLW 0x20
00A2  3474     RETLW 0x74
00A3  346F     RETLW 0x6F
00A4  3420     RETLW 0x20
00A5  3473     RETLW 0x73
00A6  3465     RETLW 0x65
00A7  3465     RETLW 0x65
00A8  3420     RETLW 0x20
00A9  346C     RETLW 0x6C
00AA  346F     RETLW 0x6F
00AB  3467     RETLW 0x67
00AC  3400     RETLW 0x0
                                                  215:   Logs_Msg2
00AD  0782     ADDWF PCL, F                       216:           addwf   PCL,F
00AE  3453     RETLW 0x53                         217:           dt      "STANDBY to exit",0
00AF  3454     RETLW 0x54
00B0  3441     RETLW 0x41
00B1  344E     RETLW 0x4E
00B2  3444     RETLW 0x44
00B3  3442     RETLW 0x42
00B4  3459     RETLW 0x59
00B5  3420     RETLW 0x20
00B6  3474     RETLW 0x74
00B7  346F     RETLW 0x6F
00B8  3420     RETLW 0x20
00B9  3465     RETLW 0x65
00BA  3478     RETLW 0x78
00BB  3469     RETLW 0x69
00BC  3474     RETLW 0x74
00BD  3400     RETLW 0x0
                                                  218:   
                                                  219:   ;***************************************
                                                  220:   ; MAIN PROGRAM
                                                  221:   ;***************************************
                                                  222:   
                                                  223:   init
00BE  3080     MOVLW 0x80                         224:           movlf     b'10000000', INTCON   ;interrupts enabled
00BF  008B     MOVWF INTCON
                                                  225:   
00C0  1683     BSF STATUS, 0x5                    226:           bsf       STATUS,RP0            ; select bank 1
00C1  3006     MOVLW 0x6                          227:           movlf     b'000110', TRISA      ; PortA *may* be used for Photo and IR stuff
00C2  0085     MOVWF PORTA
00C3  30F2     MOVLW 0xF2                         228:           movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be external interrupt)
00C4  0086     MOVWF PORTB
                                                  229:                                           ; note can disable keypad to free up these ports during operation if necessary.
00C5  3018     MOVLW 0x18                         230:           movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; rest unused
00C6  0087     MOVWF PORTC
00C7  0188     CLRF PORTD                         231:           clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
00C8  0189     CLRF PORTE                         232:           clrf      TRISE                 ; PortE is output- *may* be used for motor (only [2:0] tho!)
                                                  233:   
00C9  1283     BCF STATUS, 0x5                    234:           bcf       STATUS,RP0     ; select bank 0
00CA  0185     CLRF PORTA                         235:           clrf      PORTA
00CB  0186     CLRF PORTB                         236:           clrf      PORTB
00CC  0187     CLRF PORTC                         237:           clrf      PORTC
00CD  0188     CLRF PORTD                         238:           clrf      PORTD
00CE  0189     CLRF PORTE                         239:           clrf      PORTE
                                                  240:   
00CF  2544     CALL 0x544                         241:           call 	  i2c_common_setup  ;Set up I2C for communication
00D0  24E1     CALL 0x4E1                         242:           call      InitLCD           ;Initialize the LCD
00D1  2525     CALL 0x525                         243:           call      InitUSART         ;Set up USART for RS232
                                                  244:   
00D2  1283     BCF STATUS, 0x5                    245:           bcf       STATUS,RP0          ; bank0
                                                  246:   		
00D3  01B9     CLRF 0x39                          247:           Display Standby_Msg
00D4  0103     CLRW
00D5  0839     MOVF 0x39, W
00D6  2005     CALL 0x5
00D7  3A00     XORLW 0x0
00D8  1903     BTFSC STATUS, 0x2
00D9  28DD     GOTO 0xDD
00DA  2514     CALL 0x514
00DB  0AB9     INCF 0x39, F
00DC  28D5     GOTO 0xD5
00DD  2502     CALL 0x502                         248:           call    Switch_Lines
                                                  249:         
                                                  250:    ;--------------------------------------------------
                                                  251:    ;      STANDBY MODE
                                                  252:   
                                                  253:   waiting
                                                  254:           ; Display date and time. 
                                                  255:           ; Also save starting time for log (will stop updating once we start)
00DE  3032     MOVLW 0x32                         256:           movlw	"2"				;First line shows 20**/**/**
00DF  2514     CALL 0x514                         257:   		call	WR_DATA
00E0  3030     MOVLW 0x30                         258:   		movlw	"0"
00E1  2514     CALL 0x514                         259:   		call	WR_DATA
00E2  3006     MOVLW 0x6                          260:   		rtc_read	0x06		;Read Address 0x06 from DS1307---year
00E3  1283     BCF STATUS, 0x5
00E4  1303     BCF STATUS, 0x6
00E5  00F3     MOVWF 0x73
00E6  2591     CALL 0x591
00E7  1283     BCF STATUS, 0x5
00E8  1303     BCF STATUS, 0x6
00E9  0875     MOVF 0x75, W
00EA  25E0     CALL 0x5E0
00EB  0877     MOVF 0x77, W                       261:   		movf	0x77,W
00EC  00AD     MOVWF 0x2D                         262:           movwf    start_year10    ;Save starting year dig10
00ED  2514     CALL 0x514                         263:   		call	WR_DATA
00EE  0878     MOVF 0x78, W                       264:   		movf	0x78,W
00EF  00AE     MOVWF 0x2E                         265:           movwf    start_year1    ;Save starting year dig1
00F0  2514     CALL 0x514                         266:   		call	WR_DATA
00F1  302F     MOVLW 0x2F                         267:   		movlw	"/"
00F2  2514     CALL 0x514                         268:   		call	WR_DATA
00F3  3005     MOVLW 0x5                          269:   		rtc_read	0x05		;Read Address 0x05 from DS1307---month
00F4  1283     BCF STATUS, 0x5
00F5  1303     BCF STATUS, 0x6
00F6  00F3     MOVWF 0x73
00F7  2591     CALL 0x591
00F8  1283     BCF STATUS, 0x5
00F9  1303     BCF STATUS, 0x6
00FA  0875     MOVF 0x75, W
00FB  25E0     CALL 0x5E0
00FC  0877     MOVF 0x77, W                       270:   		movf	0x77,W
00FD  00AF     MOVWF 0x2F                         271:           movwf    start_month10    ;Save starting month dig10
00FE  2514     CALL 0x514                         272:   		call	WR_DATA
00FF  0878     MOVF 0x78, W                       273:   		movf	0x78,W
0100  00B0     MOVWF 0x30                         274:           movwf    start_month1    ;Save starting month dig1
0101  2514     CALL 0x514                         275:   		call	WR_DATA
0102  302F     MOVLW 0x2F                         276:   		movlw	"/"
0103  2514     CALL 0x514                         277:   		call	WR_DATA
0104  3004     MOVLW 0x4                          278:   		rtc_read	0x04		;Read Address 0x04 from DS1307---date
0105  1283     BCF STATUS, 0x5
0106  1303     BCF STATUS, 0x6
0107  00F3     MOVWF 0x73
0108  2591     CALL 0x591
0109  1283     BCF STATUS, 0x5
010A  1303     BCF STATUS, 0x6
010B  0875     MOVF 0x75, W
010C  25E0     CALL 0x5E0
010D  0877     MOVF 0x77, W                       279:   		movf	0x77,W
010E  00B1     MOVWF 0x31                         280:           movwf    start_date10    ;Save starting date dig10
010F  2514     CALL 0x514                         281:   		call	WR_DATA
0110  0878     MOVF 0x78, W                       282:   		movf	0x78,W
0111  00B2     MOVWF 0x32                         283:           movwf    start_date1    ;Save starting date dig1
0112  2514     CALL 0x514                         284:   		call	WR_DATA
0113  3014     MOVLW 0x14                         285:   		spacebar
0114  2505     CALL 0x505
0115  3002     MOVLW 0x2                          286:   		rtc_read	0x02		;Read Address 0x02 from DS1307---hour
0116  1283     BCF STATUS, 0x5
0117  1303     BCF STATUS, 0x6
0118  00F3     MOVWF 0x73
0119  2591     CALL 0x591
011A  1283     BCF STATUS, 0x5
011B  1303     BCF STATUS, 0x6
011C  0875     MOVF 0x75, W
011D  25E0     CALL 0x5E0
011E  0877     MOVF 0x77, W                       287:   		movf	0x77,W
011F  00B3     MOVWF 0x33                         288:           movwf    start_hour10    ;Save starting hour dig10
0120  2514     CALL 0x514                         289:   		call	WR_DATA
0121  0878     MOVF 0x78, W                       290:   		movf	0x78,W
0122  00B4     MOVWF 0x34                         291:           movwf    start_hour1    ;Save starting hour dig1
0123  2514     CALL 0x514                         292:   		call	WR_DATA
0124  303A     MOVLW 0x3A                         293:   		movlw	":"
0125  2514     CALL 0x514                         294:   		call	WR_DATA
0126  3001     MOVLW 0x1                          295:   		rtc_read	0x01		;Read Address 0x01 from DS1307---min
0127  1283     BCF STATUS, 0x5
0128  1303     BCF STATUS, 0x6
0129  00F3     MOVWF 0x73
012A  2591     CALL 0x591
012B  1283     BCF STATUS, 0x5
012C  1303     BCF STATUS, 0x6
012D  0875     MOVF 0x75, W
012E  25E0     CALL 0x5E0
012F  0877     MOVF 0x77, W                       296:   		movf	0x77,W
0130  00B5     MOVWF 0x35                         297:           movwf    start_min10    ;Save starting min dig10
0131  2514     CALL 0x514                         298:   		call	WR_DATA
0132  0878     MOVF 0x78, W                       299:   		movf	0x78,W
0133  00B6     MOVWF 0x36                         300:           movwf    start_min1    ;Save starting min dig1
0134  2514     CALL 0x514                         301:   		call	WR_DATA
                                                  302:   		      
                                                  303:           ; Move cursor back to start of second line
                                                  304:           ; We will update displayed time but not the word "STANDBY"
0135  30C0     MOVLW 0xC0                         305:           movlw   B'11000000'
0136  2505     CALL 0x505                         306:           call    WR_INS
                                                  307:   
                                                  308:           ;Poll to start (will have to hold key for ~0.5sec)
0137  1C86     BTFSS PORTB, 0x1                   309:            btfss		PORTB,1     ;Wait until data is available from the keypad
0138  28DE     GOTO 0xDE                          310:            goto		waiting
                                                  311:   
0139  0E06     SWAPF PORTB, W                     312:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
013A  390F     ANDLW 0xF                          313:            andlw		0x0F
013B  00B7     MOVWF 0x37                         314:            movwf      keytemp
013C  3A0C     XORLW 0xC                          315:            xorlw      0xC         ;Will be all zeros if its "START"
013D  1903     BTFSC STATUS, 0x2                  316:            btfsc      STATUS,Z    ;and Z will be high, so skip if not high
013E  2946     GOTO 0x146                         317:            goto       start
                                                  318:   
013F  0837     MOVF 0x37, W                       319:            movf       keytemp,W     ;Go to log interface
0140  3A0E     XORLW 0xE                          320:            xorlw      0xE
0141  1903     BTFSC STATUS, 0x2                  321:            btfsc      STATUS,Z
0142  29A7     GOTO 0x1A7                         322:            goto       logs
                                                  323:   
0143  1886     BTFSC PORTB, 0x1                   324:            btfsc		PORTB,1     ;Wait until key is released
0144  2943     GOTO 0x143                         325:            goto		$-1
0145  28DE     GOTO 0xDE                          326:            goto       waiting
                                                  327:   
                                                  328:   ;-----------------------------------------------------------
                                                  329:   ;       ACTUAL OPERATION (I'm just adding values manually now)
                                                  330:   
                                                  331:   start
                                                  332:           ;Start the timer
0146  3026     MOVLW 0x26                         333:           movlf       D'38', count38
0147  00C6     MOVWF 0x46
0148  01A0     CLRF 0x20                          334:           clrf        op_time
0149  168B     BSF INTCON, 0x5                    335:           bsf         INTCON, T0IE ;enable Timer0 interrupt
014A  0181     CLRF TMR0                          336:           clrf        TMR0
014B  1683     BSF STATUS, 0x5                    337:           banksel     OPTION_REG
014C  1303     BCF STATUS, 0x6
014D  30C7     MOVLW 0xC7                         338:           movlf       B'11000111', OPTION_REG ; 1:256 prescaler
014E  0081     MOVWF TMR0
014F  1283     BCF STATUS, 0x5                    339:           bcf        STATUS,RP0     ; back to bank 0
                                                  340:   
                                                  341:           ;Display starting message
0150  24FF     CALL 0x4FF                         342:           call        Clear_Display
0151  01B9     CLRF 0x39                          343:           Display     Start_Msg       ;"Inspecting. . ."
0152  0103     CLRW
0153  0839     MOVF 0x39, W
0154  200E     CALL 0xE
0155  3A00     XORLW 0x0
0156  1903     BTFSC STATUS, 0x2
0157  295B     GOTO 0x15B
0158  2514     CALL 0x514
0159  0AB9     INCF 0x39, F
015A  2953     GOTO 0x153
                                                  344:   
                                                  345:   
                                                  346:   ;;****FAKE CODE ******************************************
                                                  347:   ;        ; Just delaying
                                                  348:   ;        call        HalfS
                                                  349:   ;        call        HalfS
                                                  350:   ;
                                                  351:   ;       ; Putting values in manually.
                                                  352:   ;        movlf     B'01', state1     ;pass
                                                  353:   ;        movlf     B'01', state2     ;pass
                                                  354:   ;        movlf     B'10', state3     ;LED fail
                                                  355:   ;        movlf     B'10', state4     ;LED fail
                                                  356:   ;        movlf     B'01', state5     ;pass
                                                  357:   ;        movlf     B'00', state6     ;not present
                                                  358:   ;        movlf     B'01', state7     ;pass
                                                  359:   ;        movlf     B'11', state8     ;flicker fail
                                                  360:   ;        movlf     B'01', state9     ;pass
                                                  361:   ;        movlf     D'2', num_LF
                                                  362:   ;        movlf     D'1', num_FF
                                                  363:   ;        movlf     D'8', num_tot
                                                  364:   ;;*******************************************************
                                                  365:   
                                                  366:   ; choose fake or real!
                                                  367:   
                                                  368:   ;****REAL CODE ******************************************
015B  3000     MOVLW 0x0                          369:       movlf    D'0', candle_index
015C  00C7     MOVWF 0x47
015D  1383     BCF STATUS, 0x7                    370:       bcf	STATUS, IRP
015E  3020     MOVLW 0x20                         371:       movlf   0x20, FSR       ;pointing at right before state1
015F  0084     MOVWF FSR
0160  1405     BSF PORTA, 0x0                     372:       bsf     IRLIGHT     ;turn on IR
                                                  373:   
                                                  374:   rotate
0161  3009     MOVLW 0x9                          375:   	movlw   0x9                 ; stop operation after 9 rotations
0162  0247     SUBWF 0x47, W                      376:       subwf   candle_index,W      ; candle_index is # you've already tested before rotating
0163  1903     BTFSC STATUS, 0x2                  377:       btfsc   STATUS,Z
0164  298B     GOTO 0x18B                         378:   	goto    end_operation
0165  2189     CALL 0x189                         379:   	call    ROTATEMOTOR          ; else rotate motor and n++
0166  0AC7     INCF 0x47, F                       380:   	incf    candle_index, F
0167  0A84     INCF FSR, F                        381:       incf    FSR, F
                                                  382:   
                                                  383:   detect_candle
0168  1C85     BTFSS PORTA, 0x1                   384:   	btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
0169  296D     GOTO 0x16D                         385:   	goto    test_candle     ;yes candle, go test it
016A  3000     MOVLW 0x0                          386:       movlf   D'0', INDF      ;no candle, state = not present
016B  0080     MOVWF INDF
016C  2961     GOTO 0x161                         387:   	goto rotate                 ;and go try next
                                                  388:   
                                                  389:   test_candle
016D  0AAC     INCF 0x2C, F                       390:   	incf    num_tot, F			; keeping track of total number of candles
                                                  391:   	; Assume candle is already turned on
016E  01C8     CLRF 0x48                          392:   	clrf    photocount
016F  24C9     CALL 0x4C9                         393:   	call    HalfS       ; delay 2 sec or whatever
0170  24C9     CALL 0x4C9                         394:      call    HalfS
0171  24C9     CALL 0x4C9                         395:      call    HalfS
0172  24C9     CALL 0x4C9                         396:      call    HalfS
0173  0848     MOVF 0x48, W                       397:   	movff   photocount, photoval        ;to ensure it wont change again
0174  00C9     MOVWF 0x49
                                                  398:   check_threshold1
0175  300F     MOVLW 0xF                          399:       movlw    threshold1
0176  0249     SUBWF 0x49, W                      400:       subwf   photoval, W
0177  1803     BTFSC STATUS, 0x0                  401:       btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
0178  297D     GOTO 0x17D                         402:       goto check_threshold2
0179  3002     MOVLW 0x2                          403:       movlf   D'2', INDF      ; < threshold 1 means led fail
017A  0080     MOVWF INDF
017B  0AAA     INCF 0x2A, F                       404:   	 incf    num_LF, F
017C  2987     GOTO 0x187                         405:       goto    end_test_candle
                                                  406:   check_threshold2
017D  3041     MOVLW 0x41                         407:       movlw    threshold2
017E  0249     SUBWF 0x49, W                      408:       subwf   photoval, W
017F  1803     BTFSC STATUS, 0x0                  409:       btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
0180  2984     GOTO 0x184                         410:       goto aboveboth
0181  3001     MOVLW 0x1                          411:       movlf   D'1', INDF      ; < threshold 2 means pass
0182  0080     MOVWF INDF
0183  2987     GOTO 0x187                         412:       goto    end_test_candle
                                                  413:   aboveboth
0184  3003     MOVLW 0x3                          414:      movlf   D'3', INDF       ;else flicker fail
0185  0080     MOVWF INDF
0186  0AAB     INCF 0x2B, F                       415:      incf    num_FF, F
                                                  416:   end_test_candle
0187  218A     CALL 0x18A                         417:   	call    TURNOFF     ;pulse solenoid to turn off candle
0188  2961     GOTO 0x161                         418:       goto    rotate
                                                  419:   
                                                  420:   
                                                  421:   ROTATEMOTOR ;rotates stepper motor 40deg
0189  0008     RETURN                             422:       return
                                                  423:   
                                                  424:   TURNOFF ;pulses solenoid to turn off candle
018A  0008     RETURN                             425:       return
                                                  426:    ;****************************************************
                                                  427:   
                                                  428:   end_operation
                                                  429:           ;Turn off the IR
                                                  430:           ;bcf     IRLIGHT
                                                  431:   
                                                  432:           ; Stop the timer
018B  128B     BCF INTCON, 0x5                    433:            bcf         INTCON, T0IE  ;disable Timer0 interrupt
                                                  434:   
                                                  435:   
                                                  436:           ;GOOD PLACE TO SAVE INFO FOR LOGS
                                                  437:   
                                                  438:   
                                                  439:           ; Display ending messages
018C  24FF     CALL 0x4FF                         440:           call       Clear_Display
018D  01B9     CLRF 0x39                          441:           Display    End_Msg          ; "Complete"
018E  0103     CLRW
018F  0839     MOVF 0x39, W
0190  2020     CALL 0x20
0191  3A00     XORLW 0x0
0192  1903     BTFSC STATUS, 0x2
0193  2997     GOTO 0x197
0194  2514     CALL 0x514
0195  0AB9     INCF 0x39, F
0196  298F     GOTO 0x18F
0197  24C9     CALL 0x4C9                         442:           call       HalfS
0198  2371     CALL 0x371                         443:           call       time             ; "Operation time: X sec"
0199  24C9     CALL 0x4C9                         444:           call       HalfS
019A  24C9     CALL 0x4C9                         445:           call       HalfS
019B  22F1     CALL 0x2F1                         446:           call       summary          ; "Total candles: X. Defective: Y"
019C  24C9     CALL 0x4C9                         447:           call       HalfS
019D  24C9     CALL 0x4C9                         448:           call       HalfS
019E  2322     CALL 0x322                         449:           call       defective        ; "FF: a b c. LF: d e f"
                                                  450:   ;-----------------------------------------------------------------------
                                                  451:   ; Data display interface
                                                  452:   
019F  1C86     BTFSS PORTB, 0x1                   453:   poll     btfss		PORTB,1     ;Wait until data is available from the keypad
01A0  299F     GOTO 0x19F                         454:            goto		$-1
                                                  455:   
01A1  0E06     SWAPF PORTB, W                     456:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
01A2  390F     ANDLW 0xF                          457:            andlw		0x0F
01A3  2219     CALL 0x219                         458:            call       information ;Do the right thing
                                                  459:   
01A4  1886     BTFSC PORTB, 0x1                   460:            btfsc		PORTB,1     ;Wait until key is released
01A5  29A4     GOTO 0x1A4                         461:            goto		$-1
01A6  299F     GOTO 0x19F                         462:            goto       poll
                                                  463:   
                                                  464:   
                                                  465:   ;-------------------------------------------------------------------------
                                                  466:   ; LOGS INTERFACE            (DONT ACTUALLY HAVE LOGS YET!)
                                                  467:   ; Eventually this will show logs
                                                  468:   ; Right now it just displays random crap
                                                  469:   ; Access from STANDBY and return to STANDBY
                                                  470:   
                                                  471:   logs
01A7  24FF     CALL 0x4FF                         472:       call    Clear_Display
01A8  01B9     CLRF 0x39                          473:       Display Logs_Msg1
01A9  0103     CLRW
01AA  0839     MOVF 0x39, W
01AB  209D     CALL 0x9D
01AC  3A00     XORLW 0x0
01AD  1903     BTFSC STATUS, 0x2
01AE  29B2     GOTO 0x1B2
01AF  2514     CALL 0x514
01B0  0AB9     INCF 0x39, F
01B1  29AA     GOTO 0x1AA
01B2  2502     CALL 0x502                         474:       call    Switch_Lines
01B3  01B9     CLRF 0x39                          475:       Display Logs_Msg2
01B4  0103     CLRW
01B5  0839     MOVF 0x39, W
01B6  20AD     CALL 0xAD
01B7  3A00     XORLW 0x0
01B8  1903     BTFSC STATUS, 0x2
01B9  29BD     GOTO 0x1BD
01BA  2514     CALL 0x514
01BB  0AB9     INCF 0x39, F
01BC  29B5     GOTO 0x1B5
                                                  476:   
                                                  477:   polling
01BD  1C86     BTFSS PORTB, 0x1                   478:       btfss		PORTB,1     ;Wait until data is available from the keypad
01BE  29BD     GOTO 0x1BD                         479:       goto		$-1
                                                  480:   
01BF  0E06     SWAPF PORTB, W                     481:       swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
01C0  390F     ANDLW 0xF                          482:       andlw		0x0F
01C1  00B7     MOVWF 0x37                         483:       movwf       keytemp     ; Save which key was pressed
                                                  484:   
                                                  485:   check_log1
01C2  3A00     XORLW 0x0                          486:       xorlw   0x0         ;will be all zeros if its 1
01C3  1D03     BTFSS STATUS, 0x2                  487:       btfss   STATUS,Z    ;and Z will be high, so skip
01C4  29D2     GOTO 0x1D2                         488:       goto    check_log2
01C5  24FF     CALL 0x4FF                         489:       call    Clear_Display
01C6  01B9     CLRF 0x39                          490:       Display None
01C7  0103     CLRW
01C8  0839     MOVF 0x39, W
01C9  2095     CALL 0x95
01CA  3A00     XORLW 0x0
01CB  1903     BTFSC STATUS, 0x2
01CC  29D0     GOTO 0x1D0
01CD  2514     CALL 0x514
01CE  0AB9     INCF 0x39, F
01CF  29C8     GOTO 0x1C8
01D0  24C9     CALL 0x4C9                         491:       call    HalfS
01D1  29A7     GOTO 0x1A7                         492:       goto    logs
                                                  493:   
                                                  494:   check_log2
01D2  0837     MOVF 0x37, W                       495:       movf    keytemp, W
01D3  3A01     XORLW 0x1                          496:       xorlw   0x1
01D4  1D03     BTFSS STATUS, 0x2                  497:       btfss   STATUS,Z
01D5  29E3     GOTO 0x1E3                         498:       goto    check_log3
01D6  24FF     CALL 0x4FF                         499:       call    Clear_Display
01D7  01B9     CLRF 0x39                          500:       Display None
01D8  0103     CLRW
01D9  0839     MOVF 0x39, W
01DA  2095     CALL 0x95
01DB  3A00     XORLW 0x0
01DC  1903     BTFSC STATUS, 0x2
01DD  29E1     GOTO 0x1E1
01DE  2514     CALL 0x514
01DF  0AB9     INCF 0x39, F
01E0  29D9     GOTO 0x1D9
01E1  24C9     CALL 0x4C9                         501:       call    HalfS
01E2  29A7     GOTO 0x1A7                         502:       goto    logs
                                                  503:   
                                                  504:   check_log3
01E3  0837     MOVF 0x37, W                       505:       movf    keytemp, W
01E4  3A02     XORLW 0x2                          506:       xorlw   0x2
01E5  1D03     BTFSS STATUS, 0x2                  507:       btfss   STATUS,Z
01E6  29F4     GOTO 0x1F4                         508:       goto    check_log4
01E7  24FF     CALL 0x4FF                         509:       call    Clear_Display
01E8  01B9     CLRF 0x39                          510:       Display None
01E9  0103     CLRW
01EA  0839     MOVF 0x39, W
01EB  2095     CALL 0x95
01EC  3A00     XORLW 0x0
01ED  1903     BTFSC STATUS, 0x2
01EE  29F2     GOTO 0x1F2
01EF  2514     CALL 0x514
01F0  0AB9     INCF 0x39, F
01F1  29EA     GOTO 0x1EA
01F2  24C9     CALL 0x4C9                         511:       call    HalfS
01F3  29A7     GOTO 0x1A7                         512:       goto    logs
                                                  513:   
                                                  514:   check_log4
01F4  0837     MOVF 0x37, W                       515:       movf    keytemp, W
01F5  3A04     XORLW 0x4                          516:       xorlw   0x4
01F6  1D03     BTFSS STATUS, 0x2                  517:       btfss   STATUS,Z
01F7  2A05     GOTO 0x205                         518:       goto    check_done
01F8  24FF     CALL 0x4FF                         519:       call    Clear_Display
01F9  01B9     CLRF 0x39                          520:       Display None
01FA  0103     CLRW
01FB  0839     MOVF 0x39, W
01FC  2095     CALL 0x95
01FD  3A00     XORLW 0x0
01FE  1903     BTFSC STATUS, 0x2
01FF  2A03     GOTO 0x203
0200  2514     CALL 0x514
0201  0AB9     INCF 0x39, F
0202  29FB     GOTO 0x1FB
0203  24C9     CALL 0x4C9                         521:       call    HalfS
0204  29A7     GOTO 0x1A7                         522:       goto    logs
                                                  523:   
                                                  524:   check_done
0205  0837     MOVF 0x37, W                       525:       movf    keytemp, W
0206  3A0D     XORLW 0xD                          526:       xorlw   0xD
0207  1D03     BTFSS STATUS, 0x2                  527:       btfss   STATUS,Z
0208  2A16     GOTO 0x216                         528:       goto    badkey
0209  24FF     CALL 0x4FF                         529:       call    Clear_Display
020A  01B9     CLRF 0x39                          530:       Display Standby_Msg
020B  0103     CLRW
020C  0839     MOVF 0x39, W
020D  2005     CALL 0x5
020E  3A00     XORLW 0x0
020F  1903     BTFSC STATUS, 0x2
0210  2A14     GOTO 0x214
0211  2514     CALL 0x514
0212  0AB9     INCF 0x39, F
0213  2A0C     GOTO 0x20C
0214  2502     CALL 0x502                         531:       call    Switch_Lines
0215  28DE     GOTO 0xDE                          532:       goto    waiting
                                                  533:   
                                                  534:   badkey
0216  1886     BTFSC PORTB, 0x1                   535:       btfsc		PORTB,1     ;Wait until key is released
0217  2A16     GOTO 0x216                         536:       goto		$-1
0218  29BD     GOTO 0x1BD                         537:       goto        polling
                                                  538:     
                                                  539:   ; END OF MAIN PROGRAM
                                                  540:   ;------------------------------------------------------------
                                                  541:   
                                                  542:   
                                                  543:   ;***************************************
                                                  544:   ; DATA DISPLAY ROUTINE
                                                  545:   ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                                                  546:   ; Determines which key it was and displays appropriate info / branch
                                                  547:   ;***************************************
                                                  548:   
                                                  549:   information
0219  00B7     MOVWF 0x37                         550:       movwf   keytemp             ; Save which key was pressed
                                                  551:   
                                                  552:   check_1
021A  3A00     XORLW 0x0                          553:       xorlw   0x0         ;will be all zeros if its 1
021B  1D03     BTFSS STATUS, 0x2                  554:       btfss   STATUS,Z    ;and Z will be high, so skip
021C  2A25     GOTO 0x225                         555:       goto    check_2
021D  24FF     CALL 0x4FF                         556:       call    Clear_Display
021E  3001     MOVLW 0x1                          557:       writenum 0x1
021F  3E30     ADDLW 0x30
0220  00BB     MOVWF 0x3B
0221  2514     CALL 0x514
0222  0821     MOVF 0x21, W                       558:       movf    state1, W
0223  22B4     CALL 0x2B4                         559:       call    display_state
0224  0008     RETURN                             560:       return
                                                  561:   
                                                  562:   check_2
0225  0837     MOVF 0x37, W                       563:       movf    keytemp, W
0226  3A01     XORLW 0x1                          564:       xorlw   0x1
0227  1D03     BTFSS STATUS, 0x2                  565:       btfss   STATUS,Z
0228  2A31     GOTO 0x231                         566:       goto    check_3
0229  24FF     CALL 0x4FF                         567:       call    Clear_Display
022A  3002     MOVLW 0x2                          568:       writenum 0x2
022B  3E30     ADDLW 0x30
022C  00BB     MOVWF 0x3B
022D  2514     CALL 0x514
022E  0822     MOVF 0x22, W                       569:       movf    state2, W
022F  22B4     CALL 0x2B4                         570:       call    display_state
0230  0008     RETURN                             571:       return
                                                  572:   
                                                  573:   check_3
0231  0837     MOVF 0x37, W                       574:       movf    keytemp, W
0232  3A02     XORLW 0x2                          575:       xorlw   0x2
0233  1D03     BTFSS STATUS, 0x2                  576:       btfss   STATUS,Z
0234  2A3D     GOTO 0x23D                         577:       goto    check_4
0235  24FF     CALL 0x4FF                         578:       call    Clear_Display
0236  3003     MOVLW 0x3                          579:       writenum 0x3
0237  3E30     ADDLW 0x30
0238  00BB     MOVWF 0x3B
0239  2514     CALL 0x514
023A  0823     MOVF 0x23, W                       580:       movf    state3, W
023B  22B4     CALL 0x2B4                         581:       call    display_state
023C  0008     RETURN                             582:       return
                                                  583:   
                                                  584:   check_4
023D  0837     MOVF 0x37, W                       585:       movf    keytemp, W
023E  3A04     XORLW 0x4                          586:       xorlw   0x4
023F  1D03     BTFSS STATUS, 0x2                  587:       btfss   STATUS,Z
0240  2A49     GOTO 0x249                         588:       goto    check_5
0241  24FF     CALL 0x4FF                         589:       call    Clear_Display
0242  3004     MOVLW 0x4                          590:       writenum 0x4
0243  3E30     ADDLW 0x30
0244  00BB     MOVWF 0x3B
0245  2514     CALL 0x514
0246  0824     MOVF 0x24, W                       591:       movf    state4, W
0247  22B4     CALL 0x2B4                         592:       call    display_state
0248  0008     RETURN                             593:       return
                                                  594:   
                                                  595:   check_5
0249  0837     MOVF 0x37, W                       596:       movf    keytemp, W
024A  3A05     XORLW 0x5                          597:       xorlw   0x5
024B  1D03     BTFSS STATUS, 0x2                  598:       btfss   STATUS,Z
024C  2A55     GOTO 0x255                         599:       goto    check_6
024D  24FF     CALL 0x4FF                         600:       call    Clear_Display
024E  3005     MOVLW 0x5                          601:       writenum 0x5
024F  3E30     ADDLW 0x30
0250  00BB     MOVWF 0x3B
0251  2514     CALL 0x514
0252  0825     MOVF 0x25, W                       602:       movf    state5, W
0253  22B4     CALL 0x2B4                         603:       call    display_state
0254  0008     RETURN                             604:       return
                                                  605:   
                                                  606:   check_6
0255  0837     MOVF 0x37, W                       607:       movf    keytemp, W
0256  3A06     XORLW 0x6                          608:       xorlw   0x6
0257  1D03     BTFSS STATUS, 0x2                  609:       btfss   STATUS,Z
0258  2A61     GOTO 0x261                         610:       goto    check_7
0259  24FF     CALL 0x4FF                         611:       call    Clear_Display
025A  3006     MOVLW 0x6                          612:       writenum 0x6
025B  3E30     ADDLW 0x30
025C  00BB     MOVWF 0x3B
025D  2514     CALL 0x514
025E  0826     MOVF 0x26, W                       613:       movf    state6, W
025F  22B4     CALL 0x2B4                         614:       call    display_state
0260  0008     RETURN                             615:       return
                                                  616:   
                                                  617:   check_7
0261  0837     MOVF 0x37, W                       618:       movf    keytemp, W
0262  3A08     XORLW 0x8                          619:       xorlw   0x8
0263  1D03     BTFSS STATUS, 0x2                  620:       btfss   STATUS,Z
0264  2A6D     GOTO 0x26D                         621:       goto    check_8
0265  24FF     CALL 0x4FF                         622:       call    Clear_Display
0266  3007     MOVLW 0x7                          623:       writenum 0x7
0267  3E30     ADDLW 0x30
0268  00BB     MOVWF 0x3B
0269  2514     CALL 0x514
026A  0827     MOVF 0x27, W                       624:       movf    state7, W
026B  22B4     CALL 0x2B4                         625:       call    display_state
026C  0008     RETURN                             626:       return
                                                  627:   
                                                  628:   check_8
026D  0837     MOVF 0x37, W                       629:       movf    keytemp, W
026E  3A09     XORLW 0x9                          630:       xorlw   0x9
026F  1D03     BTFSS STATUS, 0x2                  631:       btfss   STATUS,Z
0270  2A79     GOTO 0x279                         632:       goto    check_9
0271  24FF     CALL 0x4FF                         633:       call    Clear_Display
0272  3008     MOVLW 0x8                          634:       writenum 0x8
0273  3E30     ADDLW 0x30
0274  00BB     MOVWF 0x3B
0275  2514     CALL 0x514
0276  0828     MOVF 0x28, W                       635:       movf    state8, W
0277  22B4     CALL 0x2B4                         636:       call    display_state
0278  0008     RETURN                             637:       return
                                                  638:   
                                                  639:   check_9
0279  0837     MOVF 0x37, W                       640:       movf    keytemp, W
027A  3A0A     XORLW 0xA                          641:       xorlw   0xA
027B  1D03     BTFSS STATUS, 0x2                  642:       btfss   STATUS,Z
027C  2A85     GOTO 0x285                         643:       goto    check_summary
027D  24FF     CALL 0x4FF                         644:       call    Clear_Display
027E  3009     MOVLW 0x9                          645:       writenum 0x9
027F  3E30     ADDLW 0x30
0280  00BB     MOVWF 0x3B
0281  2514     CALL 0x514
0282  0829     MOVF 0x29, W                       646:       movf    state9, W
0283  22B4     CALL 0x2B4                         647:       call    display_state
0284  0008     RETURN                             648:       return
                                                  649:   
                                                  650:   check_summary
0285  0837     MOVF 0x37, W                       651:       movf    keytemp, W
0286  3A03     XORLW 0x3                          652:       xorlw   0x3
0287  1D03     BTFSS STATUS, 0x2                  653:       btfss   STATUS,Z
0288  2A8B     GOTO 0x28B                         654:       goto    check_defective
0289  22F1     CALL 0x2F1                         655:       call    summary
028A  0008     RETURN                             656:       return
                                                  657:   
                                                  658:   check_defective
028B  0837     MOVF 0x37, W                       659:       movf    keytemp, W
028C  3A07     XORLW 0x7                          660:       xorlw   0x7
028D  1D03     BTFSS STATUS, 0x2                  661:       btfss   STATUS,Z
028E  2A91     GOTO 0x291                         662:       goto    check_time
028F  2322     CALL 0x322                         663:       call    defective
0290  0008     RETURN                             664:       return
                                                  665:   
                                                  666:   check_time
0291  0837     MOVF 0x37, W                       667:       movf    keytemp, W
0292  3A0B     XORLW 0xB                          668:       xorlw   0xB
0293  1D03     BTFSS STATUS, 0x2                  669:       btfss   STATUS,Z
0294  2A97     GOTO 0x297                         670:       goto    check_export
0295  2371     CALL 0x371                         671:       call    time
0296  0008     RETURN                             672:       return
                                                  673:   
                                                  674:   check_export               
0297  0837     MOVF 0x37, W                       675:       movf    keytemp, W
0298  3A0F     XORLW 0xF                          676:       xorlw   0xF
0299  1D03     BTFSS STATUS, 0x2                  677:       btfss   STATUS,Z
029A  2A9D     GOTO 0x29D                         678:       goto    check_standby
029B  239C     CALL 0x39C                         679:       call    export
029C  0008     RETURN                             680:       return
                                                  681:   
                                                  682:   check_standby
029D  0837     MOVF 0x37, W                       683:       movf    keytemp, W
029E  3A0D     XORLW 0xD                          684:       xorlw   0xD
029F  1D03     BTFSS STATUS, 0x2                  685:       btfss   STATUS,Z
02A0  2AAE     GOTO 0x2AE                         686:       goto    check_start
02A1  24FF     CALL 0x4FF                         687:       call    Clear_Display
02A2  01B9     CLRF 0x39                          688:       Display Standby_Msg
02A3  0103     CLRW
02A4  0839     MOVF 0x39, W
02A5  2005     CALL 0x5
02A6  3A00     XORLW 0x0
02A7  1903     BTFSC STATUS, 0x2
02A8  2AAC     GOTO 0x2AC
02A9  2514     CALL 0x514
02AA  0AB9     INCF 0x39, F
02AB  2AA4     GOTO 0x2A4
02AC  2502     CALL 0x502                         689:       call    Switch_Lines
02AD  28DE     GOTO 0xDE                          690:       goto    waiting
                                                  691:   
                                                  692:   check_start
02AE  0837     MOVF 0x37, W                       693:       movf    keytemp, W
02AF  3A0C     XORLW 0xC                          694:       xorlw   0xC
02B0  1D03     BTFSS STATUS, 0x2                  695:       btfss   STATUS,Z
02B1  2AB3     GOTO 0x2B3                         696:       goto    default_key
02B2  2946     GOTO 0x146                         697:       goto    start
                                                  698:   
                                                  699:   default_key         ; will never get here
02B3  0008     RETURN                             700:       return
                                                  701:   
                                                  702:   
                                                  703:   ;Display state subroutine
                                                  704:   ;stateN is in W
                                                  705:   display_state
02B4  00B8     MOVWF 0x38                         706:       movwf  statetemp    ; save stateN
                                                  707:   
                                                  708:   check_none
02B5  3A00     XORLW 0x0                          709:       xorlw   0x0
02B6  1D03     BTFSS STATUS, 0x2                  710:       btfss   STATUS,Z
02B7  2AC3     GOTO 0x2C3                         711:       goto    check_pass
02B8  01B9     CLRF 0x39                          712:       Display Not_present
02B9  0103     CLRW
02BA  0839     MOVF 0x39, W
02BB  2045     CALL 0x45
02BC  3A00     XORLW 0x0
02BD  1903     BTFSC STATUS, 0x2
02BE  2AC2     GOTO 0x2C2
02BF  2514     CALL 0x514
02C0  0AB9     INCF 0x39, F
02C1  2ABA     GOTO 0x2BA
02C2  0008     RETURN                             713:       return
                                                  714:   
                                                  715:   check_pass
02C3  0838     MOVF 0x38, W                       716:       movf    statetemp, W
02C4  3A01     XORLW 0x1                          717:       xorlw   0x1
02C5  1D03     BTFSS STATUS, 0x2                  718:       btfss   STATUS,Z
02C6  2AD2     GOTO 0x2D2                         719:       goto    check_LED
02C7  01B9     CLRF 0x39                          720:       Display Pass
02C8  0103     CLRW
02C9  0839     MOVF 0x39, W
02CA  2054     CALL 0x54
02CB  3A00     XORLW 0x0
02CC  1903     BTFSC STATUS, 0x2
02CD  2AD1     GOTO 0x2D1
02CE  2514     CALL 0x514
02CF  0AB9     INCF 0x39, F
02D0  2AC9     GOTO 0x2C9
02D1  0008     RETURN                             721:       return
                                                  722:   
                                                  723:   check_LED
02D2  0838     MOVF 0x38, W                       724:       movf    statetemp, W
02D3  3A02     XORLW 0x2                          725:       xorlw   0x2
02D4  1D03     BTFSS STATUS, 0x2                  726:       btfss   STATUS,Z
02D5  2AE1     GOTO 0x2E1                         727:       goto    check_flick
02D6  01B9     CLRF 0x39                          728:       Display LED_fail
02D7  0103     CLRW
02D8  0839     MOVF 0x39, W
02D9  205C     CALL 0x5C
02DA  3A00     XORLW 0x0
02DB  1903     BTFSC STATUS, 0x2
02DC  2AE0     GOTO 0x2E0
02DD  2514     CALL 0x514
02DE  0AB9     INCF 0x39, F
02DF  2AD8     GOTO 0x2D8
02E0  0008     RETURN                             729:       return
                                                  730:   
                                                  731:   check_flick
02E1  0838     MOVF 0x38, W                       732:       movf    statetemp, W
02E2  3A03     XORLW 0x3                          733:       xorlw   0x3
02E3  1D03     BTFSS STATUS, 0x2                  734:       btfss   STATUS,Z
02E4  2AF0     GOTO 0x2F0                         735:       goto    default_state
02E5  01B9     CLRF 0x39                          736:       Display Flick_fail
02E6  0103     CLRW
02E7  0839     MOVF 0x39, W
02E8  2068     CALL 0x68
02E9  3A00     XORLW 0x0
02EA  1903     BTFSC STATUS, 0x2
02EB  2AEF     GOTO 0x2EF
02EC  2514     CALL 0x514
02ED  0AB9     INCF 0x39, F
02EE  2AE7     GOTO 0x2E7
02EF  0008     RETURN                             737:       return
                                                  738:   
                                                  739:   default_state   ; should never get here
02F0  0008     RETURN                             740:       return
                                                  741:   
                                                  742:   ; Summary Subroutine
                                                  743:   ; Displays total number of candles and number of defective candles
                                                  744:   ; Reads data from num_tot, num_LF, num_FF
                                                  745:   summary
02F1  24FF     CALL 0x4FF                         746:       call            Clear_Display
02F2  01B9     CLRF 0x39                          747:       Display         Total_Msg
02F3  0103     CLRW
02F4  0839     MOVF 0x39, W
02F5  2078     CALL 0x78
02F6  3A00     XORLW 0x0
02F7  1903     BTFSC STATUS, 0x2
02F8  2AFC     GOTO 0x2FC
02F9  2514     CALL 0x514
02FA  0AB9     INCF 0x39, F
02FB  2AF4     GOTO 0x2F4
02FC  082C     MOVF 0x2C, W                       748:       writenum_reg    num_tot
02FD  3E30     ADDLW 0x30
02FE  00BB     MOVWF 0x3B
02FF  2514     CALL 0x514
0300  2502     CALL 0x502                         749:       call            Switch_Lines
0301  01B9     CLRF 0x39                          750:       Display         LF
0302  0103     CLRW
0303  0839     MOVF 0x39, W
0304  2089     CALL 0x89
0305  3A00     XORLW 0x0
0306  1903     BTFSC STATUS, 0x2
0307  2B0B     GOTO 0x30B
0308  2514     CALL 0x514
0309  0AB9     INCF 0x39, F
030A  2B03     GOTO 0x303
030B  082A     MOVF 0x2A, W                       751:       writenum_reg    num_LF
030C  3E30     ADDLW 0x30
030D  00BB     MOVWF 0x3B
030E  2514     CALL 0x514
030F  3014     MOVLW 0x14                         752:       spacebar
0310  2505     CALL 0x505
0311  3014     MOVLW 0x14                         753:       spacebar
0312  2505     CALL 0x505
0313  01B9     CLRF 0x39                          754:       Display         FF
0314  0103     CLRW
0315  0839     MOVF 0x39, W
0316  208F     CALL 0x8F
0317  3A00     XORLW 0x0
0318  1903     BTFSC STATUS, 0x2
0319  2B1D     GOTO 0x31D
031A  2514     CALL 0x514
031B  0AB9     INCF 0x39, F
031C  2B15     GOTO 0x315
031D  082B     MOVF 0x2B, W                       755:       writenum_reg    num_FF
031E  3E30     ADDLW 0x30
031F  00BB     MOVWF 0x3B
0320  2514     CALL 0x514
0321  0008     RETURN                             756:       return
                                                  757:   
                                                  758:   ; Defective candles Subroutine
                                                  759:   ; Displays index of each defective candle (LF or FF)
                                                  760:   ; Reads data from state1 - state9
                                                  761:   defective
0322  24FF     CALL 0x4FF                         762:       call            Clear_Display
                                                  763:   
0323  01B9     CLRF 0x39                          764:       Display         LF              ; first look at LF
0324  0103     CLRW
0325  0839     MOVF 0x39, W
0326  2089     CALL 0x89
0327  3A00     XORLW 0x0
0328  1903     BTFSC STATUS, 0x2
0329  2B2D     GOTO 0x32D
032A  2514     CALL 0x514
032B  0AB9     INCF 0x39, F
032C  2B25     GOTO 0x325
032D  08AA     MOVF 0x2A, F                       765:       movf            num_LF, F
032E  1D03     BTFSS STATUS, 0x2                  766:       btfss           STATUS,Z         ;if none LF, just say "none"
032F  2B3B     GOTO 0x33B                         767:       goto            check_LF
0330  01B9     CLRF 0x39                          768:       Display         None
0331  0103     CLRW
0332  0839     MOVF 0x39, W
0333  2095     CALL 0x95
0334  3A00     XORLW 0x0
0335  1903     BTFSC STATUS, 0x2
0336  2B3A     GOTO 0x33A
0337  2514     CALL 0x514
0338  0AB9     INCF 0x39, F
0339  2B32     GOTO 0x332
033A  2B3D     GOTO 0x33D                         769:       goto            now_FF
                                                  770:   
                                                  771:   check_LF                            ; list all LF candles
033B  3002     MOVLW 0x2                          772:       movlw           B'00000010'
033C  2359     CALL 0x359                         773:       call            check_for_fail
                                                  774:   
                                                  775:   now_FF                              ; now look at FF
033D  2502     CALL 0x502                         776:       call            Switch_Lines
033E  01B9     CLRF 0x39                          777:       Display         FF
033F  0103     CLRW
0340  0839     MOVF 0x39, W
0341  208F     CALL 0x8F
0342  3A00     XORLW 0x0
0343  1903     BTFSC STATUS, 0x2
0344  2B48     GOTO 0x348
0345  2514     CALL 0x514
0346  0AB9     INCF 0x39, F
0347  2B40     GOTO 0x340
0348  08AB     MOVF 0x2B, F                       778:       movf            num_FF, F
0349  1D03     BTFSS STATUS, 0x2                  779:       btfss           STATUS,Z         ;if none FF, just say "none"
034A  2B56     GOTO 0x356                         780:       goto            check_FF
034B  01B9     CLRF 0x39                          781:       Display         None
034C  0103     CLRW
034D  0839     MOVF 0x39, W
034E  2095     CALL 0x95
034F  3A00     XORLW 0x0
0350  1903     BTFSC STATUS, 0x2
0351  2B55     GOTO 0x355
0352  2514     CALL 0x514
0353  0AB9     INCF 0x39, F
0354  2B4D     GOTO 0x34D
0355  0008     RETURN                             782:       return
                                                  783:   
                                                  784:   check_FF                            ; list all FF candles
0356  3003     MOVLW 0x3                          785:       movlw           B'00000011'
0357  2359     CALL 0x359                         786:       call            check_for_fail
0358  0008     RETURN                             787:       return
                                                  788:   
                                                  789:   check_for_fail  ;lists all candles that have status currently in W "stateX"
0359  00B8     MOVWF 0x38                         790:       movwf   statetemp
035A  3000     MOVLW 0x0                          791:   	movlf	D'0', candle_index
035B  00C7     MOVWF 0x47
035C  1383     BCF STATUS, 0x7                    792:   	bcf	STATUS, IRP
035D  3020     MOVLW 0x20                         793:   	movlf	0x20, FSR           ;index of right before state1
035E  0084     MOVWF FSR
                                                  794:   check_next
035F  3009     MOVLW 0x9                          795:   	movlw	D'9'                ;exit loop if at 9
0360  0247     SUBWF 0x47, W                      796:   	subwf	candle_index, W
0361  1803     BTFSC STATUS, 0x0                  797:   	btfsc	STATUS,W
0362  2B70     GOTO 0x370                         798:   	goto	end_check_fail
0363  0A84     INCF FSR, F                        799:   	incf	FSR,F               ; increment
0364  0AC7     INCF 0x47, F                       800:   	incf	candle_index,F
0365  0838     MOVF 0x38, W                       801:   	movf	statetemp, W		;see if stateN = stateX
0366  0200     SUBWF INDF, W                      802:   	subwf	INDF, W
0367  1D03     BTFSS STATUS, 0x2                  803:   	btfss	STATUS, Z
0368  2B5F     GOTO 0x35F                         804:   	goto	check_next		;if not, go to next
0369  0847     MOVF 0x47, W                       805:   	writenum_reg	candle_index	;if so, write down the number
036A  3E30     ADDLW 0x30
036B  00BB     MOVWF 0x3B
036C  2514     CALL 0x514
036D  3014     MOVLW 0x14                         806:   	spacebar
036E  2505     CALL 0x505
036F  2B5F     GOTO 0x35F                         807:   	goto check_next
                                                  808:   end_check_fail
0370  0008     RETURN                             809:   	return
                                                  810:   
                                                  811:   ; Time subroutine
                                                  812:   ; Right now this takes the time in seconds as a binary number in op_time
                                                  813:   ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                                                  814:   ; incremented every second. However I may just take the stop time - start time
                                                  815:   ; from the RTC data so this might change a lot.
                                                  816:   time
0371  24FF     CALL 0x4FF                         817:       call    Clear_Display
0372  01B9     CLRF 0x39                          818:       Display Time_Msg
0373  0103     CLRW
0374  0839     MOVF 0x39, W
0375  202A     CALL 0x2A
0376  3A00     XORLW 0x0
0377  1903     BTFSC STATUS, 0x2
0378  2B7C     GOTO 0x37C
0379  2514     CALL 0x514
037A  0AB9     INCF 0x39, F
037B  2B74     GOTO 0x374
037C  2502     CALL 0x502                         819:       call    Switch_Lines
037D  0820     MOVF 0x20, W                       820:       movf    op_time, W
037E  2496     CALL 0x496                         821:       call    big_number
037F  08C2     MOVF 0x42, F                       822:       movf    huns, F
0380  1903     BTFSC STATUS, 0x2                  823:       btfsc   STATUS,Z        ;if huns is zero don't display it
0381  2B86     GOTO 0x386                         824:       goto    no_huns
0382  0842     MOVF 0x42, W                       825:       writenum_reg    huns
0383  3E30     ADDLW 0x30
0384  00BB     MOVWF 0x3B
0385  2514     CALL 0x514
                                                  826:   no_huns
0386  08C3     MOVF 0x43, F                       827:       movf    tens, F
0387  1903     BTFSC STATUS, 0x2                  828:       btfsc   STATUS,Z        ;if tens is zero don't display it
0388  2B8D     GOTO 0x38D                         829:       goto    no_tens
0389  0843     MOVF 0x43, W                       830:       writenum_reg    tens
038A  3E30     ADDLW 0x30
038B  00BB     MOVWF 0x3B
038C  2514     CALL 0x514
                                                  831:   no_tens
038D  0844     MOVF 0x44, W                       832:       writenum_reg    ones
038E  3E30     ADDLW 0x30
038F  00BB     MOVWF 0x3B
0390  2514     CALL 0x514
0391  01B9     CLRF 0x39                          833:       Display Seconds
0392  0103     CLRW
0393  0839     MOVF 0x39, W
0394  203B     CALL 0x3B
0395  3A00     XORLW 0x0
0396  1903     BTFSC STATUS, 0x2
0397  2B9B     GOTO 0x39B
0398  2514     CALL 0x514
0399  0AB9     INCF 0x39, F
039A  2B93     GOTO 0x393
039B  0008     RETURN                             834:       return
                                                  835:   
                                                  836:   ; Export subroutine         
                                                  837:   ; Exports data from current run to hyperterminal
                                                  838:   ; reads start time and num_tot/num_ff/num_lf data
                                                  839:   export
039C  3007     MOVLW 0x7                          840:       printchar   0x7       ;makes a noise on the PC
039D  252F     CALL 0x52F
039E  300D     MOVLW 0xD                          841:       printchar   0xD       ;go back to left edge
039F  252F     CALL 0x52F
03A0  3054     MOVLW 0x54                         842:       printchar   "T"
03A1  252F     CALL 0x52F
03A2  3065     MOVLW 0x65                         843:       printchar   "e"
03A3  252F     CALL 0x52F
03A4  3073     MOVLW 0x73                         844:       printchar   "s"
03A5  252F     CALL 0x52F
03A6  3074     MOVLW 0x74                         845:       printchar   "t"
03A7  252F     CALL 0x52F
03A8  3020     MOVLW 0x20                         846:       printchar   " "
03A9  252F     CALL 0x52F
03AA  3061     MOVLW 0x61                         847:       printchar   "a"
03AB  252F     CALL 0x52F
03AC  3074     MOVLW 0x74                         848:       printchar   "t"
03AD  252F     CALL 0x52F
03AE  303A     MOVLW 0x3A                         849:       printchar   ":"
03AF  252F     CALL 0x52F
03B0  3020     MOVLW 0x20                         850:       printchar   " "
03B1  252F     CALL 0x52F
03B2  3032     MOVLW 0x32                         851:       printchar   "2"
03B3  252F     CALL 0x52F
03B4  3030     MOVLW 0x30                         852:       printchar   "0"
03B5  252F     CALL 0x52F
03B6  1283     BCF STATUS, 0x5                    853:       printASC   start_year10
03B7  1303     BCF STATUS, 0x6
03B8  082D     MOVF 0x2D, W
03B9  252F     CALL 0x52F
03BA  1283     BCF STATUS, 0x5                    854:       printASC   start_year1
03BB  1303     BCF STATUS, 0x6
03BC  082E     MOVF 0x2E, W
03BD  252F     CALL 0x52F
03BE  302F     MOVLW 0x2F                         855:       printchar   "/"
03BF  252F     CALL 0x52F
03C0  1283     BCF STATUS, 0x5                    856:       printASC   start_month10
03C1  1303     BCF STATUS, 0x6
03C2  082F     MOVF 0x2F, W
03C3  252F     CALL 0x52F
03C4  1283     BCF STATUS, 0x5                    857:       printASC   start_month1
03C5  1303     BCF STATUS, 0x6
03C6  0830     MOVF 0x30, W
03C7  252F     CALL 0x52F
03C8  302F     MOVLW 0x2F                         858:       printchar   "/"
03C9  252F     CALL 0x52F
03CA  1283     BCF STATUS, 0x5                    859:       printASC   start_date10
03CB  1303     BCF STATUS, 0x6
03CC  0831     MOVF 0x31, W
03CD  252F     CALL 0x52F
03CE  1283     BCF STATUS, 0x5                    860:       printASC   start_date1
03CF  1303     BCF STATUS, 0x6
03D0  0832     MOVF 0x32, W
03D1  252F     CALL 0x52F
03D2  3020     MOVLW 0x20                         861:       printchar   " "
03D3  252F     CALL 0x52F
03D4  1283     BCF STATUS, 0x5                    862:       printASC   start_hour10
03D5  1303     BCF STATUS, 0x6
03D6  0833     MOVF 0x33, W
03D7  252F     CALL 0x52F
03D8  1283     BCF STATUS, 0x5                    863:       printASC   start_hour1
03D9  1303     BCF STATUS, 0x6
03DA  0834     MOVF 0x34, W
03DB  252F     CALL 0x52F
03DC  303A     MOVLW 0x3A                         864:       printchar   ":"
03DD  252F     CALL 0x52F
03DE  1283     BCF STATUS, 0x5                    865:       printASC   start_min10
03DF  1303     BCF STATUS, 0x6
03E0  0835     MOVF 0x35, W
03E1  252F     CALL 0x52F
03E2  1283     BCF STATUS, 0x5                    866:       printASC   start_min1
03E3  1303     BCF STATUS, 0x6
03E4  0836     MOVF 0x36, W
03E5  252F     CALL 0x52F
03E6  300A     MOVLW 0xA                          867:       newline
03E7  252F     CALL 0x52F
03E8  300D     MOVLW 0xD
03E9  252F     CALL 0x52F
03EA  3054     MOVLW 0x54                         868:       printchar   "T"
03EB  252F     CALL 0x52F
03EC  3069     MOVLW 0x69                         869:       printchar   "i"
03ED  252F     CALL 0x52F
03EE  306D     MOVLW 0x6D                         870:       printchar   "m"
03EF  252F     CALL 0x52F
03F0  3065     MOVLW 0x65                         871:       printchar   "e"
03F1  252F     CALL 0x52F
03F2  303A     MOVLW 0x3A                         872:       printchar   ":"
03F3  252F     CALL 0x52F
03F4  3020     MOVLW 0x20                         873:       printchar   " "
03F5  252F     CALL 0x52F
03F6  3020     MOVLW 0x20                         874:       printchar   " "
03F7  252F     CALL 0x52F
03F8  3020     MOVLW 0x20                         875:       printchar   " "
03F9  252F     CALL 0x52F
03FA  3020     MOVLW 0x20                         876:       printchar   " "
03FB  252F     CALL 0x52F
03FC  1283     BCF STATUS, 0x5                    877:       banksel huns
03FD  1303     BCF STATUS, 0x6
03FE  08C2     MOVF 0x42, F                       878:       movf    huns, F
03FF  1903     BTFSC STATUS, 0x2                  879:       btfsc   STATUS,Z        ;if huns is zero don't display it
0400  2C06     GOTO 0x406                         880:       goto    nohuns
0401  1283     BCF STATUS, 0x5                    881:       printBCD   huns
0402  1303     BCF STATUS, 0x6
0403  0842     MOVF 0x42, W
0404  3E30     ADDLW 0x30
0405  252F     CALL 0x52F
                                                  882:   nohuns
0406  1283     BCF STATUS, 0x5                    883:       banksel tens
0407  1303     BCF STATUS, 0x6
0408  08C3     MOVF 0x43, F                       884:       movf    tens, F
0409  1903     BTFSC STATUS, 0x2                  885:       btfsc   STATUS,Z        ;if tens is zero don't display it
040A  2C10     GOTO 0x410                         886:       goto    notens
040B  1283     BCF STATUS, 0x5                    887:       printBCD   tens
040C  1303     BCF STATUS, 0x6
040D  0843     MOVF 0x43, W
040E  3E30     ADDLW 0x30
040F  252F     CALL 0x52F
                                                  888:   notens
0410  1283     BCF STATUS, 0x5                    889:       printBCD   ones
0411  1303     BCF STATUS, 0x6
0412  0844     MOVF 0x44, W
0413  3E30     ADDLW 0x30
0414  252F     CALL 0x52F
0415  3020     MOVLW 0x20                         890:       printchar   " "
0416  252F     CALL 0x52F
0417  3073     MOVLW 0x73                         891:       printchar   "s"
0418  252F     CALL 0x52F
0419  3065     MOVLW 0x65                         892:       printchar   "e"
041A  252F     CALL 0x52F
041B  3063     MOVLW 0x63                         893:       printchar   "c"
041C  252F     CALL 0x52F
041D  300A     MOVLW 0xA                          894:       newline
041E  252F     CALL 0x52F
041F  300D     MOVLW 0xD
0420  252F     CALL 0x52F
0421  3043     MOVLW 0x43                         895:       printchar   "C"
0422  252F     CALL 0x52F
0423  3061     MOVLW 0x61                         896:       printchar   "a"
0424  252F     CALL 0x52F
0425  306E     MOVLW 0x6E                         897:       printchar   "n"
0426  252F     CALL 0x52F
0427  3064     MOVLW 0x64                         898:       printchar   "d"
0428  252F     CALL 0x52F
0429  306C     MOVLW 0x6C                         899:       printchar   "l"
042A  252F     CALL 0x52F
042B  3065     MOVLW 0x65                         900:       printchar   "e"
042C  252F     CALL 0x52F
042D  3073     MOVLW 0x73                         901:       printchar   "s"
042E  252F     CALL 0x52F
042F  303A     MOVLW 0x3A                         902:       printchar   ":"
0430  252F     CALL 0x52F
0431  3020     MOVLW 0x20                         903:       printchar   " "
0432  252F     CALL 0x52F
0433  3020     MOVLW 0x20                         904:       printchar   " "
0434  252F     CALL 0x52F
0435  3020     MOVLW 0x20                         905:       printchar   " "
0436  252F     CALL 0x52F
0437  3020     MOVLW 0x20                         906:       printchar   " "
0438  252F     CALL 0x52F
0439  3020     MOVLW 0x20                         907:       printchar   " "
043A  252F     CALL 0x52F
043B  3020     MOVLW 0x20                         908:       printchar   " "
043C  252F     CALL 0x52F
043D  1283     BCF STATUS, 0x5                    909:       printBCD    num_tot
043E  1303     BCF STATUS, 0x6
043F  082C     MOVF 0x2C, W
0440  3E30     ADDLW 0x30
0441  252F     CALL 0x52F
0442  300A     MOVLW 0xA                          910:       newline
0443  252F     CALL 0x52F
0444  300D     MOVLW 0xD
0445  252F     CALL 0x52F
0446  304C     MOVLW 0x4C                         911:       printchar   "L"
0447  252F     CALL 0x52F
0448  3045     MOVLW 0x45                         912:       printchar   "E"
0449  252F     CALL 0x52F
044A  3044     MOVLW 0x44                         913:       printchar   "D"
044B  252F     CALL 0x52F
044C  3020     MOVLW 0x20                         914:       printchar   " "
044D  252F     CALL 0x52F
044E  3066     MOVLW 0x66                         915:       printchar   "f"
044F  252F     CALL 0x52F
0450  3061     MOVLW 0x61                         916:       printchar   "a"
0451  252F     CALL 0x52F
0452  3069     MOVLW 0x69                         917:       printchar   "i"
0453  252F     CALL 0x52F
0454  306C     MOVLW 0x6C                         918:       printchar   "l"
0455  252F     CALL 0x52F
0456  303A     MOVLW 0x3A                         919:       printchar   ":"
0457  252F     CALL 0x52F
0458  3020     MOVLW 0x20                         920:       printchar   " "
0459  252F     CALL 0x52F
045A  3020     MOVLW 0x20                         921:       printchar   " "
045B  252F     CALL 0x52F
045C  3020     MOVLW 0x20                         922:       printchar   " "
045D  252F     CALL 0x52F
045E  3020     MOVLW 0x20                         923:       printchar   " "
045F  252F     CALL 0x52F
0460  3020     MOVLW 0x20                         924:       printchar   " "
0461  252F     CALL 0x52F
0462  1283     BCF STATUS, 0x5                    925:       printBCD    num_LF
0463  1303     BCF STATUS, 0x6
0464  082A     MOVF 0x2A, W
0465  3E30     ADDLW 0x30
0466  252F     CALL 0x52F
0467  300A     MOVLW 0xA                          926:       newline
0468  252F     CALL 0x52F
0469  300D     MOVLW 0xD
046A  252F     CALL 0x52F
046B  3046     MOVLW 0x46                         927:       printchar   "F"
046C  252F     CALL 0x52F
046D  306C     MOVLW 0x6C                         928:       printchar   "l"
046E  252F     CALL 0x52F
046F  3069     MOVLW 0x69                         929:       printchar   "i"
0470  252F     CALL 0x52F
0471  3063     MOVLW 0x63                         930:       printchar   "c"
0472  252F     CALL 0x52F
0473  306B     MOVLW 0x6B                         931:       printchar   "k"
0474  252F     CALL 0x52F
0475  3065     MOVLW 0x65                         932:       printchar   "e"
0476  252F     CALL 0x52F
0477  3072     MOVLW 0x72                         933:       printchar   "r"
0478  252F     CALL 0x52F
0479  3020     MOVLW 0x20                         934:       printchar   " "
047A  252F     CALL 0x52F
047B  3066     MOVLW 0x66                         935:       printchar   "f"
047C  252F     CALL 0x52F
047D  3061     MOVLW 0x61                         936:       printchar   "a"
047E  252F     CALL 0x52F
047F  3069     MOVLW 0x69                         937:       printchar   "i"
0480  252F     CALL 0x52F
0481  306C     MOVLW 0x6C                         938:       printchar   "l"
0482  252F     CALL 0x52F
0483  303A     MOVLW 0x3A                         939:       printchar   ":"
0484  252F     CALL 0x52F
0485  3020     MOVLW 0x20                         940:       printchar   " "
0486  252F     CALL 0x52F
0487  1283     BCF STATUS, 0x5                    941:       printBCD    num_FF
0488  1303     BCF STATUS, 0x6
0489  082B     MOVF 0x2B, W
048A  3E30     ADDLW 0x30
048B  252F     CALL 0x52F
048C  300A     MOVLW 0xA                          942:       newline
048D  252F     CALL 0x52F
048E  300D     MOVLW 0xD
048F  252F     CALL 0x52F
0490  300A     MOVLW 0xA                          943:       newline  
0491  252F     CALL 0x52F
0492  300D     MOVLW 0xD
0493  252F     CALL 0x52F
0494  1283     BCF STATUS, 0x5                    944:       bcf STATUS,RP0  ; back to bank 0
0495  0008     RETURN                             945:       return
                                                  946:   
                                                  947:   
                                                  948:   ;***************************************
                                                  949:   ; GENERAL PURPOSE SUBROUTINES
                                                  950:   ;***************************************
                                                  951:   
                                                  952:   ; DISPLAY BIG NUMBER SUBROUTINE
                                                  953:   ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                                                  954:   ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                                                  955:   ; Uses "shift and add 3" algorithm
                                                  956:   big_number
0496  0820     MOVF 0x20, W                       957:       movff   op_time, op_time_save         ;save the original op_time
0497  00C1     MOVWF 0x41
0498  3008     MOVLW 0x8                          958:       movlf   8, bignumcount                ;will shift 8 times
0499  00C5     MOVWF 0x45
049A  01C2     CLRF 0x42                          959:       clrf    huns
049B  01C3     CLRF 0x43                          960:       clrf    tens
049C  01C4     CLRF 0x44                          961:       clrf    ones
                                                  962:   
                                                  963:   BCDadd3                             ; if any digit > 5, add3
049D  3005     MOVLW 0x5                          964:       movlw   0x5
049E  0242     SUBWF 0x42, W                      965:       subwf   huns, W
049F  1803     BTFSC STATUS, 0x0                  966:       btfsc   STATUS, C
04A0  24BA     CALL 0x4BA                         967:       call    add3huns
                                                  968:   
04A1  3005     MOVLW 0x5                          969:       movlw   0x5
04A2  0243     SUBWF 0x43, W                      970:       subwf   tens, W
04A3  1803     BTFSC STATUS, 0x0                  971:       btfsc   STATUS, C
04A4  24BD     CALL 0x4BD                         972:       call    add3tens
                                                  973:   
04A5  3005     MOVLW 0x5                          974:       movlw   0x5
04A6  0244     SUBWF 0x44, W                      975:       subwf   ones, W
04A7  1803     BTFSC STATUS, 0x0                  976:       btfsc   STATUS, C
04A8  24C0     CALL 0x4C0                         977:       call    add3ones
                                                  978:   
04A9  03C5     DECF 0x45, F                       979:       decf    bignumcount, 1
04AA  1003     BCF STATUS, 0x0                    980:       bcf     STATUS, C
04AB  0DA0     RLF 0x20, F                        981:       rlf     op_time, 1              ; shift
04AC  0DC4     RLF 0x44, F                        982:       rlf     ones, 1
04AD  1A44     BTFSC 0x44, 0x4                    983:       btfsc   ones,4 ;
04AE  24C3     CALL 0x4C3                         984:       call    carryones               ; carry if too large
04AF  0DC3     RLF 0x43, F                        985:       rlf     tens, 1
                                                  986:   
04B0  1A43     BTFSC 0x43, 0x4                    987:       btfsc   tens,4 ;
04B1  24C6     CALL 0x4C6                         988:       call    carrytens
04B2  0DC2     RLF 0x42, F                        989:       rlf     huns,1
04B3  1003     BCF STATUS, 0x0                    990:       bcf     STATUS, C
                                                  991:   
04B4  0845     MOVF 0x45, W                       992:       movf    bignumcount, W
04B5  1D03     BTFSS STATUS, 0x2                  993:       btfss   STATUS, Z
04B6  2C9D     GOTO 0x49D                         994:       goto    BCDadd3                 ; repeat until you've shifted it 8 times
                                                  995:   
04B7  0841     MOVF 0x41, W                       996:       movff    op_time_save, op_time     ;restore the original op_time
04B8  00A0     MOVWF 0x20
04B9  0008     RETURN                             997:       return
                                                  998:   
                                                  999:   add3huns
04BA  3003     MOVLW 0x3                          1000:      movlw 0x3
04BB  07C2     ADDWF 0x42, F                      1001:      addwf huns,F
04BC  0008     RETURN                             1002:      return
                                                  1003:  add3tens
04BD  3003     MOVLW 0x3                          1004:      movlw 0x3
04BE  07C3     ADDWF 0x43, F                      1005:      addwf tens,F
04BF  0008     RETURN                             1006:      return
                                                  1007:  add3ones
04C0  3003     MOVLW 0x3                          1008:      movlw 0x3
04C1  07C4     ADDWF 0x44, F                      1009:      addwf ones,F
04C2  0008     RETURN                             1010:      return
                                                  1011:  carryones
04C3  1244     BCF 0x44, 0x4                      1012:      bcf ones, 4
04C4  1403     BSF STATUS, 0x0                    1013:      bsf STATUS, C
04C5  0008     RETURN                             1014:      return
                                                  1015:  carrytens
04C6  1243     BCF 0x43, 0x4                      1016:      bcf tens, 4
04C7  1403     BSF STATUS, 0x0                    1017:      bsf STATUS, C
04C8  0008     RETURN                             1018:      return
                                                  1019:  
                                                  1020:  
                                                  1021:  ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                                                  1022:  ; Delays exactly 0.5sec
                                                  1023:  HalfS
04C9  308A     MOVLW 0x8A                         1024:        movlf 0x8A, hdelH
04CA  00BE     MOVWF 0x3E
04CB  30BA     MOVLW 0xBA                         1025:        movlf 0xBA, hdelM
04CC  00BF     MOVWF 0x3F
04CD  3003     MOVLW 0x3                          1026:        movlf 0x03, hdelL
04CE  00C0     MOVWF 0x40
                                                  1027:  HalfS_0
04CF  0BBE     DECFSZ 0x3E, F                     1028:        decfsz	hdelH, F
04D0  2CD2     GOTO 0x4D2                         1029:  	  goto	$+2
04D1  0BBF     DECFSZ 0x3F, F                     1030:  	  decfsz	hdelM, F
04D2  2CD4     GOTO 0x4D4                         1031:  	  goto	$+2
04D3  0BC0     DECFSZ 0x40, F                     1032:  	  decfsz	hdelL, F
04D4  2CCF     GOTO 0x4CF                         1033:  	  goto	HalfS_0
                                                  1034:  
04D5  2CD6     GOTO 0x4D6                         1035:  	  goto	$+1
04D6  0000     NOP                                1036:  	  nop
04D7  0008     RETURN                             1037:  	  return
                                                  1038:  
                                                  1039:  ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                                                  1040:  ; Useful for LCD because PIC is way faster than it can handle
                                                  1041:  ; Delays exactly 5ms
                                                  1042:  delay5ms
04D8  30C3     MOVLW 0xC3                         1043:  	movlf	0xC3, del1
04D9  00BC     MOVWF 0x3C
04DA  300A     MOVLW 0xA                          1044:  	movlf	0x0A, del2
04DB  00BD     MOVWF 0x3D
                                                  1045:  Delay_0
04DC  0BBC     DECFSZ 0x3C, F                     1046:  	decfsz	del1, f
04DD  2CDF     GOTO 0x4DF                         1047:  	goto	$+2
04DE  0BBD     DECFSZ 0x3D, F                     1048:  	decfsz	del2, f
04DF  2CDC     GOTO 0x4DC                         1049:  	goto	Delay_0
04E0  0008     RETURN                             1050:      return
                                                  1051:  
                                                  1052:  ;***************************************
                                                  1053:  ; LCD SUBROUTINES (from sample code)
                                                  1054:  ;***************************************
                                                  1055:  
                                                  1056:  ; Initialize the LCD
                                                  1057:  InitLCD
04E1  1283     BCF STATUS, 0x5                    1058:  	bcf STATUS,RP0
04E2  1588     BSF PORTD, 0x3                     1059:  	bsf E     ;E default high
                                                  1060:  
                                                  1061:  	;Wait for LCD POR to finish (~15ms)
04E3  24D8     CALL 0x4D8                         1062:  	call delay5ms
04E4  24D8     CALL 0x4D8                         1063:  	call delay5ms
04E5  24D8     CALL 0x4D8                         1064:  	call delay5ms
                                                  1065:  
                                                  1066:  	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  1067:  	; -> Send b'0011' 3 times
04E6  3033     MOVLW 0x33                         1068:  	movlw	b'00110011'
04E7  2505     CALL 0x505                         1069:  	call	WR_INS
04E8  24D8     CALL 0x4D8                         1070:  	call delay5ms
04E9  24D8     CALL 0x4D8                         1071:  	call delay5ms
04EA  3032     MOVLW 0x32                         1072:  	movlw	b'00110010'
04EB  2505     CALL 0x505                         1073:  	call	WR_INS
04EC  24D8     CALL 0x4D8                         1074:  	call delay5ms
04ED  24D8     CALL 0x4D8                         1075:  	call delay5ms
                                                  1076:  
                                                  1077:  	; 4 bits, 2 lines, 5x7 dots
04EE  3028     MOVLW 0x28                         1078:  	movlw	b'00101000'
04EF  2505     CALL 0x505                         1079:  	call	WR_INS
04F0  24D8     CALL 0x4D8                         1080:  	call delay5ms
04F1  24D8     CALL 0x4D8                         1081:  	call delay5ms
                                                  1082:  
                                                  1083:  	; display on/off
04F2  300C     MOVLW 0xC                          1084:  	movlw	b'00001100'
04F3  2505     CALL 0x505                         1085:  	call	WR_INS
04F4  24D8     CALL 0x4D8                         1086:  	call delay5ms
04F5  24D8     CALL 0x4D8                         1087:  	call delay5ms
                                                  1088:  
                                                  1089:  	; Entry mode
04F6  3006     MOVLW 0x6                          1090:  	movlw	b'00000110'
04F7  2505     CALL 0x505                         1091:  	call	WR_INS
04F8  24D8     CALL 0x4D8                         1092:  	call delay5ms
04F9  24D8     CALL 0x4D8                         1093:  	call delay5ms
                                                  1094:  
                                                  1095:  	; Clear ram
04FA  3001     MOVLW 0x1                          1096:  	movlw	b'00000001'
04FB  2505     CALL 0x505                         1097:  	call	WR_INS
04FC  24D8     CALL 0x4D8                         1098:  	call delay5ms
04FD  24D8     CALL 0x4D8                         1099:  	call delay5ms
04FE  0008     RETURN                             1100:  	return
                                                  1101:  
                                                  1102:  ; Clear the display
                                                  1103:  Clear_Display
04FF  3001     MOVLW 0x1                          1104:  		movlw	B'00000001'
0500  2505     CALL 0x505                         1105:  		call	WR_INS
0501  0008     RETURN                             1106:  		return
                                                  1107:  
                                                  1108:  ;Switch lines
                                                  1109:  Switch_Lines
0502  30C0     MOVLW 0xC0                         1110:  		movlw	B'11000000'
0503  2505     CALL 0x505                         1111:  		call	WR_INS
0504  0008     RETURN                             1112:  		return
                                                  1113:  
                                                  1114:  ; Write an instruction to the LCD (see page 7-104)
                                                  1115:  ; The instruction must be in W
                                                  1116:  WR_INS
0505  1108     BCF PORTD, 0x2                     1117:  	bcf		RS				;clear RS
0506  00BA     MOVWF 0x3A                         1118:  	movwf	com				;W --> com
0507  39F0     ANDLW 0xF0                         1119:  	andlw	0xF0			;mask 4 bits MSB w = X0
0508  0088     MOVWF PORTD                        1120:  	movwf	PORTD			;Send 4 bits MSB
0509  1588     BSF PORTD, 0x3                     1121:  	bsf		E				;
050A  24D8     CALL 0x4D8                         1122:  	call	delay5ms	;__    __
050B  1188     BCF PORTD, 0x3                     1123:  	bcf		E				;  |__|
050C  0E3A     SWAPF 0x3A, W                      1124:  	swapf	com,w
050D  39F0     ANDLW 0xF0                         1125:  	andlw	0xF0			;1111 0010
050E  0088     MOVWF PORTD                        1126:  	movwf	PORTD			;send 4 bits LSB
050F  1588     BSF PORTD, 0x3                     1127:  	bsf		E				;
0510  24D8     CALL 0x4D8                         1128:  	call	delay5ms	;__    __
0511  1188     BCF PORTD, 0x3                     1129:  	bcf		E				;  |__|
0512  24D8     CALL 0x4D8                         1130:  	call	delay5ms
0513  0008     RETURN                             1131:  	return
                                                  1132:  
                                                  1133:  ; Write data at current cursor location
                                                  1134:  ; Character code (see page 7-104) must be in W
                                                  1135:  WR_DATA
0514  1508     BSF PORTD, 0x2                     1136:  	bsf		RS
0515  00BB     MOVWF 0x3B                         1137:  	movwf	dat
0516  083B     MOVF 0x3B, W                       1138:  	movf	dat,w
0517  39F0     ANDLW 0xF0                         1139:  	andlw	0xF0
0518  3E04     ADDLW 0x4                          1140:  	addlw	4
0519  0088     MOVWF PORTD                        1141:  	movwf	PORTD
051A  1588     BSF PORTD, 0x3                     1142:  	bsf		E				;
051B  24D8     CALL 0x4D8                         1143:  	call	delay5ms	;__    __
051C  1188     BCF PORTD, 0x3                     1144:  	bcf		E				;  |__|
051D  0E3B     SWAPF 0x3B, W                      1145:  	swapf	dat,w
051E  39F0     ANDLW 0xF0                         1146:  	andlw	0xF0
051F  3E04     ADDLW 0x4                          1147:  	addlw	4
0520  0088     MOVWF PORTD                        1148:  	movwf	PORTD
0521  1588     BSF PORTD, 0x3                     1149:  	bsf		E				;
0522  24D8     CALL 0x4D8                         1150:  	call	delay5ms	;__    __
0523  1188     BCF PORTD, 0x3                     1151:  	bcf		E				;  |__|
0524  0008     RETURN                             1152:  	return
                                                  1153:  
                                                  1154:  
                                                  1155:  ;***************************************
                                                  1156:  ; PC INTERFACE SUBROUTINES (from sample code)
                                                  1157:  ;***************************************
                                                  1158:  InitUSART
0525  1683     BSF STATUS, 0x5                    1159:          bsf       STATUS,RP0     ; select bank 1
0526  300F     MOVLW 0xF                          1160:          movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
0527  0099     MOVWF TXREG                        1161:          movwf     SPBRG
0528  0198     CLRF RCSTA                         1162:          clrf      TXSTA          ; 8 bits data ,no,1 stop
                                                  1163:  
0529  1283     BCF STATUS, 0x5                    1164:          bcf       STATUS,RP0     ; select bank 0
052A  1798     BSF RCSTA, 0x7                     1165:          bsf       RCSTA,SPEN     ; Asynchronous serial port enable
052B  1618     BSF RCSTA, 0x4                     1166:          bsf       RCSTA,CREN     ; continuous receive
                                                  1167:  
052C  1683     BSF STATUS, 0x5                    1168:          bsf       STATUS,RP0     ; select bank 1
052D  1698     BSF RCSTA, 0x5                     1169:          bsf       TXSTA,TXEN     ; Transmit enable
052E  0008     RETURN                             1170:          return
                                                  1171:  
                                                  1172:  
                                                  1173:  writetoPC
                                                  1174:  ; Writes the data in W to the PC
                                                  1175:  ; end up in bank1!
052F  1283     BCF STATUS, 0x5                    1176:          bcf       STATUS,RP0     ; Go to bank 0
0530  0099     MOVWF TXREG                        1177:          movwf     TXREG          ; Send contents of W to RS232
0531  1683     BSF STATUS, 0x5                    1178:          bsf       STATUS,RP0     ; Go to bank with TXSTA
0532  1C98     BTFSS RCSTA, 0x1                   1179:          btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0533  2D32     GOTO 0x532                         1180:          goto      $-1
0534  0008     RETURN                             1181:          return
                                                  1182:  
                                                  1183:  
                                                  1184:  ;***************************************
                                                  1185:  ; ISR
                                                  1186:  ; Currently only care about TMR0
                                                  1187:  ; TMR0 overflows at 256*256; each time, decrement count38
                                                  1188:  ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                                                  1189:  ; When this hapens, op_time increments
                                                  1190:  ;***************************************
                                                  1191:  isr
0535  00F9     MOVWF 0x79                         1192:      movwf   w_isr           ;save W and status
0536  0E03     SWAPF STATUS, W                    1193:      swapf   STATUS, W
0537  0183     CLRF STATUS                        1194:      clrf    STATUS
0538  00FA     MOVWF 0x7A                         1195:      movwf   status_isr
                                                  1196:  ;    movf    PCLATH, W      ;if using pages
                                                  1197:  ;    movwf   pclath_isr
                                                  1198:  ;    clrf    PCLATH
                                                  1199:  
0539  0BC6     DECFSZ 0x46, F                     1200:      decfsz  count38, F     ;if count38 gets to 38 it's been one second
053A  2D3E     GOTO 0x53E                         1201:      goto    end_isr
053B  3026     MOVLW 0x26                         1202:      movlf   D'38', count38  ;so reset count38
053C  00C6     MOVWF 0x46
053D  0AA0     INCF 0x20, F                       1203:      incf    op_time, F         ; and increment op_time
                                                  1204:  
                                                  1205:  end_isr
                                                  1206:  
                                                  1207:  ;    btfss   PHOTODATA       ;if PHOTODATA is 1, light is off
                                                  1208:  ;    incf    photocount, F       ;if it is 0, light is on so photocount++
                                                  1209:  
                                                  1210:  ;    movf    pclath_isr, W  ;if using pages
                                                  1211:  ;    movwf    PCLATH
053E  0E7A     SWAPF 0x7A, W                      1212:      swapf   status_isr, W   ;restore W and status
053F  0083     MOVWF STATUS                       1213:      movwf   STATUS
0540  0EF9     SWAPF 0x79, F                      1214:      swapf   w_isr, F
0541  0E79     SWAPF 0x79, W                      1215:      swapf   w_isr, W
0542  110B     BCF INTCON, 0x2                    1216:      bcf     INTCON, T0IF    ;clear the interrupt flag
0543  0009     RETFIE                             1217:      retfie
                                                  1218:  
                                                  1219:  
2007  0000     NOP                                1220:      END
                                                  1221:  
                                                  1222:  
                                                  1223:  
                                                  1224:  
                                                  1225:  
