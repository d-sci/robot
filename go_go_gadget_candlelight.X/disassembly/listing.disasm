Disassembly Listing for go_go_gadget_candlelight
Generated From:
C:/Users/Doge/Documents/GitHub/robot/go_go_gadget_candlelight.X/dist/default/production/go_go_gadget_candlelight.X.production.cof
7-Feb-2014 4:56:20 PM

---  C:/Users/Doge/Documents/GitHub/robot/realtimeclock.X/i2c_common.asm  -------------------------------
                                                  1:         include <p16f877.inc>
                                                  2:     	errorlevel	-302
                                                  3:     	errorlevel	-305
                                                  4:     
                                                  5:     ;global labels
                                                  6:     
                                                  7:     	global	write_rtc,read_rtc,rtc_convert,i2c_common_setup,p2p_write,p2p_read
                                                  8:     
                                                  9:     ;Definition and variable declarations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  10:            cblock    0x71			;these variable names are for reference only. The following
                                                  11:            i2c_dt1			;0x71		 addresses are used for the RTC module
                                                  12:            i2c_dt2			;0x72
                                                  13:            i2c_ADD			;0x73
                                                  14:            i2c_DAT			;0x74
                                                  15:            i2c_DOUT		;0x75
                                                  16:            i2c_B1			;0x76
                                                  17:    		i2c_dig10		;0x77
                                                  18:    		i2c_dig1		;0x78
                                                  19:            endc
                                                  20:    
                                                  21:    ;I2C lowest layer macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  22:    
                                                  23:    i2c_common_check_ack	macro	err_address		;If bad ACK bit received, goto err_address
                                                  24:    	banksel		SSPCON2
                                                  25:        btfsc       SSPCON2,ACKSTAT
                                                  26:        goto        err_address
                                                  27:    	endm
                                                  28:    
                                                  29:    i2c_common_start	macro
                                                  30:    ;input:		none
                                                  31:    ;output:	none
                                                  32:    ;desc:		initiate start conditionon the bus
                                                  33:    	banksel     SSPCON2
                                                  34:        bsf         SSPCON2,SEN
                                                  35:        btfsc       SSPCON2,SEN
                                                  36:        goto        $-1
                                                  37:    	endm
                                                  38:    
                                                  39:    i2c_common_stop	macro
                                                  40:    ;input: 	none
                                                  41:    ;output:	none
                                                  42:    ;desc:		initiate stop condition on the bus
                                                  43:    	banksel     SSPCON2
                                                  44:        bsf         SSPCON2,PEN
                                                  45:        btfsc       SSPCON2,PEN
                                                  46:        goto        $-1
                                                  47:    	endm
                                                  48:    
                                                  49:    i2c_common_repeatedstart	macro
                                                  50:    ;input:		none
                                                  51:    ;output:	none
                                                  52:    ;desc:		initiate repeated start on the bus. Usually used for
                                                  53:    ;			changing direction of SDA without STOP event
                                                  54:    	banksel     SSPCON2
                                                  55:        bsf         SSPCON2,RSEN
                                                  56:        btfsc       SSPCON2,RSEN
                                                  57:        goto        $-1
                                                  58:    	endm
                                                  59:    
                                                  60:    i2c_common_ack		macro
                                                  61:    ;input:		none
                                                  62:    ;output:	none
                                                  63:    ;desc:		send an acknowledge to slave device
                                                  64:        banksel     SSPCON2
                                                  65:        bcf         SSPCON2,ACKDT
                                                  66:        bsf         SSPCON2,ACKEN
                                                  67:        btfsc       SSPCON2,ACKEN
                                                  68:        goto        $-1
                                                  69:        endm
                                                  70:    
                                                  71:    i2c_common_nack	macro
                                                  72:    ;input:		none
                                                  73:    ;output:	none
                                                  74:    ;desc:		send an not acknowledge to slave device
                                                  75:       banksel     SSPCON2
                                                  76:       bsf         SSPCON2,ACKDT
                                                  77:       bsf         SSPCON2,ACKEN
                                                  78:       btfsc       SSPCON2,ACKEN
                                                  79:       goto        $-1
                                                  80:       endm
                                                  81:    
                                                  82:    i2c_common_write	macro	
                                                  83:    ;input:		W
                                                  84:    ;output:	to slave device
                                                  85:    ;desc:		writes W to SSPBUF and send to slave device. Make sure
                                                  86:    ;			transmit is finished before continuing
                                                  87:       banksel     SSPBUF
                                                  88:       movwf       SSPBUF
                                                  89:       banksel     SSPSTAT
                                                  90:       btfsc       SSPSTAT,R_W 		;While transmit is in progress, wait
                                                  91:       goto        $-1
                                                  92:       banksel     SSPCON2
                                                  93:       endm
                                                  94:    
                                                  95:    i2c_common_read	macro
                                                  96:    ;input:		none
                                                  97:    ;output:	W
                                                  98:    ;desc:		reads data from slave and saves it in W.
                                                  99:       banksel     SSPCON2
                                                  100:      bsf         SSPCON2,RCEN    ;Begin receiving byte from
                                                  101:      btfsc       SSPCON2,RCEN
                                                  102:      goto        $-1
                                                  103:      banksel     SSPBUF
                                                  104:      movf        SSPBUF,w
                                                  105:      endm
                                                  106:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  107:   
                                                  108:   	code
                                                  109:   
                                                  110:   i2c_common_setup
                                                  111:   ;input:		none
                                                  112:   ;output:	none
                                                  113:   ;desc:		sets up I2C as master device with 100kHz baud rate
054F  1683     BSF STATUS, 0x5                    114:   	banksel		SSPSTAT
0550  1303     BCF STATUS, 0x6
0551  0194     CLRF SSPCON                        115:       clrf        SSPSTAT         ;I2C line levels, and clear all flags
0552  3018     MOVLW 0x18                         116:       movlw       d'24'         	;100kHz baud rate: 10MHz osc / [4*(24+1)]
0553  1683     BSF STATUS, 0x5                    117:   	banksel		SSPADD
0554  1303     BCF STATUS, 0x6
0555  0093     MOVWF SSPBUF                       118:       movwf       SSPADD          ;RTC only supports 100kHz
                                                  119:   
0556  3008     MOVLW 0x8                          120:       movlw       b'00001000'     ;Config SSP for Master Mode I2C
0557  1283     BCF STATUS, 0x5                    121:   	banksel		SSPCON
0558  1303     BCF STATUS, 0x6
0559  0094     MOVWF SSPCON                       122:       movwf       SSPCON
055A  1694     BSF SSPCON, 0x5                    123:       bsf         SSPCON,SSPEN    ;Enable SSP module
055B  1683     BSF STATUS, 0x5                    124:       i2c_common_stop        		;Ensure the bus is free
055C  1303     BCF STATUS, 0x6
055D  1511     BSF TMR2, 0x2
055E  1911     BTFSC TMR2, 0x2
055F  2D5E     GOTO 0x55E
0560  0008     RETURN                             125:   	return
                                                  126:   
                                                  127:   ;rtc Algorithms;;;;;;
                                                  128:   
                                                  129:   write_rtc
                                                  130:   ;input:		address of register in RTC
                                                  131:   ;output:	none
                                                  132:   ;Desc:		handles writing data to RTC
                                                  133:           ;Select the DS1307 on the bus, in WRITE mode
0561  1683     BSF STATUS, 0x5                    134:           i2c_common_start
0562  1303     BCF STATUS, 0x6
0563  1411     BSF TMR2, 0x0
0564  1811     BTFSC TMR2, 0x0
0565  2D64     GOTO 0x564
0566  30D0     MOVLW 0xD0                         135:           movlw       0xD0        ;DS1307 address | WRITE bit
0567  1283     BCF STATUS, 0x5                    136:           i2c_common_write
0568  1303     BCF STATUS, 0x6
0569  0093     MOVWF SSPBUF
056A  1683     BSF STATUS, 0x5
056B  1303     BCF STATUS, 0x6
056C  1914     BTFSC SSPCON, 0x2
056D  2D6C     GOTO 0x56C
056E  1683     BSF STATUS, 0x5
056F  1303     BCF STATUS, 0x6
0570  1683     BSF STATUS, 0x5                    137:           i2c_common_check_ack   WR_ERR
0571  1303     BCF STATUS, 0x6
0572  1B11     BTFSC TMR2, 0x6
0573  2D95     GOTO 0x595
                                                  138:   
                                                  139:           ;Write data to I2C bus (Register Address in RTC)
0574  1283     BCF STATUS, 0x5                    140:   		banksel		0x73
0575  1303     BCF STATUS, 0x6
0576  0873     MOVF 0x73, W                       141:           movf        0x73,w       ;Set register pointer in RTC
0577  1283     BCF STATUS, 0x5                    142:           i2c_common_write
0578  1303     BCF STATUS, 0x6
0579  0093     MOVWF SSPBUF
057A  1683     BSF STATUS, 0x5
057B  1303     BCF STATUS, 0x6
057C  1914     BTFSC SSPCON, 0x2
057D  2D7C     GOTO 0x57C
057E  1683     BSF STATUS, 0x5
057F  1303     BCF STATUS, 0x6
0580  1683     BSF STATUS, 0x5                    143:           i2c_common_check_ack   WR_ERR
0581  1303     BCF STATUS, 0x6
0582  1B11     BTFSC TMR2, 0x6
0583  2D95     GOTO 0x595
                                                  144:   
                                                  145:           ;Write data to I2C bus (Data to be placed in RTC register)
0584  1283     BCF STATUS, 0x5                    146:   		banksel		0x74
0585  1303     BCF STATUS, 0x6
0586  0874     MOVF 0x74, W                       147:           movf        0x74,w       ;Write data to register in RTC
0587  1283     BCF STATUS, 0x5                    148:           i2c_common_write
0588  1303     BCF STATUS, 0x6
0589  0093     MOVWF SSPBUF
058A  1683     BSF STATUS, 0x5
058B  1303     BCF STATUS, 0x6
058C  1914     BTFSC SSPCON, 0x2
058D  2D8C     GOTO 0x58C
058E  1683     BSF STATUS, 0x5
058F  1303     BCF STATUS, 0x6
0590  1683     BSF STATUS, 0x5                    149:           i2c_common_check_ack   WR_ERR
0591  1303     BCF STATUS, 0x6
0592  1B11     BTFSC TMR2, 0x6
0593  2D95     GOTO 0x595
0594  2D96     GOTO 0x596                         150:           goto        WR_END
                                                  151:   WR_ERR
0595  0000     NOP                                152:           nop
                                                  153:   WR_END  
0596  1683     BSF STATUS, 0x5                    154:   		i2c_common_stop	;Release the I2C bus
0597  1303     BCF STATUS, 0x6
0598  1511     BSF TMR2, 0x2
0599  1911     BTFSC TMR2, 0x2
059A  2D99     GOTO 0x599
059B  0008     RETURN                             155:           return
                                                  156:   
                                                  157:   read_rtc
                                                  158:   ;input:		address of RTC
                                                  159:   ;output:	DOUT or 0x75
                                                  160:   ;Desc:		This reads from the selected address of the RTC
                                                  161:   ;			and saves it into DOUT or address 0x75
                                                  162:           ;Select the DS1307 on the bus, in WRITE mode
059C  1683     BSF STATUS, 0x5                    163:           i2c_common_start
059D  1303     BCF STATUS, 0x6
059E  1411     BSF TMR2, 0x0
059F  1811     BTFSC TMR2, 0x0
05A0  2D9F     GOTO 0x59F
05A1  30D0     MOVLW 0xD0                         164:           movlw       0xD0        ;DS1307 address | WRITE bit
05A2  1283     BCF STATUS, 0x5                    165:           i2c_common_write
05A3  1303     BCF STATUS, 0x6
05A4  0093     MOVWF SSPBUF
05A5  1683     BSF STATUS, 0x5
05A6  1303     BCF STATUS, 0x6
05A7  1914     BTFSC SSPCON, 0x2
05A8  2DA7     GOTO 0x5A7
05A9  1683     BSF STATUS, 0x5
05AA  1303     BCF STATUS, 0x6
05AB  1683     BSF STATUS, 0x5                    166:           i2c_common_check_ack   RD_ERR
05AC  1303     BCF STATUS, 0x6
05AD  1B11     BTFSC TMR2, 0x6
05AE  2DE4     GOTO 0x5E4
                                                  167:   
                                                  168:           ;Write data to I2C bus (Register Address in RTC)
05AF  1283     BCF STATUS, 0x5                    169:   		banksel		0x73
05B0  1303     BCF STATUS, 0x6
05B1  0873     MOVF 0x73, W                       170:           movf        0x73,w       ;Set register pointer in RTC
05B2  1283     BCF STATUS, 0x5                    171:           i2c_common_write
05B3  1303     BCF STATUS, 0x6
05B4  0093     MOVWF SSPBUF
05B5  1683     BSF STATUS, 0x5
05B6  1303     BCF STATUS, 0x6
05B7  1914     BTFSC SSPCON, 0x2
05B8  2DB7     GOTO 0x5B7
05B9  1683     BSF STATUS, 0x5
05BA  1303     BCF STATUS, 0x6
05BB  1683     BSF STATUS, 0x5                    172:           i2c_common_check_ack   RD_ERR
05BC  1303     BCF STATUS, 0x6
05BD  1B11     BTFSC TMR2, 0x6
05BE  2DE4     GOTO 0x5E4
                                                  173:   
                                                  174:           ;Re-Select the DS1307 on the bus, in READ mode
05BF  1683     BSF STATUS, 0x5                    175:           i2c_common_repeatedstart
05C0  1303     BCF STATUS, 0x6
05C1  1491     BSF TMR2, 0x1
05C2  1891     BTFSC TMR2, 0x1
05C3  2DC2     GOTO 0x5C2
05C4  30D1     MOVLW 0xD1                         176:           movlw       0xD1        ;DS1307 address | READ bit
05C5  1283     BCF STATUS, 0x5                    177:           i2c_common_write
05C6  1303     BCF STATUS, 0x6
05C7  0093     MOVWF SSPBUF
05C8  1683     BSF STATUS, 0x5
05C9  1303     BCF STATUS, 0x6
05CA  1914     BTFSC SSPCON, 0x2
05CB  2DCA     GOTO 0x5CA
05CC  1683     BSF STATUS, 0x5
05CD  1303     BCF STATUS, 0x6
05CE  1683     BSF STATUS, 0x5                    178:           i2c_common_check_ack   RD_ERR
05CF  1303     BCF STATUS, 0x6
05D0  1B11     BTFSC TMR2, 0x6
05D1  2DE4     GOTO 0x5E4
                                                  179:   
                                                  180:           ;Read data from I2C bus (Contents of Register in RTC)
05D2  1683     BSF STATUS, 0x5                    181:           i2c_common_read
05D3  1303     BCF STATUS, 0x6
05D4  1591     BSF TMR2, 0x3
05D5  1991     BTFSC TMR2, 0x3
05D6  2DD5     GOTO 0x5D5
05D7  1283     BCF STATUS, 0x5
05D8  1303     BCF STATUS, 0x6
05D9  0813     MOVF SSPBUF, W
05DA  1283     BCF STATUS, 0x5                    182:   		banksel		0x75
05DB  1303     BCF STATUS, 0x6
05DC  00F5     MOVWF 0x75                         183:           movwf       0x75
05DD  1683     BSF STATUS, 0x5                    184:           i2c_common_nack      ;Send acknowledgement of data reception
05DE  1303     BCF STATUS, 0x6
05DF  1691     BSF TMR2, 0x5
05E0  1611     BSF TMR2, 0x4
05E1  1A11     BTFSC TMR2, 0x4
05E2  2DE1     GOTO 0x5E1
                                                  185:           
05E3  2DE5     GOTO 0x5E5                         186:           goto        RD_END
                                                  187:   
                                                  188:   RD_ERR 
05E4  0000     NOP                                189:           nop
                                                  190:           
                                                  191:           ;Release the I2C bus
05E5  1683     BSF STATUS, 0x5                    192:   RD_END  i2c_common_stop
05E6  1303     BCF STATUS, 0x6
05E7  1511     BSF TMR2, 0x2
05E8  1911     BTFSC TMR2, 0x2
05E9  2DE8     GOTO 0x5E8
05EA  0008     RETURN                             193:           return
                                                  194:   
                                                  195:   rtc_convert   
                                                  196:   ;input:		W
                                                  197:   ;output:	dig10 (0x77), dig1 (0x78)
                                                  198:   ;desc:		This subroutine converts the binary number
                                                  199:   ;			in W into a two digit ASCII number and place
                                                  200:   ;			each digit into the corresponding registers
                                                  201:   ;			dig10 or dig1
05EB  1283     BCF STATUS, 0x5                    202:   	banksel	0x76
05EC  1303     BCF STATUS, 0x6
05ED  00F6     MOVWF 0x76                         203:   	movwf   0x76             ; B1 = HHHH LLLL
05EE  0E76     SWAPF 0x76, W                      204:       swapf   0x76,w           ; W  = LLLL HHHH
05EF  390F     ANDLW 0xF                          205:       andlw   0x0f           ; Mask upper four bits 0000 HHHH
05F0  3E30     ADDLW 0x30                         206:       addlw   0x30           ; convert to ASCII
05F1  00F7     MOVWF 0x77                         207:       movwf	0x77		   ;saves into 10ths digit
                                                  208:   
05F2  1283     BCF STATUS, 0x5                    209:   	banksel	0x76
05F3  1303     BCF STATUS, 0x6
05F4  0876     MOVF 0x76, W                       210:       movf    0x76,w
05F5  390F     ANDLW 0xF                          211:       andlw   0x0f           ; w  = 0000 LLLL
05F6  3E30     ADDLW 0x30                         212:       addlw   0x30           ; convert to ASCII		
05F7  00F8     MOVWF 0x78                         213:       movwf	0x78	       ; saves into 1s digit
05F8  0008     RETURN                             214:      	return
                                                  215:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  216:   
                                                  217:   
                                                  218:   ;pic to pic subroutines;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  219:   p2p_write
                                                  220:           ;Select the DS1307 on the bus, in WRITE mode
05F9  1683     BSF STATUS, 0x5                    221:           i2c_common_start
05FA  1303     BCF STATUS, 0x6
05FB  1411     BSF TMR2, 0x0
05FC  1811     BTFSC TMR2, 0x0
05FD  2DFC     GOTO 0x5FC
05FE  3010     MOVLW 0x10                         222:           movlw       b'00010000'
05FF  1283     BCF STATUS, 0x5                    223:           i2c_common_write
0600  1303     BCF STATUS, 0x6
0601  0093     MOVWF SSPBUF
0602  1683     BSF STATUS, 0x5
0603  1303     BCF STATUS, 0x6
0604  1914     BTFSC SSPCON, 0x2
0605  2E04     GOTO 0x604
0606  1683     BSF STATUS, 0x5
0607  1303     BCF STATUS, 0x6
0608  1683     BSF STATUS, 0x5                    224:           i2c_common_check_ack   W_END 
0609  1303     BCF STATUS, 0x6
060A  1B11     BTFSC TMR2, 0x6
060B  2E1D     GOTO 0x61D
                                                  225:   
060C  1283     BCF STATUS, 0x5                    226:   		banksel	0x70
060D  1303     BCF STATUS, 0x6
060E  0870     MOVF 0x70, W                       227:   		movf	0x70, W
060F  1283     BCF STATUS, 0x5                    228:           i2c_common_write
0610  1303     BCF STATUS, 0x6
0611  0093     MOVWF SSPBUF
0612  1683     BSF STATUS, 0x5
0613  1303     BCF STATUS, 0x6
0614  1914     BTFSC SSPCON, 0x2
0615  2E14     GOTO 0x614
0616  1683     BSF STATUS, 0x5
0617  1303     BCF STATUS, 0x6
0618  1683     BSF STATUS, 0x5                    229:           i2c_common_check_ack   W_END 
0619  1303     BCF STATUS, 0x6
061A  1B11     BTFSC TMR2, 0x6
061B  2E1D     GOTO 0x61D
061C  2E1D     GOTO 0x61D                         230:           goto        W_END
                                                  231:   W_END  
061D  1683     BSF STATUS, 0x5                    232:   		i2c_common_stop	;Release the I2C bus
061E  1303     BCF STATUS, 0x6
061F  1511     BSF TMR2, 0x2
0620  1911     BTFSC TMR2, 0x2
0621  2E20     GOTO 0x620
0622  0008     RETURN                             233:           return
                                                  234:   
                                                  235:   
                                                  236:   p2p_read
                                                  237:           ;Select the DS1307 on the bus, in WRITE mode
0623  1683     BSF STATUS, 0x5                    238:           i2c_common_start
0624  1303     BCF STATUS, 0x6
0625  1411     BSF TMR2, 0x0
0626  1811     BTFSC TMR2, 0x0
0627  2E26     GOTO 0x626
0628  3011     MOVLW 0x11                         239:   		movlw       b'00010001'
0629  1283     BCF STATUS, 0x5                    240:           i2c_common_write
062A  1303     BCF STATUS, 0x6
062B  0093     MOVWF SSPBUF
062C  1683     BSF STATUS, 0x5
062D  1303     BCF STATUS, 0x6
062E  1914     BTFSC SSPCON, 0x2
062F  2E2E     GOTO 0x62E
0630  1683     BSF STATUS, 0x5
0631  1303     BCF STATUS, 0x6
0632  1683     BSF STATUS, 0x5                    241:   		i2c_common_check_ack   R_END
0633  1303     BCF STATUS, 0x6
0634  1B11     BTFSC TMR2, 0x6
0635  2E47     GOTO 0x647
                                                  242:   
0636  1683     BSF STATUS, 0x5                    243:           i2c_common_read
0637  1303     BCF STATUS, 0x6
0638  1591     BSF TMR2, 0x3
0639  1991     BTFSC TMR2, 0x3
063A  2E39     GOTO 0x639
063B  1283     BCF STATUS, 0x5
063C  1303     BCF STATUS, 0x6
063D  0813     MOVF SSPBUF, W
063E  1283     BCF STATUS, 0x5                    244:   		banksel		0x70
063F  1303     BCF STATUS, 0x6
0640  00F0     MOVWF 0x70                         245:           movwf       0x70
0641  1683     BSF STATUS, 0x5                    246:           i2c_common_nack      ;Send acknowledgement of data reception
0642  1303     BCF STATUS, 0x6
0643  1691     BSF TMR2, 0x5
0644  1611     BSF TMR2, 0x4
0645  1A11     BTFSC TMR2, 0x4
0646  2E45     GOTO 0x645
                                                  247:   R_END
0647  1683     BSF STATUS, 0x5                    248:   		i2c_common_stop
0648  1303     BCF STATUS, 0x6
0649  1511     BSF TMR2, 0x2
064A  1911     BTFSC TMR2, 0x2
064B  2E4A     GOTO 0x64A
064C  0008     RETURN                             249:           return
                                                  250:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  251:   
                                                  252:   	end
---  C:/Users/Doge/Documents/GitHub/robot/go_go_gadget_candlelight.X/main.asm  --------------------------
                                                  1:         list p=16f877                 ; list directive to define processor
                                                  2:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  3:           __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  4:     
                                                  5:           #include <rtc_macros.inc>
                                                  6:     
                                                  7:     
                                                  8:     ;***************************************
                                                  9:     ; DEFINITIONS
                                                  10:    ;***************************************
                                                  11:        #define	RS 	PORTD,2
                                                  12:    	#define	E 	PORTD,3
                                                  13:    
                                                  14:    
                                                  15:    ;***************************************
                                                  16:    ; VARIABLES
                                                  17:    ;***************************************
                                                  18:    
                                                  19:    ; Also see i2c_commmon.asm -> has stuff at 0x70 on for RTC
                                                  20:    
                                                  21:        cblock	0x20
                                                  22:            ; temps, counters, etc.
                                                  23:            keytemp         ; for data display mode
                                                  24:            statetemp
                                                  25:    		Table_Counter   ; for LCD stuff
                                                  26:    		com
                                                  27:    		dat
                                                  28:            lcd_d1
                                                  29:            lcd_d2
                                                  30:            COUNTH          ;for delay 0.5s routine
                                                  31:            COUNTM
                                                  32:            COUNTL
                                                  33:            op_time_save    ;for operation time
                                                  34:            huns
                                                  35:            tens
                                                  36:            ones
                                                  37:            bignumcount
                                                  38:            count38         ;for isr
                                                  39:            w_isr               ;I think this needs to be in all banks??
                                                  40:            status_isr
                                                  41:    
                                                  42:            ; important information
                                                  43:            op_time    ;in seconds
                                                  44:            state1     ;where   0 = none      1 = pass
                                                  45:            state2     ;        2 = led fail  3 = flicker fail
                                                  46:            state3
                                                  47:            state4
                                                  48:            state5
                                                  49:            state6
                                                  50:            state7
                                                  51:            state8
                                                  52:            state9
                                                  53:            num_LF      ;BCD
                                                  54:            num_FF      ;BCD
                                                  55:            num_tot     ;BCD
                                                  56:            start_year10    ;starting time (for log)
                                                  57:            start_year1     ; note: ALREADY ASCII!
                                                  58:            start_month10
                                                  59:            start_month1
                                                  60:            start_date10
                                                  61:            start_date1
                                                  62:            start_hour10
                                                  63:            start_hour1
                                                  64:            start_min10
                                                  65:            start_min1
                                                  66:    
                                                  67:    	endc
                                                  68:    
                                                  69:    
                                                  70:    ;***************************************
                                                  71:    ; MACROS
                                                  72:    ;***************************************
                                                  73:    
                                                  74:    ;LCD Delay
                                                  75:    LCD_DELAY   macro
                                                  76:                movlw   0xFF
                                                  77:                movwf   lcd_d1
                                                  78:                decfsz  lcd_d1,f
                                                  79:                goto    $-1
                                                  80:                endm
                                                  81:    
                                                  82:    ; Display a msg on LCD
                                                  83:    Display macro	Message
                                                  84:    		local	loop_disp
                                                  85:    		local 	end_disp
                                                  86:    		clrf	Table_Counter
                                                  87:    		clrw
                                                  88:    loop_disp
                                                  89:        	movf	Table_Counter,W
                                                  90:    		call 	Message
                                                  91:    		xorlw	B'00000000' ;check WORK reg to see if 0 is returned
                                                  92:    		btfsc	STATUS,Z
                                                  93:    		goto	end_disp
                                                  94:    		call	WR_DATA
                                                  95:    		incf	Table_Counter,F
                                                  96:    		goto	loop_disp
                                                  97:    end_disp
                                                  98:    		endm
                                                  99:    
                                                  100:   ;Move cursor right one position
                                                  101:   spacebar    macro
                                                  102:               movlw   B'00010100'
                                                  103:               call    WR_INS
                                                  104:               endm
                                                  105:   
                                                  106:   ;Shortcuts for moving literals / registers
                                                  107:   movlf   macro   l, f
                                                  108:           movlw   l
                                                  109:           movwf   f
                                                  110:           endm
                                                  111:   
                                                  112:   movff   macro   source, dest
                                                  113:           movf    source, W
                                                  114:           movwf   dest
                                                  115:           endm
                                                  116:   
                                                  117:   ; Display a BCD on LCD as decimal
                                                  118:   writenum    macro   number          ; literal
                                                  119:               movlw    number
                                                  120:               addlw   B'00110000'
                                                  121:               movwf   dat
                                                  122:               call WR_DATA
                                                  123:               endm
                                                  124:   
                                                  125:   writenum_reg    macro   reg         ; from a register containing BCD
                                                  126:               movfw    reg
                                                  127:               addlw   B'00110000'
                                                  128:               movwf   dat
                                                  129:               call WR_DATA
                                                  130:               endm
                                                  131:   
                                                  132:   ;Write to PC (hyperterminal)
                                                  133:   printchar   macro   char            ;direct ASCII code literal (or in "")
                                                  134:               movlw   char
                                                  135:               call    writetoPC
                                                  136:               endm
                                                  137:   
                                                  138:   printASC    macro   reg            ;ASCII code inside a register
                                                  139:               banksel reg
                                                  140:               movfw   reg
                                                  141:               call    writetoPC
                                                  142:               endm
                                                  143:   
                                                  144:   printBCD    macro   BCD            ;BCD inside a register
                                                  145:               banksel BCD
                                                  146:               movfw   BCD
                                                  147:               addlw   0x30
                                                  148:               call    writetoPC
                                                  149:               endm
                                                  150:   
                                                  151:   newline     macro
                                                  152:               printchar   0xA ;changes line
                                                  153:               printchar   0xD ;goes back to left
                                                  154:               endm
                                                  155:   ;***************************************
                                                  156:   ; VECTORS
                                                  157:   ;***************************************
                                                  158:   
                                                  159:       ORG       0x000
0000  28BE     GOTO 0xBE                          160:            goto      init
                                                  161:       ORG       0x004
0004  2D40     GOTO 0x540                         162:           goto    isr
                                                  163:   
                                                  164:   
                                                  165:   ;***************************************
                                                  166:   ; TABLES (MESSAGES)
                                                  167:   ;***************************************
                                                  168:   Standby_Msg
0005  0782     ADDWF PCL, F                       169:   		addwf	PCL,F
0006  3453     RETLW 0x53                         170:   		dt		"STANDBY", 0
0007  3454     RETLW 0x54
0008  3441     RETLW 0x41
0009  344E     RETLW 0x4E
000A  3444     RETLW 0x44
000B  3442     RETLW 0x42
000C  3459     RETLW 0x59
000D  3400     RETLW 0x0
                                                  171:   Start_Msg
000E  0782     ADDWF PCL, F                       172:           addwf   PCL,F
000F  3449     RETLW 0x49                         173:           dt      "Inspecting . . .",0
0010  346E     RETLW 0x6E
0011  3473     RETLW 0x73
0012  3470     RETLW 0x70
0013  3465     RETLW 0x65
0014  3463     RETLW 0x63
0015  3474     RETLW 0x74
0016  3469     RETLW 0x69
0017  346E     RETLW 0x6E
0018  3467     RETLW 0x67
0019  3420     RETLW 0x20
001A  342E     RETLW 0x2E
001B  3420     RETLW 0x20
001C  342E     RETLW 0x2E
001D  3420     RETLW 0x20
001E  342E     RETLW 0x2E
001F  3400     RETLW 0x0
                                                  174:   End_Msg
0020  0782     ADDWF PCL, F                       175:           addwf   PCL,F
0021  3443     RETLW 0x43                         176:           dt      "Complete",0
0022  346F     RETLW 0x6F
0023  346D     RETLW 0x6D
0024  3470     RETLW 0x70
0025  346C     RETLW 0x6C
0026  3465     RETLW 0x65
0027  3474     RETLW 0x74
0028  3465     RETLW 0x65
0029  3400     RETLW 0x0
                                                  177:   Time_Msg
002A  0782     ADDWF PCL, F                       178:   		addwf	PCL,F
002B  344F     RETLW 0x4F                         179:   		dt		"Operation time:",0
002C  3470     RETLW 0x70
002D  3465     RETLW 0x65
002E  3472     RETLW 0x72
002F  3461     RETLW 0x61
0030  3474     RETLW 0x74
0031  3469     RETLW 0x69
0032  346F     RETLW 0x6F
0033  346E     RETLW 0x6E
0034  3420     RETLW 0x20
0035  3474     RETLW 0x74
0036  3469     RETLW 0x69
0037  346D     RETLW 0x6D
0038  3465     RETLW 0x65
0039  343A     RETLW 0x3A
003A  3400     RETLW 0x0
                                                  180:   Seconds
003B  0782     ADDWF PCL, F                       181:           addwf   PCL,F
003C  3420     RETLW 0x20                         182:           dt      " seconds", 0
003D  3473     RETLW 0x73
003E  3465     RETLW 0x65
003F  3463     RETLW 0x63
0040  346F     RETLW 0x6F
0041  346E     RETLW 0x6E
0042  3464     RETLW 0x64
0043  3473     RETLW 0x73
0044  3400     RETLW 0x0
                                                  183:   Not_present
0045  0782     ADDWF PCL, F                       184:           addwf   PCL,F
0046  343A     RETLW 0x3A                         185:           dt      ": Not present",0
0047  3420     RETLW 0x20
0048  344E     RETLW 0x4E
0049  346F     RETLW 0x6F
004A  3474     RETLW 0x74
004B  3420     RETLW 0x20
004C  3470     RETLW 0x70
004D  3472     RETLW 0x72
004E  3465     RETLW 0x65
004F  3473     RETLW 0x73
0050  3465     RETLW 0x65
0051  346E     RETLW 0x6E
0052  3474     RETLW 0x74
0053  3400     RETLW 0x0
                                                  186:   Pass
0054  0782     ADDWF PCL, F                       187:   		addwf	PCL,F
0055  343A     RETLW 0x3A                         188:   		dt		": Pass",0
0056  3420     RETLW 0x20
0057  3450     RETLW 0x50
0058  3461     RETLW 0x61
0059  3473     RETLW 0x73
005A  3473     RETLW 0x73
005B  3400     RETLW 0x0
                                                  189:   LED_fail
005C  0782     ADDWF PCL, F                       190:   		addwf	PCL,F
005D  343A     RETLW 0x3A                         191:   		dt		": LED fail",0
005E  3420     RETLW 0x20
005F  344C     RETLW 0x4C
0060  3445     RETLW 0x45
0061  3444     RETLW 0x44
0062  3420     RETLW 0x20
0063  3466     RETLW 0x66
0064  3461     RETLW 0x61
0065  3469     RETLW 0x69
0066  346C     RETLW 0x6C
0067  3400     RETLW 0x0
                                                  192:   Flick_fail
0068  0782     ADDWF PCL, F                       193:   		addwf	PCL,F
0069  343A     RETLW 0x3A                         194:   		dt		": Flicker fail",0
006A  3420     RETLW 0x20
006B  3446     RETLW 0x46
006C  346C     RETLW 0x6C
006D  3469     RETLW 0x69
006E  3463     RETLW 0x63
006F  346B     RETLW 0x6B
0070  3465     RETLW 0x65
0071  3472     RETLW 0x72
0072  3420     RETLW 0x20
0073  3466     RETLW 0x66
0074  3461     RETLW 0x61
0075  3469     RETLW 0x69
0076  346C     RETLW 0x6C
0077  3400     RETLW 0x0
                                                  195:   Total_Msg
0078  0782     ADDWF PCL, F                       196:           addwf   PCL,F
0079  3454     RETLW 0x54                         197:           dt      "Total candles: ",0
007A  346F     RETLW 0x6F
007B  3474     RETLW 0x74
007C  3461     RETLW 0x61
007D  346C     RETLW 0x6C
007E  3420     RETLW 0x20
007F  3463     RETLW 0x63
0080  3461     RETLW 0x61
0081  346E     RETLW 0x6E
0082  3464     RETLW 0x64
0083  346C     RETLW 0x6C
0084  3465     RETLW 0x65
0085  3473     RETLW 0x73
0086  343A     RETLW 0x3A
0087  3420     RETLW 0x20
0088  3400     RETLW 0x0
                                                  198:   LF
0089  0782     ADDWF PCL, F                       199:           addwf   PCL,F
008A  344C     RETLW 0x4C                         200:           dt      "LF: ",0
008B  3446     RETLW 0x46
008C  343A     RETLW 0x3A
008D  3420     RETLW 0x20
008E  3400     RETLW 0x0
                                                  201:   FF
008F  0782     ADDWF PCL, F                       202:           addwf   PCL,F
0090  3446     RETLW 0x46                         203:           dt      "FF: ",0
0091  3446     RETLW 0x46
0092  343A     RETLW 0x3A
0093  3420     RETLW 0x20
0094  3400     RETLW 0x0
                                                  204:   None
0095  0782     ADDWF PCL, F                       205:           addwf   PCL,F
0096  343C     RETLW 0x3C                         206:           dt      "<none>", 0
0097  346E     RETLW 0x6E
0098  346F     RETLW 0x6F
0099  346E     RETLW 0x6E
009A  3465     RETLW 0x65
009B  343E     RETLW 0x3E
009C  3400     RETLW 0x0
                                                  207:   Logs_Msg1
009D  0782     ADDWF PCL, F                       208:           addwf   PCL,F
009E  3431     RETLW 0x31                         209:           dt      "1-4 to see log",0
009F  342D     RETLW 0x2D
00A0  3434     RETLW 0x34
00A1  3420     RETLW 0x20
00A2  3474     RETLW 0x74
00A3  346F     RETLW 0x6F
00A4  3420     RETLW 0x20
00A5  3473     RETLW 0x73
00A6  3465     RETLW 0x65
00A7  3465     RETLW 0x65
00A8  3420     RETLW 0x20
00A9  346C     RETLW 0x6C
00AA  346F     RETLW 0x6F
00AB  3467     RETLW 0x67
00AC  3400     RETLW 0x0
                                                  210:   Logs_Msg2
00AD  0782     ADDWF PCL, F                       211:           addwf   PCL,F
00AE  3453     RETLW 0x53                         212:           dt      "STANDBY to exit",0
00AF  3454     RETLW 0x54
00B0  3441     RETLW 0x41
00B1  344E     RETLW 0x4E
00B2  3444     RETLW 0x44
00B3  3442     RETLW 0x42
00B4  3459     RETLW 0x59
00B5  3420     RETLW 0x20
00B6  3474     RETLW 0x74
00B7  346F     RETLW 0x6F
00B8  3420     RETLW 0x20
00B9  3465     RETLW 0x65
00BA  3478     RETLW 0x78
00BB  3469     RETLW 0x69
00BC  3474     RETLW 0x74
00BD  3400     RETLW 0x0
                                                  213:   
                                                  214:   ;***************************************
                                                  215:   ; MAIN PROGRAM
                                                  216:   ;***************************************
                                                  217:   
                                                  218:   init
00BE  3080     MOVLW 0x80                         219:           movlf     b'10000000', INTCON   ;interrupts enabled
00BF  008B     MOVWF INTCON
                                                  220:   
00C0  1683     BSF STATUS, 0x5                    221:           bsf       STATUS,RP0     ; select bank 1
00C1  0185     CLRF PORTA                         222:           clrf      TRISA                 ; PortA is output - not yet used
00C2  30F2     MOVLW 0xF2                         223:           movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be external interrupt)
00C3  0086     MOVWF PORTB
                                                  224:                                           ; note can disable keypad to free up these ports during operation if necessary.
00C4  3018     MOVLW 0x18                         225:           movlf     b'00011000', TRISC    ; PortC[4:3] is RTC (rest unused; [7:6] may be RS-232)
00C5  0087     MOVWF PORTC
00C6  0188     CLRF PORTD                         226:           clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                                                  227:   
00C7  1283     BCF STATUS, 0x5                    228:           bcf       STATUS,RP0     ; select bank 0
00C8  0185     CLRF PORTA                         229:           clrf      PORTA
00C9  0186     CLRF PORTB                         230:           clrf      PORTB
00CA  0187     CLRF PORTC                         231:           clrf      PORTC
00CB  0188     CLRF PORTD                         232:           clrf      PORTD
                                                  233:   
00CC  254F     CALL 0x54F                         234:           call 	  i2c_common_setup  ;Set up I2C for communication
00CD  24E3     CALL 0x4E3                         235:           call      InitLCD           ;Initialize the LCD
00CE  2530     CALL 0x530                         236:           call      InitUSART         ;Set up USART for RS232
                                                  237:   
00CF  1283     BCF STATUS, 0x5                    238:           bcf STATUS,RP0          ; bank0
                                                  239:   		
00D0  01A2     CLRF 0x22                          240:           Display Standby_Msg
00D1  0103     CLRW
00D2  0822     MOVF 0x22, W
00D3  2005     CALL 0x5
00D4  3A00     XORLW 0x0
00D5  1903     BTFSC STATUS, 0x2
00D6  28DA     GOTO 0xDA
00D7  2516     CALL 0x516
00D8  0AA2     INCF 0x22, F
00D9  28D2     GOTO 0xD2
00DA  2504     CALL 0x504                         241:           call    Switch_Lines
                                                  242:         
                                                  243:    ;--------------------------------------------------
                                                  244:    ;      STANDBY MODE
                                                  245:   
                                                  246:   waiting
                                                  247:           ; Display date and time. 
                                                  248:           ; Also save starting time for log (will stop updating once we start)
00DB  3032     MOVLW 0x32                         249:           movlw	"2"				;First line shows 20**/**/**
00DC  2516     CALL 0x516                         250:   		call	WR_DATA
00DD  3030     MOVLW 0x30                         251:   		movlw	"0"
00DE  2516     CALL 0x516                         252:   		call	WR_DATA
00DF  3006     MOVLW 0x6                          253:   		rtc_read	0x06		;Read Address 0x06 from DS1307---year
00E0  1283     BCF STATUS, 0x5
00E1  1303     BCF STATUS, 0x6
00E2  00F3     MOVWF 0x73
00E3  259C     CALL 0x59C
00E4  1283     BCF STATUS, 0x5
00E5  1303     BCF STATUS, 0x6
00E6  0875     MOVF 0x75, W
00E7  25EB     CALL 0x5EB
00E8  0877     MOVF 0x77, W                       254:   		movfw	0x77
00E9  00BF     MOVWF 0x3F                         255:           movwf    start_year10    ;Save starting year dig10
00EA  2516     CALL 0x516                         256:   		call	WR_DATA
00EB  0878     MOVF 0x78, W                       257:   		movfw	0x78
00EC  00C0     MOVWF 0x40                         258:           movwf    start_year1    ;Save starting year dig1
00ED  2516     CALL 0x516                         259:   		call	WR_DATA
00EE  302F     MOVLW 0x2F                         260:   		movlw	"/"
00EF  2516     CALL 0x516                         261:   		call	WR_DATA
00F0  3005     MOVLW 0x5                          262:   		rtc_read	0x05		;Read Address 0x05 from DS1307---month
00F1  1283     BCF STATUS, 0x5
00F2  1303     BCF STATUS, 0x6
00F3  00F3     MOVWF 0x73
00F4  259C     CALL 0x59C
00F5  1283     BCF STATUS, 0x5
00F6  1303     BCF STATUS, 0x6
00F7  0875     MOVF 0x75, W
00F8  25EB     CALL 0x5EB
00F9  0877     MOVF 0x77, W                       263:   		movfw	0x77
00FA  00C1     MOVWF 0x41                         264:           movwf    start_month10    ;Save starting month dig10
00FB  2516     CALL 0x516                         265:   		call	WR_DATA
00FC  0878     MOVF 0x78, W                       266:   		movfw	0x78
00FD  00C2     MOVWF 0x42                         267:           movwf    start_month1    ;Save starting month dig1
00FE  2516     CALL 0x516                         268:   		call	WR_DATA
00FF  302F     MOVLW 0x2F                         269:   		movlw	"/"
0100  2516     CALL 0x516                         270:   		call	WR_DATA
0101  3004     MOVLW 0x4                          271:   		rtc_read	0x04		;Read Address 0x04 from DS1307---date
0102  1283     BCF STATUS, 0x5
0103  1303     BCF STATUS, 0x6
0104  00F3     MOVWF 0x73
0105  259C     CALL 0x59C
0106  1283     BCF STATUS, 0x5
0107  1303     BCF STATUS, 0x6
0108  0875     MOVF 0x75, W
0109  25EB     CALL 0x5EB
010A  0877     MOVF 0x77, W                       272:   		movfw	0x77
010B  00C3     MOVWF 0x43                         273:           movwf    start_date10    ;Save starting date dig10
010C  2516     CALL 0x516                         274:   		call	WR_DATA
010D  0878     MOVF 0x78, W                       275:   		movfw	0x78
010E  00C4     MOVWF 0x44                         276:           movwf    start_date1    ;Save starting date dig1
010F  2516     CALL 0x516                         277:   		call	WR_DATA
0110  3014     MOVLW 0x14                         278:   		spacebar
0111  2507     CALL 0x507
0112  3002     MOVLW 0x2                          279:   		rtc_read	0x02		;Read Address 0x02 from DS1307---hour
0113  1283     BCF STATUS, 0x5
0114  1303     BCF STATUS, 0x6
0115  00F3     MOVWF 0x73
0116  259C     CALL 0x59C
0117  1283     BCF STATUS, 0x5
0118  1303     BCF STATUS, 0x6
0119  0875     MOVF 0x75, W
011A  25EB     CALL 0x5EB
011B  0877     MOVF 0x77, W                       280:   		movfw	0x77
011C  00C5     MOVWF 0x45                         281:           movwf    start_hour10    ;Save starting hour dig10
011D  2516     CALL 0x516                         282:   		call	WR_DATA
011E  0878     MOVF 0x78, W                       283:   		movfw	0x78
011F  00C6     MOVWF 0x46                         284:           movwf    start_hour1    ;Save starting hour dig1
0120  2516     CALL 0x516                         285:   		call	WR_DATA
0121  303A     MOVLW 0x3A                         286:   		movlw	":"
0122  2516     CALL 0x516                         287:   		call	WR_DATA
0123  3001     MOVLW 0x1                          288:   		rtc_read	0x01		;Read Address 0x01 from DS1307---min
0124  1283     BCF STATUS, 0x5
0125  1303     BCF STATUS, 0x6
0126  00F3     MOVWF 0x73
0127  259C     CALL 0x59C
0128  1283     BCF STATUS, 0x5
0129  1303     BCF STATUS, 0x6
012A  0875     MOVF 0x75, W
012B  25EB     CALL 0x5EB
012C  0877     MOVF 0x77, W                       289:   		movfw	0x77
012D  00C7     MOVWF 0x47                         290:           movwf    start_min10    ;Save starting min dig10
012E  2516     CALL 0x516                         291:   		call	WR_DATA
012F  0878     MOVF 0x78, W                       292:   		movfw	0x78
0130  00C8     MOVWF 0x48                         293:           movwf    start_min1    ;Save starting min dig1
0131  2516     CALL 0x516                         294:   		call	WR_DATA
                                                  295:   		      
                                                  296:           ; Move cursor back to start of second line
                                                  297:           ; We will update displayed time but not the word "STANDBY"
0132  30C0     MOVLW 0xC0                         298:           movlw   B'11000000'
0133  2507     CALL 0x507                         299:           call    WR_INS
                                                  300:   
                                                  301:           ;Poll to start (will have to hold key for ~0.5sec)
0134  1C86     BTFSS PORTB, 0x1                   302:            btfss		PORTB,1     ;Wait until data is available from the keypad
0135  28DB     GOTO 0xDB                          303:            goto		waiting
                                                  304:   
0136  0E06     SWAPF PORTB, W                     305:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0137  390F     ANDLW 0xF                          306:            andlw		0x0F
0138  00A0     MOVWF 0x20                         307:            movwf      keytemp
0139  3A0C     XORLW 0xC                          308:            xorlw      0xC         ;Will be all zeros if its "START"
013A  1903     BTFSC STATUS, 0x2                  309:            btfsc      STATUS,Z    ;and Z will be high, so skip if not high
013B  2943     GOTO 0x143                         310:            goto       start
                                                  311:   
013C  0820     MOVF 0x20, W                       312:            movf       keytemp,W     ;Go to log interface
013D  3A0E     XORLW 0xE                          313:            xorlw      0xE
013E  1903     BTFSC STATUS, 0x2                  314:            btfsc      STATUS,Z
013F  2990     GOTO 0x190                         315:            goto       logs
                                                  316:   
0140  1886     BTFSC PORTB, 0x1                   317:            btfsc		PORTB,1     ;Wait until key is released
0141  2940     GOTO 0x140                         318:            goto		$-1
0142  28DB     GOTO 0xDB                          319:            goto       waiting
                                                  320:   
                                                  321:   ;-----------------------------------------------------------
                                                  322:   ;       ACTUAL OPERATION (I'm just adding values manually now)
                                                  323:   
                                                  324:   start
                                                  325:           ;Start the timer
0143  3026     MOVLW 0x26                         326:           movlf       D'38', count38
0144  00AF     MOVWF 0x2F
0145  01B2     CLRF 0x32                          327:           clrf        op_time
0146  168B     BSF INTCON, 0x5                    328:           bsf         INTCON, T0IE ;enable Timer0 interrupt
0147  0181     CLRF TMR0                          329:           clrf        TMR0
0148  1683     BSF STATUS, 0x5                    330:           banksel     OPTION_REG
0149  1303     BCF STATUS, 0x6
014A  30C7     MOVLW 0xC7                         331:           movlf       B'11000111', OPTION_REG ; 1:256 prescaler
014B  0081     MOVWF TMR0
014C  1283     BCF STATUS, 0x5                    332:           bcf        STATUS,RP0     ; back to bank 0
                                                  333:   
                                                  334:           ;Display starting message
014D  2501     CALL 0x501                         335:           call        Clear_Display
014E  01A2     CLRF 0x22                          336:           Display     Start_Msg       ;"Inspecting. . ."
014F  0103     CLRW
0150  0822     MOVF 0x22, W
0151  200E     CALL 0xE
0152  3A00     XORLW 0x0
0153  1903     BTFSC STATUS, 0x2
0154  2958     GOTO 0x158
0155  2516     CALL 0x516
0156  0AA2     INCF 0x22, F
0157  2950     GOTO 0x150
                                                  337:   
                                                  338:           ; just delaying for now 
0158  24D3     CALL 0x4D3                         339:           call        HalfS
0159  24D3     CALL 0x4D3                         340:           call        HalfS
015A  24D3     CALL 0x4D3                         341:           call        HalfS
015B  24D3     CALL 0x4D3                         342:           call        HalfS
                                                  343:           
                                                  344:           ; Putting values in manually. This will be done automatically in main program
015C  3001     MOVLW 0x1                          345:           movlf     B'01', state1     ;pass
015D  00B3     MOVWF 0x33
015E  3001     MOVLW 0x1                          346:           movlf     B'01', state2     ;pass
015F  00B4     MOVWF 0x34
0160  3003     MOVLW 0x3                          347:           movlf     B'11', state3     ;flicker fail
0161  00B5     MOVWF 0x35
0162  3003     MOVLW 0x3                          348:           movlf     B'11', state4     ;flicker fail
0163  00B6     MOVWF 0x36
0164  3001     MOVLW 0x1                          349:           movlf     B'01', state5     ;pass
0165  00B7     MOVWF 0x37
0166  3000     MOVLW 0x0                          350:           movlf     B'00', state6     ;not present
0167  00B8     MOVWF 0x38
0168  3001     MOVLW 0x1                          351:           movlf     B'01', state7     ;pass
0169  00B9     MOVWF 0x39
016A  3003     MOVLW 0x3                          352:           movlf     B'11', state8     ;flicker fail
016B  00BA     MOVWF 0x3A
016C  3001     MOVLW 0x1                          353:           movlf     B'01', state9     ;pass
016D  00BB     MOVWF 0x3B
016E  3000     MOVLW 0x0                          354:           movlf     D'0', num_LF
016F  00BC     MOVWF 0x3C
0170  3003     MOVLW 0x3                          355:           movlf     D'3', num_FF
0171  00BD     MOVWF 0x3D
0172  3008     MOVLW 0x8                          356:           movlf     D'8', num_tot
0173  00BE     MOVWF 0x3E
                                                  357:   
                                                  358:           ; Stop the timer
0174  128B     BCF INTCON, 0x5                    359:            bcf         INTCON, T0IE  ;disable Timer0 interrupt
                                                  360:   
                                                  361:           ; Display ending messages
0175  2501     CALL 0x501                         362:           call       Clear_Display
0176  01A2     CLRF 0x22                          363:           Display    End_Msg          ; "Complete"
0177  0103     CLRW
0178  0822     MOVF 0x22, W
0179  2020     CALL 0x20
017A  3A00     XORLW 0x0
017B  1903     BTFSC STATUS, 0x2
017C  2980     GOTO 0x180
017D  2516     CALL 0x516
017E  0AA2     INCF 0x22, F
017F  2978     GOTO 0x178
0180  24D3     CALL 0x4D3                         364:           call       HalfS
0181  239B     CALL 0x39B                         365:           call       time             ; "Operation time: X sec"
0182  24D3     CALL 0x4D3                         366:           call       HalfS
0183  24D3     CALL 0x4D3                         367:           call       HalfS
0184  22DA     CALL 0x2DA                         368:           call       summary          ; "Total candles: X. Defective: Y"
0185  24D3     CALL 0x4D3                         369:           call       HalfS
0186  24D3     CALL 0x4D3                         370:           call       HalfS
0187  230B     CALL 0x30B                         371:           call       defective        ; "FF: a b c. LF: d e f"
                                                  372:   ;-----------------------------------------------------------------------
                                                  373:   ; Data display interface
                                                  374:   
0188  1C86     BTFSS PORTB, 0x1                   375:   poll     btfss		PORTB,1     ;Wait until data is available from the keypad
0189  2988     GOTO 0x188                         376:            goto		$-1
                                                  377:   
018A  0E06     SWAPF PORTB, W                     378:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
018B  390F     ANDLW 0xF                          379:            andlw		0x0F
018C  2202     CALL 0x202                         380:            call       information ;Do the right thing
                                                  381:   
018D  1886     BTFSC PORTB, 0x1                   382:            btfsc		PORTB,1     ;Wait until key is released
018E  298D     GOTO 0x18D                         383:            goto		$-1
018F  2988     GOTO 0x188                         384:            goto       poll
                                                  385:   
                                                  386:   
                                                  387:   ;-------------------------------------------------------------------------
                                                  388:   ; LOGS INTERFACE            (DONT ACTUALLY HAVE LOGS YET!)
                                                  389:   ; Eventually this will show logs
                                                  390:   ; Right now it just displays random crap
                                                  391:   ; Access from STANDBY and return to STANDBY
                                                  392:   
                                                  393:   logs
0190  2501     CALL 0x501                         394:       call    Clear_Display
0191  01A2     CLRF 0x22                          395:       Display Logs_Msg1
0192  0103     CLRW
0193  0822     MOVF 0x22, W
0194  209D     CALL 0x9D
0195  3A00     XORLW 0x0
0196  1903     BTFSC STATUS, 0x2
0197  299B     GOTO 0x19B
0198  2516     CALL 0x516
0199  0AA2     INCF 0x22, F
019A  2993     GOTO 0x193
019B  2504     CALL 0x504                         396:       call    Switch_Lines
019C  01A2     CLRF 0x22                          397:       Display Logs_Msg2
019D  0103     CLRW
019E  0822     MOVF 0x22, W
019F  20AD     CALL 0xAD
01A0  3A00     XORLW 0x0
01A1  1903     BTFSC STATUS, 0x2
01A2  29A6     GOTO 0x1A6
01A3  2516     CALL 0x516
01A4  0AA2     INCF 0x22, F
01A5  299E     GOTO 0x19E
                                                  398:   
                                                  399:   polling
01A6  1C86     BTFSS PORTB, 0x1                   400:       btfss		PORTB,1     ;Wait until data is available from the keypad
01A7  29A6     GOTO 0x1A6                         401:       goto		$-1
                                                  402:   
01A8  0E06     SWAPF PORTB, W                     403:       swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
01A9  390F     ANDLW 0xF                          404:       andlw		0x0F
01AA  00A0     MOVWF 0x20                         405:       movwf       keytemp     ; Save which key was pressed
                                                  406:   
                                                  407:   check_log1
01AB  3A00     XORLW 0x0                          408:       xorlw   0x0         ;will be all zeros if its 1
01AC  1D03     BTFSS STATUS, 0x2                  409:       btfss   STATUS,Z    ;and Z will be high, so skip
01AD  29BB     GOTO 0x1BB                         410:       goto    check_log2
01AE  2501     CALL 0x501                         411:       call    Clear_Display
01AF  01A2     CLRF 0x22                          412:       Display None
01B0  0103     CLRW
01B1  0822     MOVF 0x22, W
01B2  2095     CALL 0x95
01B3  3A00     XORLW 0x0
01B4  1903     BTFSC STATUS, 0x2
01B5  29B9     GOTO 0x1B9
01B6  2516     CALL 0x516
01B7  0AA2     INCF 0x22, F
01B8  29B1     GOTO 0x1B1
01B9  24D3     CALL 0x4D3                         413:       call    HalfS
01BA  2990     GOTO 0x190                         414:       goto    logs
                                                  415:   
                                                  416:   check_log2
01BB  0820     MOVF 0x20, W                       417:       movf    keytemp, W
01BC  3A01     XORLW 0x1                          418:       xorlw   0x1
01BD  1D03     BTFSS STATUS, 0x2                  419:       btfss   STATUS,Z
01BE  29CC     GOTO 0x1CC                         420:       goto    check_log3
01BF  2501     CALL 0x501                         421:       call    Clear_Display
01C0  01A2     CLRF 0x22                          422:       Display None
01C1  0103     CLRW
01C2  0822     MOVF 0x22, W
01C3  2095     CALL 0x95
01C4  3A00     XORLW 0x0
01C5  1903     BTFSC STATUS, 0x2
01C6  29CA     GOTO 0x1CA
01C7  2516     CALL 0x516
01C8  0AA2     INCF 0x22, F
01C9  29C2     GOTO 0x1C2
01CA  24D3     CALL 0x4D3                         423:       call    HalfS
01CB  2990     GOTO 0x190                         424:       goto    logs
                                                  425:   
                                                  426:   check_log3
01CC  0820     MOVF 0x20, W                       427:       movf    keytemp, W
01CD  3A02     XORLW 0x2                          428:       xorlw   0x2
01CE  1D03     BTFSS STATUS, 0x2                  429:       btfss   STATUS,Z
01CF  29DD     GOTO 0x1DD                         430:       goto    check_log4
01D0  2501     CALL 0x501                         431:       call    Clear_Display
01D1  01A2     CLRF 0x22                          432:       Display None
01D2  0103     CLRW
01D3  0822     MOVF 0x22, W
01D4  2095     CALL 0x95
01D5  3A00     XORLW 0x0
01D6  1903     BTFSC STATUS, 0x2
01D7  29DB     GOTO 0x1DB
01D8  2516     CALL 0x516
01D9  0AA2     INCF 0x22, F
01DA  29D3     GOTO 0x1D3
01DB  24D3     CALL 0x4D3                         433:       call    HalfS
01DC  2990     GOTO 0x190                         434:       goto    logs
                                                  435:   
                                                  436:   check_log4
01DD  0820     MOVF 0x20, W                       437:       movf    keytemp, W
01DE  3A04     XORLW 0x4                          438:       xorlw   0x4
01DF  1D03     BTFSS STATUS, 0x2                  439:       btfss   STATUS,Z
01E0  29EE     GOTO 0x1EE                         440:       goto    check_done
01E1  2501     CALL 0x501                         441:       call    Clear_Display
01E2  01A2     CLRF 0x22                          442:       Display None
01E3  0103     CLRW
01E4  0822     MOVF 0x22, W
01E5  2095     CALL 0x95
01E6  3A00     XORLW 0x0
01E7  1903     BTFSC STATUS, 0x2
01E8  29EC     GOTO 0x1EC
01E9  2516     CALL 0x516
01EA  0AA2     INCF 0x22, F
01EB  29E4     GOTO 0x1E4
01EC  24D3     CALL 0x4D3                         443:       call    HalfS
01ED  2990     GOTO 0x190                         444:       goto    logs
                                                  445:   
                                                  446:   check_done
01EE  0820     MOVF 0x20, W                       447:       movf    keytemp, W
01EF  3A0D     XORLW 0xD                          448:       xorlw   0xD
01F0  1D03     BTFSS STATUS, 0x2                  449:       btfss   STATUS,Z
01F1  29FF     GOTO 0x1FF                         450:       goto    badkey
01F2  2501     CALL 0x501                         451:       call    Clear_Display
01F3  01A2     CLRF 0x22                          452:       Display Standby_Msg
01F4  0103     CLRW
01F5  0822     MOVF 0x22, W
01F6  2005     CALL 0x5
01F7  3A00     XORLW 0x0
01F8  1903     BTFSC STATUS, 0x2
01F9  29FD     GOTO 0x1FD
01FA  2516     CALL 0x516
01FB  0AA2     INCF 0x22, F
01FC  29F5     GOTO 0x1F5
01FD  2504     CALL 0x504                         453:       call    Switch_Lines
01FE  28DB     GOTO 0xDB                          454:       goto    waiting
                                                  455:   
                                                  456:   badkey
01FF  1886     BTFSC PORTB, 0x1                   457:       btfsc		PORTB,1     ;Wait until key is released
0200  29FF     GOTO 0x1FF                         458:       goto		$-1
0201  29A6     GOTO 0x1A6                         459:       goto        polling
                                                  460:     
                                                  461:   ; END OF MAIN PROGRAM
                                                  462:   ;------------------------------------------------------------
                                                  463:   
                                                  464:   
                                                  465:   ;***************************************
                                                  466:   ; DATA DISPLAY ROUTINE
                                                  467:   ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                                                  468:   ; Determines which key it was and displays appropriate info / branch
                                                  469:   ;***************************************
                                                  470:   
                                                  471:   information
0202  00A0     MOVWF 0x20                         472:       movwf   keytemp             ; Save which key was pressed
                                                  473:   
                                                  474:   check_1
0203  3A00     XORLW 0x0                          475:       xorlw   0x0         ;will be all zeros if its 1
0204  1D03     BTFSS STATUS, 0x2                  476:       btfss   STATUS,Z    ;and Z will be high, so skip
0205  2A0E     GOTO 0x20E                         477:       goto    check_2
0206  2501     CALL 0x501                         478:       call    Clear_Display
0207  3001     MOVLW 0x1                          479:       writenum 0x1
0208  3E30     ADDLW 0x30
0209  00A4     MOVWF 0x24
020A  2516     CALL 0x516
020B  0833     MOVF 0x33, W                       480:       movf    state1, W
020C  229D     CALL 0x29D                         481:       call    display_state
020D  0008     RETURN                             482:       return
                                                  483:   
                                                  484:   check_2
020E  0820     MOVF 0x20, W                       485:       movf    keytemp, W
020F  3A01     XORLW 0x1                          486:       xorlw   0x1
0210  1D03     BTFSS STATUS, 0x2                  487:       btfss   STATUS,Z
0211  2A1A     GOTO 0x21A                         488:       goto    check_3
0212  2501     CALL 0x501                         489:       call    Clear_Display
0213  3002     MOVLW 0x2                          490:       writenum 0x2
0214  3E30     ADDLW 0x30
0215  00A4     MOVWF 0x24
0216  2516     CALL 0x516
0217  0834     MOVF 0x34, W                       491:       movf    state2, W
0218  229D     CALL 0x29D                         492:       call    display_state
0219  0008     RETURN                             493:       return
                                                  494:   
                                                  495:   check_3
021A  0820     MOVF 0x20, W                       496:       movf    keytemp, W
021B  3A02     XORLW 0x2                          497:       xorlw   0x2
021C  1D03     BTFSS STATUS, 0x2                  498:       btfss   STATUS,Z
021D  2A26     GOTO 0x226                         499:       goto    check_4
021E  2501     CALL 0x501                         500:       call    Clear_Display
021F  3003     MOVLW 0x3                          501:       writenum 0x3
0220  3E30     ADDLW 0x30
0221  00A4     MOVWF 0x24
0222  2516     CALL 0x516
0223  0835     MOVF 0x35, W                       502:       movf    state3, W
0224  229D     CALL 0x29D                         503:       call    display_state
0225  0008     RETURN                             504:       return
                                                  505:   
                                                  506:   check_4
0226  0820     MOVF 0x20, W                       507:       movf    keytemp, W
0227  3A04     XORLW 0x4                          508:       xorlw   0x4
0228  1D03     BTFSS STATUS, 0x2                  509:       btfss   STATUS,Z
0229  2A32     GOTO 0x232                         510:       goto    check_5
022A  2501     CALL 0x501                         511:       call    Clear_Display
022B  3004     MOVLW 0x4                          512:       writenum 0x4
022C  3E30     ADDLW 0x30
022D  00A4     MOVWF 0x24
022E  2516     CALL 0x516
022F  0836     MOVF 0x36, W                       513:       movf    state4, W
0230  229D     CALL 0x29D                         514:       call    display_state
0231  0008     RETURN                             515:       return
                                                  516:   
                                                  517:   check_5
0232  0820     MOVF 0x20, W                       518:       movf    keytemp, W
0233  3A05     XORLW 0x5                          519:       xorlw   0x5
0234  1D03     BTFSS STATUS, 0x2                  520:       btfss   STATUS,Z
0235  2A3E     GOTO 0x23E                         521:       goto    check_6
0236  2501     CALL 0x501                         522:       call    Clear_Display
0237  3005     MOVLW 0x5                          523:       writenum 0x5
0238  3E30     ADDLW 0x30
0239  00A4     MOVWF 0x24
023A  2516     CALL 0x516
023B  0837     MOVF 0x37, W                       524:       movf    state5, W
023C  229D     CALL 0x29D                         525:       call    display_state
023D  0008     RETURN                             526:       return
                                                  527:   
                                                  528:   check_6
023E  0820     MOVF 0x20, W                       529:       movf    keytemp, W
023F  3A06     XORLW 0x6                          530:       xorlw   0x6
0240  1D03     BTFSS STATUS, 0x2                  531:       btfss   STATUS,Z
0241  2A4A     GOTO 0x24A                         532:       goto    check_7
0242  2501     CALL 0x501                         533:       call    Clear_Display
0243  3006     MOVLW 0x6                          534:       writenum 0x6
0244  3E30     ADDLW 0x30
0245  00A4     MOVWF 0x24
0246  2516     CALL 0x516
0247  0838     MOVF 0x38, W                       535:       movf    state6, W
0248  229D     CALL 0x29D                         536:       call    display_state
0249  0008     RETURN                             537:       return
                                                  538:   
                                                  539:   check_7
024A  0820     MOVF 0x20, W                       540:       movf    keytemp, W
024B  3A08     XORLW 0x8                          541:       xorlw   0x8
024C  1D03     BTFSS STATUS, 0x2                  542:       btfss   STATUS,Z
024D  2A56     GOTO 0x256                         543:       goto    check_8
024E  2501     CALL 0x501                         544:       call    Clear_Display
024F  3007     MOVLW 0x7                          545:       writenum 0x7
0250  3E30     ADDLW 0x30
0251  00A4     MOVWF 0x24
0252  2516     CALL 0x516
0253  0839     MOVF 0x39, W                       546:       movf    state7, W
0254  229D     CALL 0x29D                         547:       call    display_state
0255  0008     RETURN                             548:       return
                                                  549:   
                                                  550:   check_8
0256  0820     MOVF 0x20, W                       551:       movf    keytemp, W
0257  3A09     XORLW 0x9                          552:       xorlw   0x9
0258  1D03     BTFSS STATUS, 0x2                  553:       btfss   STATUS,Z
0259  2A62     GOTO 0x262                         554:       goto    check_9
025A  2501     CALL 0x501                         555:       call    Clear_Display
025B  3008     MOVLW 0x8                          556:       writenum 0x8
025C  3E30     ADDLW 0x30
025D  00A4     MOVWF 0x24
025E  2516     CALL 0x516
025F  083A     MOVF 0x3A, W                       557:       movf    state8, W
0260  229D     CALL 0x29D                         558:       call    display_state
0261  0008     RETURN                             559:       return
                                                  560:   
                                                  561:   check_9
0262  0820     MOVF 0x20, W                       562:       movf    keytemp, W
0263  3A0A     XORLW 0xA                          563:       xorlw   0xA
0264  1D03     BTFSS STATUS, 0x2                  564:       btfss   STATUS,Z
0265  2A6E     GOTO 0x26E                         565:       goto    check_summary
0266  2501     CALL 0x501                         566:       call    Clear_Display
0267  3009     MOVLW 0x9                          567:       writenum 0x9
0268  3E30     ADDLW 0x30
0269  00A4     MOVWF 0x24
026A  2516     CALL 0x516
026B  083B     MOVF 0x3B, W                       568:       movf    state9, W
026C  229D     CALL 0x29D                         569:       call    display_state
026D  0008     RETURN                             570:       return
                                                  571:   
                                                  572:   check_summary
026E  0820     MOVF 0x20, W                       573:       movf    keytemp, W
026F  3A03     XORLW 0x3                          574:       xorlw   0x3
0270  1D03     BTFSS STATUS, 0x2                  575:       btfss   STATUS,Z
0271  2A74     GOTO 0x274                         576:       goto    check_defective
0272  22DA     CALL 0x2DA                         577:       call    summary
0273  0008     RETURN                             578:       return
                                                  579:   
                                                  580:   check_defective
0274  0820     MOVF 0x20, W                       581:       movf    keytemp, W
0275  3A07     XORLW 0x7                          582:       xorlw   0x7
0276  1D03     BTFSS STATUS, 0x2                  583:       btfss   STATUS,Z
0277  2A7A     GOTO 0x27A                         584:       goto    check_time
0278  230B     CALL 0x30B                         585:       call    defective
0279  0008     RETURN                             586:       return
                                                  587:   
                                                  588:   check_time
027A  0820     MOVF 0x20, W                       589:       movf    keytemp, W
027B  3A0B     XORLW 0xB                          590:       xorlw   0xB
027C  1D03     BTFSS STATUS, 0x2                  591:       btfss   STATUS,Z
027D  2A80     GOTO 0x280                         592:       goto    check_export
027E  239B     CALL 0x39B                         593:       call    time
027F  0008     RETURN                             594:       return
                                                  595:   
                                                  596:   check_export                ;doesn't actually export yet
0280  0820     MOVF 0x20, W                       597:       movf    keytemp, W
0281  3A0F     XORLW 0xF                          598:       xorlw   0xF
0282  1D03     BTFSS STATUS, 0x2                  599:       btfss   STATUS,Z
0283  2A86     GOTO 0x286                         600:       goto    check_standby
0284  23C6     CALL 0x3C6                         601:       call    export
0285  0008     RETURN                             602:       return
                                                  603:   
                                                  604:   check_standby
0286  0820     MOVF 0x20, W                       605:       movf    keytemp, W
0287  3A0D     XORLW 0xD                          606:       xorlw   0xD
0288  1D03     BTFSS STATUS, 0x2                  607:       btfss   STATUS,Z
0289  2A97     GOTO 0x297                         608:       goto    check_start
028A  2501     CALL 0x501                         609:       call    Clear_Display
028B  01A2     CLRF 0x22                          610:       Display Standby_Msg
028C  0103     CLRW
028D  0822     MOVF 0x22, W
028E  2005     CALL 0x5
028F  3A00     XORLW 0x0
0290  1903     BTFSC STATUS, 0x2
0291  2A95     GOTO 0x295
0292  2516     CALL 0x516
0293  0AA2     INCF 0x22, F
0294  2A8D     GOTO 0x28D
0295  2504     CALL 0x504                         611:       call    Switch_Lines
0296  28DB     GOTO 0xDB                          612:       goto    waiting
                                                  613:   
                                                  614:   check_start
0297  0820     MOVF 0x20, W                       615:       movf    keytemp, W
0298  3A0C     XORLW 0xC                          616:       xorlw   0xC
0299  1D03     BTFSS STATUS, 0x2                  617:       btfss   STATUS,Z
029A  2A9C     GOTO 0x29C                         618:       goto    default_key
029B  2943     GOTO 0x143                         619:       goto    start
                                                  620:   
                                                  621:   default_key         ; will never get here
029C  0008     RETURN                             622:       return
                                                  623:   
                                                  624:   
                                                  625:   ;Display state subroutine
                                                  626:   ;stateN is in W
                                                  627:   display_state
029D  00A1     MOVWF 0x21                         628:       movwf  statetemp    ; save stateN
                                                  629:   
                                                  630:   check_none
029E  3A00     XORLW 0x0                          631:       xorlw   0x0
029F  1D03     BTFSS STATUS, 0x2                  632:       btfss   STATUS,Z
02A0  2AAC     GOTO 0x2AC                         633:       goto    check_pass
02A1  01A2     CLRF 0x22                          634:       Display Not_present
02A2  0103     CLRW
02A3  0822     MOVF 0x22, W
02A4  2045     CALL 0x45
02A5  3A00     XORLW 0x0
02A6  1903     BTFSC STATUS, 0x2
02A7  2AAB     GOTO 0x2AB
02A8  2516     CALL 0x516
02A9  0AA2     INCF 0x22, F
02AA  2AA3     GOTO 0x2A3
02AB  0008     RETURN                             635:       return
                                                  636:   
                                                  637:   check_pass
02AC  0821     MOVF 0x21, W                       638:       movf    statetemp, W
02AD  3A01     XORLW 0x1                          639:       xorlw   0x1
02AE  1D03     BTFSS STATUS, 0x2                  640:       btfss   STATUS,Z
02AF  2ABB     GOTO 0x2BB                         641:       goto    check_LED
02B0  01A2     CLRF 0x22                          642:       Display Pass
02B1  0103     CLRW
02B2  0822     MOVF 0x22, W
02B3  2054     CALL 0x54
02B4  3A00     XORLW 0x0
02B5  1903     BTFSC STATUS, 0x2
02B6  2ABA     GOTO 0x2BA
02B7  2516     CALL 0x516
02B8  0AA2     INCF 0x22, F
02B9  2AB2     GOTO 0x2B2
02BA  0008     RETURN                             643:       return
                                                  644:   
                                                  645:   check_LED
02BB  0821     MOVF 0x21, W                       646:       movf    statetemp, W
02BC  3A02     XORLW 0x2                          647:       xorlw   0x2
02BD  1D03     BTFSS STATUS, 0x2                  648:       btfss   STATUS,Z
02BE  2ACA     GOTO 0x2CA                         649:       goto    check_flick
02BF  01A2     CLRF 0x22                          650:       Display LED_fail
02C0  0103     CLRW
02C1  0822     MOVF 0x22, W
02C2  205C     CALL 0x5C
02C3  3A00     XORLW 0x0
02C4  1903     BTFSC STATUS, 0x2
02C5  2AC9     GOTO 0x2C9
02C6  2516     CALL 0x516
02C7  0AA2     INCF 0x22, F
02C8  2AC1     GOTO 0x2C1
02C9  0008     RETURN                             651:       return
                                                  652:   
                                                  653:   check_flick
02CA  0821     MOVF 0x21, W                       654:       movf    statetemp, W
02CB  3A03     XORLW 0x3                          655:       xorlw   0x3
02CC  1D03     BTFSS STATUS, 0x2                  656:       btfss   STATUS,Z
02CD  2AD9     GOTO 0x2D9                         657:       goto    default_state
02CE  01A2     CLRF 0x22                          658:       Display Flick_fail
02CF  0103     CLRW
02D0  0822     MOVF 0x22, W
02D1  2068     CALL 0x68
02D2  3A00     XORLW 0x0
02D3  1903     BTFSC STATUS, 0x2
02D4  2AD8     GOTO 0x2D8
02D5  2516     CALL 0x516
02D6  0AA2     INCF 0x22, F
02D7  2AD0     GOTO 0x2D0
02D8  0008     RETURN                             659:       return
                                                  660:   
                                                  661:   default_state   ; should never get here
02D9  0008     RETURN                             662:       return
                                                  663:   
                                                  664:   ; Summary Subroutine
                                                  665:   ; Displays total number of candles and number of defective candles
                                                  666:   ; Reads data from num_tot, num_LF, num_FF
                                                  667:   summary
02DA  2501     CALL 0x501                         668:       call            Clear_Display
02DB  01A2     CLRF 0x22                          669:       Display         Total_Msg
02DC  0103     CLRW
02DD  0822     MOVF 0x22, W
02DE  2078     CALL 0x78
02DF  3A00     XORLW 0x0
02E0  1903     BTFSC STATUS, 0x2
02E1  2AE5     GOTO 0x2E5
02E2  2516     CALL 0x516
02E3  0AA2     INCF 0x22, F
02E4  2ADD     GOTO 0x2DD
02E5  083E     MOVF 0x3E, W                       670:       writenum_reg    num_tot
02E6  3E30     ADDLW 0x30
02E7  00A4     MOVWF 0x24
02E8  2516     CALL 0x516
02E9  2504     CALL 0x504                         671:       call            Switch_Lines
02EA  01A2     CLRF 0x22                          672:       Display         LF
02EB  0103     CLRW
02EC  0822     MOVF 0x22, W
02ED  2089     CALL 0x89
02EE  3A00     XORLW 0x0
02EF  1903     BTFSC STATUS, 0x2
02F0  2AF4     GOTO 0x2F4
02F1  2516     CALL 0x516
02F2  0AA2     INCF 0x22, F
02F3  2AEC     GOTO 0x2EC
02F4  083C     MOVF 0x3C, W                       673:       writenum_reg    num_LF
02F5  3E30     ADDLW 0x30
02F6  00A4     MOVWF 0x24
02F7  2516     CALL 0x516
02F8  3014     MOVLW 0x14                         674:       spacebar
02F9  2507     CALL 0x507
02FA  3014     MOVLW 0x14                         675:       spacebar
02FB  2507     CALL 0x507
02FC  01A2     CLRF 0x22                          676:       Display         FF
02FD  0103     CLRW
02FE  0822     MOVF 0x22, W
02FF  208F     CALL 0x8F
0300  3A00     XORLW 0x0
0301  1903     BTFSC STATUS, 0x2
0302  2B06     GOTO 0x306
0303  2516     CALL 0x516
0304  0AA2     INCF 0x22, F
0305  2AFE     GOTO 0x2FE
0306  083D     MOVF 0x3D, W                       677:       writenum_reg    num_FF
0307  3E30     ADDLW 0x30
0308  00A4     MOVWF 0x24
0309  2516     CALL 0x516
030A  0008     RETURN                             678:       return
                                                  679:   
                                                  680:   ; Defective candles Subroutine
                                                  681:   ; Displays index of each defective candle (LF or FF)
                                                  682:   ; Reads data from state1 - state9
                                                  683:   defective
030B  2501     CALL 0x501                         684:       call            Clear_Display
                                                  685:   
030C  01A2     CLRF 0x22                          686:       Display         LF              ; first look at LF
030D  0103     CLRW
030E  0822     MOVF 0x22, W
030F  2089     CALL 0x89
0310  3A00     XORLW 0x0
0311  1903     BTFSC STATUS, 0x2
0312  2B16     GOTO 0x316
0313  2516     CALL 0x516
0314  0AA2     INCF 0x22, F
0315  2B0E     GOTO 0x30E
0316  08BC     MOVF 0x3C, F                       687:       movf            num_LF, F
0317  1D03     BTFSS STATUS, 0x2                  688:       btfss           STATUS,Z         ;if none LF, just say "none"
0318  2B24     GOTO 0x324                         689:       goto            check_LF
0319  01A2     CLRF 0x22                          690:       Display         None
031A  0103     CLRW
031B  0822     MOVF 0x22, W
031C  2095     CALL 0x95
031D  3A00     XORLW 0x0
031E  1903     BTFSC STATUS, 0x2
031F  2B23     GOTO 0x323
0320  2516     CALL 0x516
0321  0AA2     INCF 0x22, F
0322  2B1B     GOTO 0x31B
0323  2B26     GOTO 0x326                         691:       goto            now_FF
                                                  692:   
                                                  693:   check_LF                            ; list all LF candles
0324  3002     MOVLW 0x2                          694:       movlw           B'00000010'
0325  2342     CALL 0x342                         695:       call            check_for_fail
                                                  696:   
                                                  697:   now_FF                              ; now look at FF
0326  2504     CALL 0x504                         698:       call            Switch_Lines
0327  01A2     CLRF 0x22                          699:       Display         FF
0328  0103     CLRW
0329  0822     MOVF 0x22, W
032A  208F     CALL 0x8F
032B  3A00     XORLW 0x0
032C  1903     BTFSC STATUS, 0x2
032D  2B31     GOTO 0x331
032E  2516     CALL 0x516
032F  0AA2     INCF 0x22, F
0330  2B29     GOTO 0x329
0331  08BD     MOVF 0x3D, F                       700:       movf            num_FF, F
0332  1D03     BTFSS STATUS, 0x2                  701:       btfss           STATUS,Z         ;if none FF, just say "none"
0333  2B3F     GOTO 0x33F                         702:       goto            check_FF
0334  01A2     CLRF 0x22                          703:       Display         None
0335  0103     CLRW
0336  0822     MOVF 0x22, W
0337  2095     CALL 0x95
0338  3A00     XORLW 0x0
0339  1903     BTFSC STATUS, 0x2
033A  2B3E     GOTO 0x33E
033B  2516     CALL 0x516
033C  0AA2     INCF 0x22, F
033D  2B36     GOTO 0x336
033E  0008     RETURN                             704:       return
                                                  705:   
                                                  706:   check_FF                            ; list all FF candles
033F  3003     MOVLW 0x3                          707:       movlw           B'00000011'
0340  2342     CALL 0x342                         708:       call            check_for_fail
0341  0008     RETURN                             709:       return
                                                  710:   
                                                  711:   check_for_fail  ;lists all candles that have status currently in W
0342  00A1     MOVWF 0x21                         712:       movwf           statetemp
                                                  713:   one
0343  0233     SUBWF 0x33, W                      714:       subwf           state1, W          ;defective state1 = W
0344  1D03     BTFSS STATUS, 0x2                  715:       btfss           STATUS,Z
0345  2B4C     GOTO 0x34C                         716:       goto            two
0346  3001     MOVLW 0x1                          717:       writenum        0x1
0347  3E30     ADDLW 0x30
0348  00A4     MOVWF 0x24
0349  2516     CALL 0x516
034A  3014     MOVLW 0x14                         718:       spacebar
034B  2507     CALL 0x507
                                                  719:   two
034C  0821     MOVF 0x21, W                       720:       movf            statetemp, W
034D  0234     SUBWF 0x34, W                      721:       subwf           state2, W          ;defective state1 = W
034E  1D03     BTFSS STATUS, 0x2                  722:       btfss           STATUS,Z
034F  2B56     GOTO 0x356                         723:       goto            three
0350  3002     MOVLW 0x2                          724:       writenum        0x2
0351  3E30     ADDLW 0x30
0352  00A4     MOVWF 0x24
0353  2516     CALL 0x516
0354  3014     MOVLW 0x14                         725:       spacebar
0355  2507     CALL 0x507
                                                  726:   three
0356  0821     MOVF 0x21, W                       727:       movf            statetemp, W
0357  0235     SUBWF 0x35, W                      728:       subwf           state3, W          ;defective state1 = W
0358  1D03     BTFSS STATUS, 0x2                  729:       btfss           STATUS,Z
0359  2B60     GOTO 0x360                         730:       goto            four
035A  3003     MOVLW 0x3                          731:       writenum        0x3
035B  3E30     ADDLW 0x30
035C  00A4     MOVWF 0x24
035D  2516     CALL 0x516
035E  3014     MOVLW 0x14                         732:       spacebar
035F  2507     CALL 0x507
                                                  733:   four
0360  0821     MOVF 0x21, W                       734:       movf            statetemp, W
0361  0236     SUBWF 0x36, W                      735:       subwf           state4, W          ;defective state1 = W
0362  1D03     BTFSS STATUS, 0x2                  736:       btfss           STATUS,Z
0363  2B6A     GOTO 0x36A                         737:       goto            five
0364  3004     MOVLW 0x4                          738:       writenum        0x4
0365  3E30     ADDLW 0x30
0366  00A4     MOVWF 0x24
0367  2516     CALL 0x516
0368  3014     MOVLW 0x14                         739:       spacebar
0369  2507     CALL 0x507
                                                  740:   five
036A  0821     MOVF 0x21, W                       741:       movf            statetemp, W
036B  0237     SUBWF 0x37, W                      742:       subwf           state5, W          ;defective state1 = W
036C  1D03     BTFSS STATUS, 0x2                  743:       btfss           STATUS,Z
036D  2B74     GOTO 0x374                         744:       goto            six
036E  3005     MOVLW 0x5                          745:       writenum        0x5
036F  3E30     ADDLW 0x30
0370  00A4     MOVWF 0x24
0371  2516     CALL 0x516
0372  3014     MOVLW 0x14                         746:       spacebar
0373  2507     CALL 0x507
                                                  747:   six
0374  0821     MOVF 0x21, W                       748:       movf            statetemp, W
0375  0238     SUBWF 0x38, W                      749:       subwf           state6, W          ;defective state1 = W
0376  1D03     BTFSS STATUS, 0x2                  750:       btfss           STATUS,Z
0377  2B7E     GOTO 0x37E                         751:       goto            seven
0378  3006     MOVLW 0x6                          752:       writenum        0x6
0379  3E30     ADDLW 0x30
037A  00A4     MOVWF 0x24
037B  2516     CALL 0x516
037C  3014     MOVLW 0x14                         753:       spacebar
037D  2507     CALL 0x507
                                                  754:   seven
037E  0821     MOVF 0x21, W                       755:       movf            statetemp, W
037F  0239     SUBWF 0x39, W                      756:       subwf           state7, W          ;defective state1 = W
0380  1D03     BTFSS STATUS, 0x2                  757:       btfss           STATUS,Z
0381  2B88     GOTO 0x388                         758:       goto            eight
0382  3007     MOVLW 0x7                          759:       writenum        0x7
0383  3E30     ADDLW 0x30
0384  00A4     MOVWF 0x24
0385  2516     CALL 0x516
0386  3014     MOVLW 0x14                         760:       spacebar
0387  2507     CALL 0x507
                                                  761:   eight
0388  0821     MOVF 0x21, W                       762:       movf            statetemp, W
0389  023A     SUBWF 0x3A, W                      763:       subwf           state8, W          ;defective state1 = W
038A  1D03     BTFSS STATUS, 0x2                  764:       btfss           STATUS,Z
038B  2B92     GOTO 0x392                         765:       goto            nine
038C  3008     MOVLW 0x8                          766:       writenum        0x8
038D  3E30     ADDLW 0x30
038E  00A4     MOVWF 0x24
038F  2516     CALL 0x516
0390  3014     MOVLW 0x14                         767:       spacebar
0391  2507     CALL 0x507
                                                  768:   nine
0392  0821     MOVF 0x21, W                       769:       movf            statetemp, W
0393  023B     SUBWF 0x3B, W                      770:       subwf           state9, W          ;defective state1 = W
0394  1D03     BTFSS STATUS, 0x2                  771:       btfss           STATUS,Z
0395  2B9A     GOTO 0x39A                         772:       goto            end_check_fail
0396  3009     MOVLW 0x9                          773:       writenum        0x9
0397  3E30     ADDLW 0x30
0398  00A4     MOVWF 0x24
0399  2516     CALL 0x516
                                                  774:   end_check_fail
039A  0008     RETURN                             775:       return
                                                  776:   
                                                  777:   ; Time subroutine
                                                  778:   ; Right now this takes the time in seconds as a binary number in op_time
                                                  779:   ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                                                  780:   ; incremented every second. However I may just take the stop time - start time
                                                  781:   ; from the RTC data so this might change a lot.
                                                  782:   time
039B  2501     CALL 0x501                         783:       call    Clear_Display
039C  01A2     CLRF 0x22                          784:       Display Time_Msg
039D  0103     CLRW
039E  0822     MOVF 0x22, W
039F  202A     CALL 0x2A
03A0  3A00     XORLW 0x0
03A1  1903     BTFSC STATUS, 0x2
03A2  2BA6     GOTO 0x3A6
03A3  2516     CALL 0x516
03A4  0AA2     INCF 0x22, F
03A5  2B9E     GOTO 0x39E
03A6  2504     CALL 0x504                         785:       call    Switch_Lines
03A7  0832     MOVF 0x32, W                       786:       movf    op_time, W
03A8  24A0     CALL 0x4A0                         787:       call    big_number
03A9  08AB     MOVF 0x2B, F                       788:       movf    huns, F
03AA  1903     BTFSC STATUS, 0x2                  789:       btfsc   STATUS,Z        ;if huns is zero don't display it
03AB  2BB0     GOTO 0x3B0                         790:       goto    no_huns
03AC  082B     MOVF 0x2B, W                       791:       writenum_reg    huns
03AD  3E30     ADDLW 0x30
03AE  00A4     MOVWF 0x24
03AF  2516     CALL 0x516
                                                  792:   no_huns
03B0  08AC     MOVF 0x2C, F                       793:       movf    tens, F
03B1  1903     BTFSC STATUS, 0x2                  794:       btfsc   STATUS,Z        ;if tens is zero don't display it
03B2  2BB7     GOTO 0x3B7                         795:       goto    no_tens
03B3  082C     MOVF 0x2C, W                       796:       writenum_reg    tens
03B4  3E30     ADDLW 0x30
03B5  00A4     MOVWF 0x24
03B6  2516     CALL 0x516
                                                  797:   no_tens
03B7  082D     MOVF 0x2D, W                       798:       writenum_reg    ones
03B8  3E30     ADDLW 0x30
03B9  00A4     MOVWF 0x24
03BA  2516     CALL 0x516
03BB  01A2     CLRF 0x22                          799:       Display Seconds
03BC  0103     CLRW
03BD  0822     MOVF 0x22, W
03BE  203B     CALL 0x3B
03BF  3A00     XORLW 0x0
03C0  1903     BTFSC STATUS, 0x2
03C1  2BC5     GOTO 0x3C5
03C2  2516     CALL 0x516
03C3  0AA2     INCF 0x22, F
03C4  2BBD     GOTO 0x3BD
03C5  0008     RETURN                             800:       return
                                                  801:   
                                                  802:   ; Export subroutine         
                                                  803:   ; Exports data from current run to hyperterminal
                                                  804:   ; reads start time and num_tot/num_ff/num_lf data
                                                  805:   export
03C6  3007     MOVLW 0x7                          806:       printchar 0x7       ;makes a noise on the PC
03C7  253A     CALL 0x53A
03C8  3054     MOVLW 0x54                         807:       printchar   "T"
03C9  253A     CALL 0x53A
03CA  3065     MOVLW 0x65                         808:       printchar   "e"
03CB  253A     CALL 0x53A
03CC  3073     MOVLW 0x73                         809:       printchar   "s"
03CD  253A     CALL 0x53A
03CE  3074     MOVLW 0x74                         810:       printchar   "t"
03CF  253A     CALL 0x53A
03D0  3020     MOVLW 0x20                         811:       printchar   " "
03D1  253A     CALL 0x53A
03D2  3061     MOVLW 0x61                         812:       printchar   "a"
03D3  253A     CALL 0x53A
03D4  3074     MOVLW 0x74                         813:       printchar   "t"
03D5  253A     CALL 0x53A
03D6  303A     MOVLW 0x3A                         814:       printchar   ":"
03D7  253A     CALL 0x53A
03D8  3020     MOVLW 0x20                         815:       printchar   " "
03D9  253A     CALL 0x53A
03DA  3032     MOVLW 0x32                         816:       printchar   "2"
03DB  253A     CALL 0x53A
03DC  3030     MOVLW 0x30                         817:       printchar   "0"
03DD  253A     CALL 0x53A
03DE  1283     BCF STATUS, 0x5                    818:       printASC   start_year10
03DF  1303     BCF STATUS, 0x6
03E0  083F     MOVF 0x3F, W
03E1  253A     CALL 0x53A
03E2  1283     BCF STATUS, 0x5                    819:       printASC   start_year1
03E3  1303     BCF STATUS, 0x6
03E4  0840     MOVF 0x40, W
03E5  253A     CALL 0x53A
03E6  302F     MOVLW 0x2F                         820:       printchar   "/"
03E7  253A     CALL 0x53A
03E8  1283     BCF STATUS, 0x5                    821:       printASC   start_month10
03E9  1303     BCF STATUS, 0x6
03EA  0841     MOVF 0x41, W
03EB  253A     CALL 0x53A
03EC  1283     BCF STATUS, 0x5                    822:       printASC   start_month1
03ED  1303     BCF STATUS, 0x6
03EE  0842     MOVF 0x42, W
03EF  253A     CALL 0x53A
03F0  302F     MOVLW 0x2F                         823:       printchar   "/"
03F1  253A     CALL 0x53A
03F2  1283     BCF STATUS, 0x5                    824:       printASC   start_date10
03F3  1303     BCF STATUS, 0x6
03F4  0843     MOVF 0x43, W
03F5  253A     CALL 0x53A
03F6  1283     BCF STATUS, 0x5                    825:       printASC   start_date1
03F7  1303     BCF STATUS, 0x6
03F8  0844     MOVF 0x44, W
03F9  253A     CALL 0x53A
03FA  3020     MOVLW 0x20                         826:       printchar   " "
03FB  253A     CALL 0x53A
03FC  1283     BCF STATUS, 0x5                    827:       printASC   start_hour10
03FD  1303     BCF STATUS, 0x6
03FE  0845     MOVF 0x45, W
03FF  253A     CALL 0x53A
0400  1283     BCF STATUS, 0x5                    828:       printASC   start_hour1
0401  1303     BCF STATUS, 0x6
0402  0846     MOVF 0x46, W
0403  253A     CALL 0x53A
0404  303A     MOVLW 0x3A                         829:       printchar   ":"
0405  253A     CALL 0x53A
0406  1283     BCF STATUS, 0x5                    830:       printASC   start_min10
0407  1303     BCF STATUS, 0x6
0408  0847     MOVF 0x47, W
0409  253A     CALL 0x53A
040A  1283     BCF STATUS, 0x5                    831:       printASC   start_min1
040B  1303     BCF STATUS, 0x6
040C  0848     MOVF 0x48, W
040D  253A     CALL 0x53A
040E  300A     MOVLW 0xA                          832:       newline
040F  253A     CALL 0x53A
0410  300D     MOVLW 0xD
0411  253A     CALL 0x53A
0412  3054     MOVLW 0x54                         833:       printchar   "T"
0413  253A     CALL 0x53A
0414  3069     MOVLW 0x69                         834:       printchar   "i"
0415  253A     CALL 0x53A
0416  306D     MOVLW 0x6D                         835:       printchar   "m"
0417  253A     CALL 0x53A
0418  3065     MOVLW 0x65                         836:       printchar   "e"
0419  253A     CALL 0x53A
041A  303A     MOVLW 0x3A                         837:       printchar   ":"
041B  253A     CALL 0x53A
041C  3020     MOVLW 0x20                         838:       printchar   " "
041D  253A     CALL 0x53A
041E  08AB     MOVF 0x2B, F                       839:       movf    huns, F
041F  1903     BTFSC STATUS, 0x2                  840:       btfsc   STATUS,Z        ;if huns is zero don't display it
0420  2C26     GOTO 0x426                         841:       goto    nohuns
0421  1283     BCF STATUS, 0x5                    842:       printBCD   huns
0422  1303     BCF STATUS, 0x6
0423  082B     MOVF 0x2B, W
0424  3E30     ADDLW 0x30
0425  253A     CALL 0x53A
                                                  843:   nohuns
0426  08AC     MOVF 0x2C, F                       844:       movf    tens, F
0427  1903     BTFSC STATUS, 0x2                  845:       btfsc   STATUS,Z        ;if tens is zero don't display it (doesn't work?)
0428  2C2E     GOTO 0x42E                         846:       goto    notens
0429  1283     BCF STATUS, 0x5                    847:       printBCD   tens
042A  1303     BCF STATUS, 0x6
042B  082C     MOVF 0x2C, W
042C  3E30     ADDLW 0x30
042D  253A     CALL 0x53A
                                                  848:   notens
042E  1283     BCF STATUS, 0x5                    849:       printBCD   ones
042F  1303     BCF STATUS, 0x6
0430  082D     MOVF 0x2D, W
0431  3E30     ADDLW 0x30
0432  253A     CALL 0x53A
0433  3073     MOVLW 0x73                         850:       printchar   "s"
0434  253A     CALL 0x53A
0435  3065     MOVLW 0x65                         851:       printchar   "e"
0436  253A     CALL 0x53A
0437  3063     MOVLW 0x63                         852:       printchar   "c"
0438  253A     CALL 0x53A
0439  300A     MOVLW 0xA                          853:       newline
043A  253A     CALL 0x53A
043B  300D     MOVLW 0xD
043C  253A     CALL 0x53A
043D  3043     MOVLW 0x43                         854:       printchar   "C"
043E  253A     CALL 0x53A
043F  3061     MOVLW 0x61                         855:       printchar   "a"
0440  253A     CALL 0x53A
0441  306E     MOVLW 0x6E                         856:       printchar   "n"
0442  253A     CALL 0x53A
0443  3064     MOVLW 0x64                         857:       printchar   "d"
0444  253A     CALL 0x53A
0445  306C     MOVLW 0x6C                         858:       printchar   "l"
0446  253A     CALL 0x53A
0447  3065     MOVLW 0x65                         859:       printchar   "e"
0448  253A     CALL 0x53A
0449  3073     MOVLW 0x73                         860:       printchar   "s"
044A  253A     CALL 0x53A
044B  303A     MOVLW 0x3A                         861:       printchar   ":"
044C  253A     CALL 0x53A
044D  3020     MOVLW 0x20                         862:       printchar   " "
044E  253A     CALL 0x53A
044F  1283     BCF STATUS, 0x5                    863:       printBCD    num_tot
0450  1303     BCF STATUS, 0x6
0451  083E     MOVF 0x3E, W
0452  3E30     ADDLW 0x30
0453  253A     CALL 0x53A
0454  300A     MOVLW 0xA                          864:       newline
0455  253A     CALL 0x53A
0456  300D     MOVLW 0xD
0457  253A     CALL 0x53A
0458  304C     MOVLW 0x4C                         865:       printchar   "L"
0459  253A     CALL 0x53A
045A  3045     MOVLW 0x45                         866:       printchar   "E"
045B  253A     CALL 0x53A
045C  3044     MOVLW 0x44                         867:       printchar   "D"
045D  253A     CALL 0x53A
045E  3020     MOVLW 0x20                         868:       printchar   " "
045F  253A     CALL 0x53A
0460  3066     MOVLW 0x66                         869:       printchar   "f"
0461  253A     CALL 0x53A
0462  3061     MOVLW 0x61                         870:       printchar   "a"
0463  253A     CALL 0x53A
0464  3069     MOVLW 0x69                         871:       printchar   "i"
0465  253A     CALL 0x53A
0466  306C     MOVLW 0x6C                         872:       printchar   "l"
0467  253A     CALL 0x53A
0468  303A     MOVLW 0x3A                         873:       printchar   ":"
0469  253A     CALL 0x53A
046A  3020     MOVLW 0x20                         874:       printchar   " "
046B  253A     CALL 0x53A
046C  1283     BCF STATUS, 0x5                    875:       printBCD    num_LF
046D  1303     BCF STATUS, 0x6
046E  083C     MOVF 0x3C, W
046F  3E30     ADDLW 0x30
0470  253A     CALL 0x53A
0471  300A     MOVLW 0xA                          876:       newline
0472  253A     CALL 0x53A
0473  300D     MOVLW 0xD
0474  253A     CALL 0x53A
0475  3046     MOVLW 0x46                         877:       printchar   "F"
0476  253A     CALL 0x53A
0477  306C     MOVLW 0x6C                         878:       printchar   "l"
0478  253A     CALL 0x53A
0479  3069     MOVLW 0x69                         879:       printchar   "i"
047A  253A     CALL 0x53A
047B  3063     MOVLW 0x63                         880:       printchar   "c"
047C  253A     CALL 0x53A
047D  306B     MOVLW 0x6B                         881:       printchar   "k"
047E  253A     CALL 0x53A
047F  3065     MOVLW 0x65                         882:       printchar   "e"
0480  253A     CALL 0x53A
0481  3072     MOVLW 0x72                         883:       printchar   "r"
0482  253A     CALL 0x53A
0483  3020     MOVLW 0x20                         884:       printchar   " "
0484  253A     CALL 0x53A
0485  3066     MOVLW 0x66                         885:       printchar   "f"
0486  253A     CALL 0x53A
0487  3061     MOVLW 0x61                         886:       printchar   "a"
0488  253A     CALL 0x53A
0489  3069     MOVLW 0x69                         887:       printchar   "i"
048A  253A     CALL 0x53A
048B  306C     MOVLW 0x6C                         888:       printchar   "l"
048C  253A     CALL 0x53A
048D  303A     MOVLW 0x3A                         889:       printchar   ":"
048E  253A     CALL 0x53A
048F  3020     MOVLW 0x20                         890:       printchar   " "
0490  253A     CALL 0x53A
0491  1283     BCF STATUS, 0x5                    891:       printBCD    num_FF
0492  1303     BCF STATUS, 0x6
0493  083D     MOVF 0x3D, W
0494  3E30     ADDLW 0x30
0495  253A     CALL 0x53A
0496  300A     MOVLW 0xA                          892:       newline
0497  253A     CALL 0x53A
0498  300D     MOVLW 0xD
0499  253A     CALL 0x53A
049A  300A     MOVLW 0xA                          893:       newline  
049B  253A     CALL 0x53A
049C  300D     MOVLW 0xD
049D  253A     CALL 0x53A
049E  1283     BCF STATUS, 0x5                    894:       bcf STATUS,RP0  ;bank 0
049F  0008     RETURN                             895:       return
                                                  896:   
                                                  897:   
                                                  898:   ;***************************************
                                                  899:   ; GENERAL PURPOSE SUBROUTINES
                                                  900:   ;***************************************
                                                  901:   
                                                  902:   ; DISPLAY BIG NUMBER SUBROUTINE
                                                  903:   ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                                                  904:   ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                                                  905:   ; Uses "shift and add 3" algorithm
                                                  906:   big_number
04A0  0832     MOVF 0x32, W                       907:       movff   op_time, op_time_save         ;save the original op_time
04A1  00AA     MOVWF 0x2A
04A2  3008     MOVLW 0x8                          908:       movlf   8, bignumcount                ;will shift 8 times
04A3  00AE     MOVWF 0x2E
04A4  01AB     CLRF 0x2B                          909:       clrf    huns
04A5  01AC     CLRF 0x2C                          910:       clrf    tens
04A6  01AD     CLRF 0x2D                          911:       clrf    ones
                                                  912:   
                                                  913:   BCDadd3                             ; if any digit > 5, add3
04A7  3005     MOVLW 0x5                          914:       movlw   0x5
04A8  022B     SUBWF 0x2B, W                      915:       subwf   huns, W
04A9  1803     BTFSC STATUS, 0x0                  916:       btfsc   STATUS, C
04AA  24C4     CALL 0x4C4                         917:       call    add3huns
                                                  918:   
04AB  3005     MOVLW 0x5                          919:       movlw   0x5
04AC  022C     SUBWF 0x2C, W                      920:       subwf   tens, W
04AD  1803     BTFSC STATUS, 0x0                  921:       btfsc   STATUS, C
04AE  24C7     CALL 0x4C7                         922:       call    add3tens
                                                  923:   
04AF  3005     MOVLW 0x5                          924:       movlw   0x5
04B0  022D     SUBWF 0x2D, W                      925:       subwf   ones, W
04B1  1803     BTFSC STATUS, 0x0                  926:       btfsc   STATUS, C
04B2  24CA     CALL 0x4CA                         927:       call    add3ones
                                                  928:   
04B3  03AE     DECF 0x2E, F                       929:       decf    bignumcount, 1
04B4  1003     BCF STATUS, 0x0                    930:       bcf     STATUS, C
04B5  0DB2     RLF 0x32, F                        931:       rlf     op_time, 1              ; shift
04B6  0DAD     RLF 0x2D, F                        932:       rlf     ones, 1
04B7  1A2D     BTFSC 0x2D, 0x4                    933:       btfsc   ones,4 ;
04B8  24CD     CALL 0x4CD                         934:       call    carryones               ; carry if too large
04B9  0DAC     RLF 0x2C, F                        935:       rlf     tens, 1
                                                  936:   
04BA  1A2C     BTFSC 0x2C, 0x4                    937:       btfsc   tens,4 ;
04BB  24D0     CALL 0x4D0                         938:       call    carrytens
04BC  0DAB     RLF 0x2B, F                        939:       rlf     huns,1
04BD  1003     BCF STATUS, 0x0                    940:       bcf     STATUS, C
                                                  941:   
04BE  082E     MOVF 0x2E, W                       942:       movf    bignumcount, W
04BF  1D03     BTFSS STATUS, 0x2                  943:       btfss   STATUS, Z
04C0  2CA7     GOTO 0x4A7                         944:       goto    BCDadd3                 ; repeat until you've shifted it 8 times
                                                  945:   
04C1  082A     MOVF 0x2A, W                       946:       movff    op_time_save, op_time     ;restore the original op_time
04C2  00B2     MOVWF 0x32
04C3  0008     RETURN                             947:       return
                                                  948:   
                                                  949:   add3huns
04C4  3003     MOVLW 0x3                          950:       movlw 0x3
04C5  07AB     ADDWF 0x2B, F                      951:       addwf huns,F
04C6  0008     RETURN                             952:       return
                                                  953:   add3tens
04C7  3003     MOVLW 0x3                          954:       movlw 0x3
04C8  07AC     ADDWF 0x2C, F                      955:       addwf tens,F
04C9  0008     RETURN                             956:       return
                                                  957:   add3ones
04CA  3003     MOVLW 0x3                          958:       movlw 0x3
04CB  07AD     ADDWF 0x2D, F                      959:       addwf ones,F
04CC  0008     RETURN                             960:       return
                                                  961:   carryones
04CD  122D     BCF 0x2D, 0x4                      962:       bcf ones, 4
04CE  1403     BSF STATUS, 0x0                    963:       bsf STATUS, C
04CF  0008     RETURN                             964:       return
                                                  965:   carrytens
04D0  122C     BCF 0x2C, 0x4                      966:       bcf tens, 4
04D1  1403     BSF STATUS, 0x0                    967:       bsf STATUS, C
04D2  0008     RETURN                             968:       return
                                                  969:   
                                                  970:   
                                                  971:   ; DELAY 0.5S SUBROUTINE (from sample code)
                                                  972:   ; Delays exactly 0.5sec
                                                  973:   HalfS
                                                  974:   	local	HalfS_0
04D3  3088     MOVLW 0x88                         975:         movlw 0x88
04D4  00A7     MOVWF 0x27                         976:         movwf COUNTH
04D5  30BD     MOVLW 0xBD                         977:         movlw 0xBD
04D6  00A8     MOVWF 0x28                         978:         movwf COUNTM
04D7  3003     MOVLW 0x3                          979:         movlw 0x03
04D8  00A9     MOVWF 0x29                         980:         movwf COUNTL
                                                  981:   
                                                  982:   HalfS_0
04D9  0BA7     DECFSZ 0x27, F                     983:         decfsz COUNTH, f
04DA  2CDC     GOTO 0x4DC                         984:         goto   $+2
04DB  0BA8     DECFSZ 0x28, F                     985:         decfsz COUNTM, f
04DC  2CDE     GOTO 0x4DE                         986:         goto   $+2
04DD  0BA9     DECFSZ 0x29, F                     987:         decfsz COUNTL, f
04DE  2CD9     GOTO 0x4D9                         988:         goto   HalfS_0
                                                  989:   
04DF  2CE0     GOTO 0x4E0                         990:         goto $+1
04E0  0000     NOP                                991:         nop
04E1  0000     NOP                                992:         nop
04E2  0008     RETURN                             993:   		return
                                                  994:   
                                                  995:   
                                                  996:   ;***************************************
                                                  997:   ; LCD SUBROUTINES (from sample code)
                                                  998:   ;***************************************
                                                  999:   
                                                  1000:  ; Initialize the LCD
                                                  1001:  InitLCD
04E3  1283     BCF STATUS, 0x5                    1002:  	bcf STATUS,RP0
04E4  1588     BSF PORTD, 0x3                     1003:  	bsf E     ;E default high
                                                  1004:  
                                                  1005:  	;Wait for LCD POR to finish (~15ms)
04E5  2527     CALL 0x527                         1006:  	call lcdLongDelay
04E6  2527     CALL 0x527                         1007:  	call lcdLongDelay
04E7  2527     CALL 0x527                         1008:  	call lcdLongDelay
                                                  1009:  
                                                  1010:  	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  1011:  	; -> Send b'0011' 3 times
04E8  3033     MOVLW 0x33                         1012:  	movlw	b'00110011'
04E9  2507     CALL 0x507                         1013:  	call	WR_INS
04EA  2527     CALL 0x527                         1014:  	call lcdLongDelay
04EB  2527     CALL 0x527                         1015:  	call lcdLongDelay
04EC  3032     MOVLW 0x32                         1016:  	movlw	b'00110010'
04ED  2507     CALL 0x507                         1017:  	call	WR_INS
04EE  2527     CALL 0x527                         1018:  	call lcdLongDelay
04EF  2527     CALL 0x527                         1019:  	call lcdLongDelay
                                                  1020:  
                                                  1021:  	; 4 bits, 2 lines, 5x7 dots
04F0  3028     MOVLW 0x28                         1022:  	movlw	b'00101000'
04F1  2507     CALL 0x507                         1023:  	call	WR_INS
04F2  2527     CALL 0x527                         1024:  	call lcdLongDelay
04F3  2527     CALL 0x527                         1025:  	call lcdLongDelay
                                                  1026:  
                                                  1027:  	; display on/off
04F4  300C     MOVLW 0xC                          1028:  	movlw	b'00001100'
04F5  2507     CALL 0x507                         1029:  	call	WR_INS
04F6  2527     CALL 0x527                         1030:  	call lcdLongDelay
04F7  2527     CALL 0x527                         1031:  	call lcdLongDelay
                                                  1032:  
                                                  1033:  	; Entry mode
04F8  3006     MOVLW 0x6                          1034:  	movlw	b'00000110'
04F9  2507     CALL 0x507                         1035:  	call	WR_INS
04FA  2527     CALL 0x527                         1036:  	call lcdLongDelay
04FB  2527     CALL 0x527                         1037:  	call lcdLongDelay
                                                  1038:  
                                                  1039:  	; Clear ram
04FC  3001     MOVLW 0x1                          1040:  	movlw	b'00000001'
04FD  2507     CALL 0x507                         1041:  	call	WR_INS
04FE  2527     CALL 0x527                         1042:  	call lcdLongDelay
04FF  2527     CALL 0x527                         1043:  	call lcdLongDelay
0500  0008     RETURN                             1044:  	return
                                                  1045:  
                                                  1046:  ; Clear the display
                                                  1047:  Clear_Display
0501  3001     MOVLW 0x1                          1048:  		movlw	B'00000001'
0502  2507     CALL 0x507                         1049:  		call	WR_INS
0503  0008     RETURN                             1050:  		return
                                                  1051:  
                                                  1052:  ;Switch lines
                                                  1053:  Switch_Lines
0504  30C0     MOVLW 0xC0                         1054:  		movlw	B'11000000'
0505  2507     CALL 0x507                         1055:  		call	WR_INS
0506  0008     RETURN                             1056:  		return
                                                  1057:  
                                                  1058:  ; Write an instruction to the LCD (see page 7-104)
                                                  1059:  ; The instruction must be in W
                                                  1060:  WR_INS
0507  1108     BCF PORTD, 0x2                     1061:  	bcf		RS				;clear RS
0508  00A3     MOVWF 0x23                         1062:  	movwf	com				;W --> com
0509  39F0     ANDLW 0xF0                         1063:  	andlw	0xF0			;mask 4 bits MSB w = X0
050A  0088     MOVWF PORTD                        1064:  	movwf	PORTD			;Send 4 bits MSB
050B  1588     BSF PORTD, 0x3                     1065:  	bsf		E				;
050C  2527     CALL 0x527                         1066:  	call	lcdLongDelay	;__    __
050D  1188     BCF PORTD, 0x3                     1067:  	bcf		E				;  |__|
050E  0E23     SWAPF 0x23, W                      1068:  	swapf	com,w
050F  39F0     ANDLW 0xF0                         1069:  	andlw	0xF0			;1111 0010
0510  0088     MOVWF PORTD                        1070:  	movwf	PORTD			;send 4 bits LSB
0511  1588     BSF PORTD, 0x3                     1071:  	bsf		E				;
0512  2527     CALL 0x527                         1072:  	call	lcdLongDelay	;__    __
0513  1188     BCF PORTD, 0x3                     1073:  	bcf		E				;  |__|
0514  2527     CALL 0x527                         1074:  	call	lcdLongDelay
0515  0008     RETURN                             1075:  	return
                                                  1076:  
                                                  1077:  ; Write data at current cursor location
                                                  1078:  ; Character code (see page 7-104) must be in W
                                                  1079:  WR_DATA
0516  1508     BSF PORTD, 0x2                     1080:  	bsf		RS
0517  00A4     MOVWF 0x24                         1081:  	movwf	dat
0518  0824     MOVF 0x24, W                       1082:  	movf	dat,w
0519  39F0     ANDLW 0xF0                         1083:  	andlw	0xF0
051A  3E04     ADDLW 0x4                          1084:  	addlw	4
051B  0088     MOVWF PORTD                        1085:  	movwf	PORTD
051C  1588     BSF PORTD, 0x3                     1086:  	bsf		E				;
051D  2527     CALL 0x527                         1087:  	call	lcdLongDelay	;__    __
051E  1188     BCF PORTD, 0x3                     1088:  	bcf		E				;  |__|
051F  0E24     SWAPF 0x24, W                      1089:  	swapf	dat,w
0520  39F0     ANDLW 0xF0                         1090:  	andlw	0xF0
0521  3E04     ADDLW 0x4                          1091:  	addlw	4
0522  0088     MOVWF PORTD                        1092:  	movwf	PORTD
0523  1588     BSF PORTD, 0x3                     1093:  	bsf		E				;
0524  2527     CALL 0x527                         1094:  	call	lcdLongDelay	;__    __
0525  1188     BCF PORTD, 0x3                     1095:  	bcf		E				;  |__|
0526  0008     RETURN                             1096:  	return
                                                  1097:  
                                                  1098:  ;Delay routine because PIC is way faster than the LCD can handle
                                                  1099:  lcdLongDelay
0527  3014     MOVLW 0x14                         1100:      movlw d'20'
0528  00A6     MOVWF 0x26                         1101:      movwf lcd_d2
                                                  1102:  LLD_LOOP
0529  30FF     MOVLW 0xFF                         1103:      LCD_DELAY
052A  00A5     MOVWF 0x25
052B  0BA5     DECFSZ 0x25, F
052C  2D2B     GOTO 0x52B
052D  0BA6     DECFSZ 0x26, F                     1104:      decfsz lcd_d2,f
052E  2D29     GOTO 0x529                         1105:      goto LLD_LOOP
052F  0008     RETURN                             1106:      return
                                                  1107:  
                                                  1108:  
                                                  1109:  ;***************************************
                                                  1110:  ; PC INTERFACE SUBROUTINES (from sample code)
                                                  1111:  ;***************************************
                                                  1112:  InitUSART
0530  1683     BSF STATUS, 0x5                    1113:          bsf       STATUS,RP0     ; select bank 1
0531  300F     MOVLW 0xF                          1114:          movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
0532  0099     MOVWF TXREG                        1115:          movwf     SPBRG
0533  0198     CLRF RCSTA                         1116:          clrf      TXSTA          ; 8 bits data ,no,1 stop
                                                  1117:  
0534  1283     BCF STATUS, 0x5                    1118:          bcf       STATUS,RP0     ; select bank 0
0535  1798     BSF RCSTA, 0x7                     1119:          bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0536  1618     BSF RCSTA, 0x4                     1120:          bsf       RCSTA,CREN     ; continuous receive
                                                  1121:  
0537  1683     BSF STATUS, 0x5                    1122:          bsf       STATUS,RP0     ; select bank 1
0538  1698     BSF RCSTA, 0x5                     1123:          bsf       TXSTA,TXEN     ; Transmit enable
0539  0008     RETURN                             1124:          return
                                                  1125:  
                                                  1126:  
                                                  1127:  writetoPC
                                                  1128:  ; Writes the data in W to the PC
                                                  1129:  ; end up in bank1!
053A  1283     BCF STATUS, 0x5                    1130:          bcf       STATUS,RP0     ; Go to bank 0
053B  0099     MOVWF TXREG                        1131:          movwf     TXREG          ; Send contents of W to RS232
053C  1683     BSF STATUS, 0x5                    1132:          bsf       STATUS,RP0     ; Go to bank with TXSTA
053D  1C98     BTFSS RCSTA, 0x1                   1133:          btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
053E  2D3D     GOTO 0x53D                         1134:          goto      $-1
053F  0008     RETURN                             1135:          return
                                                  1136:  
                                                  1137:  
                                                  1138:  ;***************************************
                                                  1139:  ; ISR
                                                  1140:  ; Currently only care about TMR0
                                                  1141:  ; TMR0 overflows at 256*256; each time, decrement count38
                                                  1142:  ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                                                  1143:  ; When this hapens, op_time increments
                                                  1144:  ;***************************************
                                                  1145:  isr
0540  00B0     MOVWF 0x30                         1146:      movwf   w_isr           ;save W and status
0541  0E03     SWAPF STATUS, W                    1147:      swapf   STATUS, W
0542  1283     BCF STATUS, 0x5                    1148:      bcf     STATUS, RP0
0543  00B1     MOVWF 0x31                         1149:      movwf   status_isr
                                                  1150:  
0544  0BAF     DECFSZ 0x2F, F                     1151:      decfsz    count38     ;if count38 gets to 38 it's been one second
0545  2D49     GOTO 0x549                         1152:      goto end_isr
0546  3026     MOVLW 0x26                         1153:      movlf   D'38', count38  ;so reset count38
0547  00AF     MOVWF 0x2F
0548  0AB2     INCF 0x32, F                       1154:      incf    op_time         ; and increment op_time
                                                  1155:  
                                                  1156:  end_isr
0549  0E31     SWAPF 0x31, W                      1157:      swapf   status_isr, W   ;restore W and status
054A  0083     MOVWF STATUS                       1158:      movwf   STATUS
054B  0EB0     SWAPF 0x30, F                      1159:      swapf   w_isr, F
054C  0E30     SWAPF 0x30, W                      1160:      swapf   w_isr, W
054D  110B     BCF INTCON, 0x2                    1161:      bcf     INTCON, T0IF    ;clear the interrupt flag
054E  0009     RETFIE                             1162:      retfie
                                                  1163:  
                                                  1164:  
2007  0000     NOP                                1165:      END
                                                  1166:  
                                                  1167:  
                                                  1168:  
                                                  1169:  
                                                  1170:  
