MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'15'
                      00014     #define threshold2  D'65'
                      00015     #define IRLIGHT    PORTA, 0
                      00016     #define IRDATA     PORTA, 1
                      00017     #define PHOTODATA  PORTA, 2
                      00018    ; note: check analog v digital!
                      00019 
                      00020 
                      00021 ;***************************************
                      00022 ; VARIABLES
                      00023 ;***************************************
                      00024 
                      00025 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00026 
                      00027     cblock      0x20
                      00028     ; Important information (will be displayed)
  00000020            00029         dummy    ;in seconds
  00000021            00030         state1     ;where   0 = none      1 = pass
  00000022            00031         state2     ;        2 = led fail  3 = flicker fail
  00000023            00032         state3
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00033         state4
  00000025            00034         state5
  00000026            00035         state6
  00000027            00036         state7
  00000028            00037         state8
  00000029            00038         state9      
  0000002A            00039         start_year10    ;starting time (for log)
  0000002B            00040         start_year1     ; note: these are all ALREADY ASCII!
  0000002C            00041         start_month10
  0000002D            00042         start_month1
  0000002E            00043         start_date10
  0000002F            00044         start_date1
  00000030            00045         start_hour10
  00000031            00046         start_hour1
  00000032            00047         start_min10
  00000033            00048         start_min1
  00000034            00049         op_time
  00000035            00050         num_tot     ;BCD
  00000036            00051         num_LF      ;BCD
  00000037            00052         num_FF      ;BCD
                      00053 ; For general program / interface: temps, counters, etc.
  00000038            00054         keytemp         ; for data display mode
  00000039            00055         statetemp
  0000003A            00056                 Table_Counter   ; for LCD stuff
  0000003B            00057                 com
  0000003C            00058                 dat
  0000003D            00059         del1            ; for delay 5ms delay routine
  0000003E            00060         del2
  0000003F            00061         hdelH          ;for delay 0.5s routine
  00000040            00062         hdelM
  00000041            00063         hdelL
  00000042            00064         op_time_save    ;for operation time
  00000043            00065         huns
  00000044            00066         tens
  00000045            00067         ones
  00000046            00068         bignumcount
  00000047            00069         count38         ;for isr
                      00070 ; For machine program: temps, counters, etc.
  00000048            00071         candle_index
  00000049            00072         photocount
  0000004A            00073         photoval
                      00074     endc
                      00075 
                      00076     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00077         w_isr           
  0000007A            00078         status_isr
                      00079         endc
                      00080 
                      00081 
                      00082 ;***************************************
                      00083 ; MACROS
                      00084 ;***************************************
                      00085 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 ; Display a msg on LCD
                      00087 Display macro   Message
                      00088                 local   loop_disp
                      00089                 local   end_disp
                      00090                 clrf    Table_Counter
                      00091                 clrw
                      00092 loop_disp
                      00093         movf    Table_Counter,W
                      00094                 call    Message
                      00095                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00096                 btfsc   STATUS,Z
                      00097                 goto    end_disp
                      00098                 call    WR_DATA
                      00099                 incf    Table_Counter,F
                      00100                 goto    loop_disp
                      00101 end_disp
                      00102                 endm
                      00103 
                      00104 
                      00105 ;Shortcuts for moving literals / registers
                      00106 movlf   macro   l, f
                      00107         movlw   l
                      00108         movwf   f
                      00109         endm
                      00110 
                      00111 movff   macro   source, dest
                      00112         movf    source, W
                      00113         movwf   dest
                      00114         endm
                      00115 
                      00116 ; Write to LCD (all in bank0 please)
                      00117 writeBCD    macro   reg         ; from a register containing BCD
                      00118             movf    reg, W
                      00119             addlw   B'00110000'
                      00120             call WR_DATA
                      00121             endm
                      00122 
                      00123 writechar   macro   asc             ;ASCII code literal (or in "")
                      00124             movlw   asc
                      00125             call    WR_DATA
                      00126             endm
                      00127 
                      00128 writeASC        macro   reg         ;from a register containing ASCII
                      00129             movf    reg, W
                      00130             call WR_DATA
                      00131             endm
                      00132 
                      00133 spacebar    macro
                      00134             movlw   B'00010100'
                      00135             call    WR_INS
                      00136             endm
                      00137 
                      00138 ;Print to PC (hyperterminal)
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00140             movlw   char
                      00141             call    writetoPC
                      00142             endm
                      00143 
                      00144 printASC    macro   reg            ;ASCII code inside a register
                      00145             banksel reg
                      00146             movf    reg,W
                      00147             call    writetoPC
                      00148             endm
                      00149 
                      00150 printBCD    macro   BCD            ;BCD inside a register
                      00151             banksel BCD
                      00152             movf    BCD, W
                      00153             addlw   0x30
                      00154             call    writetoPC
                      00155             endm
                      00156 
                      00157 newline     macro
                      00158             printchar   0xA ;changes line
                      00159             printchar   0xD ;goes back to left
                      00160             endm
                      00161 ;***************************************
                      00162 ; VECTORS
                      00163 ;***************************************
                      00164 
                      00165     ORG       0x000
0000   2???           00166          goto      init
                      00167     ORG       0x004
0004   2???           00168         goto    isr
                      00169 
                      00170 
                      00171 ;***************************************
                      00172 ; TABLES (MESSAGES)
                      00173 ;***************************************
0005                  00174 Standby_Msg
0005   0782           00175                 addwf   PCL,F
0006   3453 3454 3441 00176                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00177 Start_Msg
000E   0782           00178         addwf   PCL,F
000F   3449 346E 3473 00179         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00180 End_Msg
0020   0782           00181         addwf   PCL,F
0021   3443 346F 346D 00182         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A                  00183 Time_Msg
002A   0782           00184                 addwf   PCL,F
002B   344F 3470 3465 00185                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00186 Seconds
003B   0782           00187         addwf   PCL,F
003C   3420 3473 3465 00188         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00189 Not_present
0045   0782           00190         addwf   PCL,F
0046   343A 3420 344E 00191         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00192 Pass
0054   0782           00193                 addwf   PCL,F
0055   343A 3420 3450 00194                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00195 LED_fail
005C   0782           00196                 addwf   PCL,F
005D   343A 3420 344C 00197                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00198 Flick_fail
0068   0782           00199                 addwf   PCL,F
0069   343A 3420 3446 00200                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00201 Total_Msg
0078   0782           00202         addwf   PCL,F
0079   3454 346F 3474 00203         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00204 LF
0089   0782           00205         addwf   PCL,F
008A   344C 3446 343A 00206         dt      "LF: ",0
       3420 3400 
008F                  00207 FF
008F   0782           00208         addwf   PCL,F
0090   3446 3446 343A 00209         dt      "FF: ",0
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3420 3400 
0095                  00210 None
0095   0782           00211         addwf   PCL,F
0096   343C 346E 346F 00212         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00213 Logs_Msg1
009D   0782           00214         addwf   PCL,F
009E   3431 342D 3434 00215         dt      "1-4 to see log",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3400 
00AD                  00216 Logs_Msg2
00AD   0782           00217         addwf   PCL,F
00AE   3453 3454 3441 00218         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BE                  00219 Op_at
00BE   0782           00220         addwf   PCL,F
00BF   344F 3470 3465 00221         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00222 
                      00223 ;***************************************
                      00224 ; MAIN PROGRAM
                      00225 ;***************************************
                      00226 
00CD                  00227 init
                      00228         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready
00CD   3020               M         movlw   b'00100000'
00CE   008B               M         movwf   INTCON
                      00229 
00CF   1683           00230         bsf       STATUS,RP0            ; select bank 1
                      00231         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00D0   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D1   0081               M         movwf   OPTION_REG
                      00232         movlf     b'000110', TRISA      ; PortA *may* be used for Photo and IR stuff
00D2   3006               M         movlw   b'000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D3   0085               M         movwf   TRISA
                      00233         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00D4   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0086               M         movwf   TRISB
                      00234                                         ; note can disable keypad to free up these ports during operatio
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            n if necessary.
                      00235         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; rest unused
00D6   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D7   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D8   0188           00236         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D9   0189           00237         clrf      TRISE                 ; PortE is output- *may* be used for motor (only [2:0] tho!)
                      00238 
00DA   1283           00239         bcf       STATUS,RP0        ; select bank 0
00DB   0185           00240         clrf      PORTA
00DC   0186           00241         clrf      PORTB
00DD   0187           00242         clrf      PORTC
00DE   0188           00243         clrf      PORTD
00DF   0189           00244         clrf      PORTE
                      00245 
00E0   2???           00246         call      i2c_common_setup  ;Set up I2C for communication
00E1   2???           00247         call      InitLCD           ;Initialize the LCD
00E2   2???           00248         call      InitUSART         ;Set up USART for RS232
                      00249 
00E3   1283           00250         bcf       STATUS,RP0        ; back to bank0
                      00251                 
                      00252         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
00E4   01BA               M                 clrf    Table_Counter
00E5   0103               M                 clrw
00E6                      M loop_disp
00E6   083A               M         movf    Table_Counter,W
00E7   2???               M                 call    Standby_Msg
00E8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
00E9   1903               M                 btfsc   STATUS,Z
00EA   2???               M                 goto    end_disp
00EB   2???               M                 call    WR_DATA
00EC   0ABA               M                 incf    Table_Counter,F
00ED   2???               M                 goto    loop_disp
00EE                      M end_disp
00EE   2???           00253         call    Switch_Lines
                      00254       
                      00255  ;--------------------------------------------------
                      00256  ;      STANDBY MODE
                      00257 
00EF                  00258 waiting
                      00259         ; Display date and time. 
                      00260         ; Also save starting time for log (will stop updating once we start)
                      00261         writechar "2"       ;First line shows 20**/**/**
00EF   3032               M             movlw   "2"
00F0   2???               M             call    WR_DATA
                      00262         writechar "0"
00F1   3030               M             movlw   "0"
00F2   2???               M             call    WR_DATA
                      00263         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
00F3   3006               M         movlw   0x06
00F4   1283 1303          M         banksel 0x73
00F6   00F3               M         movwf   0x73
00F7   2???               M         call    read_rtc
00F8   1283 1303          M         banksel 0x75
00FA   0875               M         movf    0x75,w
00FB   2???               M         call    rtc_convert   
00FC   0877           00264                 movf    0x77,W
00FD   00AA           00265         movwf    start_year10    ;Save starting year dig10
00FE   2???           00266                 call    WR_DATA
00FF   0878           00267                 movf    0x78,W
0100   00AB           00268         movwf    start_year1    ;Save starting year dig1
0101   2???           00269                 call    WR_DATA
                      00270                 writechar "/"
0102   302F               M             movlw   "/"
0103   2???               M             call    WR_DATA
                      00271                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0104   3005               M         movlw   0x05
0105   1283 1303          M         banksel 0x73
0107   00F3               M         movwf   0x73
0108   2???               M         call    read_rtc
0109   1283 1303          M         banksel 0x75
010B   0875               M         movf    0x75,w
010C   2???               M         call    rtc_convert   
010D   0877           00272                 movf    0x77,W
010E   00AC           00273         movwf    start_month10    ;Save starting month dig10
010F   2???           00274                 call    WR_DATA
0110   0878           00275                 movf    0x78,W
0111   00AD           00276         movwf    start_month1    ;Save starting month dig1
0112   2???           00277                 call    WR_DATA
                      00278                 writechar       "/"
0113   302F               M             movlw   "/"
0114   2???               M             call    WR_DATA
                      00279                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0115   3004               M         movlw   0x04
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0116   1283 1303          M         banksel 0x73
0118   00F3               M         movwf   0x73
0119   2???               M         call    read_rtc
011A   1283 1303          M         banksel 0x75
011C   0875               M         movf    0x75,w
011D   2???               M         call    rtc_convert   
011E   0877           00280                 movf    0x77,W
011F   00AE           00281         movwf    start_date10    ;Save starting date dig10
0120   2???           00282                 call    WR_DATA
0121   0878           00283                 movf    0x78,W
0122   00AF           00284         movwf    start_date1    ;Save starting date dig1
0123   2???           00285                 call    WR_DATA
                      00286                 spacebar
0124   3014               M             movlw   B'00010100'
0125   2???               M             call    WR_INS
                      00287                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0126   3002               M         movlw   0x02
0127   1283 1303          M         banksel 0x73
0129   00F3               M         movwf   0x73
012A   2???               M         call    read_rtc
012B   1283 1303          M         banksel 0x75
012D   0875               M         movf    0x75,w
012E   2???               M         call    rtc_convert   
012F   0877           00288                 movf    0x77,W
0130   00B0           00289         movwf    start_hour10    ;Save starting hour dig10
0131   2???           00290                 call    WR_DATA
0132   0878           00291                 movf    0x78,W
0133   00B1           00292         movwf    start_hour1    ;Save starting hour dig1
0134   2???           00293                 call    WR_DATA
                      00294                 writechar ":"
0135   303A               M             movlw   ":"
0136   2???               M             call    WR_DATA
                      00295                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0137   3001               M         movlw   0x01
0138   1283 1303          M         banksel 0x73
013A   00F3               M         movwf   0x73
013B   2???               M         call    read_rtc
013C   1283 1303          M         banksel 0x75
013E   0875               M         movf    0x75,w
013F   2???               M         call    rtc_convert   
0140   0877           00296                 movf    0x77,W
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0141   00B2           00297         movwf    start_min10    ;Save starting min dig10
0142   2???           00298                 call    WR_DATA
0143   0878           00299                 movf    0x78,W
0144   00B3           00300         movwf    start_min1    ;Save starting min dig1
0145   2???           00301                 call    WR_DATA
                      00302                       
                      00303         ; Move cursor back to start of second line
                      00304         ; We will update displayed time but not the word "STANDBY"
0146   30C0           00305         movlw   B'11000000'
0147   2???           00306         call    WR_INS
                      00307 
                      00308         ;Poll to start (will have to hold key for ~0.5sec)
0148   1C86           00309          btfss          PORTB,1     ;Wait until data is available from the keypad
0149   2???           00310          goto           waiting
                      00311 
014A   0E06           00312          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
014B   390F           00313          andlw          0x0F
014C   00B8           00314          movwf      keytemp
014D   3A0C           00315          xorlw      0xC         ;Will be all zeros if its "START"
014E   1903           00316          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
014F   2???           00317          goto       start
                      00318 
0150   0838           00319          movf       keytemp,W     ;Go to log interface
0151   3A0E           00320          xorlw      0xE
0152   1903           00321          btfsc      STATUS,Z
0153   2???           00322          goto       logs
                      00323 
0154   1886           00324          btfsc          PORTB,1     ;Wait until key is released
0155   2???           00325          goto           $-1
0156   2???           00326          goto       waiting
                      00327 
                      00328 ;-----------------------------------------------------------
                      00329 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00330 
0157                  00331 start
                      00332         ;Start the timer
                      00333         movlf       D'38', count38
0157   3026               M         movlw   D'38'
0158   00C7               M         movwf   count38
0159   01B4           00334         clrf        op_time
015A   0181           00335         clrf        TMR0
015B   178B           00336         bsf         INTCON, GIE     ;enable interrupts
                      00337 
                      00338         ;Display starting message
015C   2???           00339         call        Clear_Display
                      00340         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
015D   01BA               M                 clrf    Table_Counter
015E   0103               M                 clrw
015F                      M loop_disp
015F   083A               M         movf    Table_Counter,W
0160   2???               M                 call    Start_Msg
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0161   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0162   1903               M                 btfsc   STATUS,Z
0163   2???               M                 goto    end_disp
0164   2???               M                 call    WR_DATA
0165   0ABA               M                 incf    Table_Counter,F
0166   2???               M                 goto    loop_disp
0167                      M end_disp
                      00341 
                      00342 
                      00343 ;****FAKE CODE ******************************************
                      00344         ; Just delaying
0167   2???           00345         call        HalfS
0168   2???           00346         call        HalfS
                      00347 
                      00348        ; Putting values in manually.
                      00349         movlf     B'01', state1     ;pass
0169   3001               M         movlw   B'01'
016A   00A1               M         movwf   state1
                      00350         movlf     B'01', state2     ;pass
016B   3001               M         movlw   B'01'
016C   00A2               M         movwf   state2
                      00351         movlf     B'10', state3     ;LED fail
016D   3002               M         movlw   B'10'
016E   00A3               M         movwf   state3
                      00352         movlf     B'10', state4     ;LED fail
016F   3002               M         movlw   B'10'
0170   00A4               M         movwf   state4
                      00353         movlf     B'01', state5     ;pass
0171   3001               M         movlw   B'01'
0172   00A5               M         movwf   state5
                      00354         movlf     B'00', state6     ;not present
0173   3000               M         movlw   B'00'
0174   00A6               M         movwf   state6
                      00355         movlf     B'01', state7     ;pass
0175   3001               M         movlw   B'01'
0176   00A7               M         movwf   state7
                      00356         movlf     B'11', state8     ;flicker fail
0177   3003               M         movlw   B'11'
0178   00A8               M         movwf   state8
                      00357         movlf     B'01', state9     ;pass
0179   3001               M         movlw   B'01'
017A   00A9               M         movwf   state9
                      00358         movlf     D'2', num_LF
017B   3002               M         movlw   D'2'
017C   00B6               M         movwf   num_LF
                      00359         movlf     D'1', num_FF
017D   3001               M         movlw   D'1'
017E   00B7               M         movwf   num_FF
                      00360         movlf     D'8', num_tot
017F   3008               M         movlw   D'8'
0180   00B5               M         movwf   num_tot
                      00361 ;*******************************************************
                      00362 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00363 ; choose fake or real!
                      00364 
                      00365 ;;****REAL CODE ******************************************
                      00366 ;    movlf    D'0', candle_index
                      00367 ;    bcf        STATUS, IRP
                      00368 ;    movlf   0x20, FSR       ;pointing at right before state1
                      00369 ;    bsf     IRLIGHT     ;turn on IR
                      00370 ;
                      00371 ;rotate
                      00372 ;       movlw   0x9                 ; stop operation after 9 rotations
                      00373 ;    subwf   candle_index,W      ; candle_index is # you've already tested before rotating
                      00374 ;    btfsc   STATUS,Z
                      00375 ;       goto    end_operation
                      00376 ;       call    ROTATEMOTOR          ; else rotate motor and n++
                      00377 ;       incf    candle_index, F
                      00378 ;    incf    FSR, F
                      00379 ;
                      00380 ;detect_candle
                      00381 ;       btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
                      00382 ;       goto    test_candle     ;yes candle, go test it
                      00383 ;    movlf   D'0', INDF      ;no candle, state = not present
                      00384 ;       goto rotate                 ;and go try next
                      00385 ;
                      00386 ;test_candle
                      00387 ;       incf    num_tot, F                      ; keeping track of total number of candles
                      00388 ;       ; Assume candle is already turned on
                      00389 ;       clrf    photocount
                      00390 ;       call    HalfS       ; delay 2 sec or whatever
                      00391 ;   call    HalfS
                      00392 ;   call    HalfS
                      00393 ;   call    HalfS
                      00394 ;       movff   photocount, photoval        ;to ensure it wont change again
                      00395 ;check_threshold1
                      00396 ;    movlw    threshold1
                      00397 ;    subwf   photoval, W
                      00398 ;    btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
                      00399 ;    goto check_threshold2
                      00400 ;    movlf   D'2', INDF      ; < threshold 1 means led fail
                      00401 ;        incf    num_LF, F
                      00402 ;    goto    end_test_candle
                      00403 ;check_threshold2
                      00404 ;    movlw    threshold2
                      00405 ;    subwf   photoval, W
                      00406 ;    btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
                      00407 ;    goto aboveboth
                      00408 ;    movlf   D'1', INDF      ; < threshold 2 means pass
                      00409 ;    goto    end_test_candle
                      00410 ;aboveboth
                      00411 ;   movlf   D'3', INDF       ;else flicker fail
                      00412 ;   incf    num_FF, F
                      00413 ;end_test_candle
                      00414 ;       call    TURNOFF     ;pulse solenoid to turn off candle
                      00415 ;    goto    rotate
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00416 ;
                      00417 ;
                      00418 ;ROTATEMOTOR ;rotates stepper motor 40deg
                      00419 ;    return
                      00420 ;
                      00421 ;TURNOFF ;pulses solenoid to turn off candle
                      00422 ;    return
                      00423 ; ;****************************************************
                      00424 
0181                  00425 end_operation
                      00426 
                      00427 
                      00428         ;Turn off the IR
                      00429         ;bcf     IRLIGHT
                      00430 
                      00431         ; Stop the timer
0181   138B           00432          bcf         INTCON, GIE  ;disable interrupts
                      00433 
                      00434         ; SHIFT LOGS 1-3 -> 2-4
                      00435         ; THEN STORE CURRENT RUN as LOG 1        
                      00436 ;shiftlogs
                      00437 ;        banksel     EEADR               ; bank 2
                      00438 ;        movlf       D'41', EEADR        ; start shifting from 41->55
                      00439 ;shiftlogs_0
                      00440 ;        banksel     EECON1              ;bank 3
                      00441 ;        bcf         EECON1, EEPGD
                      00442 ;        bsf         EECON1, RD          ;read (EEADR) to EEDATA
                      00443 ;        btfsc       EECON1, WR          ; ensure a write is not in progress (??)
                      00444 ;        goto        $-1
                      00445 ;        banksel     EEADR               ;bank 2
                      00446 ;        movlw       D'14'               ;add 14 to EEADRto shift 14 places
                      00447 ;        addwf       EEADR, F
                      00448 ;        banksel     EECON1              ;bank 3
                      00449 ;        bcf         EECON1, EEPGD
                      00450 ;        bsf         EECON1, WREN
                      00451 ;        movlw       0x55
                      00452 ;        movwf       EECON2
                      00453 ;        movlw       0xAA
                      00454 ;        movwf       EECON2
                      00455 ;        bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
                      00456 ;        bcf         EECON1, WREN
                      00457 ;        banksel     EEADR               ;bank 2
                      00458 ;        movlw       D'14'
                      00459 ;        subwf       EEADR, W
                      00460 ;        btfsc       STATUS, Z
                      00461 ;        goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00462 ;        movlw       D'15'
                      00463 ;        subwf       EEADR, F            ;else EEADR -= 15 to shift next byte
                      00464 ;        goto        shiftlogs_0
                      00465         
                      00466 
0182                  00467 write_log1
0182   1383           00468         bcf         STATUS, IRP
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00469         movlf       0x37, FSR           ;points to one after last important data
0183   3037               M         movlw   0x37
0184   0084               M         movwf   FSR
                      00470         movlf       D'14', EEADR        ;points to one after last place to write to
0185   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0186   008D               M         movwf   EEADR
0187                  00471 write_log1_0
0187   1683 1703      00472         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0189   188C           00473         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
018A   2???           00474         goto        $-1
018B   1283 1703      00475         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
018D   038D           00476         decf        EEADR, F            ;writing backwords
018E   0384           00477         decf        FSR, F
                      00478         movff       INDF, EEDATA
018F   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0190   008C               M         movwf   EEDATA
0191   1683 1703      00479         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0193   138C           00480         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0194   150C           00481         bsf         EECON1, WREN
0195   3055           00482         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0196   008D           00483         movwf       EECON2
0197   30AA           00484         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0198   008D           00485         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0199   148C           00486         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
019A   110C           00487         bcf         EECON1, WREN
019B   1283 1703      00488         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
019D   088D           00489         movf        EEADR, F
019E   1D03           00490         btfss       STATUS, Z           ;if EEADR = 0 we're done
019F   2???           00491         goto        write_log1_0
01A0   1283           00492         bcf         STATUS, RP0         ;so go back to bank 0 and continue
01A1   1303           00493         bcf         STATUS, RP1
                      00494 
                      00495         ; Display ending messages
01A2   2???           00496         call       Clear_Display
                      00497         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01A3   01BA               M                 clrf    Table_Counter
01A4   0103               M                 clrw
01A5                      M loop_disp
01A5   083A               M         movf    Table_Counter,W
01A6   2???               M                 call    End_Msg
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01A8   1903               M                 btfsc   STATUS,Z
01A9   2???               M                 goto    end_disp
01AA   2???               M                 call    WR_DATA
01AB   0ABA               M                 incf    Table_Counter,F
01AC   2???               M                 goto    loop_disp
01AD                      M end_disp
01AD   2???           00498         call       HalfS
01AE   2???           00499         call       time             ; "Operation time: X sec"
01AF   2???           00500         call       HalfS
01B0   2???           00501         call       HalfS
01B1   2???           00502         call       summary          ; "Total candles: X. Defective: Y"
01B2   2???           00503         call       HalfS
01B3   2???           00504         call       HalfS
01B4   2???           00505         call       defective        ; "FF: a b c. LF: d e f"
                      00506 ;-----------------------------------------------------------------------
                      00507 ; Data display interface
                      00508 
01B5   1C86           00509 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
01B6   2???           00510          goto           $-1
                      00511 
01B7   0E06           00512          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
01B8   390F           00513          andlw          0x0F
01B9   2???           00514          call       information ;Do the right thing
                      00515 
01BA   1886           00516          btfsc          PORTB,1     ;Wait until key is released
01BB   2???           00517          goto           $-1
01BC   2???           00518          goto       poll
                      00519 
                      00520 
                      00521 ;-------------------------------------------------------------------------
                      00522 ; LOGS INTERFACE            (DONT ACTUALLY HAVE LOGS YET!)
                      00523 ; Eventually this will show logs
                      00524 ; Right now it just displays random crap
                      00525 ; Access from STANDBY and return to STANDBY
                      00526 
01BD                  00527 logs
01BD   2???           00528     call    Clear_Display
                      00529     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01BE   01BA               M                 clrf    Table_Counter
01BF   0103               M                 clrw
01C0                      M loop_disp
01C0   083A               M         movf    Table_Counter,W
01C1   2???               M                 call    Logs_Msg1
01C2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01C3   1903               M                 btfsc   STATUS,Z
01C4   2???               M                 goto    end_disp
01C5   2???               M                 call    WR_DATA
01C6   0ABA               M                 incf    Table_Counter,F
01C7   2???               M                 goto    loop_disp
01C8                      M end_disp
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C8   2???           00530     call    Switch_Lines
                      00531     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01C9   01BA               M                 clrf    Table_Counter
01CA   0103               M                 clrw
01CB                      M loop_disp
01CB   083A               M         movf    Table_Counter,W
01CC   2???               M                 call    Logs_Msg2
01CD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01CE   1903               M                 btfsc   STATUS,Z
01CF   2???               M                 goto    end_disp
01D0   2???               M                 call    WR_DATA
01D1   0ABA               M                 incf    Table_Counter,F
01D2   2???               M                 goto    loop_disp
01D3                      M end_disp
                      00532 
01D3                  00533 polling
01D3   1C86           00534     btfss               PORTB,1     ;Wait until data is available from the keypad
01D4   2???           00535     goto                $-1
                      00536 
01D5   0E06           00537     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
01D6   390F           00538     andlw               0x0F
01D7   00B8           00539     movwf       keytemp     ; Save which key was pressed
                      00540 
01D8                  00541 check_log1
01D8   3A00           00542     xorlw   0x0         ;will be all zeros if its 1
01D9   1D03           00543     btfss   STATUS,Z    ;and Z will be high, so skip
01DA   2???           00544     goto    check_log2
01DB   1283 1703      00545     banksel EEADR
                      00546     movlf   d'0', EEADR
01DD   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DE   008D               M         movwf   EEADR
01DF   2???           00547     call    display_log
01E0   2???           00548     goto    logs
                      00549 
01E1                  00550 check_log2
01E1   0838           00551     movf    keytemp, W
01E2   3A01           00552     xorlw   0x1
01E3   1D03           00553     btfss   STATUS,Z
01E4   2???           00554     goto    check_log3
01E5   1283 1703      00555     banksel EEADR
                      00556     movlf   d'14', EEADR
01E7   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E8   008D               M         movwf   EEADR
01E9   2???           00557     call    display_log
01EA   2???           00558     goto    logs
                      00559 
01EB                  00560 check_log3
01EB   0838           00561     movf    keytemp, W
01EC   3A02           00562     xorlw   0x2
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01ED   1D03           00563     btfss   STATUS,Z
01EE   2???           00564     goto    check_log4
01EF   1283 1703      00565     banksel EEADR
                      00566     movlf   d'28', EEADR
01F1   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F2   008D               M         movwf   EEADR
01F3   2???           00567     call    display_log
01F4   2???           00568     goto    logs
                      00569 
01F5                  00570 check_log4
01F5   0838           00571     movf    keytemp, W
01F6   3A04           00572     xorlw   0x4
01F7   1D03           00573     btfss   STATUS,Z
01F8   2???           00574     goto    check_done
01F9   1283 1703      00575     banksel EEADR
                      00576     movlf   d'42', EEADR
01FB   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FC   008D               M         movwf   EEADR
01FD   2???           00577     call    display_log
01FE   2???           00578     goto    logs
                      00579 
01FF                  00580 check_done
01FF   0838           00581     movf    keytemp, W
0200   3A0D           00582     xorlw   0xD
0201   1D03           00583     btfss   STATUS,Z
0202   2???           00584     goto    badkey
0203   2???           00585     call    Clear_Display
                      00586     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0204   01BA               M                 clrf    Table_Counter
0205   0103               M                 clrw
0206                      M loop_disp
0206   083A               M         movf    Table_Counter,W
0207   2???               M                 call    Standby_Msg
0208   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0209   1903               M                 btfsc   STATUS,Z
020A   2???               M                 goto    end_disp
020B   2???               M                 call    WR_DATA
020C   0ABA               M                 incf    Table_Counter,F
020D   2???               M                 goto    loop_disp
020E                      M end_disp
020E   2???           00587     call    Switch_Lines
020F   2???           00588     goto    waiting
                      00589 
0210                  00590 badkey
0210   1886           00591     btfsc               PORTB,1     ;Wait until key is released
0211   2???           00592     goto                $-1
0212   2???           00593     goto        polling
                      00594 
                      00595 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0213                  00596 display_log                 ;start in bank2
                      00597     ; move EEPROM data back to "current" data
0213   1383           00598     bcf STATUS, IRP
                      00599     movlf   0x2A, FSR
0214   302A               M         movlw   0x2A
0215   0084               M         movwf   FSR
0216                  00600 read_EEPROM
0216   1683 1703      00601     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0218   138C           00602     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0219   100C           00603     bcf EECON1, RD          ; read EEPROM
021A   1283 1703      00604     banksel EEDATA          ;bank 2
                      00605     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021C   080C               M         movf    EEDATA, W
021D   0080               M         movwf   INDF
021E   0A84           00606     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021F   0A8D           00607     incf    EEADR, F
0220   3037           00608     movlw   0x37            ;done if FSR = 0x37
0221   0204           00609     subwf   FSR, W
0222   1D03           00610     btfss   STATUS, Z
0223   2???           00611     goto    read_EEPROM
                      00612     ;display that shit
0224   1283 1303      00613     banksel Table_Counter   ; bank0
0226   2???           00614     call    Clear_Display
                      00615     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0227   01BA               M                 clrf    Table_Counter
0228   0103               M                 clrw
0229                      M loop_disp
0229   083A               M         movf    Table_Counter,W
022A   2???               M                 call    Op_at
022B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
022C   1903               M                 btfsc   STATUS,Z
022D   2???               M                 goto    end_disp
022E   2???               M                 call    WR_DATA
022F   0ABA               M                 incf    Table_Counter,F
0230   2???               M                 goto    loop_disp
0231                      M end_disp
0231   2???           00616     call    Switch_Lines
                      00617     writechar    "2"
0232   3032               M             movlw   "2"
0233   2???               M             call    WR_DATA
                      00618     writechar    "0"
0234   3030               M             movlw   "0"
0235   2???               M             call    WR_DATA
                      00619     writeASC   start_year10
0236   082A               M             movf    start_year10, W
0237   2???               M             call WR_DATA
                      00620     writeASC   start_year1
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0238   082B               M             movf    start_year1, W
0239   2???               M             call WR_DATA
                      00621     writechar   "/"
023A   302F               M             movlw   "/"
023B   2???               M             call    WR_DATA
                      00622     writeASC   start_month10
023C   082C               M             movf    start_month10, W
023D   2???               M             call WR_DATA
                      00623     writeASC   start_month1
023E   082D               M             movf    start_month1, W
023F   2???               M             call WR_DATA
                      00624     writechar   "/"
0240   302F               M             movlw   "/"
0241   2???               M             call    WR_DATA
                      00625     writeASC   start_date10
0242   082E               M             movf    start_date10, W
0243   2???               M             call WR_DATA
                      00626     writeASC   start_date1
0244   082F               M             movf    start_date1, W
0245   2???               M             call WR_DATA
                      00627     writechar   " "
0246   3020               M             movlw   " "
0247   2???               M             call    WR_DATA
                      00628     writeASC   start_hour10
0248   0830               M             movf    start_hour10, W
0249   2???               M             call WR_DATA
                      00629     writeASC   start_hour1
024A   0831               M             movf    start_hour1, W
024B   2???               M             call WR_DATA
                      00630     writechar   ":"
024C   303A               M             movlw   ":"
024D   2???               M             call    WR_DATA
                      00631     writeASC  start_min10
024E   0832               M             movf    start_min10, W
024F   2???               M             call WR_DATA
                      00632     writeASC   start_min1
0250   0833               M             movf    start_min1, W
0251   2???               M             call WR_DATA
0252   2???           00633     call    HalfS
0253   2???           00634     call    HalfS
0254   2???           00635     call    time
0255   2???           00636     call    HalfS
0256   2???           00637     call    HalfS
0257   2???           00638     call    summary
0258   2???           00639     call    HalfS
0259   2???           00640     call    HalfS
                      00641     ;option to export??
025A   0008           00642     return
                      00643   
                      00644 ; END OF MAIN PROGRAM
                      00645 ;------------------------------------------------------------
                      00646 
                      00647 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00648 ;***************************************
                      00649 ; DATA DISPLAY ROUTINE
                      00650 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00651 ; Determines which key it was and displays appropriate info / branch
                      00652 ;***************************************
                      00653 
025B                  00654 information
025B   00B8           00655     movwf   keytemp             ; Save which key was pressed
                      00656 
025C                  00657 check_1
025C   3A00           00658     xorlw   0x0         ;will be all zeros if its 1
025D   1D03           00659     btfss   STATUS,Z    ;and Z will be high, so skip
025E   2???           00660     goto    check_2
025F   2???           00661     call    Clear_Display
                      00662     writechar "1"
0260   3031               M             movlw   "1"
0261   2???               M             call    WR_DATA
0262   0821           00663     movf    state1, W
0263   2???           00664     call    display_state
0264   0008           00665     return
                      00666 
0265                  00667 check_2
0265   0838           00668     movf    keytemp, W
0266   3A01           00669     xorlw   0x1
0267   1D03           00670     btfss   STATUS,Z
0268   2???           00671     goto    check_3
0269   2???           00672     call    Clear_Display
                      00673     writechar "2"
026A   3032               M             movlw   "2"
026B   2???               M             call    WR_DATA
026C   0822           00674     movf    state2, W
026D   2???           00675     call    display_state
026E   0008           00676     return
                      00677 
026F                  00678 check_3
026F   0838           00679     movf    keytemp, W
0270   3A02           00680     xorlw   0x2
0271   1D03           00681     btfss   STATUS,Z
0272   2???           00682     goto    check_4
0273   2???           00683     call    Clear_Display
                      00684     writechar "3"
0274   3033               M             movlw   "3"
0275   2???               M             call    WR_DATA
0276   0823           00685     movf    state3, W
0277   2???           00686     call    display_state
0278   0008           00687     return
                      00688 
0279                  00689 check_4
0279   0838           00690     movf    keytemp, W
027A   3A04           00691     xorlw   0x4
027B   1D03           00692     btfss   STATUS,Z
027C   2???           00693     goto    check_5
027D   2???           00694     call    Clear_Display
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00695     writechar "4"
027E   3034               M             movlw   "4"
027F   2???               M             call    WR_DATA
0280   0824           00696     movf    state4, W
0281   2???           00697     call    display_state
0282   0008           00698     return
                      00699 
0283                  00700 check_5
0283   0838           00701     movf    keytemp, W
0284   3A05           00702     xorlw   0x5
0285   1D03           00703     btfss   STATUS,Z
0286   2???           00704     goto    check_6
0287   2???           00705     call    Clear_Display
                      00706     writechar "5"
0288   3035               M             movlw   "5"
0289   2???               M             call    WR_DATA
028A   0825           00707     movf    state5, W
028B   2???           00708     call    display_state
028C   0008           00709     return
                      00710 
028D                  00711 check_6
028D   0838           00712     movf    keytemp, W
028E   3A06           00713     xorlw   0x6
028F   1D03           00714     btfss   STATUS,Z
0290   2???           00715     goto    check_7
0291   2???           00716     call    Clear_Display
                      00717     writechar "6"
0292   3036               M             movlw   "6"
0293   2???               M             call    WR_DATA
0294   0826           00718     movf    state6, W
0295   2???           00719     call    display_state
0296   0008           00720     return
                      00721 
0297                  00722 check_7
0297   0838           00723     movf    keytemp, W
0298   3A08           00724     xorlw   0x8
0299   1D03           00725     btfss   STATUS,Z
029A   2???           00726     goto    check_8
029B   2???           00727     call    Clear_Display
                      00728     writechar "7"
029C   3037               M             movlw   "7"
029D   2???               M             call    WR_DATA
029E   0827           00729     movf    state7, W
029F   2???           00730     call    display_state
02A0   0008           00731     return
                      00732 
02A1                  00733 check_8
02A1   0838           00734     movf    keytemp, W
02A2   3A09           00735     xorlw   0x9
02A3   1D03           00736     btfss   STATUS,Z
02A4   2???           00737     goto    check_9
02A5   2???           00738     call    Clear_Display
                      00739     writechar "8"
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A6   3038               M             movlw   "8"
02A7   2???               M             call    WR_DATA
02A8   0828           00740     movf    state8, W
02A9   2???           00741     call    display_state
02AA   0008           00742     return
                      00743 
02AB                  00744 check_9
02AB   0838           00745     movf    keytemp, W
02AC   3A0A           00746     xorlw   0xA
02AD   1D03           00747     btfss   STATUS,Z
02AE   2???           00748     goto    check_summary
02AF   2???           00749     call    Clear_Display
                      00750     writechar "9"
02B0   3039               M             movlw   "9"
02B1   2???               M             call    WR_DATA
02B2   0829           00751     movf    state9, W
02B3   2???           00752     call    display_state
02B4   0008           00753     return
                      00754 
02B5                  00755 check_summary
02B5   0838           00756     movf    keytemp, W
02B6   3A03           00757     xorlw   0x3
02B7   1D03           00758     btfss   STATUS,Z
02B8   2???           00759     goto    check_defective
02B9   2???           00760     call    summary
02BA   0008           00761     return
                      00762 
02BB                  00763 check_defective
02BB   0838           00764     movf    keytemp, W
02BC   3A07           00765     xorlw   0x7
02BD   1D03           00766     btfss   STATUS,Z
02BE   2???           00767     goto    check_time
02BF   2???           00768     call    defective
02C0   0008           00769     return
                      00770 
02C1                  00771 check_time
02C1   0838           00772     movf    keytemp, W
02C2   3A0B           00773     xorlw   0xB
02C3   1D03           00774     btfss   STATUS,Z
02C4   2???           00775     goto    check_export
02C5   2???           00776     call    time
02C6   0008           00777     return
                      00778 
02C7                  00779 check_export               
02C7   0838           00780     movf    keytemp, W
02C8   3A0F           00781     xorlw   0xF
02C9   1D03           00782     btfss   STATUS,Z
02CA   2???           00783     goto    check_standby
02CB   2???           00784     call    export
02CC   0008           00785     return
                      00786 
02CD                  00787 check_standby
02CD   0838           00788     movf    keytemp, W
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02CE   3A0D           00789     xorlw   0xD
02CF   1D03           00790     btfss   STATUS,Z
02D0   2???           00791     goto    check_start
02D1   2???           00792     call    Clear_Display
                      00793     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02D2   01BA               M                 clrf    Table_Counter
02D3   0103               M                 clrw
02D4                      M loop_disp
02D4   083A               M         movf    Table_Counter,W
02D5   2???               M                 call    Standby_Msg
02D6   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02D7   1903               M                 btfsc   STATUS,Z
02D8   2???               M                 goto    end_disp
02D9   2???               M                 call    WR_DATA
02DA   0ABA               M                 incf    Table_Counter,F
02DB   2???               M                 goto    loop_disp
02DC                      M end_disp
02DC   2???           00794     call    Switch_Lines
02DD   2???           00795     goto    waiting
                      00796 
02DE                  00797 check_start
02DE   0838           00798     movf    keytemp, W
02DF   3A0C           00799     xorlw   0xC
02E0   1D03           00800     btfss   STATUS,Z
02E1   2???           00801     goto    default_key
02E2   2???           00802     goto    start
                      00803 
02E3                  00804 default_key         ; will never get here
02E3   0008           00805     return
                      00806 
                      00807 
                      00808 ;Display state subroutine
                      00809 ;stateN is in W
02E4                  00810 display_state
02E4   00B9           00811     movwf  statetemp    ; save stateN
                      00812 
02E5                  00813 check_none
02E5   3A00           00814     xorlw   0x0
02E6   1D03           00815     btfss   STATUS,Z
02E7   2???           00816     goto    check_pass
                      00817     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02E8   01BA               M                 clrf    Table_Counter
02E9   0103               M                 clrw
02EA                      M loop_disp
02EA   083A               M         movf    Table_Counter,W
02EB   2???               M                 call    Not_present
02EC   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02ED   1903               M                 btfsc   STATUS,Z
02EE   2???               M                 goto    end_disp
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EF   2???               M                 call    WR_DATA
02F0   0ABA               M                 incf    Table_Counter,F
02F1   2???               M                 goto    loop_disp
02F2                      M end_disp
02F2   0008           00818     return
                      00819 
02F3                  00820 check_pass
02F3   0839           00821     movf    statetemp, W
02F4   3A01           00822     xorlw   0x1
02F5   1D03           00823     btfss   STATUS,Z
02F6   2???           00824     goto    check_LED
                      00825     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02F7   01BA               M                 clrf    Table_Counter
02F8   0103               M                 clrw
02F9                      M loop_disp
02F9   083A               M         movf    Table_Counter,W
02FA   2???               M                 call    Pass
02FB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FC   1903               M                 btfsc   STATUS,Z
02FD   2???               M                 goto    end_disp
02FE   2???               M                 call    WR_DATA
02FF   0ABA               M                 incf    Table_Counter,F
0300   2???               M                 goto    loop_disp
0301                      M end_disp
0301   0008           00826     return
                      00827 
0302                  00828 check_LED
0302   0839           00829     movf    statetemp, W
0303   3A02           00830     xorlw   0x2
0304   1D03           00831     btfss   STATUS,Z
0305   2???           00832     goto    check_flick
                      00833     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0306   01BA               M                 clrf    Table_Counter
0307   0103               M                 clrw
0308                      M loop_disp
0308   083A               M         movf    Table_Counter,W
0309   2???               M                 call    LED_fail
030A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
030B   1903               M                 btfsc   STATUS,Z
030C   2???               M                 goto    end_disp
030D   2???               M                 call    WR_DATA
030E   0ABA               M                 incf    Table_Counter,F
030F   2???               M                 goto    loop_disp
0310                      M end_disp
0310   0008           00834     return
                      00835 
0311                  00836 check_flick
0311   0839           00837     movf    statetemp, W
0312   3A03           00838     xorlw   0x3
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0313   1D03           00839     btfss   STATUS,Z
0314   2???           00840     goto    default_state
                      00841     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0315   01BA               M                 clrf    Table_Counter
0316   0103               M                 clrw
0317                      M loop_disp
0317   083A               M         movf    Table_Counter,W
0318   2???               M                 call    Flick_fail
0319   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
031A   1903               M                 btfsc   STATUS,Z
031B   2???               M                 goto    end_disp
031C   2???               M                 call    WR_DATA
031D   0ABA               M                 incf    Table_Counter,F
031E   2???               M                 goto    loop_disp
031F                      M end_disp
031F   0008           00842     return
                      00843 
0320                  00844 default_state   ; should never get here
0320   0008           00845     return
                      00846 
                      00847 ; Summary Subroutine
                      00848 ; Displays total number of candles and number of defective candles
                      00849 ; Reads data from num_tot, num_LF, num_FF
0321                  00850 summary
0321   2???           00851     call            Clear_Display
                      00852     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0322   01BA               M                 clrf    Table_Counter
0323   0103               M                 clrw
0324                      M loop_disp
0324   083A               M         movf    Table_Counter,W
0325   2???               M                 call    Total_Msg
0326   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0327   1903               M                 btfsc   STATUS,Z
0328   2???               M                 goto    end_disp
0329   2???               M                 call    WR_DATA
032A   0ABA               M                 incf    Table_Counter,F
032B   2???               M                 goto    loop_disp
032C                      M end_disp
                      00853     writeBCD        num_tot
032C   0835               M             movf    num_tot, W
032D   3E30               M             addlw   B'00110000'
032E   2???               M             call WR_DATA
032F   2???           00854     call            Switch_Lines
                      00855     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0330   01BA               M                 clrf    Table_Counter
0331   0103               M                 clrw
0332                      M loop_disp
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0332   083A               M         movf    Table_Counter,W
0333   2???               M                 call    LF
0334   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0335   1903               M                 btfsc   STATUS,Z
0336   2???               M                 goto    end_disp
0337   2???               M                 call    WR_DATA
0338   0ABA               M                 incf    Table_Counter,F
0339   2???               M                 goto    loop_disp
033A                      M end_disp
                      00856     writeBCD        num_LF
033A   0836               M             movf    num_LF, W
033B   3E30               M             addlw   B'00110000'
033C   2???               M             call WR_DATA
                      00857     spacebar
033D   3014               M             movlw   B'00010100'
033E   2???               M             call    WR_INS
                      00858     spacebar
033F   3014               M             movlw   B'00010100'
0340   2???               M             call    WR_INS
                      00859     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0341   01BA               M                 clrf    Table_Counter
0342   0103               M                 clrw
0343                      M loop_disp
0343   083A               M         movf    Table_Counter,W
0344   2???               M                 call    FF
0345   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0346   1903               M                 btfsc   STATUS,Z
0347   2???               M                 goto    end_disp
0348   2???               M                 call    WR_DATA
0349   0ABA               M                 incf    Table_Counter,F
034A   2???               M                 goto    loop_disp
034B                      M end_disp
                      00860     writeBCD        num_FF
034B   0837               M             movf    num_FF, W
034C   3E30               M             addlw   B'00110000'
034D   2???               M             call WR_DATA
034E   0008           00861     return
                      00862 
                      00863 ; Defective candles Subroutine
                      00864 ; Displays index of each defective candle (LF or FF)
                      00865 ; Reads data from state1 - state9
034F                  00866 defective
034F   2???           00867     call            Clear_Display
                      00868 
                      00869     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0350   01BA               M                 clrf    Table_Counter
0351   0103               M                 clrw
0352                      M loop_disp
0352   083A               M         movf    Table_Counter,W
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0353   2???               M                 call    LF
0354   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0355   1903               M                 btfsc   STATUS,Z
0356   2???               M                 goto    end_disp
0357   2???               M                 call    WR_DATA
0358   0ABA               M                 incf    Table_Counter,F
0359   2???               M                 goto    loop_disp
035A                      M end_disp
035A   08B6           00870     movf            num_LF, F
035B   1D03           00871     btfss           STATUS,Z         ;if none LF, just say "none"
035C   2???           00872     goto            check_LF
                      00873     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
035D   01BA               M                 clrf    Table_Counter
035E   0103               M                 clrw
035F                      M loop_disp
035F   083A               M         movf    Table_Counter,W
0360   2???               M                 call    None
0361   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0362   1903               M                 btfsc   STATUS,Z
0363   2???               M                 goto    end_disp
0364   2???               M                 call    WR_DATA
0365   0ABA               M                 incf    Table_Counter,F
0366   2???               M                 goto    loop_disp
0367                      M end_disp
0367   2???           00874     goto            now_FF
                      00875 
0368                  00876 check_LF                            ; list all LF candles
0368   3002           00877     movlw           B'00000010'
0369   2???           00878     call            check_for_fail
                      00879 
036A                  00880 now_FF                              ; now look at FF
036A   2???           00881     call            Switch_Lines
                      00882     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
036B   01BA               M                 clrf    Table_Counter
036C   0103               M                 clrw
036D                      M loop_disp
036D   083A               M         movf    Table_Counter,W
036E   2???               M                 call    FF
036F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0370   1903               M                 btfsc   STATUS,Z
0371   2???               M                 goto    end_disp
0372   2???               M                 call    WR_DATA
0373   0ABA               M                 incf    Table_Counter,F
0374   2???               M                 goto    loop_disp
0375                      M end_disp
0375   08B7           00883     movf            num_FF, F
0376   1D03           00884     btfss           STATUS,Z         ;if none FF, just say "none"
0377   2???           00885     goto            check_FF
                      00886     Display         None
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0378   01BA               M                 clrf    Table_Counter
0379   0103               M                 clrw
037A                      M loop_disp
037A   083A               M         movf    Table_Counter,W
037B   2???               M                 call    None
037C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
037D   1903               M                 btfsc   STATUS,Z
037E   2???               M                 goto    end_disp
037F   2???               M                 call    WR_DATA
0380   0ABA               M                 incf    Table_Counter,F
0381   2???               M                 goto    loop_disp
0382                      M end_disp
0382   0008           00887     return
                      00888 
0383                  00889 check_FF                            ; list all FF candles
0383   3003           00890     movlw           B'00000011'
0384   2???           00891     call            check_for_fail
0385   0008           00892     return
                      00893 
0386                  00894 check_for_fail  ;lists all candles that have status currently in W "stateX"
0386   00B9           00895     movwf   statetemp
                      00896         movlf   D'0', candle_index
0387   3000               M         movlw   D'0'
0388   00C8               M         movwf   candle_index
0389   1383           00897         bcf     STATUS, IRP
                      00898         movlf   0x20, FSR           ;index of right before state1
038A   3020               M         movlw   0x20
038B   0084               M         movwf   FSR
038C                  00899 check_next
038C   3009           00900         movlw   D'9'                ;exit loop if at 9
038D   0248           00901         subwf   candle_index, W
038E   1803           00902         btfsc   STATUS,W
038F   2???           00903         goto    end_check_fail
0390   0A84           00904         incf    FSR,F               ; increment
0391   0AC8           00905         incf    candle_index,F
0392   0839           00906         movf    statetemp, W            ;see if stateN = stateX
0393   0200           00907         subwf   INDF, W
0394   1D03           00908         btfss   STATUS, Z
0395   2???           00909         goto    check_next              ;if not, go to next
                      00910         writeBCD        candle_index    ;if so, write down the number
0396   0848               M             movf    candle_index, W
0397   3E30               M             addlw   B'00110000'
0398   2???               M             call WR_DATA
                      00911         spacebar
0399   3014               M             movlw   B'00010100'
039A   2???               M             call    WR_INS
039B   2???           00912         goto check_next
039C                  00913 end_check_fail
039C   0008           00914         return
                      00915 
                      00916 ; Time subroutine
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00917 ; Right now this takes the time in seconds as a binary number in op_time
                      00918 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      00919 ; incremented every second. However I may just take the stop time - start time
                      00920 ; from the RTC data so this might change a lot.
039D                  00921 time
039D   2???           00922     call    Clear_Display
                      00923     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
039E   01BA               M                 clrf    Table_Counter
039F   0103               M                 clrw
03A0                      M loop_disp
03A0   083A               M         movf    Table_Counter,W
03A1   2???               M                 call    Time_Msg
03A2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03A3   1903               M                 btfsc   STATUS,Z
03A4   2???               M                 goto    end_disp
03A5   2???               M                 call    WR_DATA
03A6   0ABA               M                 incf    Table_Counter,F
03A7   2???               M                 goto    loop_disp
03A8                      M end_disp
03A8   2???           00924     call    Switch_Lines
03A9   0834           00925     movf    op_time, W
03AA   2???           00926     call    big_number
03AB   08C3           00927     movf    huns, F
03AC   1903           00928     btfsc   STATUS,Z        ;if huns is zero don't display it
03AD   2???           00929     goto    no_huns
                      00930     writeBCD    huns
03AE   0843               M             movf    huns, W
03AF   3E30               M             addlw   B'00110000'
03B0   2???               M             call WR_DATA
03B1                  00931 no_huns
03B1   08C4           00932     movf    tens, F
03B2   1903           00933     btfsc   STATUS,Z        ;if tens is zero don't display it
03B3   2???           00934     goto    no_tens
                      00935     writeBCD    tens
03B4   0844               M             movf    tens, W
03B5   3E30               M             addlw   B'00110000'
03B6   2???               M             call WR_DATA
03B7                  00936 no_tens
                      00937     writeBCD    ones
03B7   0845               M             movf    ones, W
03B8   3E30               M             addlw   B'00110000'
03B9   2???               M             call WR_DATA
                      00938     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03BA   01BA               M                 clrf    Table_Counter
03BB   0103               M                 clrw
03BC                      M loop_disp
03BC   083A               M         movf    Table_Counter,W
03BD   2???               M                 call    Seconds
03BE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03BF   1903               M                 btfsc   STATUS,Z
03C0   2???               M                 goto    end_disp
03C1   2???               M                 call    WR_DATA
03C2   0ABA               M                 incf    Table_Counter,F
03C3   2???               M                 goto    loop_disp
03C4                      M end_disp
03C4   0008           00939     return
                      00940 
                      00941 ; Export subroutine         
                      00942 ; Exports data from current run to hyperterminal
                      00943 ; reads start time and num_tot/num_ff/num_lf data
03C5                  00944 export
                      00945     printchar   0x7       ;makes a noise on the PC
03C5   3007               M             movlw   0x7
03C6   2???               M             call    writetoPC
                      00946     printchar   0xD       ;go back to left edge
03C7   300D               M             movlw   0xD
03C8   2???               M             call    writetoPC
                      00947     printchar   "T"
03C9   3054               M             movlw   "T"
03CA   2???               M             call    writetoPC
                      00948     printchar   "e"
03CB   3065               M             movlw   "e"
03CC   2???               M             call    writetoPC
                      00949     printchar   "s"
03CD   3073               M             movlw   "s"
03CE   2???               M             call    writetoPC
                      00950     printchar   "t"
03CF   3074               M             movlw   "t"
03D0   2???               M             call    writetoPC
                      00951     printchar   " "
03D1   3020               M             movlw   " "
03D2   2???               M             call    writetoPC
                      00952     printchar   "a"
03D3   3061               M             movlw   "a"
03D4   2???               M             call    writetoPC
                      00953     printchar   "t"
03D5   3074               M             movlw   "t"
03D6   2???               M             call    writetoPC
                      00954     printchar   ":"
03D7   303A               M             movlw   ":"
03D8   2???               M             call    writetoPC
                      00955     printchar   " "
03D9   3020               M             movlw   " "
03DA   2???               M             call    writetoPC
                      00956     printchar   "2"
03DB   3032               M             movlw   "2"
03DC   2???               M             call    writetoPC
                      00957     printchar   "0"
03DD   3030               M             movlw   "0"
03DE   2???               M             call    writetoPC
                      00958     printASC   start_year10
03DF   1283 1303          M             banksel start_year10
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E1   082A               M             movf    start_year10,W
03E2   2???               M             call    writetoPC
                      00959     printASC   start_year1
03E3   1283 1303          M             banksel start_year1
03E5   082B               M             movf    start_year1,W
03E6   2???               M             call    writetoPC
                      00960     printchar   "/"
03E7   302F               M             movlw   "/"
03E8   2???               M             call    writetoPC
                      00961     printASC   start_month10
03E9   1283 1303          M             banksel start_month10
03EB   082C               M             movf    start_month10,W
03EC   2???               M             call    writetoPC
                      00962     printASC   start_month1
03ED   1283 1303          M             banksel start_month1
03EF   082D               M             movf    start_month1,W
03F0   2???               M             call    writetoPC
                      00963     printchar   "/"
03F1   302F               M             movlw   "/"
03F2   2???               M             call    writetoPC
                      00964     printASC   start_date10
03F3   1283 1303          M             banksel start_date10
03F5   082E               M             movf    start_date10,W
03F6   2???               M             call    writetoPC
                      00965     printASC   start_date1
03F7   1283 1303          M             banksel start_date1
03F9   082F               M             movf    start_date1,W
03FA   2???               M             call    writetoPC
                      00966     printchar   " "
03FB   3020               M             movlw   " "
03FC   2???               M             call    writetoPC
                      00967     printASC   start_hour10
03FD   1283 1303          M             banksel start_hour10
03FF   0830               M             movf    start_hour10,W
0400   2???               M             call    writetoPC
                      00968     printASC   start_hour1
0401   1283 1303          M             banksel start_hour1
0403   0831               M             movf    start_hour1,W
0404   2???               M             call    writetoPC
                      00969     printchar   ":"
0405   303A               M             movlw   ":"
0406   2???               M             call    writetoPC
                      00970     printASC   start_min10
0407   1283 1303          M             banksel start_min10
0409   0832               M             movf    start_min10,W
040A   2???               M             call    writetoPC
                      00971     printASC   start_min1
040B   1283 1303          M             banksel start_min1
040D   0833               M             movf    start_min1,W
040E   2???               M             call    writetoPC
                      00972     newline
                          M             printchar   0xA ;changes line
040F   300A               M             movlw   0xA
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0410   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0411   300D               M             movlw   0xD
0412   2???               M             call    writetoPC
                      00973     printchar   "T"
0413   3054               M             movlw   "T"
0414   2???               M             call    writetoPC
                      00974     printchar   "i"
0415   3069               M             movlw   "i"
0416   2???               M             call    writetoPC
                      00975     printchar   "m"
0417   306D               M             movlw   "m"
0418   2???               M             call    writetoPC
                      00976     printchar   "e"
0419   3065               M             movlw   "e"
041A   2???               M             call    writetoPC
                      00977     printchar   ":"
041B   303A               M             movlw   ":"
041C   2???               M             call    writetoPC
                      00978     printchar   " "
041D   3020               M             movlw   " "
041E   2???               M             call    writetoPC
                      00979     printchar   " "
041F   3020               M             movlw   " "
0420   2???               M             call    writetoPC
                      00980     printchar   " "
0421   3020               M             movlw   " "
0422   2???               M             call    writetoPC
                      00981     printchar   " "
0423   3020               M             movlw   " "
0424   2???               M             call    writetoPC
0425   1283 1303      00982     banksel huns
0427   08C3           00983     movf    huns, F
0428   1903           00984     btfsc   STATUS,Z        ;if huns is zero don't display it
0429   2???           00985     goto    nohuns
                      00986     printBCD   huns
042A   1283 1303          M             banksel huns
042C   0843               M             movf    huns, W
042D   3E30               M             addlw   0x30
042E   2???               M             call    writetoPC
042F                  00987 nohuns
042F   1283 1303      00988     banksel tens
0431   08C4           00989     movf    tens, F
0432   1903           00990     btfsc   STATUS,Z        ;if tens is zero don't display it
0433   2???           00991     goto    notens
                      00992     printBCD   tens
0434   1283 1303          M             banksel tens
0436   0844               M             movf    tens, W
0437   3E30               M             addlw   0x30
0438   2???               M             call    writetoPC
0439                  00993 notens
                      00994     printBCD   ones
0439   1283 1303          M             banksel ones
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

043B   0845               M             movf    ones, W
043C   3E30               M             addlw   0x30
043D   2???               M             call    writetoPC
                      00995     printchar   " "
043E   3020               M             movlw   " "
043F   2???               M             call    writetoPC
                      00996     printchar   "s"
0440   3073               M             movlw   "s"
0441   2???               M             call    writetoPC
                      00997     printchar   "e"
0442   3065               M             movlw   "e"
0443   2???               M             call    writetoPC
                      00998     printchar   "c"
0444   3063               M             movlw   "c"
0445   2???               M             call    writetoPC
                      00999     newline
                          M             printchar   0xA ;changes line
0446   300A               M             movlw   0xA
0447   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0448   300D               M             movlw   0xD
0449   2???               M             call    writetoPC
                      01000     printchar   "C"
044A   3043               M             movlw   "C"
044B   2???               M             call    writetoPC
                      01001     printchar   "a"
044C   3061               M             movlw   "a"
044D   2???               M             call    writetoPC
                      01002     printchar   "n"
044E   306E               M             movlw   "n"
044F   2???               M             call    writetoPC
                      01003     printchar   "d"
0450   3064               M             movlw   "d"
0451   2???               M             call    writetoPC
                      01004     printchar   "l"
0452   306C               M             movlw   "l"
0453   2???               M             call    writetoPC
                      01005     printchar   "e"
0454   3065               M             movlw   "e"
0455   2???               M             call    writetoPC
                      01006     printchar   "s"
0456   3073               M             movlw   "s"
0457   2???               M             call    writetoPC
                      01007     printchar   ":"
0458   303A               M             movlw   ":"
0459   2???               M             call    writetoPC
                      01008     printchar   " "
045A   3020               M             movlw   " "
045B   2???               M             call    writetoPC
                      01009     printchar   " "
045C   3020               M             movlw   " "
045D   2???               M             call    writetoPC
                      01010     printchar   " "
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045E   3020               M             movlw   " "
045F   2???               M             call    writetoPC
                      01011     printchar   " "
0460   3020               M             movlw   " "
0461   2???               M             call    writetoPC
                      01012     printchar   " "
0462   3020               M             movlw   " "
0463   2???               M             call    writetoPC
                      01013     printchar   " "
0464   3020               M             movlw   " "
0465   2???               M             call    writetoPC
                      01014     printBCD    num_tot
0466   1283 1303          M             banksel num_tot
0468   0835               M             movf    num_tot, W
0469   3E30               M             addlw   0x30
046A   2???               M             call    writetoPC
                      01015     newline
                          M             printchar   0xA ;changes line
046B   300A               M             movlw   0xA
046C   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
046D   300D               M             movlw   0xD
046E   2???               M             call    writetoPC
                      01016     printchar   "L"
046F   304C               M             movlw   "L"
0470   2???               M             call    writetoPC
                      01017     printchar   "E"
0471   3045               M             movlw   "E"
0472   2???               M             call    writetoPC
                      01018     printchar   "D"
0473   3044               M             movlw   "D"
0474   2???               M             call    writetoPC
                      01019     printchar   " "
0475   3020               M             movlw   " "
0476   2???               M             call    writetoPC
                      01020     printchar   "f"
0477   3066               M             movlw   "f"
0478   2???               M             call    writetoPC
                      01021     printchar   "a"
0479   3061               M             movlw   "a"
047A   2???               M             call    writetoPC
                      01022     printchar   "i"
047B   3069               M             movlw   "i"
047C   2???               M             call    writetoPC
                      01023     printchar   "l"
047D   306C               M             movlw   "l"
047E   2???               M             call    writetoPC
                      01024     printchar   ":"
047F   303A               M             movlw   ":"
0480   2???               M             call    writetoPC
                      01025     printchar   " "
0481   3020               M             movlw   " "
0482   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01026     printchar   " "
0483   3020               M             movlw   " "
0484   2???               M             call    writetoPC
                      01027     printchar   " "
0485   3020               M             movlw   " "
0486   2???               M             call    writetoPC
                      01028     printchar   " "
0487   3020               M             movlw   " "
0488   2???               M             call    writetoPC
                      01029     printchar   " "
0489   3020               M             movlw   " "
048A   2???               M             call    writetoPC
                      01030     printBCD    num_LF
048B   1283 1303          M             banksel num_LF
048D   0836               M             movf    num_LF, W
048E   3E30               M             addlw   0x30
048F   2???               M             call    writetoPC
                      01031     newline
                          M             printchar   0xA ;changes line
0490   300A               M             movlw   0xA
0491   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0492   300D               M             movlw   0xD
0493   2???               M             call    writetoPC
                      01032     printchar   "F"
0494   3046               M             movlw   "F"
0495   2???               M             call    writetoPC
                      01033     printchar   "l"
0496   306C               M             movlw   "l"
0497   2???               M             call    writetoPC
                      01034     printchar   "i"
0498   3069               M             movlw   "i"
0499   2???               M             call    writetoPC
                      01035     printchar   "c"
049A   3063               M             movlw   "c"
049B   2???               M             call    writetoPC
                      01036     printchar   "k"
049C   306B               M             movlw   "k"
049D   2???               M             call    writetoPC
                      01037     printchar   "e"
049E   3065               M             movlw   "e"
049F   2???               M             call    writetoPC
                      01038     printchar   "r"
04A0   3072               M             movlw   "r"
04A1   2???               M             call    writetoPC
                      01039     printchar   " "
04A2   3020               M             movlw   " "
04A3   2???               M             call    writetoPC
                      01040     printchar   "f"
04A4   3066               M             movlw   "f"
04A5   2???               M             call    writetoPC
                      01041     printchar   "a"
04A6   3061               M             movlw   "a"
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04A7   2???               M             call    writetoPC
                      01042     printchar   "i"
04A8   3069               M             movlw   "i"
04A9   2???               M             call    writetoPC
                      01043     printchar   "l"
04AA   306C               M             movlw   "l"
04AB   2???               M             call    writetoPC
                      01044     printchar   ":"
04AC   303A               M             movlw   ":"
04AD   2???               M             call    writetoPC
                      01045     printchar   " "
04AE   3020               M             movlw   " "
04AF   2???               M             call    writetoPC
                      01046     printBCD    num_FF
04B0   1283 1303          M             banksel num_FF
04B2   0837               M             movf    num_FF, W
04B3   3E30               M             addlw   0x30
04B4   2???               M             call    writetoPC
                      01047     newline
                          M             printchar   0xA ;changes line
04B5   300A               M             movlw   0xA
04B6   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04B7   300D               M             movlw   0xD
04B8   2???               M             call    writetoPC
                      01048     newline  
                          M             printchar   0xA ;changes line
04B9   300A               M             movlw   0xA
04BA   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04BB   300D               M             movlw   0xD
04BC   2???               M             call    writetoPC
04BD   1283           01049     bcf STATUS,RP0
04BE   1303           01050     bcf STATUS,RP1     ; back to bank 0
04BF   0008           01051     return
                      01052 
                      01053 
                      01054 ;***************************************
                      01055 ; GENERAL PURPOSE SUBROUTINES
                      01056 ;***************************************
                      01057 
                      01058 ; DISPLAY BIG NUMBER SUBROUTINE
                      01059 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01060 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01061 ; Uses "shift and add 3" algorithm
04C0                  01062 big_number
                      01063     movff   op_time, op_time_save         ;save the original op_time
04C0   0834               M         movf    op_time, W
04C1   00C2               M         movwf   op_time_save
                      01064     movlf   8, bignumcount                ;will shift 8 times
04C2   3008               M         movlw   8
04C3   00C6               M         movwf   bignumcount
04C4   01C3           01065     clrf    huns
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C5   01C4           01066     clrf    tens
04C6   01C5           01067     clrf    ones
                      01068 
04C7                  01069 BCDadd3                             ; if any digit > 5, add3
04C7   3005           01070     movlw   0x5
04C8   0243           01071     subwf   huns, W
04C9   1803           01072     btfsc   STATUS, C
04CA   2???           01073     call    add3huns
                      01074 
04CB   3005           01075     movlw   0x5
04CC   0244           01076     subwf   tens, W
04CD   1803           01077     btfsc   STATUS, C
04CE   2???           01078     call    add3tens
                      01079 
04CF   3005           01080     movlw   0x5
04D0   0245           01081     subwf   ones, W
04D1   1803           01082     btfsc   STATUS, C
04D2   2???           01083     call    add3ones
                      01084 
04D3   03C6           01085     decf    bignumcount, 1
04D4   1003           01086     bcf     STATUS, C
04D5   0DB4           01087     rlf     op_time, 1              ; shift
04D6   0DC5           01088     rlf     ones, 1
04D7   1A45           01089     btfsc   ones,4 ;
04D8   2???           01090     call    carryones               ; carry if too large
04D9   0DC4           01091     rlf     tens, 1
                      01092 
04DA   1A44           01093     btfsc   tens,4 ;
04DB   2???           01094     call    carrytens
04DC   0DC3           01095     rlf     huns,1
04DD   1003           01096     bcf     STATUS, C
                      01097 
04DE   0846           01098     movf    bignumcount, W
04DF   1D03           01099     btfss   STATUS, Z
04E0   2???           01100     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01101 
                      01102     movff    op_time_save, op_time     ;restore the original op_time
04E1   0842               M         movf    op_time_save, W
04E2   00B4               M         movwf   op_time
04E3   0008           01103     return
                      01104 
04E4                  01105 add3huns
04E4   3003           01106     movlw 0x3
04E5   07C3           01107     addwf huns,F
04E6   0008           01108     return
04E7                  01109 add3tens
04E7   3003           01110     movlw 0x3
04E8   07C4           01111     addwf tens,F
04E9   0008           01112     return
04EA                  01113 add3ones
04EA   3003           01114     movlw 0x3
04EB   07C5           01115     addwf ones,F
04EC   0008           01116     return
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04ED                  01117 carryones
04ED   1245           01118     bcf ones, 4
04EE   1403           01119     bsf STATUS, C
04EF   0008           01120     return
04F0                  01121 carrytens
04F0   1244           01122     bcf tens, 4
04F1   1403           01123     bsf STATUS, C
04F2   0008           01124     return
                      01125 
                      01126 
                      01127 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01128 ; Delays exactly 0.5sec
04F3                  01129 HalfS
                      01130       movlf 0x8A, hdelH
04F3   308A               M         movlw   0x8A
04F4   00BF               M         movwf   hdelH
                      01131       movlf 0xBA, hdelM
04F5   30BA               M         movlw   0xBA
04F6   00C0               M         movwf   hdelM
                      01132       movlf 0x03, hdelL
04F7   3003               M         movlw   0x03
04F8   00C1               M         movwf   hdelL
04F9                  01133 HalfS_0
04F9   0BBF           01134       decfsz    hdelH, F
04FA   2???           01135           goto  $+2
04FB   0BC0           01136           decfsz        hdelM, F
04FC   2???           01137           goto  $+2
04FD   0BC1           01138           decfsz        hdelL, F
04FE   2???           01139           goto  HalfS_0
                      01140 
04FF   2???           01141           goto  $+1
0500   0000           01142           nop
0501   0008           01143           return
                      01144 
                      01145 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01146 ; Useful for LCD because PIC is way faster than it can handle
                      01147 ; Delays exactly 5ms
0502                  01148 delay5ms
                      01149         movlf   0xC3, del1
0502   30C3               M         movlw   0xC3
0503   00BD               M         movwf   del1
                      01150         movlf   0x0A, del2
0504   300A               M         movlw   0x0A
0505   00BE               M         movwf   del2
0506                  01151 Delay_0
0506   0BBD           01152         decfsz  del1, f
0507   2???           01153         goto    $+2
0508   0BBE           01154         decfsz  del2, f
0509   2???           01155         goto    Delay_0
050A   0008           01156     return
                      01157 
                      01158 ;***************************************
                      01159 ; LCD SUBROUTINES (from sample code)
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01160 ;***************************************
                      01161 
                      01162 ; Initialize the LCD
050B                  01163 InitLCD
050B   1283           01164         bcf STATUS,RP0
050C   1588           01165         bsf E     ;E default high
                      01166 
                      01167         ;Wait for LCD POR to finish (~15ms)
050D   2???           01168         call delay5ms
050E   2???           01169         call delay5ms
050F   2???           01170         call delay5ms
                      01171 
                      01172         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01173         ; -> Send b'0011' 3 times
0510   3033           01174         movlw   b'00110011'
0511   2???           01175         call    WR_INS
0512   2???           01176         call delay5ms
0513   2???           01177         call delay5ms
0514   3032           01178         movlw   b'00110010'
0515   2???           01179         call    WR_INS
0516   2???           01180         call delay5ms
0517   2???           01181         call delay5ms
                      01182 
                      01183         ; 4 bits, 2 lines, 5x7 dots
0518   3028           01184         movlw   b'00101000'
0519   2???           01185         call    WR_INS
051A   2???           01186         call delay5ms
051B   2???           01187         call delay5ms
                      01188 
                      01189         ; display on/off
051C   300C           01190         movlw   b'00001100'
051D   2???           01191         call    WR_INS
051E   2???           01192         call delay5ms
051F   2???           01193         call delay5ms
                      01194 
                      01195         ; Entry mode
0520   3006           01196         movlw   b'00000110'
0521   2???           01197         call    WR_INS
0522   2???           01198         call delay5ms
0523   2???           01199         call delay5ms
                      01200 
                      01201         ; Clear ram
0524   3001           01202         movlw   b'00000001'
0525   2???           01203         call    WR_INS
0526   2???           01204         call delay5ms
0527   2???           01205         call delay5ms
0528   0008           01206         return
                      01207 
                      01208 ; Clear the display
0529                  01209 Clear_Display
0529   3001           01210                 movlw   B'00000001'
052A   2???           01211                 call    WR_INS
052B   0008           01212                 return
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01213 
                      01214 ;Switch lines
052C                  01215 Switch_Lines
052C   30C0           01216                 movlw   B'11000000'
052D   2???           01217                 call    WR_INS
052E   0008           01218                 return
                      01219 
                      01220 ; Write an instruction to the LCD (see page 7-104)
                      01221 ; The instruction must be in W
052F                  01222 WR_INS
052F   1108           01223         bcf             RS                              ;clear RS
0530   00BB           01224         movwf   com                             ;W --> com
0531   39F0           01225         andlw   0xF0                    ;mask 4 bits MSB w = X0
0532   0088           01226         movwf   PORTD                   ;Send 4 bits MSB
0533   1588           01227         bsf             E                               ;
0534   2???           01228         call    delay5ms        ;__    __
0535   1188           01229         bcf             E                               ;  |__|
0536   0E3B           01230         swapf   com,w
0537   39F0           01231         andlw   0xF0                    ;1111 0010
0538   0088           01232         movwf   PORTD                   ;send 4 bits LSB
0539   1588           01233         bsf             E                               ;
053A   2???           01234         call    delay5ms        ;__    __
053B   1188           01235         bcf             E                               ;  |__|
053C   2???           01236         call    delay5ms
053D   0008           01237         return
                      01238 
                      01239 ; Write data at current cursor location
                      01240 ; Character code (see page 7-104) must be in W
053E                  01241 WR_DATA
053E   1508           01242         bsf             RS
053F   00BC           01243         movwf   dat
0540   083C           01244         movf    dat,w
0541   39F0           01245         andlw   0xF0
0542   3E04           01246         addlw   4
0543   0088           01247         movwf   PORTD
0544   1588           01248         bsf             E                               ;
0545   2???           01249         call    delay5ms        ;__    __
0546   1188           01250         bcf             E                               ;  |__|
0547   0E3C           01251         swapf   dat,w
0548   39F0           01252         andlw   0xF0
0549   3E04           01253         addlw   4
054A   0088           01254         movwf   PORTD
054B   1588           01255         bsf             E                               ;
054C   2???           01256         call    delay5ms        ;__    __
054D   1188           01257         bcf             E                               ;  |__|
054E   0008           01258         return
                      01259 
                      01260 
                      01261 ;***************************************
                      01262 ; PC INTERFACE SUBROUTINES (from sample code)
                      01263 ;***************************************
054F                  01264 InitUSART
054F   1683           01265         bsf       STATUS,RP0     ; select bank 1
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0550   300F           01266         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0551   0099           01267         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0552   0198           01268         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01269 
0553   1283           01270         bcf       STATUS,RP0     ; select bank 0
0554   1798           01271         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0555   1618           01272         bsf       RCSTA,CREN     ; continuous receive
                      01273 
0556   1683           01274         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0557   1698           01275         bsf       TXSTA,TXEN     ; Transmit enable
0558   0008           01276         return
                      01277 
                      01278 
0559                  01279 writetoPC
                      01280 ; Writes the data in W to the PC
                      01281 ; end up in bank1!
0559   1283           01282         bcf       STATUS,RP0     ; Go to bank 0
055A   0099           01283         movwf     TXREG          ; Send contents of W to RS232
055B   1683           01284         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
055C   1C98           01285         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
055D   2???           01286         goto      $-1
055E   0008           01287         return
                      01288 
                      01289 
                      01290 ;***************************************
                      01291 ; ISR
                      01292 ; Currently only care about TMR0
                      01293 ; TMR0 overflows at 256*256; each time, decrement count38
                      01294 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01295 ; When this hapens, op_time increments
                      01296 ;***************************************
055F                  01297 isr
055F   00F9           01298     movwf   w_isr           ;save W and status
0560   0E03           01299     swapf   STATUS, W
0561   0183           01300     clrf    STATUS
0562   00FA           01301     movwf   status_isr
                      01302 ;    movf    PCLATH, W      ;if using pages
                      01303 ;    movwf   pclath_isr
                      01304 ;    clrf    PCLATH
                      01305 
0563   0BC7           01306     decfsz  count38, F     ;if count38 gets to 38 it's been one second
0564   2???           01307     goto    end_isr
                      01308     movlf   D'38', count38  ;so reset count38
0565   3026               M         movlw   D'38'
0566   00C7               M         movwf   count38
0567   0AB4           01309     incf    op_time, F         ; and increment op_time
                      01310 
0568                  01311 end_isr
                      01312 
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0568   1D05           01313     btfss   PHOTODATA       ;if PHOTODATA is 1, light is off
0569   0AC9           01314     incf    photocount, F       ;if it is 0, light is on so photocount++
                      01315 
                      01316 ;    movf    pclath_isr, W  ;if using pages
                      01317 ;    movwf    PCLATH
056A   0E7A           01318     swapf   status_isr, W   ;restore W and status
056B   0083           01319     movwf   STATUS
056C   0EF9           01320     swapf   w_isr, F
056D   0E79           01321     swapf   w_isr, W
056E   110B           01322     bcf     INTCON, T0IF    ;clear the interrupt flag
056F   0009           01323     retfie
                      01324 
                      01325 
3F72                  01326     END
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000004C7
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000529
D                                 00000005
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           00000506
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000004F3
HalfS_0                           000004F9
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTA, 1
IRLIGHT                           PORTA, 0
IRP                               00000007
InitLCD                           0000050B
InitUSART                         0000054F
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AD
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000BE
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTA, 2
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      0000052C
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     0000003A
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

WR_DATA                           0000053E
WR_INS                            0000052F
Z                                 00000002
_.org_1_0155                      00000155
_.org_1_018A                      0000018A
_.org_1_01B6                      000001B6
_.org_1_01BB                      000001BB
_.org_1_01D4                      000001D4
_.org_1_0211                      00000211
_.org_1_04FA                      000004FA
_.org_1_04FC                      000004FC
_.org_1_04FF                      000004FF
_.org_1_0507                      00000507
_.org_1_055D                      0000055D
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

add3huns                          000004E4
add3ones                          000004EA
add3tens                          000004E7
badkey                            00000210
big_number                        000004C0
bignumcount                       00000046
candle_index                      00000048
carryones                         000004ED
carrytens                         000004F0
check_1                           0000025C
check_2                           00000265
check_3                           0000026F
check_4                           00000279
check_5                           00000283
check_6                           0000028D
check_7                           00000297
check_8                           000002A1
check_9                           000002AB
check_FF                          00000383
check_LED                         00000302
check_LF                          00000368
check_defective                   000002BB
check_done                        000001FF
check_export                      000002C7
check_flick                       00000311
check_for_fail                    00000386
check_log1                        000001D8
check_log2                        000001E1
check_log3                        000001EB
check_log4                        000001F5
check_next                        0000038C
check_none                        000002E5
check_pass                        000002F3
check_standby                     000002CD
check_start                       000002DE
check_summary                     000002B5
check_time                        000002C1
com                               0000003B
count38                           00000047
dat                               0000003C
default_key                       000002E3
default_state                     00000320
defective                         0000034F
del1                              0000003D
del2                              0000003E
delay5ms                          00000502
display_log                       00000213
display_state                     000002E4
dummy                             00000020
end_check_fail                    0000039C
end_isr                           00000568
end_operation                     00000181
export                            000003C5
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

hdelH                             0000003F
hdelL                             00000041
hdelM                             00000040
huns                              00000043
i2c_common_setup                  00000000
information                       0000025B
init                              000000CD
isr                               0000055F
keytemp                           00000038
logs                              000001BD
movff                             
movlf                             
newline                           
no_huns                           000003B1
no_tens                           000003B7
nohuns                            0000042F
notens                            00000439
now_FF                            0000036A
num_FF                            00000037
num_LF                            00000036
num_tot                           00000035
ones                              00000045
op_time                           00000034
op_time_save                      00000042
photocount                        00000049
photoval                          0000004A
poll                              000001B5
polling                           000001D3
printASC                          
printBCD                          
printchar                         
read_EEPROM                       00000216
read_rtc                          00000000
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
spacebar                          
start                             00000157
start_date1                       0000002F
start_date10                      0000002E
start_hour1                       00000031
start_hour10                      00000030
start_min1                        00000033
start_min10                       00000032
start_month1                      0000002D
start_month10                     0000002C
start_year1                       0000002B
start_year10                      0000002A
state1                            00000021
state2                            00000022
state3                            00000023
state4                            00000024
MPASM 5.54                          MAIN.ASM   2-18-2014  17:42:42         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

state5                            00000025
state6                            00000026
state7                            00000027
state8                            00000028
state9                            00000029
statetemp                         00000039
status_isr                        0000007A
summary                           00000321
tens                              00000044
threshold1                        D'15'
threshold2                        D'65'
time                              0000039D
w_isr                             00000079
waiting                           000000EF
writeASC                          
writeBCD                          
write_log1                        00000182
write_log1_0                      00000187
write_rtc                         00000000
writechar                         
writetoPC                         00000559

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    29 reported,     0 suppressed

