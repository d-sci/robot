MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'15'
                      00014     #define threshold2  D'65'
                      00015     #define IRLIGHT    PORTA, 0
                      00016     #define IRDATA     PORTA, 1
                      00017     #define PHOTODATA  PORTA, 2
                      00018    ; note: check analog v digital!
                      00019 
                      00020 
                      00021 ;***************************************
                      00022 ; VARIABLES
                      00023 ;***************************************
                      00024 
                      00025 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00026 
                      00027     cblock      0x20
                      00028     ; Important information (will be displayed)
  00000020            00029         state1     ;where   0 = none      1 = pass
  00000021            00030         state2     ;        2 = led fail  3 = flicker fail
  00000022            00031         state3
  00000023            00032         state4
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00033         state5
  00000025            00034         state6
  00000026            00035         state7
  00000027            00036         state8
  00000028            00037         state9
  00000029            00038         start_year10    ;starting time (for log)
  0000002A            00039         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00040         start_month10
  0000002C            00041         start_month1
  0000002D            00042         start_date10
  0000002E            00043         start_date1
  0000002F            00044         start_hour10
  00000030            00045         start_hour1
  00000031            00046         start_min10
  00000032            00047         start_min1
  00000033            00048         op_time     ;BCD in seconds
  00000034            00049         num_tot     ;BCD
  00000035            00050         num_LF      ;BCD
  00000036            00051         num_FF      ;BCD
                      00052 ; For general program / interface: temps, counters, etc.
  00000037            00053         keytemp         ; for data display mode
  00000038            00054         statetemp
  00000039            00055                 Table_Counter   ; for LCD stuff
  0000003A            00056                 com
  0000003B            00057                 dat
  0000003C            00058         del1            ; for delay 5ms delay routine
  0000003D            00059         del2
  0000003E            00060         hdelH          ;for delay 0.5s routine
  0000003F            00061         hdelM
  00000040            00062         hdelL
  00000041            00063         op_time_save    ;for operation time
  00000042            00064         huns
  00000043            00065         tens
  00000044            00066         ones
  00000045            00067         bignumcount
  00000046            00068         count38         ;for isr
                      00069 ; For machine program: temps, counters, etc.
  00000047            00070         candle_index
  00000048            00071         photocount
  00000049            00072         photoval
                      00073     endc
                      00074 
                      00075     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00076         w_isr
  0000007A            00077         status_isr
                      00078         endc
                      00079 
                      00080 
                      00081 ;***************************************
                      00082 ; MACROS
                      00083 ;***************************************
                      00084 
                      00085 ; Display a msg on LCD
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 Display macro   Message
                      00087                 local   loop_disp
                      00088                 local   end_disp
                      00089                 clrf    Table_Counter
                      00090                 clrw
                      00091 loop_disp
                      00092         movf    Table_Counter,W
                      00093                 call    Message
                      00094                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00095                 btfsc   STATUS,Z
                      00096                 goto    end_disp
                      00097                 call    WR_DATA
                      00098                 incf    Table_Counter,F
                      00099                 goto    loop_disp
                      00100 end_disp
                      00101                 endm
                      00102 
                      00103 
                      00104 ;Shortcuts for moving literals / registers
                      00105 movlf   macro   l, f
                      00106         movlw   l
                      00107         movwf   f
                      00108         endm
                      00109 
                      00110 movff   macro   source, dest
                      00111         movf    source, W
                      00112         movwf   dest
                      00113         endm
                      00114 
                      00115 ; Write to LCD (all in bank0 please)
                      00116 writeBCD    macro   reg         ; from a register containing BCD
                      00117             movf    reg, W
                      00118             addlw   B'00110000'
                      00119             call WR_DATA
                      00120             endm
                      00121 
                      00122 writechar   macro   asc             ;ASCII code literal (or in "")
                      00123             movlw   asc
                      00124             call    WR_DATA
                      00125             endm
                      00126 
                      00127 writeASC        macro   reg         ;from a register containing ASCII
                      00128             movf    reg, W
                      00129             call WR_DATA
                      00130             endm
                      00131 
                      00132 spacebar    macro
                      00133             movlw   B'00010100'
                      00134             call    WR_INS
                      00135             endm
                      00136 
                      00137 ;Print to PC (hyperterminal)
                      00138 printchar   macro   char            ;direct ASCII code literal (or in "")
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             movlw   char
                      00140             call    writetoPC
                      00141             endm
                      00142 
                      00143 printASC    macro   reg            ;ASCII code inside a register
                      00144             banksel reg
                      00145             movf    reg,W
                      00146             call    writetoPC
                      00147             endm
                      00148 
                      00149 printBCD    macro   BCD            ;BCD inside a register
                      00150             banksel BCD
                      00151             movf    BCD, W
                      00152             addlw   0x30
                      00153             call    writetoPC
                      00154             endm
                      00155 
                      00156 newline     macro
                      00157             printchar   0xA ;changes line
                      00158             printchar   0xD ;goes back to left
                      00159             endm
                      00160 ;***************************************
                      00161 ; VECTORS
                      00162 ;***************************************
                      00163 
                      00164     ORG       0x000
0000   2???           00165          goto      init
                      00166     ORG       0x004
0004   2???           00167         goto    isr
                      00168 
                      00169 
                      00170 ;***************************************
                      00171 ; TABLES (MESSAGES)
                      00172 ;***************************************
0005                  00173 Standby_Msg
0005   0782           00174                 addwf   PCL,F
0006   3453 3454 3441 00175                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00176 Start_Msg
000E   0782           00177         addwf   PCL,F
000F   3449 346E 3473 00178         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00179 End_Msg
0020   0782           00180         addwf   PCL,F
0021   3443 346F 346D 00181         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00182 Time_Msg
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   0782           00183                 addwf   PCL,F
002B   344F 3470 3465 00184                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00185 Seconds
003B   0782           00186         addwf   PCL,F
003C   3420 3473 3465 00187         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00188 Not_present
0045   0782           00189         addwf   PCL,F
0046   343A 3420 344E 00190         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00191 Pass
0054   0782           00192                 addwf   PCL,F
0055   343A 3420 3450 00193                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00194 LED_fail
005C   0782           00195                 addwf   PCL,F
005D   343A 3420 344C 00196                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00197 Flick_fail
0068   0782           00198                 addwf   PCL,F
0069   343A 3420 3446 00199                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00200 Total_Msg
0078   0782           00201         addwf   PCL,F
0079   3454 346F 3474 00202         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00203 LF
0089   0782           00204         addwf   PCL,F
008A   344C 3446 343A 00205         dt      "LF: ",0
       3420 3400 
008F                  00206 FF
008F   0782           00207         addwf   PCL,F
0090   3446 3446 343A 00208         dt      "FF: ",0
       3420 3400 
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095                  00209 None
0095   0782           00210         addwf   PCL,F
0096   343C 346E 346F 00211         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00212 Logs_Msg1
009D   0782           00213         addwf   PCL,F
009E   3431 342D 3434 00214         dt      "1-4 to see log",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3400 
00AD                  00215 Logs_Msg2
00AD   0782           00216         addwf   PCL,F
00AE   3453 3454 3441 00217         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BE                  00218 Op_at
00BE   0782           00219         addwf   PCL,F
00BF   344F 3470 3465 00220         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00221 
                      00222 ;***************************************
                      00223 ; MAIN PROGRAM
                      00224 ;***************************************
                      00225 
00CD                  00226 init
                      00227         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready
00CD   3020               M         movlw   b'00100000'
00CE   008B               M         movwf   INTCON
                      00228 
00CF   1683           00229         bsf       STATUS,RP0            ; select bank 1
                      00230         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00D0   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D1   0081               M         movwf   OPTION_REG
                      00231         movlf     b'000110', TRISA      ; PortA *may* be used for Photo and IR stuff
00D2   3006               M         movlw   b'000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D3   0085               M         movwf   TRISA
                      00232         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00D4   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0086               M         movwf   TRISB
                      00233                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00234         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; rest unused
00D6   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D7   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D8   0188           00235         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D9   0189           00236         clrf      TRISE                 ; PortE is output- *may* be used for motor (only [2:0] tho!)
                      00237 
00DA   1283           00238         bcf       STATUS,RP0        ; select bank 0
00DB   0185           00239         clrf      PORTA
00DC   0186           00240         clrf      PORTB
00DD   0187           00241         clrf      PORTC
00DE   0188           00242         clrf      PORTD
00DF   0189           00243         clrf      PORTE
                      00244 
00E0   2???           00245         call      i2c_common_setup  ;Set up I2C for communication
00E1   2???           00246         call      InitLCD           ;Initialize the LCD
00E2   2???           00247         call      InitUSART         ;Set up USART for RS232
                      00248 
00E3   1283           00249         bcf       STATUS,RP0        ; back to bank0
                      00250 
                      00251         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
00E4   01B9               M                 clrf    Table_Counter
00E5   0103               M                 clrw
00E6                      M loop_disp
00E6   0839               M         movf    Table_Counter,W
00E7   2???               M                 call    Standby_Msg
00E8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
00E9   1903               M                 btfsc   STATUS,Z
00EA   2???               M                 goto    end_disp
00EB   2???               M                 call    WR_DATA
00EC   0AB9               M                 incf    Table_Counter,F
00ED   2???               M                 goto    loop_disp
00EE                      M end_disp
00EE   2???           00252         call    Switch_Lines
                      00253 
                      00254  ;--------------------------------------------------
                      00255  ;      STANDBY MODE
                      00256 
00EF                  00257 waiting
                      00258         ; Display date and time.
                      00259         ; Also save starting time for log (will stop updating once we start)
                      00260         writechar "2"       ;First line shows 20**/**/**
00EF   3032               M             movlw   "2"
00F0   2???               M             call    WR_DATA
                      00261         writechar "0"
00F1   3030               M             movlw   "0"
00F2   2???               M             call    WR_DATA
                      00262         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
00F3   3006               M         movlw   0x06
00F4   1283 1303          M         banksel 0x73
00F6   00F3               M         movwf   0x73
00F7   2???               M         call    read_rtc
00F8   1283 1303          M         banksel 0x75
00FA   0875               M         movf    0x75,w
00FB   2???               M         call    rtc_convert   
00FC   0877           00263                 movf    0x77,W
00FD   00A9           00264         movwf    start_year10    ;Save starting year dig10
00FE   2???           00265                 call    WR_DATA
00FF   0878           00266                 movf    0x78,W
0100   00AA           00267         movwf    start_year1    ;Save starting year dig1
0101   2???           00268                 call    WR_DATA
                      00269                 writechar "/"
0102   302F               M             movlw   "/"
0103   2???               M             call    WR_DATA
                      00270                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0104   3005               M         movlw   0x05
0105   1283 1303          M         banksel 0x73
0107   00F3               M         movwf   0x73
0108   2???               M         call    read_rtc
0109   1283 1303          M         banksel 0x75
010B   0875               M         movf    0x75,w
010C   2???               M         call    rtc_convert   
010D   0877           00271                 movf    0x77,W
010E   00AB           00272         movwf    start_month10    ;Save starting month dig10
010F   2???           00273                 call    WR_DATA
0110   0878           00274                 movf    0x78,W
0111   00AC           00275         movwf    start_month1    ;Save starting month dig1
0112   2???           00276                 call    WR_DATA
                      00277                 writechar       "/"
0113   302F               M             movlw   "/"
0114   2???               M             call    WR_DATA
                      00278                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0115   3004               M         movlw   0x04
0116   1283 1303          M         banksel 0x73
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0118   00F3               M         movwf   0x73
0119   2???               M         call    read_rtc
011A   1283 1303          M         banksel 0x75
011C   0875               M         movf    0x75,w
011D   2???               M         call    rtc_convert   
011E   0877           00279                 movf    0x77,W
011F   00AD           00280         movwf    start_date10    ;Save starting date dig10
0120   2???           00281                 call    WR_DATA
0121   0878           00282                 movf    0x78,W
0122   00AE           00283         movwf    start_date1    ;Save starting date dig1
0123   2???           00284                 call    WR_DATA
                      00285                 spacebar
0124   3014               M             movlw   B'00010100'
0125   2???               M             call    WR_INS
                      00286                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0126   3002               M         movlw   0x02
0127   1283 1303          M         banksel 0x73
0129   00F3               M         movwf   0x73
012A   2???               M         call    read_rtc
012B   1283 1303          M         banksel 0x75
012D   0875               M         movf    0x75,w
012E   2???               M         call    rtc_convert   
012F   0877           00287                 movf    0x77,W
0130   00AF           00288         movwf    start_hour10    ;Save starting hour dig10
0131   2???           00289                 call    WR_DATA
0132   0878           00290                 movf    0x78,W
0133   00B0           00291         movwf    start_hour1    ;Save starting hour dig1
0134   2???           00292                 call    WR_DATA
                      00293                 writechar ":"
0135   303A               M             movlw   ":"
0136   2???               M             call    WR_DATA
                      00294                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0137   3001               M         movlw   0x01
0138   1283 1303          M         banksel 0x73
013A   00F3               M         movwf   0x73
013B   2???               M         call    read_rtc
013C   1283 1303          M         banksel 0x75
013E   0875               M         movf    0x75,w
013F   2???               M         call    rtc_convert   
0140   0877           00295                 movf    0x77,W
0141   00B1           00296         movwf    start_min10    ;Save starting min dig10
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0142   2???           00297                 call    WR_DATA
0143   0878           00298                 movf    0x78,W
0144   00B2           00299         movwf    start_min1    ;Save starting min dig1
0145   2???           00300                 call    WR_DATA
                      00301 
                      00302         ; Move cursor back to start of second line
                      00303         ; We will update displayed time but not the word "STANDBY"
0146   30C0           00304         movlw   B'11000000'
0147   2???           00305         call    WR_INS
                      00306 
                      00307         ;Poll to start (will have to hold key for ~0.5sec)
0148   1C86           00308          btfss          PORTB,1     ;Wait until data is available from the keypad
0149   2???           00309          goto           waiting
                      00310 
014A   0E06           00311          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
014B   390F           00312          andlw          0x0F
014C   00B7           00313          movwf      keytemp
014D   3A0C           00314          xorlw      0xC         ;Will be all zeros if its "START"
014E   1903           00315          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
014F   2???           00316          goto       start
                      00317 
0150   0837           00318          movf       keytemp,W     ;Go to log interface
0151   3A0E           00319          xorlw      0xE
0152   1903           00320          btfsc      STATUS,Z
0153   2???           00321          goto       logs
                      00322 
0154   1886           00323          btfsc          PORTB,1     ;Wait until key is released
0155   2???           00324          goto           $-1
0156   2???           00325          goto       waiting
                      00326 
                      00327 ;-----------------------------------------------------------
                      00328 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00329 
0157                  00330 start
                      00331         ;Start the timer
                      00332         movlf       D'38', count38
0157   3026               M         movlw   D'38'
0158   00C6               M         movwf   count38
0159   01B3           00333         clrf        op_time
015A   0181           00334         clrf        TMR0
015B   178B           00335         bsf         INTCON, GIE     ;enable interrupts
                      00336 
                      00337         ;Display starting message
015C   2???           00338         call        Clear_Display
                      00339         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
015D   01B9               M                 clrf    Table_Counter
015E   0103               M                 clrw
015F                      M loop_disp
015F   0839               M         movf    Table_Counter,W
0160   2???               M                 call    Start_Msg
0161   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0162   1903               M                 btfsc   STATUS,Z
0163   2???               M                 goto    end_disp
0164   2???               M                 call    WR_DATA
0165   0AB9               M                 incf    Table_Counter,F
0166   2???               M                 goto    loop_disp
0167                      M end_disp
                      00340 
                      00341 
                      00342 ;****FAKE CODE ******************************************
                      00343         ; Just delaying
0167   2???           00344         call        HalfS
0168   2???           00345         call        HalfS
                      00346 
                      00347        ; Putting values in manually.
                      00348         movlf     B'01', state1     ;pass
0169   3001               M         movlw   B'01'
016A   00A0               M         movwf   state1
                      00349         movlf     B'01', state2     ;pass
016B   3001               M         movlw   B'01'
016C   00A1               M         movwf   state2
                      00350         movlf     B'10', state3     ;LED fail
016D   3002               M         movlw   B'10'
016E   00A2               M         movwf   state3
                      00351         movlf     B'01', state4     ;pass
016F   3001               M         movlw   B'01'
0170   00A3               M         movwf   state4
                      00352         movlf     B'01', state5     ;pass
0171   3001               M         movlw   B'01'
0172   00A4               M         movwf   state5
                      00353         movlf     B'01', state6     ;pass
0173   3001               M         movlw   B'01'
0174   00A5               M         movwf   state6
                      00354         movlf     B'01', state7     ;pass
0175   3001               M         movlw   B'01'
0176   00A6               M         movwf   state7
                      00355         movlf     B'11', state8     ;flicker fail
0177   3003               M         movlw   B'11'
0178   00A7               M         movwf   state8
                      00356         movlf     B'01', state9     ;pass
0179   3001               M         movlw   B'01'
017A   00A8               M         movwf   state9
                      00357         movlf     D'1', num_LF
017B   3001               M         movlw   D'1'
017C   00B5               M         movwf   num_LF
                      00358         movlf     D'1', num_FF
017D   3001               M         movlw   D'1'
017E   00B6               M         movwf   num_FF
                      00359         movlf     D'9', num_tot
017F   3009               M         movlw   D'9'
0180   00B4               M         movwf   num_tot
                      00360 ;*******************************************************
                      00361 
                      00362 ; choose fake or real!
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00363 
                      00364 ;;****REAL CODE ******************************************
                      00365 ;    movlf    D'0', candle_index
                      00366 ;    bcf        STATUS, IRP
                      00367 ;    movlf   0x1F, FSR       ;pointing at right before state1
                      00368 ;    bsf     IRLIGHT     ;turn on IR
                      00369 ;
                      00370 ;rotate
                      00371 ;       movlw   0x9                 ; stop operation after 9 rotations
                      00372 ;    subwf   candle_index,W      ; candle_index is # you've already tested before rotating
                      00373 ;    btfsc   STATUS,Z
                      00374 ;       goto    end_operation
                      00375 ;       call    ROTATEMOTOR          ; else rotate motor and n++
                      00376 ;       incf    candle_index, F
                      00377 ;    incf    FSR, F
                      00378 ;
                      00379 ;detect_candle
                      00380 ;       btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
                      00381 ;       goto    test_candle     ;yes candle, go test it
                      00382 ;    movlf   D'0', INDF      ;no candle, state = not present
                      00383 ;       goto rotate                 ;and go try next
                      00384 ;
                      00385 ;test_candle
                      00386 ;       incf    num_tot, F                      ; keeping track of total number of candles
                      00387 ;       ; Assume candle is already turned on
                      00388 ;       clrf    photocount
                      00389 ;       call    HalfS       ; delay 2 sec or whatever
                      00390 ;   call    HalfS
                      00391 ;   call    HalfS
                      00392 ;   call    HalfS
                      00393 ;       movff   photocount, photoval        ;to ensure it wont change again
                      00394 ;check_threshold1
                      00395 ;    movlw    threshold1
                      00396 ;    subwf   photoval, W
                      00397 ;    btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
                      00398 ;    goto check_threshold2
                      00399 ;    movlf   D'2', INDF      ; < threshold 1 means led fail
                      00400 ;        incf    num_LF, F
                      00401 ;    goto    end_test_candle
                      00402 ;check_threshold2
                      00403 ;    movlw    threshold2
                      00404 ;    subwf   photoval, W
                      00405 ;    btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
                      00406 ;    goto aboveboth
                      00407 ;    movlf   D'1', INDF      ; < threshold 2 means pass
                      00408 ;    goto    end_test_candle
                      00409 ;aboveboth
                      00410 ;   movlf   D'3', INDF       ;else flicker fail
                      00411 ;   incf    num_FF, F
                      00412 ;end_test_candle
                      00413 ;       call    TURNOFF     ;pulse solenoid to turn off candle
                      00414 ;    goto    rotate
                      00415 ;
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00416 ;
                      00417 ;ROTATEMOTOR ;rotates stepper motor 40deg
                      00418 ;    return
                      00419 ;
                      00420 ;TURNOFF ;pulses solenoid to turn off candle
                      00421 ;    return
                      00422 ; ;****************************************************
                      00423 
0181                  00424 end_operation
                      00425         ;Turn off the IR
                      00426         ;bcf     IRLIGHT
                      00427 
                      00428         ; Stop the timer
0181   138B           00429          bcf         INTCON, GIE  ;disable interrupts
                      00430 
                      00431         ; SHIFT LOGS 1-3 -> 2-4
                      00432         ; THEN STORE CURRENT RUN as LOG 1
0182                  00433 shiftlogs
0182   1283 1703      00434         banksel     EEADR               ; bank 2
                      00435         movlf       D'41', EEADR        ; start shifting from 41->55
0184   3029               M         movlw   D'41'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0185   008D               M         movwf   EEADR
                      00436 
0186                  00437 shiftlogs_0
0186   1683 1703      00438         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0188   138C           00439         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0189   140C           00440         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
018A   188C           00441         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
018B   2???           00442         goto        $-1
018C   1283 1703      00443         banksel     EEADR               ;bank 2
018E   300E           00444         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
018F   078D           00445         addwf       EEADR, F
0190   1683 1703      00446         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0192   138C           00447         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0193   150C           00448         bsf         EECON1, WREN
0194   3055           00449         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0195   008D           00450         movwf       EECON2
0196   30AA           00451         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0197   008D           00452         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0198   148C           00453         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0199   110C           00454         bcf         EECON1, WREN
019A   1283 1703      00455         banksel     EEADR               ;bank 2
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019C   300E           00456         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
019D   020D           00457         subwf       EEADR, W
019E   1903           00458         btfsc       STATUS, Z
019F   2???           00459         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00460 
01A0   1283 1303      00461         banksel op_time             ; FOR SOME FUCKED UP REASON IT DOESNT WORK IF I SKIP THESE LINES
01A2   2???           00462         call    Clear_Display       ; EVEN THOUGH THEY DO NOTHING
01A3   1283 1703      00463         banksel EEADR
                      00464 
01A5   300F           00465         movlw       D'15'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01A6   028D           00466         subwf       EEADR, F            ;else EEADR -= 15 to shift next byte
01A7   2???           00467         goto        shiftlogs_0
                      00468 
01A8                  00469 write_log1
01A8   1283 1703      00470         banksel     EEADR
01AA   1383           00471         bcf         STATUS, IRP
                      00472         movlf       0x37, FSR           ;points to one after last important data
01AB   3037               M         movlw   0x37
01AC   0084               M         movwf   FSR
                      00473         movlf       D'14', EEADR        ;points to one after last place to write to
01AD   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01AE   008D               M         movwf   EEADR
01AF                  00474 write_log1_0
01AF   1683 1703      00475         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B1   188C           00476         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01B2   2???           00477         goto        $-1
01B3   1283 1703      00478         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B5   038D           00479         decf        EEADR, F            ;writing backwords
01B6   0384           00480         decf        FSR, F
                      00481         movff       INDF, EEDATA
01B7   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B8   008C               M         movwf   EEDATA
01B9   1683 1703      00482         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BB   138C           00483         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BC   150C           00484         bsf         EECON1, WREN
01BD   3055           00485         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BE   008D           00486         movwf       EECON2
01BF   30AA           00487         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C0   008D           00488         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C1   148C           00489         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C2   110C           00490         bcf         EECON1, WREN
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C3   1283 1703      00491         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C5   088D           00492         movf        EEADR, F
01C6   1D03           00493         btfss       STATUS, Z           ;if EEADR = 0 we're done
01C7   2???           00494         goto        write_log1_0
01C8   1283           00495         bcf         STATUS, RP0         ;so go back to bank 0 and continue
01C9   1303           00496         bcf         STATUS, RP1
                      00497 
                      00498         ; Display ending messages
01CA   2???           00499         call       Clear_Display
                      00500         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01CB   01B9               M                 clrf    Table_Counter
01CC   0103               M                 clrw
01CD                      M loop_disp
01CD   0839               M         movf    Table_Counter,W
01CE   2???               M                 call    End_Msg
01CF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01D0   1903               M                 btfsc   STATUS,Z
01D1   2???               M                 goto    end_disp
01D2   2???               M                 call    WR_DATA
01D3   0AB9               M                 incf    Table_Counter,F
01D4   2???               M                 goto    loop_disp
01D5                      M end_disp
01D5   2???           00501         call       HalfS
01D6   2???           00502         call       time             ; "Operation time: X sec"
01D7   2???           00503         call       HalfS
01D8   2???           00504         call       HalfS
01D9   2???           00505         call       summary          ; "Total candles: X. Defective: Y"
01DA   2???           00506         call       HalfS
01DB   2???           00507         call       HalfS
01DC   2???           00508         call       defective        ; "FF: a b c. LF: d e f"
                      00509 ;-----------------------------------------------------------------------
                      00510 ; Data display interface
                      00511 
01DD   1C86           00512 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
01DE   2???           00513          goto           $-1
                      00514 
01DF   0E06           00515          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
01E0   390F           00516          andlw          0x0F
01E1   2???           00517          call       information ;Do the right thing
                      00518 
01E2   1886           00519          btfsc          PORTB,1     ;Wait until key is released
01E3   2???           00520          goto           $-1
01E4   2???           00521          goto       poll
                      00522 
                      00523 
                      00524 ;-------------------------------------------------------------------------
                      00525 ; LOGS INTERFACE            (DONT ACTUALLY HAVE LOGS YET!)
                      00526 ; Eventually this will show logs
                      00527 ; Right now it just displays random crap
                      00528 ; Access from STANDBY and return to STANDBY
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00529 
01E5                  00530 logs
01E5   2???           00531     call    Clear_Display
                      00532     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01E6   01B9               M                 clrf    Table_Counter
01E7   0103               M                 clrw
01E8                      M loop_disp
01E8   0839               M         movf    Table_Counter,W
01E9   2???               M                 call    Logs_Msg1
01EA   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01EB   1903               M                 btfsc   STATUS,Z
01EC   2???               M                 goto    end_disp
01ED   2???               M                 call    WR_DATA
01EE   0AB9               M                 incf    Table_Counter,F
01EF   2???               M                 goto    loop_disp
01F0                      M end_disp
01F0   2???           00533     call    Switch_Lines
                      00534     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01F1   01B9               M                 clrf    Table_Counter
01F2   0103               M                 clrw
01F3                      M loop_disp
01F3   0839               M         movf    Table_Counter,W
01F4   2???               M                 call    Logs_Msg2
01F5   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01F6   1903               M                 btfsc   STATUS,Z
01F7   2???               M                 goto    end_disp
01F8   2???               M                 call    WR_DATA
01F9   0AB9               M                 incf    Table_Counter,F
01FA   2???               M                 goto    loop_disp
01FB                      M end_disp
                      00535 
01FB                  00536 polling
01FB   1C86           00537     btfss               PORTB,1     ;Wait until data is available from the keypad
01FC   2???           00538     goto                $-1
                      00539 
01FD   0E06           00540     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
01FE   390F           00541     andlw               0x0F
01FF   00B7           00542     movwf       keytemp     ; Save which key was pressed
                      00543 
0200                  00544 check_log1
0200   3A00           00545     xorlw   0x0         ;will be all zeros if its 1
0201   1D03           00546     btfss   STATUS,Z    ;and Z will be high, so skip
0202   2???           00547     goto    check_log2
0203   1283 1703      00548     banksel EEADR
                      00549     movlf   d'0', EEADR
0205   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0206   008D               M         movwf   EEADR
0207   2???           00550     call    display_log
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0208   2???           00551     goto    logs
                      00552 
0209                  00553 check_log2
0209   0837           00554     movf    keytemp, W
020A   3A01           00555     xorlw   0x1
020B   1D03           00556     btfss   STATUS,Z
020C   2???           00557     goto    check_log3
020D   1283 1703      00558     banksel EEADR
                      00559     movlf   d'14', EEADR
020F   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0210   008D               M         movwf   EEADR
0211   2???           00560     call    display_log
0212   2???           00561     goto    logs
                      00562 
0213                  00563 check_log3
0213   0837           00564     movf    keytemp, W
0214   3A02           00565     xorlw   0x2
0215   1D03           00566     btfss   STATUS,Z
0216   2???           00567     goto    check_log4
0217   1283 1703      00568     banksel EEADR
                      00569     movlf   d'28', EEADR
0219   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021A   008D               M         movwf   EEADR
021B   2???           00570     call    display_log
021C   2???           00571     goto    logs
                      00572 
021D                  00573 check_log4
021D   0837           00574     movf    keytemp, W
021E   3A04           00575     xorlw   0x4
021F   1D03           00576     btfss   STATUS,Z
0220   2???           00577     goto    check_done
0221   1283 1703      00578     banksel EEADR
                      00579     movlf   d'42', EEADR
0223   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0224   008D               M         movwf   EEADR
0225   2???           00580     call    display_log
0226   2???           00581     goto    logs
                      00582 
0227                  00583 check_done
0227   0837           00584     movf    keytemp, W
0228   3A0D           00585     xorlw   0xD
0229   1D03           00586     btfss   STATUS,Z
022A   2???           00587     goto    badkey
022B   2???           00588     call    Clear_Display
                      00589     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
022C   01B9               M                 clrf    Table_Counter
022D   0103               M                 clrw
022E                      M loop_disp
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

022E   0839               M         movf    Table_Counter,W
022F   2???               M                 call    Standby_Msg
0230   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0231   1903               M                 btfsc   STATUS,Z
0232   2???               M                 goto    end_disp
0233   2???               M                 call    WR_DATA
0234   0AB9               M                 incf    Table_Counter,F
0235   2???               M                 goto    loop_disp
0236                      M end_disp
0236   2???           00590     call    Switch_Lines
0237   2???           00591     goto    waiting
                      00592 
0238                  00593 badkey
0238   1886           00594     btfsc               PORTB,1     ;Wait until key is released
0239   2???           00595     goto                $-1
023A   2???           00596     goto        polling
                      00597 
                      00598 
023B                  00599 display_log                 ;start in bank2
                      00600     ; move EEPROM data back to "current" data
023B   1383           00601     bcf STATUS, IRP
                      00602     movlf   0x29, FSR
023C   3029               M         movlw   0x29
023D   0084               M         movwf   FSR
023E                  00603 read_EEPROM
023E   1683 1703      00604     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0240   138C           00605     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0241   140C           00606     bsf EECON1, RD          ; read EEPROM
0242   1283 1703      00607     banksel EEDATA          ;bank 2
                      00608     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0244   080C               M         movf    EEDATA, W
0245   0080               M         movwf   INDF
0246   0A84           00609     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0247   0A8D           00610     incf    EEADR, F
0248   3037           00611     movlw   0x37            ;done if FSR = 0x37
0249   0204           00612     subwf   FSR, W
024A   1D03           00613     btfss   STATUS, Z
024B   2???           00614     goto    read_EEPROM
                      00615     ;display that shit
024C   1283 1303      00616     banksel Table_Counter   ; bank0
024E   2???           00617     call    Clear_Display
                      00618     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
024F   01B9               M                 clrf    Table_Counter
0250   0103               M                 clrw
0251                      M loop_disp
0251   0839               M         movf    Table_Counter,W
0252   2???               M                 call    Op_at
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0253   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0254   1903               M                 btfsc   STATUS,Z
0255   2???               M                 goto    end_disp
0256   2???               M                 call    WR_DATA
0257   0AB9               M                 incf    Table_Counter,F
0258   2???               M                 goto    loop_disp
0259                      M end_disp
0259   2???           00619     call    Switch_Lines
                      00620     writechar    "2"
025A   3032               M             movlw   "2"
025B   2???               M             call    WR_DATA
                      00621     writechar    "0"
025C   3030               M             movlw   "0"
025D   2???               M             call    WR_DATA
                      00622     writeASC   start_year10
025E   0829               M             movf    start_year10, W
025F   2???               M             call WR_DATA
                      00623     writeASC   start_year1
0260   082A               M             movf    start_year1, W
0261   2???               M             call WR_DATA
                      00624     writechar   "/"
0262   302F               M             movlw   "/"
0263   2???               M             call    WR_DATA
                      00625     writeASC   start_month10
0264   082B               M             movf    start_month10, W
0265   2???               M             call WR_DATA
                      00626     writeASC   start_month1
0266   082C               M             movf    start_month1, W
0267   2???               M             call WR_DATA
                      00627     writechar   "/"
0268   302F               M             movlw   "/"
0269   2???               M             call    WR_DATA
                      00628     writeASC   start_date10
026A   082D               M             movf    start_date10, W
026B   2???               M             call WR_DATA
                      00629     writeASC   start_date1
026C   082E               M             movf    start_date1, W
026D   2???               M             call WR_DATA
                      00630     writechar   " "
026E   3020               M             movlw   " "
026F   2???               M             call    WR_DATA
                      00631     writeASC   start_hour10
0270   082F               M             movf    start_hour10, W
0271   2???               M             call WR_DATA
                      00632     writeASC   start_hour1
0272   0830               M             movf    start_hour1, W
0273   2???               M             call WR_DATA
                      00633     writechar   ":"
0274   303A               M             movlw   ":"
0275   2???               M             call    WR_DATA
                      00634     writeASC  start_min10
0276   0831               M             movf    start_min10, W
0277   2???               M             call WR_DATA
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00635     writeASC   start_min1
0278   0832               M             movf    start_min1, W
0279   2???               M             call WR_DATA
027A   2???           00636     call    HalfS
027B   2???           00637     call    HalfS
027C   2???           00638     call    time
027D   2???           00639     call    HalfS
027E   2???           00640     call    HalfS
027F   2???           00641     call    summary
0280   2???           00642     call    HalfS
0281   2???           00643     call    HalfS
                      00644     ;option to export??
0282   0008           00645     return
                      00646 
                      00647 ; END OF MAIN PROGRAM
                      00648 ;------------------------------------------------------------
                      00649 
                      00650 
                      00651 ;***************************************
                      00652 ; DATA DISPLAY ROUTINE
                      00653 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00654 ; Determines which key it was and displays appropriate info / branch
                      00655 ;***************************************
                      00656 
0283                  00657 information
0283   00B7           00658     movwf   keytemp             ; Save which key was pressed
                      00659 
0284                  00660 check_1
0284   3A00           00661     xorlw   0x0         ;will be all zeros if its 1
0285   1D03           00662     btfss   STATUS,Z    ;and Z will be high, so skip
0286   2???           00663     goto    check_2
0287   2???           00664     call    Clear_Display
                      00665     writechar "1"
0288   3031               M             movlw   "1"
0289   2???               M             call    WR_DATA
028A   0820           00666     movf    state1, W
028B   2???           00667     call    display_state
028C   0008           00668     return
                      00669 
028D                  00670 check_2
028D   0837           00671     movf    keytemp, W
028E   3A01           00672     xorlw   0x1
028F   1D03           00673     btfss   STATUS,Z
0290   2???           00674     goto    check_3
0291   2???           00675     call    Clear_Display
                      00676     writechar "2"
0292   3032               M             movlw   "2"
0293   2???               M             call    WR_DATA
0294   0821           00677     movf    state2, W
0295   2???           00678     call    display_state
0296   0008           00679     return
                      00680 
0297                  00681 check_3
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0297   0837           00682     movf    keytemp, W
0298   3A02           00683     xorlw   0x2
0299   1D03           00684     btfss   STATUS,Z
029A   2???           00685     goto    check_4
029B   2???           00686     call    Clear_Display
                      00687     writechar "3"
029C   3033               M             movlw   "3"
029D   2???               M             call    WR_DATA
029E   0822           00688     movf    state3, W
029F   2???           00689     call    display_state
02A0   0008           00690     return
                      00691 
02A1                  00692 check_4
02A1   0837           00693     movf    keytemp, W
02A2   3A04           00694     xorlw   0x4
02A3   1D03           00695     btfss   STATUS,Z
02A4   2???           00696     goto    check_5
02A5   2???           00697     call    Clear_Display
                      00698     writechar "4"
02A6   3034               M             movlw   "4"
02A7   2???               M             call    WR_DATA
02A8   0823           00699     movf    state4, W
02A9   2???           00700     call    display_state
02AA   0008           00701     return
                      00702 
02AB                  00703 check_5
02AB   0837           00704     movf    keytemp, W
02AC   3A05           00705     xorlw   0x5
02AD   1D03           00706     btfss   STATUS,Z
02AE   2???           00707     goto    check_6
02AF   2???           00708     call    Clear_Display
                      00709     writechar "5"
02B0   3035               M             movlw   "5"
02B1   2???               M             call    WR_DATA
02B2   0824           00710     movf    state5, W
02B3   2???           00711     call    display_state
02B4   0008           00712     return
                      00713 
02B5                  00714 check_6
02B5   0837           00715     movf    keytemp, W
02B6   3A06           00716     xorlw   0x6
02B7   1D03           00717     btfss   STATUS,Z
02B8   2???           00718     goto    check_7
02B9   2???           00719     call    Clear_Display
                      00720     writechar "6"
02BA   3036               M             movlw   "6"
02BB   2???               M             call    WR_DATA
02BC   0825           00721     movf    state6, W
02BD   2???           00722     call    display_state
02BE   0008           00723     return
                      00724 
02BF                  00725 check_7
02BF   0837           00726     movf    keytemp, W
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C0   3A08           00727     xorlw   0x8
02C1   1D03           00728     btfss   STATUS,Z
02C2   2???           00729     goto    check_8
02C3   2???           00730     call    Clear_Display
                      00731     writechar "7"
02C4   3037               M             movlw   "7"
02C5   2???               M             call    WR_DATA
02C6   0826           00732     movf    state7, W
02C7   2???           00733     call    display_state
02C8   0008           00734     return
                      00735 
02C9                  00736 check_8
02C9   0837           00737     movf    keytemp, W
02CA   3A09           00738     xorlw   0x9
02CB   1D03           00739     btfss   STATUS,Z
02CC   2???           00740     goto    check_9
02CD   2???           00741     call    Clear_Display
                      00742     writechar "8"
02CE   3038               M             movlw   "8"
02CF   2???               M             call    WR_DATA
02D0   0827           00743     movf    state8, W
02D1   2???           00744     call    display_state
02D2   0008           00745     return
                      00746 
02D3                  00747 check_9
02D3   0837           00748     movf    keytemp, W
02D4   3A0A           00749     xorlw   0xA
02D5   1D03           00750     btfss   STATUS,Z
02D6   2???           00751     goto    check_summary
02D7   2???           00752     call    Clear_Display
                      00753     writechar "9"
02D8   3039               M             movlw   "9"
02D9   2???               M             call    WR_DATA
02DA   0828           00754     movf    state9, W
02DB   2???           00755     call    display_state
02DC   0008           00756     return
                      00757 
02DD                  00758 check_summary
02DD   0837           00759     movf    keytemp, W
02DE   3A03           00760     xorlw   0x3
02DF   1D03           00761     btfss   STATUS,Z
02E0   2???           00762     goto    check_defective
02E1   2???           00763     call    summary
02E2   0008           00764     return
                      00765 
02E3                  00766 check_defective
02E3   0837           00767     movf    keytemp, W
02E4   3A07           00768     xorlw   0x7
02E5   1D03           00769     btfss   STATUS,Z
02E6   2???           00770     goto    check_time
02E7   2???           00771     call    defective
02E8   0008           00772     return
                      00773 
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E9                  00774 check_time
02E9   0837           00775     movf    keytemp, W
02EA   3A0B           00776     xorlw   0xB
02EB   1D03           00777     btfss   STATUS,Z
02EC   2???           00778     goto    check_export
02ED   2???           00779     call    time
02EE   0008           00780     return
                      00781 
02EF                  00782 check_export
02EF   0837           00783     movf    keytemp, W
02F0   3A0F           00784     xorlw   0xF
02F1   1D03           00785     btfss   STATUS,Z
02F2   2???           00786     goto    check_standby
02F3   2???           00787     call    export
02F4   0008           00788     return
                      00789 
02F5                  00790 check_standby
02F5   0837           00791     movf    keytemp, W
02F6   3A0D           00792     xorlw   0xD
02F7   1D03           00793     btfss   STATUS,Z
02F8   2???           00794     goto    check_start
02F9   2???           00795     call    Clear_Display
                      00796     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02FA   01B9               M                 clrf    Table_Counter
02FB   0103               M                 clrw
02FC                      M loop_disp
02FC   0839               M         movf    Table_Counter,W
02FD   2???               M                 call    Standby_Msg
02FE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FF   1903               M                 btfsc   STATUS,Z
0300   2???               M                 goto    end_disp
0301   2???               M                 call    WR_DATA
0302   0AB9               M                 incf    Table_Counter,F
0303   2???               M                 goto    loop_disp
0304                      M end_disp
0304   2???           00797     call    Switch_Lines
0305   2???           00798     goto    waiting
                      00799 
0306                  00800 check_start
0306   0837           00801     movf    keytemp, W
0307   3A0C           00802     xorlw   0xC
0308   1D03           00803     btfss   STATUS,Z
0309   2???           00804     goto    default_key
030A   2???           00805     goto    start
                      00806 
030B                  00807 default_key         ; will never get here
030B   0008           00808     return
                      00809 
                      00810 
                      00811 ;Display state subroutine
                      00812 ;stateN is in W
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030C                  00813 display_state
030C   00B8           00814     movwf  statetemp    ; save stateN
                      00815 
030D                  00816 check_none
030D   3A00           00817     xorlw   0x0
030E   1D03           00818     btfss   STATUS,Z
030F   2???           00819     goto    check_pass
                      00820     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0310   01B9               M                 clrf    Table_Counter
0311   0103               M                 clrw
0312                      M loop_disp
0312   0839               M         movf    Table_Counter,W
0313   2???               M                 call    Not_present
0314   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0315   1903               M                 btfsc   STATUS,Z
0316   2???               M                 goto    end_disp
0317   2???               M                 call    WR_DATA
0318   0AB9               M                 incf    Table_Counter,F
0319   2???               M                 goto    loop_disp
031A                      M end_disp
031A   0008           00821     return
                      00822 
031B                  00823 check_pass
031B   0838           00824     movf    statetemp, W
031C   3A01           00825     xorlw   0x1
031D   1D03           00826     btfss   STATUS,Z
031E   2???           00827     goto    check_LED
                      00828     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
031F   01B9               M                 clrf    Table_Counter
0320   0103               M                 clrw
0321                      M loop_disp
0321   0839               M         movf    Table_Counter,W
0322   2???               M                 call    Pass
0323   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0324   1903               M                 btfsc   STATUS,Z
0325   2???               M                 goto    end_disp
0326   2???               M                 call    WR_DATA
0327   0AB9               M                 incf    Table_Counter,F
0328   2???               M                 goto    loop_disp
0329                      M end_disp
0329   0008           00829     return
                      00830 
032A                  00831 check_LED
032A   0838           00832     movf    statetemp, W
032B   3A02           00833     xorlw   0x2
032C   1D03           00834     btfss   STATUS,Z
032D   2???           00835     goto    check_flick
                      00836     Display LED_fail
  0000                    M                 local   loop_disp
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   end_disp
032E   01B9               M                 clrf    Table_Counter
032F   0103               M                 clrw
0330                      M loop_disp
0330   0839               M         movf    Table_Counter,W
0331   2???               M                 call    LED_fail
0332   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0333   1903               M                 btfsc   STATUS,Z
0334   2???               M                 goto    end_disp
0335   2???               M                 call    WR_DATA
0336   0AB9               M                 incf    Table_Counter,F
0337   2???               M                 goto    loop_disp
0338                      M end_disp
0338   0008           00837     return
                      00838 
0339                  00839 check_flick
0339   0838           00840     movf    statetemp, W
033A   3A03           00841     xorlw   0x3
033B   1D03           00842     btfss   STATUS,Z
033C   2???           00843     goto    default_state
                      00844     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
033D   01B9               M                 clrf    Table_Counter
033E   0103               M                 clrw
033F                      M loop_disp
033F   0839               M         movf    Table_Counter,W
0340   2???               M                 call    Flick_fail
0341   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0342   1903               M                 btfsc   STATUS,Z
0343   2???               M                 goto    end_disp
0344   2???               M                 call    WR_DATA
0345   0AB9               M                 incf    Table_Counter,F
0346   2???               M                 goto    loop_disp
0347                      M end_disp
0347   0008           00845     return
                      00846 
0348                  00847 default_state   ; should never get here
0348   0008           00848     return
                      00849 
                      00850 ; Summary Subroutine
                      00851 ; Displays total number of candles and number of defective candles
                      00852 ; Reads data from num_tot, num_LF, num_FF
0349                  00853 summary
0349   2???           00854     call            Clear_Display
                      00855     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
034A   01B9               M                 clrf    Table_Counter
034B   0103               M                 clrw
034C                      M loop_disp
034C   0839               M         movf    Table_Counter,W
034D   2???               M                 call    Total_Msg
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

034E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
034F   1903               M                 btfsc   STATUS,Z
0350   2???               M                 goto    end_disp
0351   2???               M                 call    WR_DATA
0352   0AB9               M                 incf    Table_Counter,F
0353   2???               M                 goto    loop_disp
0354                      M end_disp
                      00856     writeBCD        num_tot
0354   0834               M             movf    num_tot, W
0355   3E30               M             addlw   B'00110000'
0356   2???               M             call WR_DATA
0357   2???           00857     call            Switch_Lines
                      00858     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0358   01B9               M                 clrf    Table_Counter
0359   0103               M                 clrw
035A                      M loop_disp
035A   0839               M         movf    Table_Counter,W
035B   2???               M                 call    LF
035C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
035D   1903               M                 btfsc   STATUS,Z
035E   2???               M                 goto    end_disp
035F   2???               M                 call    WR_DATA
0360   0AB9               M                 incf    Table_Counter,F
0361   2???               M                 goto    loop_disp
0362                      M end_disp
                      00859     writeBCD        num_LF
0362   0835               M             movf    num_LF, W
0363   3E30               M             addlw   B'00110000'
0364   2???               M             call WR_DATA
                      00860     spacebar
0365   3014               M             movlw   B'00010100'
0366   2???               M             call    WR_INS
                      00861     spacebar
0367   3014               M             movlw   B'00010100'
0368   2???               M             call    WR_INS
                      00862     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0369   01B9               M                 clrf    Table_Counter
036A   0103               M                 clrw
036B                      M loop_disp
036B   0839               M         movf    Table_Counter,W
036C   2???               M                 call    FF
036D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
036E   1903               M                 btfsc   STATUS,Z
036F   2???               M                 goto    end_disp
0370   2???               M                 call    WR_DATA
0371   0AB9               M                 incf    Table_Counter,F
0372   2???               M                 goto    loop_disp
0373                      M end_disp
                      00863     writeBCD        num_FF
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0373   0836               M             movf    num_FF, W
0374   3E30               M             addlw   B'00110000'
0375   2???               M             call WR_DATA
0376   0008           00864     return
                      00865 
                      00866 ; Defective candles Subroutine
                      00867 ; Displays index of each defective candle (LF or FF)
                      00868 ; Reads data from state1 - state9
0377                  00869 defective
0377   2???           00870     call            Clear_Display
                      00871 
                      00872     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0378   01B9               M                 clrf    Table_Counter
0379   0103               M                 clrw
037A                      M loop_disp
037A   0839               M         movf    Table_Counter,W
037B   2???               M                 call    LF
037C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
037D   1903               M                 btfsc   STATUS,Z
037E   2???               M                 goto    end_disp
037F   2???               M                 call    WR_DATA
0380   0AB9               M                 incf    Table_Counter,F
0381   2???               M                 goto    loop_disp
0382                      M end_disp
0382   08B5           00873     movf            num_LF, F
0383   1D03           00874     btfss           STATUS,Z         ;if none LF, just say "none"
0384   2???           00875     goto            check_LF
                      00876     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0385   01B9               M                 clrf    Table_Counter
0386   0103               M                 clrw
0387                      M loop_disp
0387   0839               M         movf    Table_Counter,W
0388   2???               M                 call    None
0389   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
038A   1903               M                 btfsc   STATUS,Z
038B   2???               M                 goto    end_disp
038C   2???               M                 call    WR_DATA
038D   0AB9               M                 incf    Table_Counter,F
038E   2???               M                 goto    loop_disp
038F                      M end_disp
038F   2???           00877     goto            now_FF
                      00878 
0390                  00879 check_LF                            ; list all LF candles
0390   3002           00880     movlw           B'00000010'
0391   2???           00881     call            check_for_fail
                      00882 
0392                  00883 now_FF                              ; now look at FF
0392   2???           00884     call            Switch_Lines
                      00885     Display         FF
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0393   01B9               M                 clrf    Table_Counter
0394   0103               M                 clrw
0395                      M loop_disp
0395   0839               M         movf    Table_Counter,W
0396   2???               M                 call    FF
0397   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0398   1903               M                 btfsc   STATUS,Z
0399   2???               M                 goto    end_disp
039A   2???               M                 call    WR_DATA
039B   0AB9               M                 incf    Table_Counter,F
039C   2???               M                 goto    loop_disp
039D                      M end_disp
039D   08B6           00886     movf            num_FF, F
039E   1D03           00887     btfss           STATUS,Z         ;if none FF, just say "none"
039F   2???           00888     goto            check_FF
                      00889     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03A0   01B9               M                 clrf    Table_Counter
03A1   0103               M                 clrw
03A2                      M loop_disp
03A2   0839               M         movf    Table_Counter,W
03A3   2???               M                 call    None
03A4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03A5   1903               M                 btfsc   STATUS,Z
03A6   2???               M                 goto    end_disp
03A7   2???               M                 call    WR_DATA
03A8   0AB9               M                 incf    Table_Counter,F
03A9   2???               M                 goto    loop_disp
03AA                      M end_disp
03AA   0008           00890     return
                      00891 
03AB                  00892 check_FF                            ; list all FF candles
03AB   3003           00893     movlw           B'00000011'
03AC   2???           00894     call            check_for_fail
03AD   0008           00895     return
                      00896 
03AE                  00897 check_for_fail  ;lists all candles that have status currently in W "stateX"
03AE   00B8           00898     movwf   statetemp
                      00899         movlf   D'0', candle_index
03AF   3000               M         movlw   D'0'
03B0   00C7               M         movwf   candle_index
03B1   1383           00900         bcf     STATUS, IRP
                      00901         movlf   0x1F, FSR           ;index of right before state1
03B2   301F               M         movlw   0x1F
03B3   0084               M         movwf   FSR
03B4                  00902 check_next
03B4   3009           00903         movlw   D'9'                ;exit loop if at 9
03B5   0247           00904         subwf   candle_index, W
03B6   1803           00905         btfsc   STATUS,W
03B7   2???           00906         goto    end_check_fail
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03B8   0A84           00907         incf    FSR,F               ; increment
03B9   0AC7           00908         incf    candle_index,F
03BA   0838           00909         movf    statetemp, W            ;see if stateN = stateX
03BB   0200           00910         subwf   INDF, W
03BC   1D03           00911         btfss   STATUS, Z
03BD   2???           00912         goto    check_next              ;if not, go to next
                      00913         writeBCD        candle_index    ;if so, write down the number
03BE   0847               M             movf    candle_index, W
03BF   3E30               M             addlw   B'00110000'
03C0   2???               M             call WR_DATA
                      00914         spacebar
03C1   3014               M             movlw   B'00010100'
03C2   2???               M             call    WR_INS
03C3   2???           00915         goto check_next
03C4                  00916 end_check_fail
03C4   0008           00917         return
                      00918 
                      00919 ; Time subroutine
                      00920 ; Right now this takes the time in seconds as a binary number in op_time
                      00921 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      00922 ; incremented every second. However I may just take the stop time - start time
                      00923 ; from the RTC data so this might change a lot.
03C5                  00924 time
03C5   2???           00925     call    Clear_Display
                      00926     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03C6   01B9               M                 clrf    Table_Counter
03C7   0103               M                 clrw
03C8                      M loop_disp
03C8   0839               M         movf    Table_Counter,W
03C9   2???               M                 call    Time_Msg
03CA   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03CB   1903               M                 btfsc   STATUS,Z
03CC   2???               M                 goto    end_disp
03CD   2???               M                 call    WR_DATA
03CE   0AB9               M                 incf    Table_Counter,F
03CF   2???               M                 goto    loop_disp
03D0                      M end_disp
03D0   2???           00927     call    Switch_Lines
03D1   0833           00928     movf    op_time, W
03D2   2???           00929     call    big_number
03D3   08C2           00930     movf    huns, F
03D4   1903           00931     btfsc   STATUS,Z        ;if huns is zero don't display it
03D5   2???           00932     goto    no_huns
                      00933     writeBCD    huns
03D6   0842               M             movf    huns, W
03D7   3E30               M             addlw   B'00110000'
03D8   2???               M             call WR_DATA
03D9                  00934 no_huns
03D9   08C3           00935     movf    tens, F
03DA   1903           00936     btfsc   STATUS,Z        ;if tens is zero don't display it
03DB   2???           00937     goto    no_tens
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00938     writeBCD    tens
03DC   0843               M             movf    tens, W
03DD   3E30               M             addlw   B'00110000'
03DE   2???               M             call WR_DATA
03DF                  00939 no_tens
                      00940     writeBCD    ones
03DF   0844               M             movf    ones, W
03E0   3E30               M             addlw   B'00110000'
03E1   2???               M             call WR_DATA
                      00941     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03E2   01B9               M                 clrf    Table_Counter
03E3   0103               M                 clrw
03E4                      M loop_disp
03E4   0839               M         movf    Table_Counter,W
03E5   2???               M                 call    Seconds
03E6   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E7   1903               M                 btfsc   STATUS,Z
03E8   2???               M                 goto    end_disp
03E9   2???               M                 call    WR_DATA
03EA   0AB9               M                 incf    Table_Counter,F
03EB   2???               M                 goto    loop_disp
03EC                      M end_disp
03EC   0008           00942     return
                      00943 
                      00944 ; Export subroutine
                      00945 ; Exports data from current run to hyperterminal
                      00946 ; reads start time and num_tot/num_ff/num_lf data
03ED                  00947 export
                      00948     printchar   0x7       ;makes a noise on the PC
03ED   3007               M             movlw   0x7
03EE   2???               M             call    writetoPC
                      00949     printchar   0xD       ;go back to left edge
03EF   300D               M             movlw   0xD
03F0   2???               M             call    writetoPC
                      00950     printchar   "T"
03F1   3054               M             movlw   "T"
03F2   2???               M             call    writetoPC
                      00951     printchar   "e"
03F3   3065               M             movlw   "e"
03F4   2???               M             call    writetoPC
                      00952     printchar   "s"
03F5   3073               M             movlw   "s"
03F6   2???               M             call    writetoPC
                      00953     printchar   "t"
03F7   3074               M             movlw   "t"
03F8   2???               M             call    writetoPC
                      00954     printchar   " "
03F9   3020               M             movlw   " "
03FA   2???               M             call    writetoPC
                      00955     printchar   "a"
03FB   3061               M             movlw   "a"
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FC   2???               M             call    writetoPC
                      00956     printchar   "t"
03FD   3074               M             movlw   "t"
03FE   2???               M             call    writetoPC
                      00957     printchar   ":"
03FF   303A               M             movlw   ":"
0400   2???               M             call    writetoPC
                      00958     printchar   " "
0401   3020               M             movlw   " "
0402   2???               M             call    writetoPC
                      00959     printchar   "2"
0403   3032               M             movlw   "2"
0404   2???               M             call    writetoPC
                      00960     printchar   "0"
0405   3030               M             movlw   "0"
0406   2???               M             call    writetoPC
                      00961     printASC   start_year10
0407   1283 1303          M             banksel start_year10
0409   0829               M             movf    start_year10,W
040A   2???               M             call    writetoPC
                      00962     printASC   start_year1
040B   1283 1303          M             banksel start_year1
040D   082A               M             movf    start_year1,W
040E   2???               M             call    writetoPC
                      00963     printchar   "/"
040F   302F               M             movlw   "/"
0410   2???               M             call    writetoPC
                      00964     printASC   start_month10
0411   1283 1303          M             banksel start_month10
0413   082B               M             movf    start_month10,W
0414   2???               M             call    writetoPC
                      00965     printASC   start_month1
0415   1283 1303          M             banksel start_month1
0417   082C               M             movf    start_month1,W
0418   2???               M             call    writetoPC
                      00966     printchar   "/"
0419   302F               M             movlw   "/"
041A   2???               M             call    writetoPC
                      00967     printASC   start_date10
041B   1283 1303          M             banksel start_date10
041D   082D               M             movf    start_date10,W
041E   2???               M             call    writetoPC
                      00968     printASC   start_date1
041F   1283 1303          M             banksel start_date1
0421   082E               M             movf    start_date1,W
0422   2???               M             call    writetoPC
                      00969     printchar   " "
0423   3020               M             movlw   " "
0424   2???               M             call    writetoPC
                      00970     printASC   start_hour10
0425   1283 1303          M             banksel start_hour10
0427   082F               M             movf    start_hour10,W
0428   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00971     printASC   start_hour1
0429   1283 1303          M             banksel start_hour1
042B   0830               M             movf    start_hour1,W
042C   2???               M             call    writetoPC
                      00972     printchar   ":"
042D   303A               M             movlw   ":"
042E   2???               M             call    writetoPC
                      00973     printASC   start_min10
042F   1283 1303          M             banksel start_min10
0431   0831               M             movf    start_min10,W
0432   2???               M             call    writetoPC
                      00974     printASC   start_min1
0433   1283 1303          M             banksel start_min1
0435   0832               M             movf    start_min1,W
0436   2???               M             call    writetoPC
                      00975     newline
                          M             printchar   0xA ;changes line
0437   300A               M             movlw   0xA
0438   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0439   300D               M             movlw   0xD
043A   2???               M             call    writetoPC
                      00976     printchar   "T"
043B   3054               M             movlw   "T"
043C   2???               M             call    writetoPC
                      00977     printchar   "i"
043D   3069               M             movlw   "i"
043E   2???               M             call    writetoPC
                      00978     printchar   "m"
043F   306D               M             movlw   "m"
0440   2???               M             call    writetoPC
                      00979     printchar   "e"
0441   3065               M             movlw   "e"
0442   2???               M             call    writetoPC
                      00980     printchar   ":"
0443   303A               M             movlw   ":"
0444   2???               M             call    writetoPC
                      00981     printchar   " "
0445   3020               M             movlw   " "
0446   2???               M             call    writetoPC
                      00982     printchar   " "
0447   3020               M             movlw   " "
0448   2???               M             call    writetoPC
                      00983     printchar   " "
0449   3020               M             movlw   " "
044A   2???               M             call    writetoPC
                      00984     printchar   " "
044B   3020               M             movlw   " "
044C   2???               M             call    writetoPC
044D   1283 1303      00985     banksel huns
044F   08C2           00986     movf    huns, F
0450   1903           00987     btfsc   STATUS,Z        ;if huns is zero don't display it
0451   2???           00988     goto    nohuns
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00989     printBCD   huns
0452   1283 1303          M             banksel huns
0454   0842               M             movf    huns, W
0455   3E30               M             addlw   0x30
0456   2???               M             call    writetoPC
0457                  00990 nohuns
0457   1283 1303      00991     banksel tens
0459   08C3           00992     movf    tens, F
045A   1903           00993     btfsc   STATUS,Z        ;if tens is zero don't display it
045B   2???           00994     goto    notens
                      00995     printBCD   tens
045C   1283 1303          M             banksel tens
045E   0843               M             movf    tens, W
045F   3E30               M             addlw   0x30
0460   2???               M             call    writetoPC
0461                  00996 notens
                      00997     printBCD   ones
0461   1283 1303          M             banksel ones
0463   0844               M             movf    ones, W
0464   3E30               M             addlw   0x30
0465   2???               M             call    writetoPC
                      00998     printchar   " "
0466   3020               M             movlw   " "
0467   2???               M             call    writetoPC
                      00999     printchar   "s"
0468   3073               M             movlw   "s"
0469   2???               M             call    writetoPC
                      01000     printchar   "e"
046A   3065               M             movlw   "e"
046B   2???               M             call    writetoPC
                      01001     printchar   "c"
046C   3063               M             movlw   "c"
046D   2???               M             call    writetoPC
                      01002     newline
                          M             printchar   0xA ;changes line
046E   300A               M             movlw   0xA
046F   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0470   300D               M             movlw   0xD
0471   2???               M             call    writetoPC
                      01003     printchar   "C"
0472   3043               M             movlw   "C"
0473   2???               M             call    writetoPC
                      01004     printchar   "a"
0474   3061               M             movlw   "a"
0475   2???               M             call    writetoPC
                      01005     printchar   "n"
0476   306E               M             movlw   "n"
0477   2???               M             call    writetoPC
                      01006     printchar   "d"
0478   3064               M             movlw   "d"
0479   2???               M             call    writetoPC
                      01007     printchar   "l"
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

047A   306C               M             movlw   "l"
047B   2???               M             call    writetoPC
                      01008     printchar   "e"
047C   3065               M             movlw   "e"
047D   2???               M             call    writetoPC
                      01009     printchar   "s"
047E   3073               M             movlw   "s"
047F   2???               M             call    writetoPC
                      01010     printchar   ":"
0480   303A               M             movlw   ":"
0481   2???               M             call    writetoPC
                      01011     printchar   " "
0482   3020               M             movlw   " "
0483   2???               M             call    writetoPC
                      01012     printchar   " "
0484   3020               M             movlw   " "
0485   2???               M             call    writetoPC
                      01013     printchar   " "
0486   3020               M             movlw   " "
0487   2???               M             call    writetoPC
                      01014     printchar   " "
0488   3020               M             movlw   " "
0489   2???               M             call    writetoPC
                      01015     printchar   " "
048A   3020               M             movlw   " "
048B   2???               M             call    writetoPC
                      01016     printchar   " "
048C   3020               M             movlw   " "
048D   2???               M             call    writetoPC
                      01017     printBCD    num_tot
048E   1283 1303          M             banksel num_tot
0490   0834               M             movf    num_tot, W
0491   3E30               M             addlw   0x30
0492   2???               M             call    writetoPC
                      01018     newline
                          M             printchar   0xA ;changes line
0493   300A               M             movlw   0xA
0494   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0495   300D               M             movlw   0xD
0496   2???               M             call    writetoPC
                      01019     printchar   "L"
0497   304C               M             movlw   "L"
0498   2???               M             call    writetoPC
                      01020     printchar   "E"
0499   3045               M             movlw   "E"
049A   2???               M             call    writetoPC
                      01021     printchar   "D"
049B   3044               M             movlw   "D"
049C   2???               M             call    writetoPC
                      01022     printchar   " "
049D   3020               M             movlw   " "
049E   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01023     printchar   "f"
049F   3066               M             movlw   "f"
04A0   2???               M             call    writetoPC
                      01024     printchar   "a"
04A1   3061               M             movlw   "a"
04A2   2???               M             call    writetoPC
                      01025     printchar   "i"
04A3   3069               M             movlw   "i"
04A4   2???               M             call    writetoPC
                      01026     printchar   "l"
04A5   306C               M             movlw   "l"
04A6   2???               M             call    writetoPC
                      01027     printchar   ":"
04A7   303A               M             movlw   ":"
04A8   2???               M             call    writetoPC
                      01028     printchar   " "
04A9   3020               M             movlw   " "
04AA   2???               M             call    writetoPC
                      01029     printchar   " "
04AB   3020               M             movlw   " "
04AC   2???               M             call    writetoPC
                      01030     printchar   " "
04AD   3020               M             movlw   " "
04AE   2???               M             call    writetoPC
                      01031     printchar   " "
04AF   3020               M             movlw   " "
04B0   2???               M             call    writetoPC
                      01032     printchar   " "
04B1   3020               M             movlw   " "
04B2   2???               M             call    writetoPC
                      01033     printBCD    num_LF
04B3   1283 1303          M             banksel num_LF
04B5   0835               M             movf    num_LF, W
04B6   3E30               M             addlw   0x30
04B7   2???               M             call    writetoPC
                      01034     newline
                          M             printchar   0xA ;changes line
04B8   300A               M             movlw   0xA
04B9   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04BA   300D               M             movlw   0xD
04BB   2???               M             call    writetoPC
                      01035     printchar   "F"
04BC   3046               M             movlw   "F"
04BD   2???               M             call    writetoPC
                      01036     printchar   "l"
04BE   306C               M             movlw   "l"
04BF   2???               M             call    writetoPC
                      01037     printchar   "i"
04C0   3069               M             movlw   "i"
04C1   2???               M             call    writetoPC
                      01038     printchar   "c"
04C2   3063               M             movlw   "c"
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C3   2???               M             call    writetoPC
                      01039     printchar   "k"
04C4   306B               M             movlw   "k"
04C5   2???               M             call    writetoPC
                      01040     printchar   "e"
04C6   3065               M             movlw   "e"
04C7   2???               M             call    writetoPC
                      01041     printchar   "r"
04C8   3072               M             movlw   "r"
04C9   2???               M             call    writetoPC
                      01042     printchar   " "
04CA   3020               M             movlw   " "
04CB   2???               M             call    writetoPC
                      01043     printchar   "f"
04CC   3066               M             movlw   "f"
04CD   2???               M             call    writetoPC
                      01044     printchar   "a"
04CE   3061               M             movlw   "a"
04CF   2???               M             call    writetoPC
                      01045     printchar   "i"
04D0   3069               M             movlw   "i"
04D1   2???               M             call    writetoPC
                      01046     printchar   "l"
04D2   306C               M             movlw   "l"
04D3   2???               M             call    writetoPC
                      01047     printchar   ":"
04D4   303A               M             movlw   ":"
04D5   2???               M             call    writetoPC
                      01048     printchar   " "
04D6   3020               M             movlw   " "
04D7   2???               M             call    writetoPC
                      01049     printBCD    num_FF
04D8   1283 1303          M             banksel num_FF
04DA   0836               M             movf    num_FF, W
04DB   3E30               M             addlw   0x30
04DC   2???               M             call    writetoPC
                      01050     newline
                          M             printchar   0xA ;changes line
04DD   300A               M             movlw   0xA
04DE   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04DF   300D               M             movlw   0xD
04E0   2???               M             call    writetoPC
                      01051     newline
                          M             printchar   0xA ;changes line
04E1   300A               M             movlw   0xA
04E2   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04E3   300D               M             movlw   0xD
04E4   2???               M             call    writetoPC
04E5   1283           01052     bcf STATUS,RP0
04E6   1303           01053     bcf STATUS,RP1     ; back to bank 0
04E7   0008           01054     return
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01055 
                      01056 
                      01057 ;***************************************
                      01058 ; GENERAL PURPOSE SUBROUTINES
                      01059 ;***************************************
                      01060 
                      01061 ; DISPLAY BIG NUMBER SUBROUTINE
                      01062 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01063 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01064 ; Uses "shift and add 3" algorithm
04E8                  01065 big_number
                      01066     movff   op_time, op_time_save         ;save the original op_time
04E8   0833               M         movf    op_time, W
04E9   00C1               M         movwf   op_time_save
                      01067     movlf   8, bignumcount                ;will shift 8 times
04EA   3008               M         movlw   8
04EB   00C5               M         movwf   bignumcount
04EC   01C2           01068     clrf    huns
04ED   01C3           01069     clrf    tens
04EE   01C4           01070     clrf    ones
                      01071 
04EF                  01072 BCDadd3                             ; if any digit > 5, add3
04EF   3005           01073     movlw   0x5
04F0   0242           01074     subwf   huns, W
04F1   1803           01075     btfsc   STATUS, C
04F2   2???           01076     call    add3huns
                      01077 
04F3   3005           01078     movlw   0x5
04F4   0243           01079     subwf   tens, W
04F5   1803           01080     btfsc   STATUS, C
04F6   2???           01081     call    add3tens
                      01082 
04F7   3005           01083     movlw   0x5
04F8   0244           01084     subwf   ones, W
04F9   1803           01085     btfsc   STATUS, C
04FA   2???           01086     call    add3ones
                      01087 
04FB   03C5           01088     decf    bignumcount, 1
04FC   1003           01089     bcf     STATUS, C
04FD   0DB3           01090     rlf     op_time, 1              ; shift
04FE   0DC4           01091     rlf     ones, 1
04FF   1A44           01092     btfsc   ones,4 ;
0500   2???           01093     call    carryones               ; carry if too large
0501   0DC3           01094     rlf     tens, 1
                      01095 
0502   1A43           01096     btfsc   tens,4 ;
0503   2???           01097     call    carrytens
0504   0DC2           01098     rlf     huns,1
0505   1003           01099     bcf     STATUS, C
                      01100 
0506   0845           01101     movf    bignumcount, W
0507   1D03           01102     btfss   STATUS, Z
0508   2???           01103     goto    BCDadd3                 ; repeat until you've shifted it 8 times
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01104 
                      01105     movff    op_time_save, op_time     ;restore the original op_time
0509   0841               M         movf    op_time_save, W
050A   00B3               M         movwf   op_time
050B   0008           01106     return
                      01107 
050C                  01108 add3huns
050C   3003           01109     movlw 0x3
050D   07C2           01110     addwf huns,F
050E   0008           01111     return
050F                  01112 add3tens
050F   3003           01113     movlw 0x3
0510   07C3           01114     addwf tens,F
0511   0008           01115     return
0512                  01116 add3ones
0512   3003           01117     movlw 0x3
0513   07C4           01118     addwf ones,F
0514   0008           01119     return
0515                  01120 carryones
0515   1244           01121     bcf ones, 4
0516   1403           01122     bsf STATUS, C
0517   0008           01123     return
0518                  01124 carrytens
0518   1243           01125     bcf tens, 4
0519   1403           01126     bsf STATUS, C
051A   0008           01127     return
                      01128 
                      01129 
                      01130 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01131 ; Delays exactly 0.5sec
051B                  01132 HalfS
                      01133       movlf 0x8A, hdelH
051B   308A               M         movlw   0x8A
051C   00BE               M         movwf   hdelH
                      01134       movlf 0xBA, hdelM
051D   30BA               M         movlw   0xBA
051E   00BF               M         movwf   hdelM
                      01135       movlf 0x03, hdelL
051F   3003               M         movlw   0x03
0520   00C0               M         movwf   hdelL
0521                  01136 HalfS_0
0521   0BBE           01137       decfsz    hdelH, F
0522   2???           01138           goto  $+2
0523   0BBF           01139           decfsz        hdelM, F
0524   2???           01140           goto  $+2
0525   0BC0           01141           decfsz        hdelL, F
0526   2???           01142           goto  HalfS_0
                      01143 
0527   2???           01144           goto  $+1
0528   0000           01145           nop
0529   0008           01146           return
                      01147 
                      01148 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01149 ; Useful for LCD because PIC is way faster than it can handle
                      01150 ; Delays exactly 5ms
052A                  01151 delay5ms
                      01152         movlf   0xC3, del1
052A   30C3               M         movlw   0xC3
052B   00BC               M         movwf   del1
                      01153         movlf   0x0A, del2
052C   300A               M         movlw   0x0A
052D   00BD               M         movwf   del2
052E                  01154 Delay_0
052E   0BBC           01155         decfsz  del1, f
052F   2???           01156         goto    $+2
0530   0BBD           01157         decfsz  del2, f
0531   2???           01158         goto    Delay_0
0532   0008           01159     return
                      01160 
                      01161 ;***************************************
                      01162 ; LCD SUBROUTINES (from sample code)
                      01163 ;***************************************
                      01164 
                      01165 ; Initialize the LCD
0533                  01166 InitLCD
0533   1283           01167         bcf STATUS,RP0
0534   1588           01168         bsf E     ;E default high
                      01169 
                      01170         ;Wait for LCD POR to finish (~15ms)
0535   2???           01171         call delay5ms
0536   2???           01172         call delay5ms
0537   2???           01173         call delay5ms
                      01174 
                      01175         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01176         ; -> Send b'0011' 3 times
0538   3033           01177         movlw   b'00110011'
0539   2???           01178         call    WR_INS
053A   2???           01179         call delay5ms
053B   2???           01180         call delay5ms
053C   3032           01181         movlw   b'00110010'
053D   2???           01182         call    WR_INS
053E   2???           01183         call delay5ms
053F   2???           01184         call delay5ms
                      01185 
                      01186         ; 4 bits, 2 lines, 5x7 dots
0540   3028           01187         movlw   b'00101000'
0541   2???           01188         call    WR_INS
0542   2???           01189         call delay5ms
0543   2???           01190         call delay5ms
                      01191 
                      01192         ; display on/off
0544   300C           01193         movlw   b'00001100'
0545   2???           01194         call    WR_INS
0546   2???           01195         call delay5ms
0547   2???           01196         call delay5ms
                      01197 
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01198         ; Entry mode
0548   3006           01199         movlw   b'00000110'
0549   2???           01200         call    WR_INS
054A   2???           01201         call delay5ms
054B   2???           01202         call delay5ms
                      01203 
                      01204         ; Clear ram
054C   3001           01205         movlw   b'00000001'
054D   2???           01206         call    WR_INS
054E   2???           01207         call delay5ms
054F   2???           01208         call delay5ms
0550   0008           01209         return
                      01210 
                      01211 ; Clear the display
0551                  01212 Clear_Display
0551   3001           01213                 movlw   B'00000001'
0552   2???           01214                 call    WR_INS
0553   0008           01215                 return
                      01216 
                      01217 ;Switch lines
0554                  01218 Switch_Lines
0554   30C0           01219                 movlw   B'11000000'
0555   2???           01220                 call    WR_INS
0556   0008           01221                 return
                      01222 
                      01223 ; Write an instruction to the LCD (see page 7-104)
                      01224 ; The instruction must be in W
0557                  01225 WR_INS
0557   1108           01226         bcf             RS                              ;clear RS
0558   00BA           01227         movwf   com                             ;W --> com
0559   39F0           01228         andlw   0xF0                    ;mask 4 bits MSB w = X0
055A   0088           01229         movwf   PORTD                   ;Send 4 bits MSB
055B   1588           01230         bsf             E                               ;
055C   2???           01231         call    delay5ms        ;__    __
055D   1188           01232         bcf             E                               ;  |__|
055E   0E3A           01233         swapf   com,w
055F   39F0           01234         andlw   0xF0                    ;1111 0010
0560   0088           01235         movwf   PORTD                   ;send 4 bits LSB
0561   1588           01236         bsf             E                               ;
0562   2???           01237         call    delay5ms        ;__    __
0563   1188           01238         bcf             E                               ;  |__|
0564   2???           01239         call    delay5ms
0565   0008           01240         return
                      01241 
                      01242 ; Write data at current cursor location
                      01243 ; Character code (see page 7-104) must be in W
0566                  01244 WR_DATA
0566   1508           01245         bsf             RS
0567   00BB           01246         movwf   dat
0568   083B           01247         movf    dat,w
0569   39F0           01248         andlw   0xF0
056A   3E04           01249         addlw   4
056B   0088           01250         movwf   PORTD
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

056C   1588           01251         bsf             E                               ;
056D   2???           01252         call    delay5ms        ;__    __
056E   1188           01253         bcf             E                               ;  |__|
056F   0E3B           01254         swapf   dat,w
0570   39F0           01255         andlw   0xF0
0571   3E04           01256         addlw   4
0572   0088           01257         movwf   PORTD
0573   1588           01258         bsf             E                               ;
0574   2???           01259         call    delay5ms        ;__    __
0575   1188           01260         bcf             E                               ;  |__|
0576   0008           01261         return
                      01262 
                      01263 
                      01264 ;***************************************
                      01265 ; PC INTERFACE SUBROUTINES (from sample code)
                      01266 ;***************************************
0577                  01267 InitUSART
0577   1683           01268         bsf       STATUS,RP0     ; select bank 1
0578   300F           01269         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0579   0099           01270         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
057A   0198           01271         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01272 
057B   1283           01273         bcf       STATUS,RP0     ; select bank 0
057C   1798           01274         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
057D   1618           01275         bsf       RCSTA,CREN     ; continuous receive
                      01276 
057E   1683           01277         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
057F   1698           01278         bsf       TXSTA,TXEN     ; Transmit enable
0580   0008           01279         return
                      01280 
                      01281 
0581                  01282 writetoPC
                      01283 ; Writes the data in W to the PC
                      01284 ; end up in bank1!
0581   1283           01285         bcf       STATUS,RP0     ; Go to bank 0
0582   0099           01286         movwf     TXREG          ; Send contents of W to RS232
0583   1683           01287         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0584   1C98           01288         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0585   2???           01289         goto      $-1
0586   0008           01290         return
                      01291 
                      01292 
                      01293 ;***************************************
                      01294 ; ISR
                      01295 ; Currently only care about TMR0
                      01296 ; TMR0 overflows at 256*256; each time, decrement count38
                      01297 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01298 ; When this hapens, op_time increments
                      01299 ;***************************************
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0587                  01300 isr
0587   00F9           01301     movwf   w_isr           ;save W and status
0588   0E03           01302     swapf   STATUS, W
0589   0183           01303     clrf    STATUS
058A   00FA           01304     movwf   status_isr
                      01305 ;    movf    PCLATH, W      ;if using pages
                      01306 ;    movwf   pclath_isr
                      01307 ;    clrf    PCLATH
                      01308 
058B   0BC6           01309     decfsz  count38, F     ;if count38 gets to 38 it's been one second
058C   2???           01310     goto    end_isr
                      01311     movlf   D'38', count38  ;so reset count38
058D   3026               M         movlw   D'38'
058E   00C6               M         movwf   count38
058F   0AB3           01312     incf    op_time, F         ; and increment op_time
                      01313 
0590                  01314 end_isr
                      01315 
0590   1D05           01316     btfss   PHOTODATA       ;if PHOTODATA is 1, light is off
0591   0AC8           01317     incf    photocount, F       ;if it is 0, light is on so photocount++
                      01318 
                      01319 ;    movf    pclath_isr, W  ;if using pages
                      01320 ;    movwf    PCLATH
0592   0E7A           01321     swapf   status_isr, W   ;restore W and status
0593   0083           01322     movwf   STATUS
0594   0EF9           01323     swapf   w_isr, F
0595   0E79           01324     swapf   w_isr, W
0596   110B           01325     bcf     INTCON, T0IF    ;clear the interrupt flag
0597   0009           01326     retfie
                      01327 
                      01328 
3F72                  01329     END
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000004EF
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000551
D                                 00000005
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           0000052E
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             0000051B
HalfS_0                           00000521
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTA, 1
IRLIGHT                           PORTA, 0
IRP                               00000007
InitLCD                           00000533
InitUSART                         00000577
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AD
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000BE
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTA, 2
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      00000554
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

WR_DATA                           00000566
WR_INS                            00000557
Z                                 00000002
_.org_1_0155                      00000155
_.org_1_018B                      0000018B
_.org_1_01B2                      000001B2
_.org_1_01DE                      000001DE
_.org_1_01E3                      000001E3
_.org_1_01FC                      000001FC
_.org_1_0239                      00000239
_.org_1_0522                      00000522
_.org_1_0524                      00000524
_.org_1_0527                      00000527
_.org_1_052F                      0000052F
_.org_1_0585                      00000585
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

__16F877                          00000001
add3huns                          0000050C
add3ones                          00000512
add3tens                          0000050F
badkey                            00000238
big_number                        000004E8
bignumcount                       00000045
candle_index                      00000047
carryones                         00000515
carrytens                         00000518
check_1                           00000284
check_2                           0000028D
check_3                           00000297
check_4                           000002A1
check_5                           000002AB
check_6                           000002B5
check_7                           000002BF
check_8                           000002C9
check_9                           000002D3
check_FF                          000003AB
check_LED                         0000032A
check_LF                          00000390
check_defective                   000002E3
check_done                        00000227
check_export                      000002EF
check_flick                       00000339
check_for_fail                    000003AE
check_log1                        00000200
check_log2                        00000209
check_log3                        00000213
check_log4                        0000021D
check_next                        000003B4
check_none                        0000030D
check_pass                        0000031B
check_standby                     000002F5
check_start                       00000306
check_summary                     000002DD
check_time                        000002E9
com                               0000003A
count38                           00000046
dat                               0000003B
default_key                       0000030B
default_state                     00000348
defective                         00000377
del1                              0000003C
del2                              0000003D
delay5ms                          0000052A
display_log                       0000023B
display_state                     0000030C
end_check_fail                    000003C4
end_isr                           00000590
end_operation                     00000181
export                            000003ED
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

hdelH                             0000003E
hdelL                             00000040
hdelM                             0000003F
huns                              00000042
i2c_common_setup                  00000000
information                       00000283
init                              000000CD
isr                               00000587
keytemp                           00000037
logs                              000001E5
movff                             
movlf                             
newline                           
no_huns                           000003D9
no_tens                           000003DF
nohuns                            00000457
notens                            00000461
now_FF                            00000392
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000044
op_time                           00000033
op_time_save                      00000041
photocount                        00000048
photoval                          00000049
poll                              000001DD
polling                           000001FB
printASC                          
printBCD                          
printchar                         
read_EEPROM                       0000023E
read_rtc                          00000000
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         00000182
shiftlogs_0                       00000186
spacebar                          
start                             00000157
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
MPASM 5.54                          MAIN.ASM   2-18-2014  20:17:00         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           00000349
tens                              00000043
threshold1                        D'15'
threshold2                        D'65'
time                              000003C5
w_isr                             00000079
waiting                           000000EF
writeASC                          
writeBCD                          
write_log1                        000001A8
write_log1_0                      000001AF
write_rtc                         00000000
writechar                         
writetoPC                         00000581

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    42 reported,     0 suppressed

