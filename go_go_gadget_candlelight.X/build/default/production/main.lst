MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'15'
                      00014     #define threshold2  D'65'
                      00015     #define IRLIGHT    PORTA, 0
                      00016     #define IRDATA     PORTA, 1
                      00017     #define PHOTODATA  PORTA, 2
                      00018    ; note: check analog v digital!
                      00019 
                      00020 
                      00021 ;***************************************
                      00022 ; VARIABLES
                      00023 ;***************************************
                      00024 
                      00025 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00026 
                      00027     cblock      0x20
                      00028     ; Important information (will be displayed)
  00000020            00029         state1     ;where   0 = none      1 = pass
  00000021            00030         state2     ;        2 = led fail  3 = flicker fail
  00000022            00031         state3
  00000023            00032         state4
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00033         state5
  00000025            00034         state6
  00000026            00035         state7
  00000027            00036         state8
  00000028            00037         state9
  00000029            00038         start_year10    ;starting time (for log)
  0000002A            00039         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00040         start_month10
  0000002C            00041         start_month1
  0000002D            00042         start_date10
  0000002E            00043         start_date1
  0000002F            00044         start_hour10
  00000030            00045         start_hour1
  00000031            00046         start_min10
  00000032            00047         start_min1
  00000033            00048         op_time     ;BCD in seconds
  00000034            00049         num_tot     ;BCD
  00000035            00050         num_LF      ;BCD
  00000036            00051         num_FF      ;BCD
                      00052 ; For general program / interface: temps, counters, etc.
  00000037            00053         keytemp         ; for data display mode
  00000038            00054         statetemp
  00000039            00055                 Table_Counter   ; for LCD stuff
  0000003A            00056                 com
  0000003B            00057                 dat
  0000003C            00058         del1            ; for delay 5ms delay routine
  0000003D            00059         del2
  0000003E            00060         hdelH          ;for delay 0.5s routine
  0000003F            00061         hdelM
  00000040            00062         hdelL
  00000041            00063         op_time_save    ;for operation time
  00000042            00064         huns
  00000043            00065         tens
  00000044            00066         ones
  00000045            00067         bignumcount
  00000046            00068         count38         ;for isr
                      00069 ; For machine program: temps, counters, etc.
  00000047            00070         candle_index
  00000048            00071         photocount
  00000049            00072         photoval
                      00073     endc
                      00074 
                      00075     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00076         w_isr
  0000007A            00077         status_isr
                      00078         endc
                      00079 
                      00080 
                      00081 ;***************************************
                      00082 ; MACROS
                      00083 ;***************************************
                      00084 
                      00085 ; Display a msg on LCD
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 Display macro   Message
                      00087                 local   loop_disp
                      00088                 local   end_disp
                      00089                 clrf    Table_Counter
                      00090                 clrw
                      00091 loop_disp
                      00092         movf    Table_Counter,W
                      00093                 call    Message
                      00094                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00095                 btfsc   STATUS,Z
                      00096                 goto    end_disp
                      00097                 call    WR_DATA
                      00098                 incf    Table_Counter,F
                      00099                 goto    loop_disp
                      00100 end_disp
                      00101                 endm
                      00102 
                      00103 
                      00104 ;Shortcuts for moving literals / registers
                      00105 movlf   macro   l, f
                      00106         movlw   l
                      00107         movwf   f
                      00108         endm
                      00109 
                      00110 movff   macro   source, dest
                      00111         movf    source, W
                      00112         movwf   dest
                      00113         endm
                      00114 
                      00115 ; Write to LCD (all in bank0 please)
                      00116 writeBCD    macro   reg         ; from a register containing BCD
                      00117             movf    reg, W
                      00118             addlw   B'00110000'
                      00119             call WR_DATA
                      00120             endm
                      00121 
                      00122 writechar   macro   asc             ;ASCII code literal (or in "")
                      00123             movlw   asc
                      00124             call    WR_DATA
                      00125             endm
                      00126 
                      00127 writeASC        macro   reg         ;from a register containing ASCII
                      00128             movf    reg, W
                      00129             call WR_DATA
                      00130             endm
                      00131 
                      00132 spacebar    macro
                      00133             movlw   B'00010100'
                      00134             call    WR_INS
                      00135             endm
                      00136 
                      00137 ;Print to PC (hyperterminal)
                      00138 printchar   macro   char            ;direct ASCII code literal (or in "")
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             movlw   char
                      00140             call    writetoPC
                      00141             endm
                      00142 
                      00143 printASC    macro   reg            ;ASCII code inside a register
                      00144             banksel reg
                      00145             movf    reg,W
                      00146             call    writetoPC
                      00147             endm
                      00148 
                      00149 printBCD    macro   BCD            ;BCD inside a register
                      00150             banksel BCD
                      00151             movf    BCD, W
                      00152             addlw   0x30
                      00153             call    writetoPC
                      00154             endm
                      00155 
                      00156 newline     macro
                      00157             printchar   0xA ;changes line
                      00158             printchar   0xD ;goes back to left
                      00159             endm
                      00160 ;***************************************
                      00161 ; VECTORS
                      00162 ;***************************************
                      00163 
                      00164     ORG       0x000
0000   2???           00165          goto      init
                      00166     ORG       0x004
0004   2???           00167         goto    isr
                      00168 
                      00169 
                      00170 ;***************************************
                      00171 ; TABLES (MESSAGES)
                      00172 ;***************************************
0005                  00173 Standby_Msg
0005   0782           00174                 addwf   PCL,F
0006   3453 3454 3441 00175                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00176 Start_Msg
000E   0782           00177         addwf   PCL,F
000F   3449 346E 3473 00178         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00179 End_Msg
0020   0782           00180         addwf   PCL,F
0021   3443 346F 346D 00181         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00182 Time_Msg
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   0782           00183                 addwf   PCL,F
002B   344F 3470 3465 00184                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00185 Seconds
003B   0782           00186         addwf   PCL,F
003C   3420 3473 3465 00187         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00188 Not_present
0045   0782           00189         addwf   PCL,F
0046   343A 3420 344E 00190         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00191 Pass
0054   0782           00192                 addwf   PCL,F
0055   343A 3420 3450 00193                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00194 LED_fail
005C   0782           00195                 addwf   PCL,F
005D   343A 3420 344C 00196                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00197 Flick_fail
0068   0782           00198                 addwf   PCL,F
0069   343A 3420 3446 00199                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00200 Total_Msg
0078   0782           00201         addwf   PCL,F
0079   3454 346F 3474 00202         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00203 LF
0089   0782           00204         addwf   PCL,F
008A   344C 3446 343A 00205         dt      "LF: ",0
       3420 3400 
008F                  00206 FF
008F   0782           00207         addwf   PCL,F
0090   3446 3446 343A 00208         dt      "FF: ",0
       3420 3400 
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095                  00209 None
0095   0782           00210         addwf   PCL,F
0096   343C 346E 346F 00211         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00212 Logs_Msg1
009D   0782           00213         addwf   PCL,F
009E   3431 342D 3439 00214         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00215 Logs_Msg2
00AE   0782           00216         addwf   PCL,F
00AF   3453 3454 3441 00217         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00218 Logs_Msg3
00BF   0782           00219         addwf   PCL,F
00C0   3445 3478 3470 00220         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00221 Logs_Msg4
00C8   0782           00222         addwf   PCL,F
00C9   344C 344F 3447 00223         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00224 Op_at
00D8   0782           00225         addwf   PCL,F
00D9   344F 3470 3465 00226         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00227 
                      00228 ;***************************************
                      00229 ; MAIN PROGRAM
                      00230 ;***************************************
                      00231 
00E7                  00232 init
                      00233         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00234 
00E9   1683           00235         bsf       STATUS,RP0            ; select bank 1
                      00236         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EA   30C7               M         movlw   b'11000111'
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EB   0081               M         movwf   OPTION_REG
                      00237         movlf     b'000110', TRISA      ; PortA *may* be used for Photo and IR stuff
00EC   3006               M         movlw   b'000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0085               M         movwf   TRISA
                      00238         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00239                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00240         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; rest unused
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00241         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F3   0189           00242         clrf      TRISE                 ; PortE is output- *may* be used for motor (only [2:0] tho!)
                      00243 
00F4   1283           00244         bcf       STATUS,RP0        ; select bank 0
00F5   0185           00245         clrf      PORTA
00F6   0186           00246         clrf      PORTB
00F7   0187           00247         clrf      PORTC
00F8   0188           00248         clrf      PORTD
00F9   0189           00249         clrf      PORTE
                      00250 
00FA   2???           00251         call      i2c_common_setup  ;Set up I2C for communication
00FB   2???           00252         call      InitLCD           ;Initialize the LCD
00FC   2???           00253         call      InitUSART         ;Set up USART for RS232
                      00254 
00FD   1283           00255         bcf       STATUS,RP0        ; back to bank0
                      00256 
                      00257         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
00FE   01B9               M                 clrf    Table_Counter
00FF   0103               M                 clrw
0100                      M loop_disp
0100   0839               M         movf    Table_Counter,W
0101   2???               M                 call    Standby_Msg
0102   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0103   1903               M                 btfsc   STATUS,Z
0104   2???               M                 goto    end_disp
0105   2???               M                 call    WR_DATA
0106   0AB9               M                 incf    Table_Counter,F
0107   2???               M                 goto    loop_disp
0108                      M end_disp
0108   2???           00258         call    Switch_Lines
                      00259 
                      00260  ;--------------------------------------------------
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00261  ;      STANDBY MODE
                      00262 
0109                  00263 waiting
                      00264         ; Display date and time.
                      00265         ; Also save starting time for log (will stop updating once we start)
                      00266         writechar "2"       ;First line shows 20**/**/**
0109   3032               M             movlw   "2"
010A   2???               M             call    WR_DATA
                      00267         writechar "0"
010B   3030               M             movlw   "0"
010C   2???               M             call    WR_DATA
                      00268         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
010D   3006               M         movlw   0x06
010E   1283 1303          M         banksel 0x73
0110   00F3               M         movwf   0x73
0111   2???               M         call    read_rtc
0112   1283 1303          M         banksel 0x75
0114   0875               M         movf    0x75,w
0115   2???               M         call    rtc_convert   
0116   0877           00269                 movf    0x77,W
0117   00A9           00270         movwf    start_year10    ;Save starting year dig10
0118   2???           00271                 call    WR_DATA
0119   0878           00272                 movf    0x78,W
011A   00AA           00273         movwf    start_year1    ;Save starting year dig1
011B   2???           00274                 call    WR_DATA
                      00275                 writechar "/"
011C   302F               M             movlw   "/"
011D   2???               M             call    WR_DATA
                      00276                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
011E   3005               M         movlw   0x05
011F   1283 1303          M         banksel 0x73
0121   00F3               M         movwf   0x73
0122   2???               M         call    read_rtc
0123   1283 1303          M         banksel 0x75
0125   0875               M         movf    0x75,w
0126   2???               M         call    rtc_convert   
0127   0877           00277                 movf    0x77,W
0128   00AB           00278         movwf    start_month10    ;Save starting month dig10
0129   2???           00279                 call    WR_DATA
012A   0878           00280                 movf    0x78,W
012B   00AC           00281         movwf    start_month1    ;Save starting month dig1
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012C   2???           00282                 call    WR_DATA
                      00283                 writechar       "/"
012D   302F               M             movlw   "/"
012E   2???               M             call    WR_DATA
                      00284                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
012F   3004               M         movlw   0x04
0130   1283 1303          M         banksel 0x73
0132   00F3               M         movwf   0x73
0133   2???               M         call    read_rtc
0134   1283 1303          M         banksel 0x75
0136   0875               M         movf    0x75,w
0137   2???               M         call    rtc_convert   
0138   0877           00285                 movf    0x77,W
0139   00AD           00286         movwf    start_date10    ;Save starting date dig10
013A   2???           00287                 call    WR_DATA
013B   0878           00288                 movf    0x78,W
013C   00AE           00289         movwf    start_date1    ;Save starting date dig1
013D   2???           00290                 call    WR_DATA
                      00291                 spacebar
013E   3014               M             movlw   B'00010100'
013F   2???               M             call    WR_INS
                      00292                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0140   3002               M         movlw   0x02
0141   1283 1303          M         banksel 0x73
0143   00F3               M         movwf   0x73
0144   2???               M         call    read_rtc
0145   1283 1303          M         banksel 0x75
0147   0875               M         movf    0x75,w
0148   2???               M         call    rtc_convert   
0149   0877           00293                 movf    0x77,W
014A   00AF           00294         movwf    start_hour10    ;Save starting hour dig10
014B   2???           00295                 call    WR_DATA
014C   0878           00296                 movf    0x78,W
014D   00B0           00297         movwf    start_hour1    ;Save starting hour dig1
014E   2???           00298                 call    WR_DATA
                      00299                 writechar ":"
014F   303A               M             movlw   ":"
0150   2???               M             call    WR_DATA
                      00300                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0151   3001               M         movlw   0x01
0152   1283 1303          M         banksel 0x73
0154   00F3               M         movwf   0x73
0155   2???               M         call    read_rtc
0156   1283 1303          M         banksel 0x75
0158   0875               M         movf    0x75,w
0159   2???               M         call    rtc_convert   
015A   0877           00301                 movf    0x77,W
015B   00B1           00302         movwf    start_min10    ;Save starting min dig10
015C   2???           00303                 call    WR_DATA
015D   0878           00304                 movf    0x78,W
015E   00B2           00305         movwf    start_min1    ;Save starting min dig1
015F   2???           00306                 call    WR_DATA
                      00307 
                      00308         ; Move cursor back to start of second line
                      00309         ; We will update displayed time but not the word "STANDBY"
0160   30C0           00310         movlw   B'11000000'
0161   2???           00311         call    WR_INS
                      00312 
                      00313         ;Poll to start (will have to hold key for ~0.5sec)
0162   1C86           00314          btfss          PORTB,1     ;Wait until data is available from the keypad
0163   2???           00315          goto           waiting
                      00316 
0164   0E06           00317          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0165   390F           00318          andlw          0x0F
0166   00B7           00319          movwf      keytemp
0167   3A0C           00320          xorlw      0xC         ;Will be all zeros if its "START"
0168   1903           00321          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
0169   2???           00322          goto       start
                      00323 
016A   0837           00324          movf       keytemp,W     ;Go to log interface
016B   3A0E           00325          xorlw      0xE
016C   1903           00326          btfsc      STATUS,Z
016D   2???           00327          goto       logs
                      00328 
016E   1886           00329          btfsc          PORTB,1     ;Wait until key is released
016F   2???           00330          goto           $-1
0170   2???           00331          goto       waiting
                      00332 
                      00333 ;-----------------------------------------------------------
                      00334 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00335 
0171                  00336 start
                      00337         ;Start the timer
                      00338         movlf       D'38', count38
0171   3026               M         movlw   D'38'
0172   00C6               M         movwf   count38
0173   01B3           00339         clrf        op_time         
0174   0181           00340         clrf        TMR0
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0175   178B           00341         bsf         INTCON, GIE     ;enable interrupts
                      00342 
                      00343         ;Display starting message
0176   2???           00344         call        Clear_Display
                      00345         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0177   01B9               M                 clrf    Table_Counter
0178   0103               M                 clrw
0179                      M loop_disp
0179   0839               M         movf    Table_Counter,W
017A   2???               M                 call    Start_Msg
017B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
017C   1903               M                 btfsc   STATUS,Z
017D   2???               M                 goto    end_disp
017E   2???               M                 call    WR_DATA
017F   0AB9               M                 incf    Table_Counter,F
0180   2???               M                 goto    loop_disp
0181                      M end_disp
                      00346 
                      00347 
                      00348 ;****FAKE CODE ******************************************
                      00349         ; Just delaying
0181   2???           00350         call        HalfS
0182   2???           00351         call        HalfS
                      00352 
                      00353        ; Putting values in manually.
                      00354         movlf     B'01', state1     ;pass
0183   3001               M         movlw   B'01'
0184   00A0               M         movwf   state1
                      00355         movlf     B'01', state2     ;pass
0185   3001               M         movlw   B'01'
0186   00A1               M         movwf   state2
                      00356         movlf     B'10', state3     ;LED fail
0187   3002               M         movlw   B'10'
0188   00A2               M         movwf   state3
                      00357         movlf     B'01', state4     ;pass
0189   3001               M         movlw   B'01'
018A   00A3               M         movwf   state4
                      00358         movlf     B'01', state5     ;pass
018B   3001               M         movlw   B'01'
018C   00A4               M         movwf   state5
                      00359         movlf     B'01', state6     ;pass
018D   3001               M         movlw   B'01'
018E   00A5               M         movwf   state6
                      00360         movlf     B'01', state7     ;pass
018F   3001               M         movlw   B'01'
0190   00A6               M         movwf   state7
                      00361         movlf     B'11', state8     ;flicker fail
0191   3003               M         movlw   B'11'
0192   00A7               M         movwf   state8
                      00362         movlf     B'01', state9     ;pass
0193   3001               M         movlw   B'01'
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0194   00A8               M         movwf   state9
                      00363         movlf     D'1', num_LF
0195   3001               M         movlw   D'1'
0196   00B5               M         movwf   num_LF
                      00364         movlf     D'1', num_FF
0197   3001               M         movlw   D'1'
0198   00B6               M         movwf   num_FF
                      00365         movlf     D'9', num_tot
0199   3009               M         movlw   D'9'
019A   00B4               M         movwf   num_tot
                      00366 ;*******************************************************
                      00367 
                      00368 ; choose fake or real!
                      00369 
                      00370 ;;****REAL CODE ******************************************
                      00371 ;    movlf    D'0', candle_index
                      00372 ;    bcf        STATUS, IRP
                      00373 ;    movlf   0x1F, FSR       ;pointing at right before state1
                      00374 ;    bsf     IRLIGHT     ;turn on IR
                      00375 ;
                      00376 ;rotate
                      00377 ;       movlw   0x9                 ; stop operation after 9 rotations
                      00378 ;    subwf   candle_index,W      ; candle_index is # you've already tested before rotating
                      00379 ;    btfsc   STATUS,Z
                      00380 ;       goto    end_operation
                      00381 ;       call    ROTATEMOTOR          ; else rotate motor and n++
                      00382 ;       incf    candle_index, F
                      00383 ;    incf    FSR, F
                      00384 ;
                      00385 ;detect_candle
                      00386 ;       btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
                      00387 ;       goto    test_candle     ;yes candle, go test it
                      00388 ;    movlf   D'0', INDF      ;no candle, state = not present
                      00389 ;       goto rotate                 ;and go try next
                      00390 ;
                      00391 ;test_candle
                      00392 ;       incf    num_tot, F                      ; keeping track of total number of candles
                      00393 ;       ; Assume candle is already turned on
                      00394 ;       clrf    photocount
                      00395 ;       call    HalfS       ; delay 2 sec or whatever
                      00396 ;   call    HalfS
                      00397 ;   call    HalfS
                      00398 ;   call    HalfS
                      00399 ;       movff   photocount, photoval        ;to ensure it wont change again
                      00400 ;check_threshold1
                      00401 ;    movlw    threshold1
                      00402 ;    subwf   photoval, W
                      00403 ;    btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
                      00404 ;    goto check_threshold2
                      00405 ;    movlf   D'2', INDF      ; < threshold 1 means led fail
                      00406 ;        incf    num_LF, F
                      00407 ;    goto    end_test_candle
                      00408 ;check_threshold2
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00409 ;    movlw    threshold2
                      00410 ;    subwf   photoval, W
                      00411 ;    btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
                      00412 ;    goto aboveboth
                      00413 ;    movlf   D'1', INDF      ; < threshold 2 means pass
                      00414 ;    goto    end_test_candle
                      00415 ;aboveboth
                      00416 ;   movlf   D'3', INDF       ;else flicker fail
                      00417 ;   incf    num_FF, F
                      00418 ;end_test_candle
                      00419 ;       call    TURNOFF     ;pulse solenoid to turn off candle
                      00420 ;    goto    rotate
                      00421 ;
                      00422 ;
                      00423 ;ROTATEMOTOR ;rotates stepper motor 40deg
                      00424 ;    return
                      00425 ;
                      00426 ;TURNOFF ;pulses solenoid to turn off candle
                      00427 ;    return
                      00428 ; ;****************************************************
                      00429 
019B                  00430 end_operation
                      00431         ;Turn off the IR
                      00432         ;bcf     IRLIGHT
                      00433 
                      00434         ; Stop the timer
019B   138B           00435          bcf         INTCON, GIE  ;disable interrupts
                      00436 
                      00437         ;Display "complete"
019C   2???           00438         call       Clear_Display
                      00439         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
019D   01B9               M                 clrf    Table_Counter
019E   0103               M                 clrw
019F                      M loop_disp
019F   0839               M         movf    Table_Counter,W
01A0   2???               M                 call    End_Msg
01A1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01A2   1903               M                 btfsc   STATUS,Z
01A3   2???               M                 goto    end_disp
01A4   2???               M                 call    WR_DATA
01A5   0AB9               M                 incf    Table_Counter,F
01A6   2???               M                 goto    loop_disp
01A7                      M end_disp
                      00440 
                      00441         ; Shift logs 1-8 -> 2-9
                      00442         ; Then store current run as log 1
01A7                  00443 shiftlogs
01A7   1283 1703      00444         banksel     EEADR               ; bank 2
                      00445         movlf       D'111', EEADR        ; start shifting from 111->125
01A9   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AA   008D               M         movwf   EEADR
                      00446 
01AB                  00447 shiftlogs_0
01AB   1683 1703      00448         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01AD   138C           00449         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01AE   140C           00450         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01AF   188C           00451         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01B0   2???           00452         goto        $-1
01B1   1283 1703      00453         banksel     EEADR               ;bank 2
01B3   300E           00454         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B4   078D           00455         addwf       EEADR, F
01B5   1683 1703      00456         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B7   138C           00457         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B8   150C           00458         bsf         EECON1, WREN
01B9   3055           00459         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BA   008D           00460         movwf       EECON2
01BB   30AA           00461         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BC   008D           00462         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BD   148C           00463         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BE   110C           00464         bcf         EECON1, WREN
01BF   1283 1703      00465         banksel     EEADR               ;bank 2
01C1   300E           00466         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C2   020D           00467         subwf       EEADR, W
01C3   1903           00468         btfsc       STATUS, Z
01C4   2???           00469         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00470 
01C5   1283 1303      00471         banksel op_time             ; for some reason I need to delay here
01C7   2???           00472         call   delay5ms             ; or else I get an infinite loop
01C8   1283 1703      00473         banksel EEADR               
                      00474 
01CA   300F           00475         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CB   028D           00476         subwf       EEADR, F           
01CC   2???           00477         goto        shiftlogs_0
                      00478 
01CD                  00479 write_log1
01CD   1283 1703      00480         banksel     EEADR
01CF   1383           00481         bcf         STATUS, IRP
                      00482         movlf       0x37, FSR           ;points to one after last important data
01D0   3037               M         movlw   0x37
01D1   0084               M         movwf   FSR
                      00483         movlf       D'14', EEADR        ;points to one after last place to write to
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D2   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D3   008D               M         movwf   EEADR
01D4                  00484 write_log1_0
01D4   1683 1703      00485         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D6   188C           00486         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01D7   2???           00487         goto        $-1
01D8   1283 1703      00488         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DA   038D           00489         decf        EEADR, F            ;writing backwords
01DB   0384           00490         decf        FSR, F
                      00491         movff       INDF, EEDATA
01DC   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DD   008C               M         movwf   EEDATA
01DE   1683 1703      00492         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E0   138C           00493         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E1   150C           00494         bsf         EECON1, WREN
01E2   3055           00495         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E3   008D           00496         movwf       EECON2
01E4   30AA           00497         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E5   008D           00498         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E6   148C           00499         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E7   110C           00500         bcf         EECON1, WREN
01E8   1283 1703      00501         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EA   088D           00502         movf        EEADR, F
01EB   1D03           00503         btfss       STATUS, Z           ;if EEADR = 0 we're done
01EC   2???           00504         goto        write_log1_0
01ED   1283           00505         bcf         STATUS, RP0         ;so go back to bank 0 and continue
01EE   1303           00506         bcf         STATUS, RP1
                      00507 
                      00508         ; Display info screens
01EF   2???           00509         call       time             ; "Operation time: X sec"
01F0   2???           00510         call       HalfS
01F1   2???           00511         call       HalfS
01F2   2???           00512         call       summary          ; "Total candles: X. Defective: Y"
01F3   2???           00513         call       HalfS
01F4   2???           00514         call       HalfS
01F5   2???           00515         call       defective        ; "FF: a b c. LF: d e f"
                      00516 ;-----------------------------------------------------------------------
                      00517 ; Data display interface
                      00518 
01F6   1C86           00519 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
01F7   2???           00520          goto           $-1
                      00521 
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F8   0E06           00522          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
01F9   390F           00523          andlw          0x0F
01FA   2???           00524          call       information ;Do the right thing
                      00525 
01FB   1886           00526          btfsc          PORTB,1     ;Wait until key is released
01FC   2???           00527          goto           $-1
01FD   2???           00528          goto       poll
                      00529 
                      00530 
                      00531 ;-------------------------------------------------------------------------
                      00532 ; LOGS INTERFACE       
                      00533 ; Shows last runs of last 9 logs
                      00534 ; Access from STANDBY and return to STANDBY
                      00535 
01FE                  00536 logs
01FE   2???           00537     call    Clear_Display
                      00538     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01FF   01B9               M                 clrf    Table_Counter
0200   0103               M                 clrw
0201                      M loop_disp
0201   0839               M         movf    Table_Counter,W
0202   2???               M                 call    Logs_Msg1
0203   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0204   1903               M                 btfsc   STATUS,Z
0205   2???               M                 goto    end_disp
0206   2???               M                 call    WR_DATA
0207   0AB9               M                 incf    Table_Counter,F
0208   2???               M                 goto    loop_disp
0209                      M end_disp
0209   2???           00539     call    Switch_Lines
                      00540     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
020A   01B9               M                 clrf    Table_Counter
020B   0103               M                 clrw
020C                      M loop_disp
020C   0839               M         movf    Table_Counter,W
020D   2???               M                 call    Logs_Msg2
020E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
020F   1903               M                 btfsc   STATUS,Z
0210   2???               M                 goto    end_disp
0211   2???               M                 call    WR_DATA
0212   0AB9               M                 incf    Table_Counter,F
0213   2???               M                 goto    loop_disp
0214                      M end_disp
                      00541 
0214                  00542 polling
0214   1C86           00543     btfss               PORTB,1     ;Wait until data is available from the keypad
0215   2???           00544     goto                $-1
                      00545 
0216   0E06           00546     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0217   390F           00547     andlw               0x0F
0218   00B7           00548     movwf       keytemp     ; Save which key was pressed
                      00549 
0219                  00550 check_log1
0219   3A00           00551     xorlw   0x0         ;will be all zeros if its 1
021A   1D03           00552     btfss   STATUS,Z    ;and Z will be high, so skip
021B   2???           00553     goto    check_log2
021C   1283 1703      00554     banksel EEADR
                      00555     movlf   d'0', EEADR
021E   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021F   008D               M         movwf   EEADR
0220   2???           00556     goto    display_log
                      00557 
0221                  00558 check_log2
0221   0837           00559     movf    keytemp, W
0222   3A01           00560     xorlw   0x1
0223   1D03           00561     btfss   STATUS,Z
0224   2???           00562     goto    check_log3
0225   1283 1703      00563     banksel EEADR
                      00564     movlf   d'14', EEADR
0227   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0228   008D               M         movwf   EEADR
0229   2???           00565     goto    display_log
                      00566 
022A                  00567 check_log3
022A   0837           00568     movf    keytemp, W
022B   3A02           00569     xorlw   0x2
022C   1D03           00570     btfss   STATUS,Z
022D   2???           00571     goto    check_log4
022E   1283 1703      00572     banksel EEADR
                      00573     movlf   d'28', EEADR
0230   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0231   008D               M         movwf   EEADR
0232   2???           00574     goto    display_log
                      00575 
0233                  00576 check_log4
0233   0837           00577     movf    keytemp, W
0234   3A04           00578     xorlw   0x4
0235   1D03           00579     btfss   STATUS,Z
0236   2???           00580     goto    check_log5
0237   1283 1703      00581     banksel EEADR
                      00582     movlf   d'42', EEADR
0239   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
023A   008D               M         movwf   EEADR
023B   2???           00583     goto    display_log
                      00584 
023C                  00585 check_log5
023C   0837           00586     movf    keytemp, W
023D   3A05           00587     xorlw   0x5
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023E   1D03           00588     btfss   STATUS,Z
023F   2???           00589     goto    check_log6
0240   1283 1703      00590     banksel EEADR
                      00591     movlf   d'56', EEADR
0242   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0243   008D               M         movwf   EEADR
0244   2???           00592     goto    display_log
                      00593 
0245                  00594 check_log6
0245   0837           00595     movf    keytemp, W
0246   3A06           00596     xorlw   0x6
0247   1D03           00597     btfss   STATUS,Z
0248   2???           00598     goto    check_log7
0249   1283 1703      00599     banksel EEADR
                      00600     movlf   d'70', EEADR
024B   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
024C   008D               M         movwf   EEADR
024D   2???           00601     goto    display_log
                      00602 
024E                  00603 check_log7
024E   0837           00604     movf    keytemp, W
024F   3A08           00605     xorlw   0x8
0250   1D03           00606     btfss   STATUS,Z
0251   2???           00607     goto    check_log8
0252   1283 1703      00608     banksel EEADR
                      00609     movlf   d'84', EEADR
0254   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0255   008D               M         movwf   EEADR
0256   2???           00610     goto    display_log
                      00611 
0257                  00612 check_log8
0257   0837           00613     movf    keytemp, W
0258   3A09           00614     xorlw   0x9
0259   1D03           00615     btfss   STATUS,Z
025A   2???           00616     goto    check_log9
025B   1283 1703      00617     banksel EEADR
                      00618     movlf   d'98', EEADR
025D   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025E   008D               M         movwf   EEADR
025F   2???           00619     goto    display_log
                      00620 
0260                  00621 check_log9
0260   0837           00622     movf    keytemp, W
0261   3A0A           00623     xorlw   0xA
0262   1D03           00624     btfss   STATUS,Z
0263   2???           00625     goto    check_done
0264   1283 1703      00626     banksel EEADR
                      00627     movlf   d'112', EEADR
0266   3070               M         movlw   d'112'
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0267   008D               M         movwf   EEADR
0268   2???           00628     goto    display_log
                      00629 
0269                  00630 check_done
0269   0837           00631     movf    keytemp, W
026A   3A0D           00632     xorlw   0xD
026B   1D03           00633     btfss   STATUS,Z
026C   2???           00634     goto    badkey
026D   2???           00635     call    Clear_Display
                      00636     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
026E   01B9               M                 clrf    Table_Counter
026F   0103               M                 clrw
0270                      M loop_disp
0270   0839               M         movf    Table_Counter,W
0271   2???               M                 call    Standby_Msg
0272   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0273   1903               M                 btfsc   STATUS,Z
0274   2???               M                 goto    end_disp
0275   2???               M                 call    WR_DATA
0276   0AB9               M                 incf    Table_Counter,F
0277   2???               M                 goto    loop_disp
0278                      M end_disp
0278   2???           00637     call    Switch_Lines
0279   2???           00638     goto    waiting
                      00639 
027A                  00640 badkey
027A   1886           00641     btfsc               PORTB,1     ;Wait until key is released
027B   2???           00642     goto                $-1
027C   2???           00643     goto        polling
                      00644 
                      00645 
027D                  00646 display_log                 ;start in bank2
                      00647     ; move EEPROM data back to "current" data
027D   1383           00648     bcf STATUS, IRP
                      00649     movlf   0x29, FSR
027E   3029               M         movlw   0x29
027F   0084               M         movwf   FSR
0280                  00650 read_EEPROM
0280   1683 1703      00651     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0282   138C           00652     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0283   140C           00653     bsf EECON1, RD          ; read EEPROM
0284   1283 1703      00654     banksel EEDATA          ;bank 2
                      00655     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0286   080C               M         movf    EEDATA, W
0287   0080               M         movwf   INDF
0288   0A84           00656     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0289   0A8D           00657     incf    EEADR, F
028A   3037           00658     movlw   0x37            ;done if FSR = 0x37
028B   0204           00659     subwf   FSR, W
028C   1D03           00660     btfss   STATUS, Z
028D   2???           00661     goto    read_EEPROM
                      00662     
                      00663     ;display that shit
028E   1283 1303      00664     banksel Table_Counter   ; bank0
0290   2???           00665     call    Clear_Display
                      00666     ;if first data is 0xFF (no log) just display "none"
0291   30FF           00667     movlw   0xFF
0292   0229           00668     subwf   start_year10, W
0293   1D03           00669     btfss   STATUS, Z
0294   2???           00670     goto yes_log
0295                  00671 no_log
                      00672     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0295   01B9               M                 clrf    Table_Counter
0296   0103               M                 clrw
0297                      M loop_disp
0297   0839               M         movf    Table_Counter,W
0298   2???               M                 call    None
0299   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
029A   1903               M                 btfsc   STATUS,Z
029B   2???               M                 goto    end_disp
029C   2???               M                 call    WR_DATA
029D   0AB9               M                 incf    Table_Counter,F
029E   2???               M                 goto    loop_disp
029F                      M end_disp
029F   2???           00673     call    HalfS
02A0   2???           00674     goto    logs
                      00675     ;else display the log
02A1                  00676 yes_log
                      00677     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02A1   01B9               M                 clrf    Table_Counter
02A2   0103               M                 clrw
02A3                      M loop_disp
02A3   0839               M         movf    Table_Counter,W
02A4   2???               M                 call    Op_at
02A5   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02A6   1903               M                 btfsc   STATUS,Z
02A7   2???               M                 goto    end_disp
02A8   2???               M                 call    WR_DATA
02A9   0AB9               M                 incf    Table_Counter,F
02AA   2???               M                 goto    loop_disp
02AB                      M end_disp
02AB   2???           00678     call    Switch_Lines
                      00679     writechar    "2"
02AC   3032               M             movlw   "2"
02AD   2???               M             call    WR_DATA
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00680     writechar    "0"
02AE   3030               M             movlw   "0"
02AF   2???               M             call    WR_DATA
                      00681     writeASC   start_year10
02B0   0829               M             movf    start_year10, W
02B1   2???               M             call WR_DATA
                      00682     writeASC   start_year1
02B2   082A               M             movf    start_year1, W
02B3   2???               M             call WR_DATA
                      00683     writechar   "/"
02B4   302F               M             movlw   "/"
02B5   2???               M             call    WR_DATA
                      00684     writeASC   start_month10
02B6   082B               M             movf    start_month10, W
02B7   2???               M             call WR_DATA
                      00685     writeASC   start_month1
02B8   082C               M             movf    start_month1, W
02B9   2???               M             call WR_DATA
                      00686     writechar   "/"
02BA   302F               M             movlw   "/"
02BB   2???               M             call    WR_DATA
                      00687     writeASC   start_date10
02BC   082D               M             movf    start_date10, W
02BD   2???               M             call WR_DATA
                      00688     writeASC   start_date1
02BE   082E               M             movf    start_date1, W
02BF   2???               M             call WR_DATA
                      00689     writechar   " "
02C0   3020               M             movlw   " "
02C1   2???               M             call    WR_DATA
                      00690     writeASC   start_hour10
02C2   082F               M             movf    start_hour10, W
02C3   2???               M             call WR_DATA
                      00691     writeASC   start_hour1
02C4   0830               M             movf    start_hour1, W
02C5   2???               M             call WR_DATA
                      00692     writechar   ":"
02C6   303A               M             movlw   ":"
02C7   2???               M             call    WR_DATA
                      00693     writeASC  start_min10
02C8   0831               M             movf    start_min10, W
02C9   2???               M             call WR_DATA
                      00694     writeASC   start_min1
02CA   0832               M             movf    start_min1, W
02CB   2???               M             call WR_DATA
02CC   2???           00695     call    HalfS
02CD   2???           00696     call    HalfS
02CE   2???           00697     call    time
02CF   2???           00698     call    HalfS
02D0   2???           00699     call    HalfS
02D1   2???           00700     call    summary
02D2   2???           00701     call    HalfS
02D3   2???           00702     call    HalfS
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00703     ;option to Export
02D4   2???           00704     call    Clear_Display
                      00705     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02D5   01B9               M                 clrf    Table_Counter
02D6   0103               M                 clrw
02D7                      M loop_disp
02D7   0839               M         movf    Table_Counter,W
02D8   2???               M                 call    Logs_Msg3
02D9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02DA   1903               M                 btfsc   STATUS,Z
02DB   2???               M                 goto    end_disp
02DC   2???               M                 call    WR_DATA
02DD   0AB9               M                 incf    Table_Counter,F
02DE   2???               M                 goto    loop_disp
02DF                      M end_disp
02DF   2???           00706     call    Switch_Lines
                      00707     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02E0   01B9               M                 clrf    Table_Counter
02E1   0103               M                 clrw
02E2                      M loop_disp
02E2   0839               M         movf    Table_Counter,W
02E3   2???               M                 call    Logs_Msg4
02E4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02E5   1903               M                 btfsc   STATUS,Z
02E6   2???               M                 goto    end_disp
02E7   2???               M                 call    WR_DATA
02E8   0AB9               M                 incf    Table_Counter,F
02E9   2???               M                 goto    loop_disp
02EA                      M end_disp
                      00708 
02EA                  00709 wanna_export
02EA   1C86           00710     btfss               PORTB,1     ;Wait until data is available from the keypad
02EB   2???           00711     goto                $-1
                      00712 
02EC   0E06           00713     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
02ED   390F           00714     andlw               0x0F
02EE   00B7           00715     movwf       keytemp     ; Save which key was pressed
                      00716 
02EF                  00717 check_wanna
02EF   0837           00718     movf    keytemp, W
02F0   3A0F           00719     xorlw   0xF
02F1   1D03           00720     btfss   STATUS,Z
02F2   2???           00721     goto    check_nothx
02F3   2???           00722     call    export
02F4   2???           00723     goto    logs
                      00724 
02F5                  00725 check_nothx
02F5   0837           00726     movf    keytemp, W
02F6   3A0E           00727     xorlw   0xE
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F7   1D03           00728     btfss   STATUS,Z
02F8   2???           00729     goto    check_immapeace
02F9   2???           00730     goto    logs
                      00731 
02FA                  00732 check_immapeace
02FA   0837           00733     movf    keytemp, W
02FB   3A0D           00734     xorlw   0xD
02FC   1D03           00735     btfss   STATUS,Z
02FD   2???           00736     goto    badkeyagain
02FE   2???           00737     call    Clear_Display
                      00738     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02FF   01B9               M                 clrf    Table_Counter
0300   0103               M                 clrw
0301                      M loop_disp
0301   0839               M         movf    Table_Counter,W
0302   2???               M                 call    Standby_Msg
0303   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0304   1903               M                 btfsc   STATUS,Z
0305   2???               M                 goto    end_disp
0306   2???               M                 call    WR_DATA
0307   0AB9               M                 incf    Table_Counter,F
0308   2???               M                 goto    loop_disp
0309                      M end_disp
0309   2???           00739     call    Switch_Lines
030A   2???           00740     goto    waiting
                      00741 
030B                  00742 badkeyagain
030B   1886           00743     btfsc               PORTB,1     ;Wait until key is released
030C   2???           00744     goto                $-1
030D   2???           00745     goto        wanna_export
                      00746 
                      00747 ; END OF MAIN PROGRAM
                      00748 ;------------------------------------------------------------
                      00749 
                      00750 
                      00751 ;***************************************
                      00752 ; DATA DISPLAY ROUTINE
                      00753 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00754 ; Determines which key it was and displays appropriate info / branch
                      00755 ;***************************************
                      00756 
030E                  00757 information
030E   00B7           00758     movwf   keytemp             ; Save which key was pressed
                      00759 
030F                  00760 check_1
030F   3A00           00761     xorlw   0x0         ;will be all zeros if its 1
0310   1D03           00762     btfss   STATUS,Z    ;and Z will be high, so skip
0311   2???           00763     goto    check_2
0312   2???           00764     call    Clear_Display
                      00765     writechar "1"
0313   3031               M             movlw   "1"
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0314   2???               M             call    WR_DATA
0315   0820           00766     movf    state1, W
0316   2???           00767     call    display_state
0317   0008           00768     return
                      00769 
0318                  00770 check_2
0318   0837           00771     movf    keytemp, W
0319   3A01           00772     xorlw   0x1
031A   1D03           00773     btfss   STATUS,Z
031B   2???           00774     goto    check_3
031C   2???           00775     call    Clear_Display
                      00776     writechar "2"
031D   3032               M             movlw   "2"
031E   2???               M             call    WR_DATA
031F   0821           00777     movf    state2, W
0320   2???           00778     call    display_state
0321   0008           00779     return
                      00780 
0322                  00781 check_3
0322   0837           00782     movf    keytemp, W
0323   3A02           00783     xorlw   0x2
0324   1D03           00784     btfss   STATUS,Z
0325   2???           00785     goto    check_4
0326   2???           00786     call    Clear_Display
                      00787     writechar "3"
0327   3033               M             movlw   "3"
0328   2???               M             call    WR_DATA
0329   0822           00788     movf    state3, W
032A   2???           00789     call    display_state
032B   0008           00790     return
                      00791 
032C                  00792 check_4
032C   0837           00793     movf    keytemp, W
032D   3A04           00794     xorlw   0x4
032E   1D03           00795     btfss   STATUS,Z
032F   2???           00796     goto    check_5
0330   2???           00797     call    Clear_Display
                      00798     writechar "4"
0331   3034               M             movlw   "4"
0332   2???               M             call    WR_DATA
0333   0823           00799     movf    state4, W
0334   2???           00800     call    display_state
0335   0008           00801     return
                      00802 
0336                  00803 check_5
0336   0837           00804     movf    keytemp, W
0337   3A05           00805     xorlw   0x5
0338   1D03           00806     btfss   STATUS,Z
0339   2???           00807     goto    check_6
033A   2???           00808     call    Clear_Display
                      00809     writechar "5"
033B   3035               M             movlw   "5"
033C   2???               M             call    WR_DATA
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033D   0824           00810     movf    state5, W
033E   2???           00811     call    display_state
033F   0008           00812     return
                      00813 
0340                  00814 check_6
0340   0837           00815     movf    keytemp, W
0341   3A06           00816     xorlw   0x6
0342   1D03           00817     btfss   STATUS,Z
0343   2???           00818     goto    check_7
0344   2???           00819     call    Clear_Display
                      00820     writechar "6"
0345   3036               M             movlw   "6"
0346   2???               M             call    WR_DATA
0347   0825           00821     movf    state6, W
0348   2???           00822     call    display_state
0349   0008           00823     return
                      00824 
034A                  00825 check_7
034A   0837           00826     movf    keytemp, W
034B   3A08           00827     xorlw   0x8
034C   1D03           00828     btfss   STATUS,Z
034D   2???           00829     goto    check_8
034E   2???           00830     call    Clear_Display
                      00831     writechar "7"
034F   3037               M             movlw   "7"
0350   2???               M             call    WR_DATA
0351   0826           00832     movf    state7, W
0352   2???           00833     call    display_state
0353   0008           00834     return
                      00835 
0354                  00836 check_8
0354   0837           00837     movf    keytemp, W
0355   3A09           00838     xorlw   0x9
0356   1D03           00839     btfss   STATUS,Z
0357   2???           00840     goto    check_9
0358   2???           00841     call    Clear_Display
                      00842     writechar "8"
0359   3038               M             movlw   "8"
035A   2???               M             call    WR_DATA
035B   0827           00843     movf    state8, W
035C   2???           00844     call    display_state
035D   0008           00845     return
                      00846 
035E                  00847 check_9
035E   0837           00848     movf    keytemp, W
035F   3A0A           00849     xorlw   0xA
0360   1D03           00850     btfss   STATUS,Z
0361   2???           00851     goto    check_summary
0362   2???           00852     call    Clear_Display
                      00853     writechar "9"
0363   3039               M             movlw   "9"
0364   2???               M             call    WR_DATA
0365   0828           00854     movf    state9, W
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0366   2???           00855     call    display_state
0367   0008           00856     return
                      00857 
0368                  00858 check_summary
0368   0837           00859     movf    keytemp, W
0369   3A03           00860     xorlw   0x3
036A   1D03           00861     btfss   STATUS,Z
036B   2???           00862     goto    check_defective
036C   2???           00863     call    summary
036D   0008           00864     return
                      00865 
036E                  00866 check_defective
036E   0837           00867     movf    keytemp, W
036F   3A07           00868     xorlw   0x7
0370   1D03           00869     btfss   STATUS,Z
0371   2???           00870     goto    check_time
0372   2???           00871     call    defective
0373   0008           00872     return
                      00873 
0374                  00874 check_time
0374   0837           00875     movf    keytemp, W
0375   3A0B           00876     xorlw   0xB
0376   1D03           00877     btfss   STATUS,Z
0377   2???           00878     goto    check_export
0378   2???           00879     call    time
0379   0008           00880     return
                      00881 
037A                  00882 check_export
037A   0837           00883     movf    keytemp, W
037B   3A0F           00884     xorlw   0xF
037C   1D03           00885     btfss   STATUS,Z
037D   2???           00886     goto    check_standby       ;or do you wanna allow to check logs?
037E   2???           00887     call    export
037F   0008           00888     return
                      00889 
                      00890 ;check_logs
                      00891 ;    movf    keytemp, W
                      00892 ;    xorlw   0xE
                      00893 ;    btfss   STATUS,Z
                      00894 ;    goto    check_standby
                      00895 ;    goto    logs
                      00896 
0380                  00897 check_standby
0380   0837           00898     movf    keytemp, W
0381   3A0D           00899     xorlw   0xD
0382   1D03           00900     btfss   STATUS,Z
0383   2???           00901     goto    check_start
0384   2???           00902     call    Clear_Display
                      00903     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0385   01B9               M                 clrf    Table_Counter
0386   0103               M                 clrw
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0387                      M loop_disp
0387   0839               M         movf    Table_Counter,W
0388   2???               M                 call    Standby_Msg
0389   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
038A   1903               M                 btfsc   STATUS,Z
038B   2???               M                 goto    end_disp
038C   2???               M                 call    WR_DATA
038D   0AB9               M                 incf    Table_Counter,F
038E   2???               M                 goto    loop_disp
038F                      M end_disp
038F   2???           00904     call    Switch_Lines
0390   2???           00905     goto    waiting
                      00906 
0391                  00907 check_start
0391   0837           00908     movf    keytemp, W
0392   3A0C           00909     xorlw   0xC
0393   1D03           00910     btfss   STATUS,Z
0394   2???           00911     goto    default_key
0395   2???           00912     goto    start
                      00913 
0396                  00914 default_key         ; will never get here
0396   0008           00915     return
                      00916 
                      00917 
                      00918 ;Display state subroutine
                      00919 ;stateN is in W
0397                  00920 display_state
0397   00B8           00921     movwf  statetemp    ; save stateN
                      00922 
0398                  00923 check_none
0398   3A00           00924     xorlw   0x0
0399   1D03           00925     btfss   STATUS,Z
039A   2???           00926     goto    check_pass
                      00927     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
039B   01B9               M                 clrf    Table_Counter
039C   0103               M                 clrw
039D                      M loop_disp
039D   0839               M         movf    Table_Counter,W
039E   2???               M                 call    Not_present
039F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03A0   1903               M                 btfsc   STATUS,Z
03A1   2???               M                 goto    end_disp
03A2   2???               M                 call    WR_DATA
03A3   0AB9               M                 incf    Table_Counter,F
03A4   2???               M                 goto    loop_disp
03A5                      M end_disp
03A5   0008           00928     return
                      00929 
03A6                  00930 check_pass
03A6   0838           00931     movf    statetemp, W
03A7   3A01           00932     xorlw   0x1
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03A8   1D03           00933     btfss   STATUS,Z
03A9   2???           00934     goto    check_LED
                      00935     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03AA   01B9               M                 clrf    Table_Counter
03AB   0103               M                 clrw
03AC                      M loop_disp
03AC   0839               M         movf    Table_Counter,W
03AD   2???               M                 call    Pass
03AE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03AF   1903               M                 btfsc   STATUS,Z
03B0   2???               M                 goto    end_disp
03B1   2???               M                 call    WR_DATA
03B2   0AB9               M                 incf    Table_Counter,F
03B3   2???               M                 goto    loop_disp
03B4                      M end_disp
03B4   0008           00936     return
                      00937 
03B5                  00938 check_LED
03B5   0838           00939     movf    statetemp, W
03B6   3A02           00940     xorlw   0x2
03B7   1D03           00941     btfss   STATUS,Z
03B8   2???           00942     goto    check_flick
                      00943     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03B9   01B9               M                 clrf    Table_Counter
03BA   0103               M                 clrw
03BB                      M loop_disp
03BB   0839               M         movf    Table_Counter,W
03BC   2???               M                 call    LED_fail
03BD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03BE   1903               M                 btfsc   STATUS,Z
03BF   2???               M                 goto    end_disp
03C0   2???               M                 call    WR_DATA
03C1   0AB9               M                 incf    Table_Counter,F
03C2   2???               M                 goto    loop_disp
03C3                      M end_disp
03C3   0008           00944     return
                      00945 
03C4                  00946 check_flick
03C4   0838           00947     movf    statetemp, W
03C5   3A03           00948     xorlw   0x3
03C6   1D03           00949     btfss   STATUS,Z
03C7   2???           00950     goto    default_state
                      00951     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03C8   01B9               M                 clrf    Table_Counter
03C9   0103               M                 clrw
03CA                      M loop_disp
03CA   0839               M         movf    Table_Counter,W
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03CB   2???               M                 call    Flick_fail
03CC   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03CD   1903               M                 btfsc   STATUS,Z
03CE   2???               M                 goto    end_disp
03CF   2???               M                 call    WR_DATA
03D0   0AB9               M                 incf    Table_Counter,F
03D1   2???               M                 goto    loop_disp
03D2                      M end_disp
03D2   0008           00952     return
                      00953 
03D3                  00954 default_state   ; should never get here
03D3   0008           00955     return
                      00956 
                      00957 ; Summary Subroutine
                      00958 ; Displays total number of candles and number of defective candles
                      00959 ; Reads data from num_tot, num_LF, num_FF
03D4                  00960 summary
03D4   2???           00961     call            Clear_Display
                      00962     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03D5   01B9               M                 clrf    Table_Counter
03D6   0103               M                 clrw
03D7                      M loop_disp
03D7   0839               M         movf    Table_Counter,W
03D8   2???               M                 call    Total_Msg
03D9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03DA   1903               M                 btfsc   STATUS,Z
03DB   2???               M                 goto    end_disp
03DC   2???               M                 call    WR_DATA
03DD   0AB9               M                 incf    Table_Counter,F
03DE   2???               M                 goto    loop_disp
03DF                      M end_disp
                      00963     writeBCD        num_tot
03DF   0834               M             movf    num_tot, W
03E0   3E30               M             addlw   B'00110000'
03E1   2???               M             call WR_DATA
03E2   2???           00964     call            Switch_Lines
                      00965     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03E3   01B9               M                 clrf    Table_Counter
03E4   0103               M                 clrw
03E5                      M loop_disp
03E5   0839               M         movf    Table_Counter,W
03E6   2???               M                 call    LF
03E7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E8   1903               M                 btfsc   STATUS,Z
03E9   2???               M                 goto    end_disp
03EA   2???               M                 call    WR_DATA
03EB   0AB9               M                 incf    Table_Counter,F
03EC   2???               M                 goto    loop_disp
03ED                      M end_disp
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00966     writeBCD        num_LF
03ED   0835               M             movf    num_LF, W
03EE   3E30               M             addlw   B'00110000'
03EF   2???               M             call WR_DATA
                      00967     spacebar
03F0   3014               M             movlw   B'00010100'
03F1   2???               M             call    WR_INS
                      00968     spacebar
03F2   3014               M             movlw   B'00010100'
03F3   2???               M             call    WR_INS
                      00969     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03F4   01B9               M                 clrf    Table_Counter
03F5   0103               M                 clrw
03F6                      M loop_disp
03F6   0839               M         movf    Table_Counter,W
03F7   2???               M                 call    FF
03F8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F9   1903               M                 btfsc   STATUS,Z
03FA   2???               M                 goto    end_disp
03FB   2???               M                 call    WR_DATA
03FC   0AB9               M                 incf    Table_Counter,F
03FD   2???               M                 goto    loop_disp
03FE                      M end_disp
                      00970     writeBCD        num_FF
03FE   0836               M             movf    num_FF, W
03FF   3E30               M             addlw   B'00110000'
0400   2???               M             call WR_DATA
0401   0008           00971     return
                      00972 
                      00973 ; Defective candles Subroutine
                      00974 ; Displays index of each defective candle (LF or FF)
                      00975 ; Reads data from state1 - state9
0402                  00976 defective
0402   2???           00977     call            Clear_Display
                      00978 
                      00979     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0403   01B9               M                 clrf    Table_Counter
0404   0103               M                 clrw
0405                      M loop_disp
0405   0839               M         movf    Table_Counter,W
0406   2???               M                 call    LF
0407   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0408   1903               M                 btfsc   STATUS,Z
0409   2???               M                 goto    end_disp
040A   2???               M                 call    WR_DATA
040B   0AB9               M                 incf    Table_Counter,F
040C   2???               M                 goto    loop_disp
040D                      M end_disp
040D   08B5           00980     movf            num_LF, F
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040E   1D03           00981     btfss           STATUS,Z         ;if none LF, just say "none"
040F   2???           00982     goto            check_LF
                      00983     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0410   01B9               M                 clrf    Table_Counter
0411   0103               M                 clrw
0412                      M loop_disp
0412   0839               M         movf    Table_Counter,W
0413   2???               M                 call    None
0414   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0415   1903               M                 btfsc   STATUS,Z
0416   2???               M                 goto    end_disp
0417   2???               M                 call    WR_DATA
0418   0AB9               M                 incf    Table_Counter,F
0419   2???               M                 goto    loop_disp
041A                      M end_disp
041A   2???           00984     goto            now_FF
                      00985 
041B                  00986 check_LF                            ; list all LF candles
041B   3002           00987     movlw           B'00000010'
041C   2???           00988     call            check_for_fail
                      00989 
041D                  00990 now_FF                              ; now look at FF
041D   2???           00991     call            Switch_Lines
                      00992     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
041E   01B9               M                 clrf    Table_Counter
041F   0103               M                 clrw
0420                      M loop_disp
0420   0839               M         movf    Table_Counter,W
0421   2???               M                 call    FF
0422   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0423   1903               M                 btfsc   STATUS,Z
0424   2???               M                 goto    end_disp
0425   2???               M                 call    WR_DATA
0426   0AB9               M                 incf    Table_Counter,F
0427   2???               M                 goto    loop_disp
0428                      M end_disp
0428   08B6           00993     movf            num_FF, F
0429   1D03           00994     btfss           STATUS,Z         ;if none FF, just say "none"
042A   2???           00995     goto            check_FF
                      00996     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
042B   01B9               M                 clrf    Table_Counter
042C   0103               M                 clrw
042D                      M loop_disp
042D   0839               M         movf    Table_Counter,W
042E   2???               M                 call    None
042F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0430   1903               M                 btfsc   STATUS,Z
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0431   2???               M                 goto    end_disp
0432   2???               M                 call    WR_DATA
0433   0AB9               M                 incf    Table_Counter,F
0434   2???               M                 goto    loop_disp
0435                      M end_disp
0435   0008           00997     return
                      00998 
0436                  00999 check_FF                            ; list all FF candles
0436   3003           01000     movlw           B'00000011'
0437   2???           01001     call            check_for_fail
0438   0008           01002     return
                      01003 
0439                  01004 check_for_fail  ;lists all candles that have status currently in W "stateX"
0439   00B8           01005     movwf   statetemp
                      01006         movlf   D'0', candle_index
043A   3000               M         movlw   D'0'
043B   00C7               M         movwf   candle_index
043C   1383           01007         bcf     STATUS, IRP
                      01008         movlf   0x1F, FSR           ;index of right before state1
043D   301F               M         movlw   0x1F
043E   0084               M         movwf   FSR
043F                  01009 check_next
043F   3009           01010         movlw   D'9'                ;exit loop if at 9
0440   0247           01011         subwf   candle_index, W
0441   1803           01012         btfsc   STATUS,W
0442   2???           01013         goto    end_check_fail
0443   0A84           01014         incf    FSR,F               ; increment
0444   0AC7           01015         incf    candle_index,F
0445   0838           01016         movf    statetemp, W            ;see if stateN = stateX
0446   0200           01017         subwf   INDF, W
0447   1D03           01018         btfss   STATUS, Z
0448   2???           01019         goto    check_next              ;if not, go to next
                      01020         writeBCD        candle_index    ;if so, write down the number
0449   0847               M             movf    candle_index, W
044A   3E30               M             addlw   B'00110000'
044B   2???               M             call WR_DATA
                      01021         spacebar
044C   3014               M             movlw   B'00010100'
044D   2???               M             call    WR_INS
044E   2???           01022         goto check_next
044F                  01023 end_check_fail
044F   0008           01024         return
                      01025 
                      01026 ; Time subroutine
                      01027 ; Right now this takes the time in seconds as a binary number in op_time
                      01028 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01029 ; incremented every second. However I may just take the stop time - start time
                      01030 ; from the RTC data so this might change a lot.
0450                  01031 time
0450   2???           01032     call    Clear_Display
                      01033     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0451   01B9               M                 clrf    Table_Counter
0452   0103               M                 clrw
0453                      M loop_disp
0453   0839               M         movf    Table_Counter,W
0454   2???               M                 call    Time_Msg
0455   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0456   1903               M                 btfsc   STATUS,Z
0457   2???               M                 goto    end_disp
0458   2???               M                 call    WR_DATA
0459   0AB9               M                 incf    Table_Counter,F
045A   2???               M                 goto    loop_disp
045B                      M end_disp
045B   2???           01034     call    Switch_Lines
045C   0833           01035     movf    op_time, W
045D   2???           01036     call    big_number
045E   08C2           01037     movf    huns, F
045F   1903           01038     btfsc   STATUS,Z        ;if huns is zero don't display it
0460   2???           01039     goto    no_huns
                      01040     writeBCD    huns
0461   0842               M             movf    huns, W
0462   3E30               M             addlw   B'00110000'
0463   2???               M             call WR_DATA
0464                  01041 no_huns
0464   08C3           01042     movf    tens, F
0465   1903           01043     btfsc   STATUS,Z        ;if tens is zero don't display it
0466   2???           01044     goto    no_tens
                      01045     writeBCD    tens
0467   0843               M             movf    tens, W
0468   3E30               M             addlw   B'00110000'
0469   2???               M             call WR_DATA
046A                  01046 no_tens
                      01047     writeBCD    ones
046A   0844               M             movf    ones, W
046B   3E30               M             addlw   B'00110000'
046C   2???               M             call WR_DATA
                      01048     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
046D   01B9               M                 clrf    Table_Counter
046E   0103               M                 clrw
046F                      M loop_disp
046F   0839               M         movf    Table_Counter,W
0470   2???               M                 call    Seconds
0471   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0472   1903               M                 btfsc   STATUS,Z
0473   2???               M                 goto    end_disp
0474   2???               M                 call    WR_DATA
0475   0AB9               M                 incf    Table_Counter,F
0476   2???               M                 goto    loop_disp
0477                      M end_disp
0477   0008           01049     return
                      01050 
                      01051 ; Export subroutine
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01052 ; Exports data from current run to hyperterminal
                      01053 ; reads start time and num_tot/num_ff/num_lf data
0478                  01054 export
                      01055     printchar   0x7       ;makes a noise on the PC
0478   3007               M             movlw   0x7
0479   2???               M             call    writetoPC
                      01056     printchar   0xD       ;go back to left edge
047A   300D               M             movlw   0xD
047B   2???               M             call    writetoPC
                      01057     printchar   "T"
047C   3054               M             movlw   "T"
047D   2???               M             call    writetoPC
                      01058     printchar   "e"
047E   3065               M             movlw   "e"
047F   2???               M             call    writetoPC
                      01059     printchar   "s"
0480   3073               M             movlw   "s"
0481   2???               M             call    writetoPC
                      01060     printchar   "t"
0482   3074               M             movlw   "t"
0483   2???               M             call    writetoPC
                      01061     printchar   " "
0484   3020               M             movlw   " "
0485   2???               M             call    writetoPC
                      01062     printchar   "a"
0486   3061               M             movlw   "a"
0487   2???               M             call    writetoPC
                      01063     printchar   "t"
0488   3074               M             movlw   "t"
0489   2???               M             call    writetoPC
                      01064     printchar   ":"
048A   303A               M             movlw   ":"
048B   2???               M             call    writetoPC
                      01065     printchar   " "
048C   3020               M             movlw   " "
048D   2???               M             call    writetoPC
                      01066     printchar   "2"
048E   3032               M             movlw   "2"
048F   2???               M             call    writetoPC
                      01067     printchar   "0"
0490   3030               M             movlw   "0"
0491   2???               M             call    writetoPC
                      01068     printASC   start_year10
0492   1283 1303          M             banksel start_year10
0494   0829               M             movf    start_year10,W
0495   2???               M             call    writetoPC
                      01069     printASC   start_year1
0496   1283 1303          M             banksel start_year1
0498   082A               M             movf    start_year1,W
0499   2???               M             call    writetoPC
                      01070     printchar   "/"
049A   302F               M             movlw   "/"
049B   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01071     printASC   start_month10
049C   1283 1303          M             banksel start_month10
049E   082B               M             movf    start_month10,W
049F   2???               M             call    writetoPC
                      01072     printASC   start_month1
04A0   1283 1303          M             banksel start_month1
04A2   082C               M             movf    start_month1,W
04A3   2???               M             call    writetoPC
                      01073     printchar   "/"
04A4   302F               M             movlw   "/"
04A5   2???               M             call    writetoPC
                      01074     printASC   start_date10
04A6   1283 1303          M             banksel start_date10
04A8   082D               M             movf    start_date10,W
04A9   2???               M             call    writetoPC
                      01075     printASC   start_date1
04AA   1283 1303          M             banksel start_date1
04AC   082E               M             movf    start_date1,W
04AD   2???               M             call    writetoPC
                      01076     printchar   " "
04AE   3020               M             movlw   " "
04AF   2???               M             call    writetoPC
                      01077     printASC   start_hour10
04B0   1283 1303          M             banksel start_hour10
04B2   082F               M             movf    start_hour10,W
04B3   2???               M             call    writetoPC
                      01078     printASC   start_hour1
04B4   1283 1303          M             banksel start_hour1
04B6   0830               M             movf    start_hour1,W
04B7   2???               M             call    writetoPC
                      01079     printchar   ":"
04B8   303A               M             movlw   ":"
04B9   2???               M             call    writetoPC
                      01080     printASC   start_min10
04BA   1283 1303          M             banksel start_min10
04BC   0831               M             movf    start_min10,W
04BD   2???               M             call    writetoPC
                      01081     printASC   start_min1
04BE   1283 1303          M             banksel start_min1
04C0   0832               M             movf    start_min1,W
04C1   2???               M             call    writetoPC
                      01082     newline
                          M             printchar   0xA ;changes line
04C2   300A               M             movlw   0xA
04C3   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04C4   300D               M             movlw   0xD
04C5   2???               M             call    writetoPC
                      01083     printchar   "T"
04C6   3054               M             movlw   "T"
04C7   2???               M             call    writetoPC
                      01084     printchar   "i"
04C8   3069               M             movlw   "i"
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C9   2???               M             call    writetoPC
                      01085     printchar   "m"
04CA   306D               M             movlw   "m"
04CB   2???               M             call    writetoPC
                      01086     printchar   "e"
04CC   3065               M             movlw   "e"
04CD   2???               M             call    writetoPC
                      01087     printchar   ":"
04CE   303A               M             movlw   ":"
04CF   2???               M             call    writetoPC
                      01088     printchar   " "
04D0   3020               M             movlw   " "
04D1   2???               M             call    writetoPC
                      01089     printchar   " "
04D2   3020               M             movlw   " "
04D3   2???               M             call    writetoPC
                      01090     printchar   " "
04D4   3020               M             movlw   " "
04D5   2???               M             call    writetoPC
                      01091     printchar   " "
04D6   3020               M             movlw   " "
04D7   2???               M             call    writetoPC
04D8   1283 1303      01092     banksel huns
04DA   08C2           01093     movf    huns, F
04DB   1903           01094     btfsc   STATUS,Z        ;if huns is zero don't display it
04DC   2???           01095     goto    nohuns
                      01096     printBCD   huns
04DD   1283 1303          M             banksel huns
04DF   0842               M             movf    huns, W
04E0   3E30               M             addlw   0x30
04E1   2???               M             call    writetoPC
04E2                  01097 nohuns
04E2   1283 1303      01098     banksel tens
04E4   08C3           01099     movf    tens, F
04E5   1903           01100     btfsc   STATUS,Z        ;if tens is zero don't display it
04E6   2???           01101     goto    notens
                      01102     printBCD   tens
04E7   1283 1303          M             banksel tens
04E9   0843               M             movf    tens, W
04EA   3E30               M             addlw   0x30
04EB   2???               M             call    writetoPC
04EC                  01103 notens
                      01104     printBCD   ones
04EC   1283 1303          M             banksel ones
04EE   0844               M             movf    ones, W
04EF   3E30               M             addlw   0x30
04F0   2???               M             call    writetoPC
                      01105     printchar   " "
04F1   3020               M             movlw   " "
04F2   2???               M             call    writetoPC
                      01106     printchar   "s"
04F3   3073               M             movlw   "s"
04F4   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01107     printchar   "e"
04F5   3065               M             movlw   "e"
04F6   2???               M             call    writetoPC
                      01108     printchar   "c"
04F7   3063               M             movlw   "c"
04F8   2???               M             call    writetoPC
                      01109     newline
                          M             printchar   0xA ;changes line
04F9   300A               M             movlw   0xA
04FA   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04FB   300D               M             movlw   0xD
04FC   2???               M             call    writetoPC
                      01110     printchar   "C"
04FD   3043               M             movlw   "C"
04FE   2???               M             call    writetoPC
                      01111     printchar   "a"
04FF   3061               M             movlw   "a"
0500   2???               M             call    writetoPC
                      01112     printchar   "n"
0501   306E               M             movlw   "n"
0502   2???               M             call    writetoPC
                      01113     printchar   "d"
0503   3064               M             movlw   "d"
0504   2???               M             call    writetoPC
                      01114     printchar   "l"
0505   306C               M             movlw   "l"
0506   2???               M             call    writetoPC
                      01115     printchar   "e"
0507   3065               M             movlw   "e"
0508   2???               M             call    writetoPC
                      01116     printchar   "s"
0509   3073               M             movlw   "s"
050A   2???               M             call    writetoPC
                      01117     printchar   ":"
050B   303A               M             movlw   ":"
050C   2???               M             call    writetoPC
                      01118     printchar   " "
050D   3020               M             movlw   " "
050E   2???               M             call    writetoPC
                      01119     printchar   " "
050F   3020               M             movlw   " "
0510   2???               M             call    writetoPC
                      01120     printchar   " "
0511   3020               M             movlw   " "
0512   2???               M             call    writetoPC
                      01121     printchar   " "
0513   3020               M             movlw   " "
0514   2???               M             call    writetoPC
                      01122     printchar   " "
0515   3020               M             movlw   " "
0516   2???               M             call    writetoPC
                      01123     printchar   " "
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0517   3020               M             movlw   " "
0518   2???               M             call    writetoPC
                      01124     printBCD    num_tot
0519   1283 1303          M             banksel num_tot
051B   0834               M             movf    num_tot, W
051C   3E30               M             addlw   0x30
051D   2???               M             call    writetoPC
                      01125     newline
                          M             printchar   0xA ;changes line
051E   300A               M             movlw   0xA
051F   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0520   300D               M             movlw   0xD
0521   2???               M             call    writetoPC
                      01126     printchar   "L"
0522   304C               M             movlw   "L"
0523   2???               M             call    writetoPC
                      01127     printchar   "E"
0524   3045               M             movlw   "E"
0525   2???               M             call    writetoPC
                      01128     printchar   "D"
0526   3044               M             movlw   "D"
0527   2???               M             call    writetoPC
                      01129     printchar   " "
0528   3020               M             movlw   " "
0529   2???               M             call    writetoPC
                      01130     printchar   "f"
052A   3066               M             movlw   "f"
052B   2???               M             call    writetoPC
                      01131     printchar   "a"
052C   3061               M             movlw   "a"
052D   2???               M             call    writetoPC
                      01132     printchar   "i"
052E   3069               M             movlw   "i"
052F   2???               M             call    writetoPC
                      01133     printchar   "l"
0530   306C               M             movlw   "l"
0531   2???               M             call    writetoPC
                      01134     printchar   ":"
0532   303A               M             movlw   ":"
0533   2???               M             call    writetoPC
                      01135     printchar   " "
0534   3020               M             movlw   " "
0535   2???               M             call    writetoPC
                      01136     printchar   " "
0536   3020               M             movlw   " "
0537   2???               M             call    writetoPC
                      01137     printchar   " "
0538   3020               M             movlw   " "
0539   2???               M             call    writetoPC
                      01138     printchar   " "
053A   3020               M             movlw   " "
053B   2???               M             call    writetoPC
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01139     printchar   " "
053C   3020               M             movlw   " "
053D   2???               M             call    writetoPC
                      01140     printBCD    num_LF
053E   1283 1303          M             banksel num_LF
0540   0835               M             movf    num_LF, W
0541   3E30               M             addlw   0x30
0542   2???               M             call    writetoPC
                      01141     newline
                          M             printchar   0xA ;changes line
0543   300A               M             movlw   0xA
0544   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0545   300D               M             movlw   0xD
0546   2???               M             call    writetoPC
                      01142     printchar   "F"
0547   3046               M             movlw   "F"
0548   2???               M             call    writetoPC
                      01143     printchar   "l"
0549   306C               M             movlw   "l"
054A   2???               M             call    writetoPC
                      01144     printchar   "i"
054B   3069               M             movlw   "i"
054C   2???               M             call    writetoPC
                      01145     printchar   "c"
054D   3063               M             movlw   "c"
054E   2???               M             call    writetoPC
                      01146     printchar   "k"
054F   306B               M             movlw   "k"
0550   2???               M             call    writetoPC
                      01147     printchar   "e"
0551   3065               M             movlw   "e"
0552   2???               M             call    writetoPC
                      01148     printchar   "r"
0553   3072               M             movlw   "r"
0554   2???               M             call    writetoPC
                      01149     printchar   " "
0555   3020               M             movlw   " "
0556   2???               M             call    writetoPC
                      01150     printchar   "f"
0557   3066               M             movlw   "f"
0558   2???               M             call    writetoPC
                      01151     printchar   "a"
0559   3061               M             movlw   "a"
055A   2???               M             call    writetoPC
                      01152     printchar   "i"
055B   3069               M             movlw   "i"
055C   2???               M             call    writetoPC
                      01153     printchar   "l"
055D   306C               M             movlw   "l"
055E   2???               M             call    writetoPC
                      01154     printchar   ":"
055F   303A               M             movlw   ":"
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0560   2???               M             call    writetoPC
                      01155     printchar   " "
0561   3020               M             movlw   " "
0562   2???               M             call    writetoPC
                      01156     printBCD    num_FF
0563   1283 1303          M             banksel num_FF
0565   0836               M             movf    num_FF, W
0566   3E30               M             addlw   0x30
0567   2???               M             call    writetoPC
                      01157     newline
                          M             printchar   0xA ;changes line
0568   300A               M             movlw   0xA
0569   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
056A   300D               M             movlw   0xD
056B   2???               M             call    writetoPC
                      01158     newline
                          M             printchar   0xA ;changes line
056C   300A               M             movlw   0xA
056D   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
056E   300D               M             movlw   0xD
056F   2???               M             call    writetoPC
0570   1283           01159     bcf STATUS,RP0
0571   1303           01160     bcf STATUS,RP1     ; back to bank 0
0572   0008           01161     return
                      01162 
                      01163 
                      01164 ;***************************************
                      01165 ; GENERAL PURPOSE SUBROUTINES
                      01166 ;***************************************
                      01167 
                      01168 ; DISPLAY BIG NUMBER SUBROUTINE
                      01169 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01170 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01171 ; Uses "shift and add 3" algorithm
0573                  01172 big_number
                      01173     movff   op_time, op_time_save         ;save the original op_time
0573   0833               M         movf    op_time, W
0574   00C1               M         movwf   op_time_save
                      01174     movlf   8, bignumcount                ;will shift 8 times
0575   3008               M         movlw   8
0576   00C5               M         movwf   bignumcount
0577   01C2           01175     clrf    huns
0578   01C3           01176     clrf    tens
0579   01C4           01177     clrf    ones
                      01178 
057A                  01179 BCDadd3                             ; if any digit > 5, add3
057A   3005           01180     movlw   0x5
057B   0242           01181     subwf   huns, W
057C   1803           01182     btfsc   STATUS, C
057D   2???           01183     call    add3huns
                      01184 
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

057E   3005           01185     movlw   0x5
057F   0243           01186     subwf   tens, W
0580   1803           01187     btfsc   STATUS, C
0581   2???           01188     call    add3tens
                      01189 
0582   3005           01190     movlw   0x5
0583   0244           01191     subwf   ones, W
0584   1803           01192     btfsc   STATUS, C
0585   2???           01193     call    add3ones
                      01194 
0586   03C5           01195     decf    bignumcount, 1
0587   1003           01196     bcf     STATUS, C
0588   0DB3           01197     rlf     op_time, 1              ; shift
0589   0DC4           01198     rlf     ones, 1
058A   1A44           01199     btfsc   ones,4 ;
058B   2???           01200     call    carryones               ; carry if too large
058C   0DC3           01201     rlf     tens, 1
                      01202 
058D   1A43           01203     btfsc   tens,4 ;
058E   2???           01204     call    carrytens
058F   0DC2           01205     rlf     huns,1
0590   1003           01206     bcf     STATUS, C
                      01207 
0591   0845           01208     movf    bignumcount, W
0592   1D03           01209     btfss   STATUS, Z
0593   2???           01210     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01211 
                      01212     movff    op_time_save, op_time     ;restore the original op_time
0594   0841               M         movf    op_time_save, W
0595   00B3               M         movwf   op_time
0596   0008           01213     return
                      01214 
0597                  01215 add3huns
0597   3003           01216     movlw 0x3
0598   07C2           01217     addwf huns,F
0599   0008           01218     return
059A                  01219 add3tens
059A   3003           01220     movlw 0x3
059B   07C3           01221     addwf tens,F
059C   0008           01222     return
059D                  01223 add3ones
059D   3003           01224     movlw 0x3
059E   07C4           01225     addwf ones,F
059F   0008           01226     return
05A0                  01227 carryones
05A0   1244           01228     bcf ones, 4
05A1   1403           01229     bsf STATUS, C
05A2   0008           01230     return
05A3                  01231 carrytens
05A3   1243           01232     bcf tens, 4
05A4   1403           01233     bsf STATUS, C
05A5   0008           01234     return
                      01235 
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01236 
                      01237 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01238 ; Delays exactly 0.5sec
05A6                  01239 HalfS
                      01240       movlf 0x8A, hdelH
05A6   308A               M         movlw   0x8A
05A7   00BE               M         movwf   hdelH
                      01241       movlf 0xBA, hdelM
05A8   30BA               M         movlw   0xBA
05A9   00BF               M         movwf   hdelM
                      01242       movlf 0x03, hdelL
05AA   3003               M         movlw   0x03
05AB   00C0               M         movwf   hdelL
05AC                  01243 HalfS_0
05AC   0BBE           01244       decfsz    hdelH, F
05AD   2???           01245           goto  $+2
05AE   0BBF           01246           decfsz        hdelM, F
05AF   2???           01247           goto  $+2
05B0   0BC0           01248           decfsz        hdelL, F
05B1   2???           01249           goto  HalfS_0
                      01250 
05B2   2???           01251           goto  $+1
05B3   0000           01252           nop
05B4   0008           01253           return
                      01254 
                      01255 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01256 ; Useful for LCD because PIC is way faster than it can handle
                      01257 ; Delays exactly 5ms
05B5                  01258 delay5ms
                      01259         movlf   0xC3, del1
05B5   30C3               M         movlw   0xC3
05B6   00BC               M         movwf   del1
                      01260         movlf   0x0A, del2
05B7   300A               M         movlw   0x0A
05B8   00BD               M         movwf   del2
05B9                  01261 Delay_0
05B9   0BBC           01262         decfsz  del1, f
05BA   2???           01263         goto    $+2
05BB   0BBD           01264         decfsz  del2, f
05BC   2???           01265         goto    Delay_0
05BD   0008           01266     return
                      01267 
                      01268 ;***************************************
                      01269 ; LCD SUBROUTINES (from sample code)
                      01270 ;***************************************
                      01271 
                      01272 ; Initialize the LCD
05BE                  01273 InitLCD
05BE   1283           01274         bcf STATUS,RP0
05BF   1588           01275         bsf E     ;E default high
                      01276 
                      01277         ;Wait for LCD POR to finish (~15ms)
05C0   2???           01278         call delay5ms
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C1   2???           01279         call delay5ms
05C2   2???           01280         call delay5ms
                      01281 
                      01282         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01283         ; -> Send b'0011' 3 times
05C3   3033           01284         movlw   b'00110011'
05C4   2???           01285         call    WR_INS
05C5   2???           01286         call delay5ms
05C6   2???           01287         call delay5ms
05C7   3032           01288         movlw   b'00110010'
05C8   2???           01289         call    WR_INS
05C9   2???           01290         call delay5ms
05CA   2???           01291         call delay5ms
                      01292 
                      01293         ; 4 bits, 2 lines, 5x7 dots
05CB   3028           01294         movlw   b'00101000'
05CC   2???           01295         call    WR_INS
05CD   2???           01296         call delay5ms
05CE   2???           01297         call delay5ms
                      01298 
                      01299         ; display on/off
05CF   300C           01300         movlw   b'00001100'
05D0   2???           01301         call    WR_INS
05D1   2???           01302         call delay5ms
05D2   2???           01303         call delay5ms
                      01304 
                      01305         ; Entry mode
05D3   3006           01306         movlw   b'00000110'
05D4   2???           01307         call    WR_INS
05D5   2???           01308         call delay5ms
05D6   2???           01309         call delay5ms
                      01310 
                      01311         ; Clear ram
05D7   3001           01312         movlw   b'00000001'
05D8   2???           01313         call    WR_INS
05D9   2???           01314         call delay5ms
05DA   2???           01315         call delay5ms
05DB   0008           01316         return
                      01317 
                      01318 ; Clear the display
05DC                  01319 Clear_Display
05DC   3001           01320                 movlw   B'00000001'
05DD   2???           01321                 call    WR_INS
05DE   0008           01322                 return
                      01323 
                      01324 ;Switch lines
05DF                  01325 Switch_Lines
05DF   30C0           01326                 movlw   B'11000000'
05E0   2???           01327                 call    WR_INS
05E1   0008           01328                 return
                      01329 
                      01330 ; Write an instruction to the LCD (see page 7-104)
                      01331 ; The instruction must be in W
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05E2                  01332 WR_INS
05E2   1108           01333         bcf             RS                              ;clear RS
05E3   00BA           01334         movwf   com                             ;W --> com
05E4   39F0           01335         andlw   0xF0                    ;mask 4 bits MSB w = X0
05E5   0088           01336         movwf   PORTD                   ;Send 4 bits MSB
05E6   1588           01337         bsf             E                               ;
05E7   2???           01338         call    delay5ms        ;__    __
05E8   1188           01339         bcf             E                               ;  |__|
05E9   0E3A           01340         swapf   com,w
05EA   39F0           01341         andlw   0xF0                    ;1111 0010
05EB   0088           01342         movwf   PORTD                   ;send 4 bits LSB
05EC   1588           01343         bsf             E                               ;
05ED   2???           01344         call    delay5ms        ;__    __
05EE   1188           01345         bcf             E                               ;  |__|
05EF   2???           01346         call    delay5ms
05F0   0008           01347         return
                      01348 
                      01349 ; Write data at current cursor location
                      01350 ; Character code (see page 7-104) must be in W
05F1                  01351 WR_DATA
05F1   1508           01352         bsf             RS
05F2   00BB           01353         movwf   dat
05F3   083B           01354         movf    dat,w
05F4   39F0           01355         andlw   0xF0
05F5   3E04           01356         addlw   4
05F6   0088           01357         movwf   PORTD
05F7   1588           01358         bsf             E                               ;
05F8   2???           01359         call    delay5ms        ;__    __
05F9   1188           01360         bcf             E                               ;  |__|
05FA   0E3B           01361         swapf   dat,w
05FB   39F0           01362         andlw   0xF0
05FC   3E04           01363         addlw   4
05FD   0088           01364         movwf   PORTD
05FE   1588           01365         bsf             E                               ;
05FF   2???           01366         call    delay5ms        ;__    __
0600   1188           01367         bcf             E                               ;  |__|
0601   0008           01368         return
                      01369 
                      01370 
                      01371 ;***************************************
                      01372 ; PC INTERFACE SUBROUTINES (from sample code)
                      01373 ;***************************************
0602                  01374 InitUSART
0602   1683           01375         bsf       STATUS,RP0     ; select bank 1
0603   300F           01376         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0604   0099           01377         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0605   0198           01378         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01379 
0606   1283           01380         bcf       STATUS,RP0     ; select bank 0
0607   1798           01381         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0608   1618           01382         bsf       RCSTA,CREN     ; continuous receive
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01383 
0609   1683           01384         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
060A   1698           01385         bsf       TXSTA,TXEN     ; Transmit enable
060B   0008           01386         return
                      01387 
                      01388 
060C                  01389 writetoPC
                      01390 ; Writes the data in W to the PC
                      01391 ; end up in bank1!
060C   1283           01392         bcf       STATUS,RP0     ; Go to bank 0
060D   0099           01393         movwf     TXREG          ; Send contents of W to RS232
060E   1683           01394         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
060F   1C98           01395         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0610   2???           01396         goto      $-1
0611   0008           01397         return
                      01398 
                      01399 
                      01400 ;***************************************
                      01401 ; ISR
                      01402 ; Currently only care about TMR0
                      01403 ; TMR0 overflows at 256*256; each time, decrement count38
                      01404 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01405 ; When this hapens, op_time increments
                      01406 ; Also check photodata every time for 2 sec = total of 76 reads
                      01407 ;***************************************
0612                  01408 isr
0612   00F9           01409     movwf   w_isr           ;save W and status
0613   0E03           01410     swapf   STATUS, W
0614   0183           01411     clrf    STATUS
0615   00FA           01412     movwf   status_isr
                      01413 ;    movf    PCLATH, W      ;if using pages
                      01414 ;    movwf   pclath_isr
                      01415 ;    clrf    PCLATH
                      01416 
0616   0BC6           01417     decfsz  count38, F     ;if count38 gets to 38 it's been one second
0617   2???           01418     goto    end_isr
                      01419     movlf   D'38', count38  ;so reset count38
0618   3026               M         movlw   D'38'
0619   00C6               M         movwf   count38
061A   0AB3           01420     incf    op_time, F         ; and increment op_time
                      01421 
061B                  01422 end_isr
                      01423 
061B   1D05           01424     btfss   PHOTODATA       ;if PHOTODATA is 1, light is off
061C   0AC8           01425     incf    photocount, F       ;if it is 0, light is on so photocount++
                      01426 
                      01427 ;    movf    pclath_isr, W  ;if using pages
                      01428 ;    movwf    PCLATH
061D   0E7A           01429     swapf   status_isr, W   ;restore W and status
061E   0083           01430     movwf   STATUS
061F   0EF9           01431     swapf   w_isr, F
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0620   0E79           01432     swapf   w_isr, W
0621   110B           01433     bcf     INTCON, T0IF    ;clear the interrupt flag
0622   0009           01434     retfie
                      01435 
                      01436 
3F72                  01437     END
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           0000057A
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     000005DC
D                                 00000005
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           000005B9
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000005A6
HalfS_0                           000005AC
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTA, 1
IRLIGHT                           PORTA, 0
IRP                               00000007
InitLCD                           000005BE
InitUSART                         00000602
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTA, 2
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      000005DF
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           000005F1
WR_INS                            000005E2
Z                                 00000002
_.org_1_016F                      0000016F
_.org_1_01B0                      000001B0
_.org_1_01D7                      000001D7
_.org_1_01F7                      000001F7
_.org_1_01FC                      000001FC
_.org_1_0215                      00000215
_.org_1_027B                      0000027B
_.org_1_02EB                      000002EB
_.org_1_030C                      0000030C
_.org_1_05AD                      000005AD
_.org_1_05AF                      000005AF
_.org_1_05B2                      000005B2
_.org_1_05BA                      000005BA
_.org_1_0610                      00000610
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
add3huns                          00000597
add3ones                          0000059D
add3tens                          0000059A
badkey                            0000027A
badkeyagain                       0000030B
big_number                        00000573
bignumcount                       00000045
candle_index                      00000047
carryones                         000005A0
carrytens                         000005A3
check_1                           0000030F
check_2                           00000318
check_3                           00000322
check_4                           0000032C
check_5                           00000336
check_6                           00000340
check_7                           0000034A
check_8                           00000354
check_9                           0000035E
check_FF                          00000436
check_LED                         000003B5
check_LF                          0000041B
check_defective                   0000036E
check_done                        00000269
check_export                      0000037A
check_flick                       000003C4
check_for_fail                    00000439
check_immapeace                   000002FA
check_log1                        00000219
check_log2                        00000221
check_log3                        0000022A
check_log4                        00000233
check_log5                        0000023C
check_log6                        00000245
check_log7                        0000024E
check_log8                        00000257
check_log9                        00000260
check_next                        0000043F
check_none                        00000398
check_nothx                       000002F5
check_pass                        000003A6
check_standby                     00000380
check_start                       00000391
check_summary                     00000368
check_time                        00000374
check_wanna                       000002EF
com                               0000003A
count38                           00000046
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

dat                               0000003B
default_key                       00000396
default_state                     000003D3
defective                         00000402
del1                              0000003C
del2                              0000003D
delay5ms                          000005B5
display_log                       0000027D
display_state                     00000397
end_check_fail                    0000044F
end_isr                           0000061B
end_operation                     0000019B
export                            00000478
hdelH                             0000003E
hdelL                             00000040
hdelM                             0000003F
huns                              00000042
i2c_common_setup                  00000000
information                       0000030E
init                              000000E7
isr                               00000612
keytemp                           00000037
logs                              000001FE
movff                             
movlf                             
newline                           
no_huns                           00000464
no_log                            00000295
no_tens                           0000046A
nohuns                            000004E2
notens                            000004EC
now_FF                            0000041D
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000044
op_time                           00000033
op_time_save                      00000041
photocount                        00000048
photoval                          00000049
poll                              000001F6
polling                           00000214
printASC                          
printBCD                          
printchar                         
read_EEPROM                       00000280
read_rtc                          00000000
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001A7
shiftlogs_0                       000001AB
MPASM 5.54                          MAIN.ASM   2-22-2014  17:22:37         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

spacebar                          
start                             00000171
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           000003D4
tens                              00000043
threshold1                        D'15'
threshold2                        D'65'
time                              00000450
w_isr                             00000079
waiting                           00000109
wanna_export                      000002EA
writeASC                          
writeBCD                          
write_log1                        000001CD
write_log1_0                      000001D4
write_rtc                         00000000
writechar                         
writetoPC                         0000060C
yes_log                           000002A1

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    47 reported,     0 suppressed

