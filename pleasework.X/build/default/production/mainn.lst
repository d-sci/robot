MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'7'
                      00014     #define threshold2  D'69'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017 
                      00018 
                      00019 ;***************************************
                      00020 ; VARIABLES
                      00021 ;***************************************
                      00022 
                      00023 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00024 
                      00025     cblock      0x20
                      00026     ; Important information (will be displayed)
  00000020            00027         state1     ;where   0 = none      1 = pass
  00000021            00028         state2     ;        2 = led fail  3 = flicker fail
  00000022            00029         state3
  00000023            00030         state4
  00000024            00031         state5
  00000025            00032         state6
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000026            00033         state7
  00000027            00034         state8
  00000028            00035         state9
  00000029            00036         start_year10    ;starting time (for log)
  0000002A            00037         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00038         start_month10
  0000002C            00039         start_month1
  0000002D            00040         start_date10
  0000002E            00041         start_date1
  0000002F            00042         start_hour10
  00000030            00043         start_hour1
  00000031            00044         start_min10
  00000032            00045         start_min1
  00000033            00046         op_time     ;BCD in seconds
  00000034            00047         num_tot     ;BCD
  00000035            00048         num_LF      ;BCD
  00000036            00049         num_FF      ;BCD
                      00050 ; For general program / interface: temps, counters, etc.
  00000037            00051         keytemp         ; for data display mode
  00000038            00052         statetemp
  00000039            00053                 Table_Counter   ; for LCD stuff
  0000003A            00054                 com
  0000003B            00055                 dat
  0000003C            00056         delH          ;for delay 0.5s routine
  0000003D            00057         delM
  0000003E            00058         delL
  0000003F            00059         op_time_save    ;for operation time
  00000040            00060         huns
  00000041            00061         tens
  00000042            00062         ones
  00000043            00063         bignumcount
  00000044            00064         count38         ;for isr
  00000045            00065         morethansix     ;for defective routine
                      00066 ; For machine program: temps, counters, etc.
  00000046            00067         candle_index
  00000047            00068         photocount      ;for testing candle
  00000048            00069         photoval
  00000049            00070         motor_count     ;for rotate
                      00071     endc
                      00072 
                      00073     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00074         w_isr
  0000007A            00075         status_isr
                      00076         endc
                      00077 
                      00078 
                      00079 ;***************************************
                      00080 ; MACROS
                      00081 ;***************************************
                      00082 
                      00083 ; Display a msg on LCD
                      00084 Display macro   Message
                      00085                 local   loop_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086                 local   end_disp
                      00087                 clrf    Table_Counter
                      00088                 clrw
                      00089 loop_disp
                      00090         movf    Table_Counter,W
                      00091                 call    Message
                      00092                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00093                 btfsc   STATUS,Z
                      00094                 goto    end_disp
                      00095                 call    WR_DATA
                      00096                 incf    Table_Counter,F
                      00097                 goto    loop_disp
                      00098 end_disp
                      00099                 endm
                      00100 
                      00101 
                      00102 ;Shortcuts for moving literals / registers
                      00103 movlf   macro   l, f
                      00104         movlw   l
                      00105         movwf   f
                      00106         endm
                      00107 
                      00108 movff   macro   source, dest
                      00109         movf    source, W
                      00110         movwf   dest
                      00111         endm
                      00112 
                      00113 ; Write to LCD (all in bank0 please)
                      00114 writeBCD    macro   reg         ; from a register containing BCD
                      00115             movf    reg, W
                      00116             addlw   B'00110000'
                      00117             call WR_DATA
                      00118             endm
                      00119 
                      00120 writechar   macro   asc             ;ASCII code literal (or in "")
                      00121             movlw   asc
                      00122             call    WR_DATA
                      00123             endm
                      00124 
                      00125 writeASC        macro   reg         ;from a register containing ASCII
                      00126             movf    reg, W
                      00127             call WR_DATA
                      00128             endm
                      00129 
                      00130 spacebar    macro
                      00131             movlw   B'00010100'
                      00132             call    WR_INS
                      00133             endm
                      00134 
                      00135 ;Print to PC (hyperterminal)
                      00136 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00137             movlw   char
                      00138             call    writetoPC
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             endm
                      00140 
                      00141 printASC    macro   reg            ;ASCII code inside a register
                      00142             banksel reg
                      00143             movf    reg,W
                      00144             call    writetoPC
                      00145             endm
                      00146 
                      00147 printBCD    macro   BCD            ;BCD inside a register
                      00148             banksel BCD
                      00149             movf    BCD, W
                      00150             addlw   0x30
                      00151             call    writetoPC
                      00152             endm
                      00153 
                      00154 newline     macro
                      00155             printchar   0xA ;changes line
                      00156             printchar   0xD ;goes back to left
                      00157             endm
                      00158 ;***************************************
                      00159 ; VECTORS
                      00160 ;***************************************
                      00161 
                      00162     ORG       0x000
0000   2???           00163          goto      init
                      00164     ORG       0x004
0004   2???           00165         goto    isr
                      00166 
                      00167 
                      00168 ;***************************************
                      00169 ; TABLES (MESSAGES)
                      00170 ;***************************************
0005                  00171 Standby_Msg
0005   0782           00172                 addwf   PCL,F
0006   3453 3454 3441 00173                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00174 Start_Msg
000E   0782           00175         addwf   PCL,F
000F   3449 346E 3473 00176         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00177 End_Msg
0020   0782           00178         addwf   PCL,F
0021   3443 346F 346D 00179         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00180 Time_Msg
002A   0782           00181                 addwf   PCL,F
002B   344F 3470 3465 00182                 dt              "Operation time:",0
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00183 Seconds
003B   0782           00184         addwf   PCL,F
003C   3420 3473 3465 00185         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00186 Not_present
0045   0782           00187         addwf   PCL,F
0046   343A 3420 344E 00188         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00189 Pass
0054   0782           00190                 addwf   PCL,F
0055   343A 3420 3450 00191                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00192 LED_fail
005C   0782           00193                 addwf   PCL,F
005D   343A 3420 344C 00194                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00195 Flick_fail
0068   0782           00196                 addwf   PCL,F
0069   343A 3420 3446 00197                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00198 Total_Msg
0078   0782           00199         addwf   PCL,F
0079   3454 346F 3474 00200         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00201 LF
0089   0782           00202         addwf   PCL,F
008A   344C 3446 343A 00203         dt      "LF: ",0
       3420 3400 
008F                  00204 FF
008F   0782           00205         addwf   PCL,F
0090   3446 3446 343A 00206         dt      "FF: ",0
       3420 3400 
0095                  00207 None
0095   0782           00208         addwf   PCL,F
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0096   343C 346E 346F 00209         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00210 Logs_Msg1
009D   0782           00211         addwf   PCL,F
009E   3431 342D 3439 00212         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00213 Logs_Msg2
00AE   0782           00214         addwf   PCL,F
00AF   3453 3454 3441 00215         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00216 Logs_Msg3
00BF   0782           00217         addwf   PCL,F
00C0   3445 3478 3470 00218         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00219 Logs_Msg4
00C8   0782           00220         addwf   PCL,F
00C9   344C 344F 3447 00221         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00222 Op_at
00D8   0782           00223         addwf   PCL,F
00D9   344F 3470 3465 00224         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00225 
                      00226 ;***************************************
                      00227 ; MAIN PROGRAM
                      00228 ;***************************************
                      00229 
00E7                  00230 init
                      00231         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00232 
00E9   1683 1303      00233         banksel   TRISA                 ; bank 1
                      00234         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EB   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00235         clrf      TRISA                 ; PortA used for motor
                      00236         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00237                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00238         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00239         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                      00240         movlf     b'011', TRISE         ; PortE is ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00241         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00242 
00F7   1283           00243         bcf       STATUS,RP0        ; select bank 0
00F8   0185           00244         clrf      PORTA
00F9   0186           00245         clrf      PORTB
00FA   0187           00246         clrf      PORTC
00FB   0188           00247         clrf      PORTD
00FC   0189           00248         clrf      PORTE
                      00249 
00FD   2???           00250         call      i2c_common_setup  ;Set up I2C for communication
00FE   2???           00251         call      InitLCD           ;Initialize the LCD
00FF   2???           00252         call      InitUSART         ;Set up USART for RS232
                      00253 
0100   1283           00254         bcf       STATUS,RP0        ; back to bank0
                      00255 
                      00256         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0101   01B9               M                 clrf    Table_Counter
0102   0103               M                 clrw
0103                      M loop_disp
0103   0839               M         movf    Table_Counter,W
0104   2???               M                 call    Standby_Msg
0105   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0106   1903               M                 btfsc   STATUS,Z
0107   2???               M                 goto    end_disp
0108   2???               M                 call    WR_DATA
0109   0AB9               M                 incf    Table_Counter,F
010A   2???               M                 goto    loop_disp
010B                      M end_disp
010B   2???           00257         call    Switch_Lines
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00258 
                      00259  ;--------------------------------------------------
                      00260  ;      STANDBY MODE
                      00261 
010C                  00262 waiting
                      00263         ; Display date and time.
                      00264         ; Also save starting time for log (will stop updating once we start)
                      00265         writechar "2"       ;First line shows 20**/**/**
010C   3032               M             movlw   "2"
010D   2???               M             call    WR_DATA
                      00266         writechar "0"
010E   3030               M             movlw   "0"
010F   2???               M             call    WR_DATA
                      00267         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0110   3006               M         movlw   0x06
0111   1283 1303          M         banksel 0x73
0113   00F3               M         movwf   0x73
0114   2???               M         call    read_rtc
0115   1283 1303          M         banksel 0x75
0117   0875               M         movf    0x75,w
0118   2???               M         call    rtc_convert   
0119   0877           00268                 movf    0x77,W
011A   00A9           00269         movwf    start_year10    ;Save starting year dig10
011B   2???           00270                 call    WR_DATA
011C   0878           00271                 movf    0x78,W
011D   00AA           00272         movwf    start_year1    ;Save starting year dig1
011E   2???           00273                 call    WR_DATA
                      00274                 writechar "/"
011F   302F               M             movlw   "/"
0120   2???               M             call    WR_DATA
                      00275                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0121   3005               M         movlw   0x05
0122   1283 1303          M         banksel 0x73
0124   00F3               M         movwf   0x73
0125   2???               M         call    read_rtc
0126   1283 1303          M         banksel 0x75
0128   0875               M         movf    0x75,w
0129   2???               M         call    rtc_convert   
012A   0877           00276                 movf    0x77,W
012B   00AB           00277         movwf    start_month10    ;Save starting month dig10
012C   2???           00278                 call    WR_DATA
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012D   0878           00279                 movf    0x78,W
012E   00AC           00280         movwf    start_month1    ;Save starting month dig1
012F   2???           00281                 call    WR_DATA
                      00282                 writechar       "/"
0130   302F               M             movlw   "/"
0131   2???               M             call    WR_DATA
                      00283                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0132   3004               M         movlw   0x04
0133   1283 1303          M         banksel 0x73
0135   00F3               M         movwf   0x73
0136   2???               M         call    read_rtc
0137   1283 1303          M         banksel 0x75
0139   0875               M         movf    0x75,w
013A   2???               M         call    rtc_convert   
013B   0877           00284                 movf    0x77,W
013C   00AD           00285         movwf    start_date10    ;Save starting date dig10
013D   2???           00286                 call    WR_DATA
013E   0878           00287                 movf    0x78,W
013F   00AE           00288         movwf    start_date1    ;Save starting date dig1
0140   2???           00289                 call    WR_DATA
                      00290                 spacebar
0141   3014               M             movlw   B'00010100'
0142   2???               M             call    WR_INS
                      00291                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0143   3002               M         movlw   0x02
0144   1283 1303          M         banksel 0x73
0146   00F3               M         movwf   0x73
0147   2???               M         call    read_rtc
0148   1283 1303          M         banksel 0x75
014A   0875               M         movf    0x75,w
014B   2???               M         call    rtc_convert   
014C   0877           00292                 movf    0x77,W
014D   00AF           00293         movwf    start_hour10    ;Save starting hour dig10
014E   2???           00294                 call    WR_DATA
014F   0878           00295                 movf    0x78,W
0150   00B0           00296         movwf    start_hour1    ;Save starting hour dig1
0151   2???           00297                 call    WR_DATA
                      00298                 writechar ":"
0152   303A               M             movlw   ":"
0153   2???               M             call    WR_DATA
                      00299                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0154   3001               M         movlw   0x01
0155   1283 1303          M         banksel 0x73
0157   00F3               M         movwf   0x73
0158   2???               M         call    read_rtc
0159   1283 1303          M         banksel 0x75
015B   0875               M         movf    0x75,w
015C   2???               M         call    rtc_convert   
015D   0877           00300                 movf    0x77,W
015E   00B1           00301         movwf    start_min10    ;Save starting min dig10
015F   2???           00302                 call    WR_DATA
0160   0878           00303                 movf    0x78,W
0161   00B2           00304         movwf    start_min1    ;Save starting min dig1
0162   2???           00305                 call    WR_DATA
                      00306 
                      00307         ; Move cursor back to start of second line
                      00308         ; We will update displayed time but not the word "STANDBY"
0163   30C0           00309         movlw   B'11000000'
0164   2???           00310         call    WR_INS
                      00311 
                      00312         ;Poll to start (will have to hold key for ~0.5sec)
0165   1C86           00313          btfss          PORTB,1     ;Wait until data is available from the keypad
0166   2???           00314          goto           waiting
                      00315 
0167   0E06           00316          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0168   390F           00317          andlw          0x0F
0169   00B7           00318          movwf      keytemp
016A   3A0C           00319          xorlw      0xC         ;Will be all zeros if its "START"
016B   1903           00320          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016C   2???           00321          goto       start
                      00322 
016D   0837           00323          movf       keytemp,W     ;Go to log interface
016E   3A0E           00324          xorlw      0xE
016F   1903           00325          btfsc      STATUS,Z
0170   2???           00326          goto       logs
                      00327 
0171   1886           00328          btfsc          PORTB,1     ;Wait until key is released
0172   2???           00329          goto           $-1
0173   2???           00330          goto       waiting
                      00331 
                      00332 ;-----------------------------------------------------------
                      00333 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00334 
0174                  00335 start
                      00336         ;clear numbers
0174   01B6           00337         clrf    num_FF
0175   01B4           00338         clrf    num_tot
0176   01B5           00339         clrf    num_LF
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00340 
                      00341         ;Start the timer
                      00342         movlf       D'38', count38
0177   3026               M         movlw   D'38'
0178   00C4               M         movwf   count38
0179   01B3           00343         clrf        op_time
017A   0181           00344         clrf        TMR0
017B   178B           00345         bsf         INTCON, GIE     ;enable interrupts
                      00346 
                      00347         ;Display starting message
017C   2???           00348         call        Clear_Display
                      00349         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
017D   01B9               M                 clrf    Table_Counter
017E   0103               M                 clrw
017F                      M loop_disp
017F   0839               M         movf    Table_Counter,W
0180   2???               M                 call    Start_Msg
0181   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0182   1903               M                 btfsc   STATUS,Z
0183   2???               M                 goto    end_disp
0184   2???               M                 call    WR_DATA
0185   0AB9               M                 incf    Table_Counter,F
0186   2???               M                 goto    loop_disp
0187                      M end_disp
                      00350 
                      00351 
                      00352 ;****FAKE CODE ******************************************
                      00353 ;        ; Just delaying
                      00354 ;        call        HalfS
                      00355 ;        call        HalfS
                      00356 ;
                      00357 ;       ; Putting values in manually.
                      00358 ;        movlf     B'01', state1     ;pass
                      00359 ;        movlf     B'01', state2     ;pass
                      00360 ;        movlf     B'10', state3     ;LED fail
                      00361 ;        movlf     B'01', state4     ;pass
                      00362 ;        movlf     B'01', state5     ;pass
                      00363 ;        movlf     B'01', state6     ;pass
                      00364 ;        movlf     B'01', state7     ;pass
                      00365 ;        movlf     B'11', state8     ;flicker fail
                      00366 ;        movlf     B'01', state9     ;pass
                      00367 ;        movlf     D'1', num_LF
                      00368 ;        movlf     D'1', num_FF
                      00369 ;        movlf     D'9', num_tot
                      00370 ;*******************************************************
                      00371 
                      00372 ; choose fake or real!
                      00373 
                      00374 ;******REAL CODE ******************************************
0187   01C6           00375     clrf    candle_index     ; n = 0
0188   1383           00376     bcf STATUS, IRP
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00377     movlf   0x1F, FSR       ;pointing at right before state1
0189   301F               M         movlw   0x1F
018A   0084               M         movwf   FSR
                      00378 
018B                  00379 rotate
018B   3009           00380    movlw   d'9'               ; stop operation after 10 rotations (n=10)
018C   0246           00381    subwf   candle_index,W      ; candle_index (n) is # you've already tested before rotating
018D   1903           00382    btfsc   STATUS,Z
018E   2???           00383         goto    end_operation
018F   2???           00384         call    ROTATEMOTOR
0190   0AC6           00385         incf    candle_index, F
0191   0A84           00386    incf    FSR, F
                      00387 
0192                  00388 detect_candle
                      00389         ;btfsc   present,0       ;1 if there's a light, 0 if there's no light
0192   1809           00390    btfsc   IRDATA
0193   2???           00391         goto    test_candle     ;yes candle, go test it
                      00392    movlf   D'0', INDF      ;no candle, state = not present
0194   3000               M         movlw   D'0'
0195   0080               M         movwf   INDF
0196   2???           00393         goto rotate                 ;and go try next
                      00394 
0197                  00395 test_candle
0197   0AB4           00396         incf    num_tot, F                      ; keeping track of total number of candles
0198   01C7           00397         clrf    photocount
0199   2???           00398         call    HalfS       ; delay 2 sec or whatever
019A   2???           00399    call    HalfS
019B   2???           00400    call    HalfS
019C   2???           00401    call    HalfS
                      00402         movff   photocount, photoval        ;to ensure it wont change again
019D   0847               M         movf    photocount, W
019E   00C8               M         movwf   photoval
019F                  00403 check_threshold1
019F   3007           00404     movlw    threshold1
01A0   0248           00405     subwf   photoval, W
01A1   1803           00406     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01A2   2???           00407     goto check_threshold2
                      00408     movlf   D'2', INDF      ; < threshold 1 means led fail
01A3   3002               M         movlw   D'2'
01A4   0080               M         movwf   INDF
01A5   0AB5           00409          incf    num_LF, F
01A6   2???           00410     goto    rotate
01A7                  00411 check_threshold2
01A7   3045           00412     movlw    threshold2
01A8   0248           00413     subwf   photoval, W
01A9   1803           00414     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01AA   2???           00415     goto aboveboth
                      00416     movlf   D'1', INDF      ; < threshold 2 means pass
01AB   3001               M         movlw   D'1'
01AC   0080               M         movwf   INDF
01AD   2???           00417     goto    rotate
01AE                  00418 aboveboth
                      00419    movlf   D'3', INDF       ;else flicker fail
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AE   3003               M         movlw   D'3'
01AF   0080               M         movwf   INDF
01B0   0AB6           00420    incf    num_FF, F
01B1   2???           00421    goto    rotate
                      00422  ;****************************************************
                      00423 
01B2                  00424 end_operation
01B2   2???           00425         call    ROTATEMOTOR ; rotate once more  back to starting position
                      00426 
                      00427         ; Stop the timer
01B3   138B           00428          bcf         INTCON, GIE  ;disable interrupts
                      00429 
                      00430         ;Display "complete"
01B4   2???           00431         call       Clear_Display
                      00432         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01B5   01B9               M                 clrf    Table_Counter
01B6   0103               M                 clrw
01B7                      M loop_disp
01B7   0839               M         movf    Table_Counter,W
01B8   2???               M                 call    End_Msg
01B9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01BA   1903               M                 btfsc   STATUS,Z
01BB   2???               M                 goto    end_disp
01BC   2???               M                 call    WR_DATA
01BD   0AB9               M                 incf    Table_Counter,F
01BE   2???               M                 goto    loop_disp
01BF                      M end_disp
                      00433 
                      00434         ; Shift logs 1-8 -> 2-9
                      00435         ; Then store current run as log 1
01BF                  00436 shiftlogs
01BF   1283 1703      00437         banksel     EEADR               ; bank 2
                      00438         movlf       D'111', EEADR        ; start shifting from 111->125
01C1   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C2   008D               M         movwf   EEADR
                      00439 
01C3                  00440 shiftlogs_0
01C3   1683 1703      00441         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C5   138C           00442         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C6   140C           00443         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C7   188C           00444         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01C8   2???           00445         goto        $-1
01C9   1283 1703      00446         banksel     EEADR               ;bank 2
01CB   300E           00447         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CC   078D           00448         addwf       EEADR, F
01CD   1683 1703      00449         banksel     EECON1              ;bank 3
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CF   138C           00450         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D0   150C           00451         bsf         EECON1, WREN
01D1   3055           00452         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D2   008D           00453         movwf       EECON2
01D3   30AA           00454         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D4   008D           00455         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D5   148C           00456         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D6   110C           00457         bcf         EECON1, WREN
01D7   1283 1703      00458         banksel     EEADR               ;bank 2
01D9   300E           00459         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DA   020D           00460         subwf       EEADR, W
01DB   1903           00461         btfsc       STATUS, Z
01DC   2???           00462         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00463 
01DD   1283 1303      00464         banksel op_time             ; for some reason I need to delay here
01DF   2???           00465         call   delay5ms             ; or else I get an infinite loop
01E0   1283 1703      00466         banksel EEADR
                      00467 
01E2   300F           00468         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E3   028D           00469         subwf       EEADR, F
01E4   2???           00470         goto        shiftlogs_0
                      00471 
01E5                  00472 write_log1
01E5   1283 1703      00473         banksel     EEADR
01E7   1383           00474         bcf         STATUS, IRP
                      00475         movlf       0x37, FSR           ;points to one after last important data
01E8   3037               M         movlw   0x37
01E9   0084               M         movwf   FSR
                      00476         movlf       D'14', EEADR        ;points to one after last place to write to
01EA   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EB   008D               M         movwf   EEADR
01EC                  00477 write_log1_0
01EC   1683 1703      00478         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EE   188C           00479         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01EF   2???           00480         goto        $-1
01F0   1283 1703      00481         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F2   038D           00482         decf        EEADR, F            ;writing backwords
01F3   0384           00483         decf        FSR, F
                      00484         movff       INDF, EEDATA
01F4   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F5   008C               M         movwf   EEDATA
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F6   1683 1703      00485         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F8   138C           00486         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F9   150C           00487         bsf         EECON1, WREN
01FA   3055           00488         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FB   008D           00489         movwf       EECON2
01FC   30AA           00490         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FD   008D           00491         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FE   148C           00492         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FF   110C           00493         bcf         EECON1, WREN
0200   1283 1703      00494         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0202   088D           00495         movf        EEADR, F
0203   1D03           00496         btfss       STATUS, Z           ;if EEADR = 0 we're done
0204   2???           00497         goto        write_log1_0
0205   1283           00498         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0206   1303           00499         bcf         STATUS, RP1
                      00500 
                      00501         ; Display info screens
0207   2???           00502         call       time             ; "Operation time: X sec"
0208   2???           00503         call       HalfS
0209   2???           00504         call       HalfS
020A   2???           00505         call       summary          ; "Total candles: X. Defective: Y"
020B   2???           00506         call       HalfS
020C   2???           00507         call       HalfS
020D   2???           00508         call       defective        ; "FF: a b c. LF: d e f"
                      00509 ;-----------------------------------------------------------------------
                      00510 ; Data display interface
                      00511 
020E   1C86           00512 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
020F   2???           00513          goto           $-1
                      00514 
0210   0E06           00515          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0211   390F           00516          andlw          0x0F
0212   2???           00517          call       information ;Do the right thing
                      00518 
0213   1886           00519          btfsc          PORTB,1     ;Wait until key is released
0214   2???           00520          goto           $-1
0215   2???           00521          goto       poll
                      00522 
                      00523 
                      00524 ;-------------------------------------------------------------------------
                      00525 ; LOGS INTERFACE
                      00526 ; Shows last runs of last 9 logs
                      00527 ; Access from STANDBY and return to STANDBY
                      00528 
0216                  00529 logs
0216   2???           00530     call    Clear_Display
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00531     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0217   01B9               M                 clrf    Table_Counter
0218   0103               M                 clrw
0219                      M loop_disp
0219   0839               M         movf    Table_Counter,W
021A   2???               M                 call    Logs_Msg1
021B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
021C   1903               M                 btfsc   STATUS,Z
021D   2???               M                 goto    end_disp
021E   2???               M                 call    WR_DATA
021F   0AB9               M                 incf    Table_Counter,F
0220   2???               M                 goto    loop_disp
0221                      M end_disp
0221   2???           00532     call    Switch_Lines
                      00533     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0222   01B9               M                 clrf    Table_Counter
0223   0103               M                 clrw
0224                      M loop_disp
0224   0839               M         movf    Table_Counter,W
0225   2???               M                 call    Logs_Msg2
0226   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0227   1903               M                 btfsc   STATUS,Z
0228   2???               M                 goto    end_disp
0229   2???               M                 call    WR_DATA
022A   0AB9               M                 incf    Table_Counter,F
022B   2???               M                 goto    loop_disp
022C                      M end_disp
                      00534 
022C                  00535 polling
022C   1C86           00536     btfss               PORTB,1     ;Wait until data is available from the keypad
022D   2???           00537     goto                $-1
                      00538 
022E   0E06           00539     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
022F   390F           00540     andlw               0x0F
0230   00B7           00541     movwf       keytemp     ; Save which key was pressed
                      00542 
0231                  00543 check_log1
0231   3A00           00544     xorlw   0x0         ;will be all zeros if its 1
0232   1D03           00545     btfss   STATUS,Z    ;and Z will be high, so skip
0233   2???           00546     goto    check_log2
0234   1283 1703      00547     banksel EEADR
                      00548     movlf   d'0', EEADR
0236   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0237   008D               M         movwf   EEADR
0238   2???           00549     goto    display_log
                      00550 
0239                  00551 check_log2
0239   0837           00552     movf    keytemp, W
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023A   3A01           00553     xorlw   0x1
023B   1D03           00554     btfss   STATUS,Z
023C   2???           00555     goto    check_log3
023D   1283 1703      00556     banksel EEADR
                      00557     movlf   d'14', EEADR
023F   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0240   008D               M         movwf   EEADR
0241   2???           00558     goto    display_log
                      00559 
0242                  00560 check_log3
0242   0837           00561     movf    keytemp, W
0243   3A02           00562     xorlw   0x2
0244   1D03           00563     btfss   STATUS,Z
0245   2???           00564     goto    check_log4
0246   1283 1703      00565     banksel EEADR
                      00566     movlf   d'28', EEADR
0248   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0249   008D               M         movwf   EEADR
024A   2???           00567     goto    display_log
                      00568 
024B                  00569 check_log4
024B   0837           00570     movf    keytemp, W
024C   3A04           00571     xorlw   0x4
024D   1D03           00572     btfss   STATUS,Z
024E   2???           00573     goto    check_log5
024F   1283 1703      00574     banksel EEADR
                      00575     movlf   d'42', EEADR
0251   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0252   008D               M         movwf   EEADR
0253   2???           00576     goto    display_log
                      00577 
0254                  00578 check_log5
0254   0837           00579     movf    keytemp, W
0255   3A05           00580     xorlw   0x5
0256   1D03           00581     btfss   STATUS,Z
0257   2???           00582     goto    check_log6
0258   1283 1703      00583     banksel EEADR
                      00584     movlf   d'56', EEADR
025A   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025B   008D               M         movwf   EEADR
025C   2???           00585     goto    display_log
                      00586 
025D                  00587 check_log6
025D   0837           00588     movf    keytemp, W
025E   3A06           00589     xorlw   0x6
025F   1D03           00590     btfss   STATUS,Z
0260   2???           00591     goto    check_log7
0261   1283 1703      00592     banksel EEADR
                      00593     movlf   d'70', EEADR
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0263   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0264   008D               M         movwf   EEADR
0265   2???           00594     goto    display_log
                      00595 
0266                  00596 check_log7
0266   0837           00597     movf    keytemp, W
0267   3A08           00598     xorlw   0x8
0268   1D03           00599     btfss   STATUS,Z
0269   2???           00600     goto    check_log8
026A   1283 1703      00601     banksel EEADR
                      00602     movlf   d'84', EEADR
026C   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026D   008D               M         movwf   EEADR
026E   2???           00603     goto    display_log
                      00604 
026F                  00605 check_log8
026F   0837           00606     movf    keytemp, W
0270   3A09           00607     xorlw   0x9
0271   1D03           00608     btfss   STATUS,Z
0272   2???           00609     goto    check_log9
0273   1283 1703      00610     banksel EEADR
                      00611     movlf   d'98', EEADR
0275   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0276   008D               M         movwf   EEADR
0277   2???           00612     goto    display_log
                      00613 
0278                  00614 check_log9
0278   0837           00615     movf    keytemp, W
0279   3A0A           00616     xorlw   0xA
027A   1D03           00617     btfss   STATUS,Z
027B   2???           00618     goto    check_done
027C   1283 1703      00619     banksel EEADR
                      00620     movlf   d'112', EEADR
027E   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027F   008D               M         movwf   EEADR
0280   2???           00621     goto    display_log
                      00622 
0281                  00623 check_done
0281   0837           00624     movf    keytemp, W
0282   3A0D           00625     xorlw   0xD
0283   1D03           00626     btfss   STATUS,Z
0284   2???           00627     goto    badkey
0285   2???           00628     call    Clear_Display
                      00629     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0286   01B9               M                 clrf    Table_Counter
0287   0103               M                 clrw
0288                      M loop_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0288   0839               M         movf    Table_Counter,W
0289   2???               M                 call    Standby_Msg
028A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
028B   1903               M                 btfsc   STATUS,Z
028C   2???               M                 goto    end_disp
028D   2???               M                 call    WR_DATA
028E   0AB9               M                 incf    Table_Counter,F
028F   2???               M                 goto    loop_disp
0290                      M end_disp
0290   2???           00630     call    Switch_Lines
0291   2???           00631     goto    waiting
                      00632 
0292                  00633 badkey
0292   1886           00634     btfsc               PORTB,1     ;Wait until key is released
0293   2???           00635     goto                $-1
0294   2???           00636     goto        polling
                      00637 
                      00638 
0295                  00639 display_log                 ;start in bank2
                      00640     ; move EEPROM data back to "current" data
0295   1383           00641     bcf STATUS, IRP
                      00642     movlf   0x29, FSR
0296   3029               M         movlw   0x29
0297   0084               M         movwf   FSR
0298                  00643 read_EEPROM
0298   1683 1703      00644     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029A   138C           00645     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029B   140C           00646     bsf EECON1, RD          ; read EEPROM
029C   1283 1703      00647     banksel EEDATA          ;bank 2
                      00648     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029E   080C               M         movf    EEDATA, W
029F   0080               M         movwf   INDF
02A0   0A84           00649     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A1   0A8D           00650     incf    EEADR, F
02A2   3037           00651     movlw   0x37            ;done if FSR = 0x37
02A3   0204           00652     subwf   FSR, W
02A4   1D03           00653     btfss   STATUS, Z
02A5   2???           00654     goto    read_EEPROM
                      00655 
                      00656     ;display that shit
02A6   1283 1303      00657     banksel Table_Counter   ; bank0
02A8   2???           00658     call    Clear_Display
                      00659     ;if first data is 0xFF (no log) just display "none"
02A9   30FF           00660     movlw   0xFF
02AA   0229           00661     subwf   start_year10, W
02AB   1D03           00662     btfss   STATUS, Z
02AC   2???           00663     goto yes_log
02AD                  00664 no_log
                      00665     Display None
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02AD   01B9               M                 clrf    Table_Counter
02AE   0103               M                 clrw
02AF                      M loop_disp
02AF   0839               M         movf    Table_Counter,W
02B0   2???               M                 call    None
02B1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02B2   1903               M                 btfsc   STATUS,Z
02B3   2???               M                 goto    end_disp
02B4   2???               M                 call    WR_DATA
02B5   0AB9               M                 incf    Table_Counter,F
02B6   2???               M                 goto    loop_disp
02B7                      M end_disp
02B7   2???           00666     call    HalfS
02B8   2???           00667     goto    logs
                      00668     ;else display the log
02B9                  00669 yes_log
                      00670     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02B9   01B9               M                 clrf    Table_Counter
02BA   0103               M                 clrw
02BB                      M loop_disp
02BB   0839               M         movf    Table_Counter,W
02BC   2???               M                 call    Op_at
02BD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02BE   1903               M                 btfsc   STATUS,Z
02BF   2???               M                 goto    end_disp
02C0   2???               M                 call    WR_DATA
02C1   0AB9               M                 incf    Table_Counter,F
02C2   2???               M                 goto    loop_disp
02C3                      M end_disp
02C3   2???           00671     call    Switch_Lines
                      00672     writechar    "2"
02C4   3032               M             movlw   "2"
02C5   2???               M             call    WR_DATA
                      00673     writechar    "0"
02C6   3030               M             movlw   "0"
02C7   2???               M             call    WR_DATA
                      00674     writeASC   start_year10
02C8   0829               M             movf    start_year10, W
02C9   2???               M             call WR_DATA
                      00675     writeASC   start_year1
02CA   082A               M             movf    start_year1, W
02CB   2???               M             call WR_DATA
                      00676     writechar   "/"
02CC   302F               M             movlw   "/"
02CD   2???               M             call    WR_DATA
                      00677     writeASC   start_month10
02CE   082B               M             movf    start_month10, W
02CF   2???               M             call WR_DATA
                      00678     writeASC   start_month1
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D0   082C               M             movf    start_month1, W
02D1   2???               M             call WR_DATA
                      00679     writechar   "/"
02D2   302F               M             movlw   "/"
02D3   2???               M             call    WR_DATA
                      00680     writeASC   start_date10
02D4   082D               M             movf    start_date10, W
02D5   2???               M             call WR_DATA
                      00681     writeASC   start_date1
02D6   082E               M             movf    start_date1, W
02D7   2???               M             call WR_DATA
                      00682     writechar   " "
02D8   3020               M             movlw   " "
02D9   2???               M             call    WR_DATA
                      00683     writeASC   start_hour10
02DA   082F               M             movf    start_hour10, W
02DB   2???               M             call WR_DATA
                      00684     writeASC   start_hour1
02DC   0830               M             movf    start_hour1, W
02DD   2???               M             call WR_DATA
                      00685     writechar   ":"
02DE   303A               M             movlw   ":"
02DF   2???               M             call    WR_DATA
                      00686     writeASC  start_min10
02E0   0831               M             movf    start_min10, W
02E1   2???               M             call WR_DATA
                      00687     writeASC   start_min1
02E2   0832               M             movf    start_min1, W
02E3   2???               M             call WR_DATA
02E4   2???           00688     call    HalfS
02E5   2???           00689     call    HalfS
02E6   2???           00690     call    time
02E7   2???           00691     call    HalfS
02E8   2???           00692     call    HalfS
02E9   2???           00693     call    summary
02EA   2???           00694     call    HalfS
02EB   2???           00695     call    HalfS
                      00696     ;option to Export
02EC   2???           00697     call    Clear_Display
                      00698     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02ED   01B9               M                 clrf    Table_Counter
02EE   0103               M                 clrw
02EF                      M loop_disp
02EF   0839               M         movf    Table_Counter,W
02F0   2???               M                 call    Logs_Msg3
02F1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02F2   1903               M                 btfsc   STATUS,Z
02F3   2???               M                 goto    end_disp
02F4   2???               M                 call    WR_DATA
02F5   0AB9               M                 incf    Table_Counter,F
02F6   2???               M                 goto    loop_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F7                      M end_disp
02F7   2???           00699     call    Switch_Lines
                      00700     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02F8   01B9               M                 clrf    Table_Counter
02F9   0103               M                 clrw
02FA                      M loop_disp
02FA   0839               M         movf    Table_Counter,W
02FB   2???               M                 call    Logs_Msg4
02FC   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FD   1903               M                 btfsc   STATUS,Z
02FE   2???               M                 goto    end_disp
02FF   2???               M                 call    WR_DATA
0300   0AB9               M                 incf    Table_Counter,F
0301   2???               M                 goto    loop_disp
0302                      M end_disp
                      00701 
0302                  00702 wanna_export
0302   1C86           00703     btfss               PORTB,1     ;Wait until data is available from the keypad
0303   2???           00704     goto                $-1
                      00705 
0304   0E06           00706     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0305   390F           00707     andlw               0x0F
0306   00B7           00708     movwf       keytemp     ; Save which key was pressed
                      00709 
0307                  00710 check_wanna
0307   0837           00711     movf    keytemp, W
0308   3A0F           00712     xorlw   0xF
0309   1D03           00713     btfss   STATUS,Z
030A   2???           00714     goto    check_nothx
030B   2???           00715     call    export
030C   2???           00716     goto    logs
                      00717 
030D                  00718 check_nothx
030D   0837           00719     movf    keytemp, W
030E   3A0E           00720     xorlw   0xE
030F   1D03           00721     btfss   STATUS,Z
0310   2???           00722     goto    check_immapeace
0311   2???           00723     goto    logs
                      00724 
0312                  00725 check_immapeace
0312   0837           00726     movf    keytemp, W
0313   3A0D           00727     xorlw   0xD
0314   1D03           00728     btfss   STATUS,Z
0315   2???           00729     goto    badkeyagain
0316   2???           00730     call    Clear_Display
                      00731     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0317   01B9               M                 clrf    Table_Counter
0318   0103               M                 clrw
0319                      M loop_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0319   0839               M         movf    Table_Counter,W
031A   2???               M                 call    Standby_Msg
031B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
031C   1903               M                 btfsc   STATUS,Z
031D   2???               M                 goto    end_disp
031E   2???               M                 call    WR_DATA
031F   0AB9               M                 incf    Table_Counter,F
0320   2???               M                 goto    loop_disp
0321                      M end_disp
0321   2???           00732     call    Switch_Lines
0322   2???           00733     goto    waiting
                      00734 
0323                  00735 badkeyagain
0323   1886           00736     btfsc               PORTB,1     ;Wait until key is released
0324   2???           00737     goto                $-1
0325   2???           00738     goto        wanna_export
                      00739 
                      00740 ; END OF MAIN PROGRAM
                      00741 ;------------------------------------------------------------
                      00742 
                      00743 ;***************************************
                      00744 ; ROTATE MOTOR ROUTINE
                      00745 ; Rotates motor 36deg. (20 steps)
                      00746 ;***************************************
                      00747 
0326                  00748 ROTATEMOTOR
                      00749     movlf   d'5', motor_count
0326   3005               M         movlw   d'5'
0327   00C9               M         movwf   motor_count
0328                  00750 start_rot
                      00751     movlf   b'1001', PORTA
0328   3009               M         movlw   b'1001'
0329   0085               M         movwf   PORTA
032A   2???           00752     call    motor_del
                      00753     movlf   b'1000', PORTA
032B   3008               M         movlw   b'1000'
032C   0085               M         movwf   PORTA
032D   2???           00754     call    motor_del
                      00755     movlf   b'1010', PORTA
032E   300A               M         movlw   b'1010'
032F   0085               M         movwf   PORTA
0330   2???           00756     call    motor_del
                      00757     movlf   b'0010', PORTA
0331   3002               M         movlw   b'0010'
0332   0085               M         movwf   PORTA
0333   2???           00758     call    motor_del
                      00759     movlf   b'0110', PORTA
0334   3006               M         movlw   b'0110'
0335   0085               M         movwf   PORTA
0336   2???           00760     call    motor_del
                      00761     movlf   b'0100', PORTA
0337   3004               M         movlw   b'0100'
0338   0085               M         movwf   PORTA
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0339   2???           00762     call    motor_del
                      00763     movlf   b'0101', PORTA
033A   3005               M         movlw   b'0101'
033B   0085               M         movwf   PORTA
033C   2???           00764     call    motor_del
                      00765     movlf   b'0001', PORTA
033D   3001               M         movlw   b'0001'
033E   0085               M         movwf   PORTA
033F   2???           00766     call    motor_del
                      00767 
Message[305]: Using default destination of 1 (file).
0340   0BC9           00768     decfsz  motor_count
0341   2???           00769     goto    start_rot
0342   0185           00770     clrf    PORTA
0343   0008           00771     return
                      00772 
                      00773 ;***************************************
                      00774 ; DATA DISPLAY ROUTINE
                      00775 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00776 ; Determines which key it was and displays appropriate info / branch
                      00777 ;***************************************
                      00778 
0344                  00779 information
0344   00B7           00780     movwf   keytemp             ; Save which key was pressed
                      00781 
0345                  00782 check_1
0345   3A00           00783     xorlw   0x0         ;will be all zeros if its 1
0346   1D03           00784     btfss   STATUS,Z    ;and Z will be high, so skip
0347   2???           00785     goto    check_2
0348   2???           00786     call    Clear_Display
                      00787     writechar "1"
0349   3031               M             movlw   "1"
034A   2???               M             call    WR_DATA
034B   0820           00788     movf    state1, W
034C   2???           00789     call    display_state
034D   0008           00790     return
                      00791 
034E                  00792 check_2
034E   0837           00793     movf    keytemp, W
034F   3A01           00794     xorlw   0x1
0350   1D03           00795     btfss   STATUS,Z
0351   2???           00796     goto    check_3
0352   2???           00797     call    Clear_Display
                      00798     writechar "2"
0353   3032               M             movlw   "2"
0354   2???               M             call    WR_DATA
0355   0821           00799     movf    state2, W
0356   2???           00800     call    display_state
0357   0008           00801     return
                      00802 
0358                  00803 check_3
0358   0837           00804     movf    keytemp, W
0359   3A02           00805     xorlw   0x2
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

035A   1D03           00806     btfss   STATUS,Z
035B   2???           00807     goto    check_4
035C   2???           00808     call    Clear_Display
                      00809     writechar "3"
035D   3033               M             movlw   "3"
035E   2???               M             call    WR_DATA
035F   0822           00810     movf    state3, W
0360   2???           00811     call    display_state
0361   0008           00812     return
                      00813 
0362                  00814 check_4
0362   0837           00815     movf    keytemp, W
0363   3A04           00816     xorlw   0x4
0364   1D03           00817     btfss   STATUS,Z
0365   2???           00818     goto    check_5
0366   2???           00819     call    Clear_Display
                      00820     writechar "4"
0367   3034               M             movlw   "4"
0368   2???               M             call    WR_DATA
0369   0823           00821     movf    state4, W
036A   2???           00822     call    display_state
036B   0008           00823     return
                      00824 
036C                  00825 check_5
036C   0837           00826     movf    keytemp, W
036D   3A05           00827     xorlw   0x5
036E   1D03           00828     btfss   STATUS,Z
036F   2???           00829     goto    check_6
0370   2???           00830     call    Clear_Display
                      00831     writechar "5"
0371   3035               M             movlw   "5"
0372   2???               M             call    WR_DATA
0373   0824           00832     movf    state5, W
0374   2???           00833     call    display_state
0375   0008           00834     return
                      00835 
0376                  00836 check_6
0376   0837           00837     movf    keytemp, W
0377   3A06           00838     xorlw   0x6
0378   1D03           00839     btfss   STATUS,Z
0379   2???           00840     goto    check_7
037A   2???           00841     call    Clear_Display
                      00842     writechar "6"
037B   3036               M             movlw   "6"
037C   2???               M             call    WR_DATA
037D   0825           00843     movf    state6, W
037E   2???           00844     call    display_state
037F   0008           00845     return
                      00846 
0380                  00847 check_7
0380   0837           00848     movf    keytemp, W
0381   3A08           00849     xorlw   0x8
0382   1D03           00850     btfss   STATUS,Z
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0383   2???           00851     goto    check_8
0384   2???           00852     call    Clear_Display
                      00853     writechar "7"
0385   3037               M             movlw   "7"
0386   2???               M             call    WR_DATA
0387   0826           00854     movf    state7, W
0388   2???           00855     call    display_state
0389   0008           00856     return
                      00857 
038A                  00858 check_8
038A   0837           00859     movf    keytemp, W
038B   3A09           00860     xorlw   0x9
038C   1D03           00861     btfss   STATUS,Z
038D   2???           00862     goto    check_9
038E   2???           00863     call    Clear_Display
                      00864     writechar "8"
038F   3038               M             movlw   "8"
0390   2???               M             call    WR_DATA
0391   0827           00865     movf    state8, W
0392   2???           00866     call    display_state
0393   0008           00867     return
                      00868 
0394                  00869 check_9
0394   0837           00870     movf    keytemp, W
0395   3A0A           00871     xorlw   0xA
0396   1D03           00872     btfss   STATUS,Z
0397   2???           00873     goto    check_summary
0398   2???           00874     call    Clear_Display
                      00875     writechar "9"
0399   3039               M             movlw   "9"
039A   2???               M             call    WR_DATA
039B   0828           00876     movf    state9, W
039C   2???           00877     call    display_state
039D   0008           00878     return
                      00879 
039E                  00880 check_summary
039E   0837           00881     movf    keytemp, W
039F   3A03           00882     xorlw   0x3
03A0   1D03           00883     btfss   STATUS,Z
03A1   2???           00884     goto    check_defective
03A2   2???           00885     call    summary
03A3   0008           00886     return
                      00887 
03A4                  00888 check_defective
03A4   0837           00889     movf    keytemp, W
03A5   3A07           00890     xorlw   0x7
03A6   1D03           00891     btfss   STATUS,Z
03A7   2???           00892     goto    check_time
03A8   2???           00893     call    defective
03A9   0008           00894     return
                      00895 
03AA                  00896 check_time
03AA   0837           00897     movf    keytemp, W
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AB   3A0B           00898     xorlw   0xB
03AC   1D03           00899     btfss   STATUS,Z
03AD   2???           00900     goto    check_export
03AE   2???           00901     call    time
03AF   0008           00902     return
                      00903 
03B0                  00904 check_export
03B0   0837           00905     movf    keytemp, W
03B1   3A0F           00906     xorlw   0xF
03B2   1D03           00907     btfss   STATUS,Z
03B3   2???           00908     goto    check_standby       ;or do you wanna allow to check logs?
03B4   2???           00909     call    export
03B5   0008           00910     return
                      00911 
                      00912 ;check_logs
                      00913 ;    movf    keytemp, W
                      00914 ;    xorlw   0xE
                      00915 ;    btfss   STATUS,Z
                      00916 ;    goto    check_standby
                      00917 ;    goto    logs
                      00918 
03B6                  00919 check_standby
03B6   0837           00920     movf    keytemp, W
03B7   3A0D           00921     xorlw   0xD
03B8   1D03           00922     btfss   STATUS,Z
03B9   2???           00923     goto    check_start
03BA   2???           00924     call    Clear_Display
                      00925     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03BB   01B9               M                 clrf    Table_Counter
03BC   0103               M                 clrw
03BD                      M loop_disp
03BD   0839               M         movf    Table_Counter,W
03BE   2???               M                 call    Standby_Msg
03BF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03C0   1903               M                 btfsc   STATUS,Z
03C1   2???               M                 goto    end_disp
03C2   2???               M                 call    WR_DATA
03C3   0AB9               M                 incf    Table_Counter,F
03C4   2???               M                 goto    loop_disp
03C5                      M end_disp
03C5   2???           00926     call    Switch_Lines
03C6   2???           00927     goto    waiting
                      00928 
03C7                  00929 check_start
03C7   0837           00930     movf    keytemp, W
03C8   3A0C           00931     xorlw   0xC
03C9   1D03           00932     btfss   STATUS,Z
03CA   2???           00933     goto    default_key
03CB   2???           00934     goto    start
                      00935 
03CC                  00936 default_key         ; will never get here
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03CC   0008           00937     return
                      00938 
                      00939 
                      00940 ;Display state subroutine
                      00941 ;stateN is in W
03CD                  00942 display_state
03CD   00B8           00943     movwf  statetemp    ; save stateN
                      00944 
03CE                  00945 check_none
03CE   3A00           00946     xorlw   0x0
03CF   1D03           00947     btfss   STATUS,Z
03D0   2???           00948     goto    check_pass
                      00949     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03D1   01B9               M                 clrf    Table_Counter
03D2   0103               M                 clrw
03D3                      M loop_disp
03D3   0839               M         movf    Table_Counter,W
03D4   2???               M                 call    Not_present
03D5   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03D6   1903               M                 btfsc   STATUS,Z
03D7   2???               M                 goto    end_disp
03D8   2???               M                 call    WR_DATA
03D9   0AB9               M                 incf    Table_Counter,F
03DA   2???               M                 goto    loop_disp
03DB                      M end_disp
03DB   0008           00950     return
                      00951 
03DC                  00952 check_pass
03DC   0838           00953     movf    statetemp, W
03DD   3A01           00954     xorlw   0x1
03DE   1D03           00955     btfss   STATUS,Z
03DF   2???           00956     goto    check_LED
                      00957     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03E0   01B9               M                 clrf    Table_Counter
03E1   0103               M                 clrw
03E2                      M loop_disp
03E2   0839               M         movf    Table_Counter,W
03E3   2???               M                 call    Pass
03E4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E5   1903               M                 btfsc   STATUS,Z
03E6   2???               M                 goto    end_disp
03E7   2???               M                 call    WR_DATA
03E8   0AB9               M                 incf    Table_Counter,F
03E9   2???               M                 goto    loop_disp
03EA                      M end_disp
03EA   0008           00958     return
                      00959 
03EB                  00960 check_LED
03EB   0838           00961     movf    statetemp, W
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03EC   3A02           00962     xorlw   0x2
03ED   1D03           00963     btfss   STATUS,Z
03EE   2???           00964     goto    check_flick
                      00965     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03EF   01B9               M                 clrf    Table_Counter
03F0   0103               M                 clrw
03F1                      M loop_disp
03F1   0839               M         movf    Table_Counter,W
03F2   2???               M                 call    LED_fail
03F3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F4   1903               M                 btfsc   STATUS,Z
03F5   2???               M                 goto    end_disp
03F6   2???               M                 call    WR_DATA
03F7   0AB9               M                 incf    Table_Counter,F
03F8   2???               M                 goto    loop_disp
03F9                      M end_disp
03F9   0008           00966     return
                      00967 
03FA                  00968 check_flick
03FA   0838           00969     movf    statetemp, W
03FB   3A03           00970     xorlw   0x3
03FC   1D03           00971     btfss   STATUS,Z
03FD   2???           00972     goto    default_state
                      00973     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03FE   01B9               M                 clrf    Table_Counter
03FF   0103               M                 clrw
0400                      M loop_disp
0400   0839               M         movf    Table_Counter,W
0401   2???               M                 call    Flick_fail
0402   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0403   1903               M                 btfsc   STATUS,Z
0404   2???               M                 goto    end_disp
0405   2???               M                 call    WR_DATA
0406   0AB9               M                 incf    Table_Counter,F
0407   2???               M                 goto    loop_disp
0408                      M end_disp
0408   0008           00974     return
                      00975 
0409                  00976 default_state   ; should never get here
0409   0008           00977     return
                      00978 
                      00979 ; Summary Subroutine
                      00980 ; Displays total number of candles and number of defective candles
                      00981 ; Reads data from num_tot, num_LF, num_FF
040A                  00982 summary
040A   2???           00983     call            Clear_Display
                      00984     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040B   01B9               M                 clrf    Table_Counter
040C   0103               M                 clrw
040D                      M loop_disp
040D   0839               M         movf    Table_Counter,W
040E   2???               M                 call    Total_Msg
040F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0410   1903               M                 btfsc   STATUS,Z
0411   2???               M                 goto    end_disp
0412   2???               M                 call    WR_DATA
0413   0AB9               M                 incf    Table_Counter,F
0414   2???               M                 goto    loop_disp
0415                      M end_disp
                      00985     writeBCD        num_tot
0415   0834               M             movf    num_tot, W
0416   3E30               M             addlw   B'00110000'
0417   2???               M             call WR_DATA
0418   2???           00986     call            Switch_Lines
                      00987     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0419   01B9               M                 clrf    Table_Counter
041A   0103               M                 clrw
041B                      M loop_disp
041B   0839               M         movf    Table_Counter,W
041C   2???               M                 call    LF
041D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
041E   1903               M                 btfsc   STATUS,Z
041F   2???               M                 goto    end_disp
0420   2???               M                 call    WR_DATA
0421   0AB9               M                 incf    Table_Counter,F
0422   2???               M                 goto    loop_disp
0423                      M end_disp
                      00988     writeBCD        num_LF
0423   0835               M             movf    num_LF, W
0424   3E30               M             addlw   B'00110000'
0425   2???               M             call WR_DATA
                      00989     spacebar
0426   3014               M             movlw   B'00010100'
0427   2???               M             call    WR_INS
                      00990     spacebar
0428   3014               M             movlw   B'00010100'
0429   2???               M             call    WR_INS
                      00991     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
042A   01B9               M                 clrf    Table_Counter
042B   0103               M                 clrw
042C                      M loop_disp
042C   0839               M         movf    Table_Counter,W
042D   2???               M                 call    FF
042E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
042F   1903               M                 btfsc   STATUS,Z
0430   2???               M                 goto    end_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0431   2???               M                 call    WR_DATA
0432   0AB9               M                 incf    Table_Counter,F
0433   2???               M                 goto    loop_disp
0434                      M end_disp
                      00992     writeBCD        num_FF
0434   0836               M             movf    num_FF, W
0435   3E30               M             addlw   B'00110000'
0436   2???               M             call WR_DATA
0437   0008           00993     return
                      00994 
                      00995 ; Defective candles Subroutine
                      00996 ; Displays index of each defective candle (LF or FF)
                      00997 ; Reads data from state1 - state9
0438                  00998 defective
0438   2???           00999     call            Clear_Display
                      01000 
0439   01C5           01001     clrf    morethansix
043A   3007           01002     movlw   d'7'
043B   0235           01003     subwf   num_LF, W
043C   1803           01004     btfsc   STATUS, C       ;if  num_LF < 7, C = 0
043D   1445           01005     bsf     morethansix,0
043E   3007           01006     movlw   d'7'
043F   0236           01007     subwf   num_FF, W
0440   1803           01008     btfsc   STATUS, C       ;if  num_FF < 7, C = 0
0441   1445           01009     bsf     morethansix,0
                      01010 
                      01011     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0442   01B9               M                 clrf    Table_Counter
0443   0103               M                 clrw
0444                      M loop_disp
0444   0839               M         movf    Table_Counter,W
0445   2???               M                 call    LF
0446   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0447   1903               M                 btfsc   STATUS,Z
0448   2???               M                 goto    end_disp
0449   2???               M                 call    WR_DATA
044A   0AB9               M                 incf    Table_Counter,F
044B   2???               M                 goto    loop_disp
044C                      M end_disp
044C   08B5           01012     movf            num_LF, F
044D   1D03           01013     btfss           STATUS,Z         ;if none LF, just say "none"
044E   2???           01014     goto            check_LF
                      01015     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
044F   01B9               M                 clrf    Table_Counter
0450   0103               M                 clrw
0451                      M loop_disp
0451   0839               M         movf    Table_Counter,W
0452   2???               M                 call    None
0453   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0454   1903               M                 btfsc   STATUS,Z
0455   2???               M                 goto    end_disp
0456   2???               M                 call    WR_DATA
0457   0AB9               M                 incf    Table_Counter,F
0458   2???               M                 goto    loop_disp
0459                      M end_disp
0459   2???           01016     goto            now_FF
                      01017 
045A                  01018 check_LF                            ; list all LF candles
045A   3002           01019     movlw           B'00000010'
045B   2???           01020     call            check_for_fail
                      01021 
045C                  01022 now_FF                              ; now look at FF
045C   2???           01023     call            Switch_Lines
                      01024     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
045D   01B9               M                 clrf    Table_Counter
045E   0103               M                 clrw
045F                      M loop_disp
045F   0839               M         movf    Table_Counter,W
0460   2???               M                 call    FF
0461   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0462   1903               M                 btfsc   STATUS,Z
0463   2???               M                 goto    end_disp
0464   2???               M                 call    WR_DATA
0465   0AB9               M                 incf    Table_Counter,F
0466   2???               M                 goto    loop_disp
0467                      M end_disp
0467   08B6           01025     movf            num_FF, F
0468   1D03           01026     btfss           STATUS,Z         ;if none FF, just say "none"
0469   2???           01027     goto            check_FF
                      01028     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
046A   01B9               M                 clrf    Table_Counter
046B   0103               M                 clrw
046C                      M loop_disp
046C   0839               M         movf    Table_Counter,W
046D   2???               M                 call    None
046E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
046F   1903               M                 btfsc   STATUS,Z
0470   2???               M                 goto    end_disp
0471   2???               M                 call    WR_DATA
0472   0AB9               M                 incf    Table_Counter,F
0473   2???               M                 goto    loop_disp
0474                      M end_disp
0474   0008           01029     return
                      01030 
0475                  01031 check_FF                            ; list all FF candles
0475   3003           01032     movlw           B'00000011'
0476   2???           01033     call            check_for_fail
0477   0008           01034     return
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01035 
0478                  01036 check_for_fail  ;lists all candles that have status currently in W "stateX"
0478   00B8           01037     movwf   statetemp
                      01038         movlf   D'0', candle_index
0479   3000               M         movlw   D'0'
047A   00C6               M         movwf   candle_index
047B   1383           01039         bcf     STATUS, IRP
                      01040         movlf   0x1F, FSR           ;index of right before state1
047C   301F               M         movlw   0x1F
047D   0084               M         movwf   FSR
047E                  01041 check_next
047E   3009           01042         movlw   D'9'                ;exit loop if at 9
047F   0246           01043         subwf   candle_index, W
0480   1803           01044         btfsc   STATUS,W
0481   2???           01045         goto    end_check_fail
0482   0A84           01046         incf    FSR,F               ; increment
0483   0AC6           01047         incf    candle_index,F
0484   0838           01048         movf    statetemp, W            ;see if stateN = stateX
0485   0200           01049         subwf   INDF, W
0486   1D03           01050         btfss   STATUS, Z
0487   2???           01051         goto    check_next              ;if not, go to next
                      01052         writeBCD        candle_index    ;if so, write down the number
0488   0846               M             movf    candle_index, W
0489   3E30               M             addlw   B'00110000'
048A   2???               M             call WR_DATA
048B   1845           01053     btfsc   morethansix,0       ;don't write a space if need more than six numbers
048C   2???           01054     goto    more_than_six
                      01055         spacebar
048D   3014               M             movlw   B'00010100'
048E   2???               M             call    WR_INS
048F                  01056 more_than_six
048F   2???           01057         goto check_next
0490                  01058 end_check_fail
0490   0008           01059         return
                      01060 
                      01061 ; Time subroutine
                      01062 ; Right now this takes the time in seconds as a binary number in op_time
                      01063 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01064 ; incremented every second. However I may just take the stop time - start time
                      01065 ; from the RTC data so this might change a lot.
0491                  01066 time
0491   2???           01067     call    Clear_Display
                      01068     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0492   01B9               M                 clrf    Table_Counter
0493   0103               M                 clrw
0494                      M loop_disp
0494   0839               M         movf    Table_Counter,W
0495   2???               M                 call    Time_Msg
0496   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0497   1903               M                 btfsc   STATUS,Z
0498   2???               M                 goto    end_disp
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0499   2???               M                 call    WR_DATA
049A   0AB9               M                 incf    Table_Counter,F
049B   2???               M                 goto    loop_disp
049C                      M end_disp
049C   2???           01069     call    Switch_Lines
049D   0833           01070     movf    op_time, W
049E   2???           01071     call    big_number
049F   08C0           01072     movf    huns, F
04A0   1903           01073     btfsc   STATUS,Z        ;if huns is zero don't display it
04A1   2???           01074     goto    no_huns
                      01075     writeBCD    huns
04A2   0840               M             movf    huns, W
04A3   3E30               M             addlw   B'00110000'
04A4   2???               M             call WR_DATA
04A5                  01076 no_huns
04A5   08C1           01077     movf    tens, F
04A6   1903           01078     btfsc   STATUS,Z        ;if tens is zero don't display it
04A7   2???           01079     goto    no_tens
                      01080     writeBCD    tens
04A8   0841               M             movf    tens, W
04A9   3E30               M             addlw   B'00110000'
04AA   2???               M             call WR_DATA
04AB                  01081 no_tens
                      01082     writeBCD    ones
04AB   0842               M             movf    ones, W
04AC   3E30               M             addlw   B'00110000'
04AD   2???               M             call WR_DATA
                      01083     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04AE   01B9               M                 clrf    Table_Counter
04AF   0103               M                 clrw
04B0                      M loop_disp
04B0   0839               M         movf    Table_Counter,W
04B1   2???               M                 call    Seconds
04B2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04B3   1903               M                 btfsc   STATUS,Z
04B4   2???               M                 goto    end_disp
04B5   2???               M                 call    WR_DATA
04B6   0AB9               M                 incf    Table_Counter,F
04B7   2???               M                 goto    loop_disp
04B8                      M end_disp
04B8   0008           01084     return
                      01085 
                      01086 ; Export subroutine
                      01087 ; Exports data from current run to hyperterminal
                      01088 ; reads start time and num_tot/num_ff/num_lf data
04B9                  01089 export
                      01090     printchar   0x7       ;makes a noise on the PC
04B9   3007               M             movlw   0x7
04BA   2???               M             call    writetoPC
                      01091     printchar   0xD       ;go back to left edge
04BB   300D               M             movlw   0xD
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BC   2???               M             call    writetoPC
                      01092     printchar   "T"
04BD   3054               M             movlw   "T"
04BE   2???               M             call    writetoPC
                      01093     printchar   "e"
04BF   3065               M             movlw   "e"
04C0   2???               M             call    writetoPC
                      01094     printchar   "s"
04C1   3073               M             movlw   "s"
04C2   2???               M             call    writetoPC
                      01095     printchar   "t"
04C3   3074               M             movlw   "t"
04C4   2???               M             call    writetoPC
                      01096     printchar   " "
04C5   3020               M             movlw   " "
04C6   2???               M             call    writetoPC
                      01097     printchar   "a"
04C7   3061               M             movlw   "a"
04C8   2???               M             call    writetoPC
                      01098     printchar   "t"
04C9   3074               M             movlw   "t"
04CA   2???               M             call    writetoPC
                      01099     printchar   ":"
04CB   303A               M             movlw   ":"
04CC   2???               M             call    writetoPC
                      01100     printchar   " "
04CD   3020               M             movlw   " "
04CE   2???               M             call    writetoPC
                      01101     printchar   "2"
04CF   3032               M             movlw   "2"
04D0   2???               M             call    writetoPC
                      01102     printchar   "0"
04D1   3030               M             movlw   "0"
04D2   2???               M             call    writetoPC
                      01103     printASC   start_year10
04D3   1283 1303          M             banksel start_year10
04D5   0829               M             movf    start_year10,W
04D6   2???               M             call    writetoPC
                      01104     printASC   start_year1
04D7   1283 1303          M             banksel start_year1
04D9   082A               M             movf    start_year1,W
04DA   2???               M             call    writetoPC
                      01105     printchar   "/"
04DB   302F               M             movlw   "/"
04DC   2???               M             call    writetoPC
                      01106     printASC   start_month10
04DD   1283 1303          M             banksel start_month10
04DF   082B               M             movf    start_month10,W
04E0   2???               M             call    writetoPC
                      01107     printASC   start_month1
04E1   1283 1303          M             banksel start_month1
04E3   082C               M             movf    start_month1,W
04E4   2???               M             call    writetoPC
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01108     printchar   "/"
04E5   302F               M             movlw   "/"
04E6   2???               M             call    writetoPC
                      01109     printASC   start_date10
04E7   1283 1303          M             banksel start_date10
04E9   082D               M             movf    start_date10,W
04EA   2???               M             call    writetoPC
                      01110     printASC   start_date1
04EB   1283 1303          M             banksel start_date1
04ED   082E               M             movf    start_date1,W
04EE   2???               M             call    writetoPC
                      01111     printchar   " "
04EF   3020               M             movlw   " "
04F0   2???               M             call    writetoPC
                      01112     printASC   start_hour10
04F1   1283 1303          M             banksel start_hour10
04F3   082F               M             movf    start_hour10,W
04F4   2???               M             call    writetoPC
                      01113     printASC   start_hour1
04F5   1283 1303          M             banksel start_hour1
04F7   0830               M             movf    start_hour1,W
04F8   2???               M             call    writetoPC
                      01114     printchar   ":"
04F9   303A               M             movlw   ":"
04FA   2???               M             call    writetoPC
                      01115     printASC   start_min10
04FB   1283 1303          M             banksel start_min10
04FD   0831               M             movf    start_min10,W
04FE   2???               M             call    writetoPC
                      01116     printASC   start_min1
04FF   1283 1303          M             banksel start_min1
0501   0832               M             movf    start_min1,W
0502   2???               M             call    writetoPC
                      01117     newline
                          M             printchar   0xA ;changes line
0503   300A               M             movlw   0xA
0504   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0505   300D               M             movlw   0xD
0506   2???               M             call    writetoPC
                      01118     printchar   "T"
0507   3054               M             movlw   "T"
0508   2???               M             call    writetoPC
                      01119     printchar   "i"
0509   3069               M             movlw   "i"
050A   2???               M             call    writetoPC
                      01120     printchar   "m"
050B   306D               M             movlw   "m"
050C   2???               M             call    writetoPC
                      01121     printchar   "e"
050D   3065               M             movlw   "e"
050E   2???               M             call    writetoPC
                      01122     printchar   ":"
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

050F   303A               M             movlw   ":"
0510   2???               M             call    writetoPC
                      01123     printchar   " "
0511   3020               M             movlw   " "
0512   2???               M             call    writetoPC
                      01124     printchar   " "
0513   3020               M             movlw   " "
0514   2???               M             call    writetoPC
                      01125     printchar   " "
0515   3020               M             movlw   " "
0516   2???               M             call    writetoPC
                      01126     printchar   " "
0517   3020               M             movlw   " "
0518   2???               M             call    writetoPC
0519   1283 1303      01127     banksel huns
051B   08C0           01128     movf    huns, F
051C   1903           01129     btfsc   STATUS,Z        ;if huns is zero don't display it
051D   2???           01130     goto    nohuns
                      01131     printBCD   huns
051E   1283 1303          M             banksel huns
0520   0840               M             movf    huns, W
0521   3E30               M             addlw   0x30
0522   2???               M             call    writetoPC
0523                  01132 nohuns
0523   1283 1303      01133     banksel tens
0525   08C1           01134     movf    tens, F
0526   1903           01135     btfsc   STATUS,Z        ;if tens is zero don't display it
0527   2???           01136     goto    notens
                      01137     printBCD   tens
0528   1283 1303          M             banksel tens
052A   0841               M             movf    tens, W
052B   3E30               M             addlw   0x30
052C   2???               M             call    writetoPC
052D                  01138 notens
                      01139     printBCD   ones
052D   1283 1303          M             banksel ones
052F   0842               M             movf    ones, W
0530   3E30               M             addlw   0x30
0531   2???               M             call    writetoPC
                      01140     printchar   " "
0532   3020               M             movlw   " "
0533   2???               M             call    writetoPC
                      01141     printchar   "s"
0534   3073               M             movlw   "s"
0535   2???               M             call    writetoPC
                      01142     printchar   "e"
0536   3065               M             movlw   "e"
0537   2???               M             call    writetoPC
                      01143     printchar   "c"
0538   3063               M             movlw   "c"
0539   2???               M             call    writetoPC
                      01144     newline
                          M             printchar   0xA ;changes line
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

053A   300A               M             movlw   0xA
053B   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
053C   300D               M             movlw   0xD
053D   2???               M             call    writetoPC
                      01145     printchar   "C"
053E   3043               M             movlw   "C"
053F   2???               M             call    writetoPC
                      01146     printchar   "a"
0540   3061               M             movlw   "a"
0541   2???               M             call    writetoPC
                      01147     printchar   "n"
0542   306E               M             movlw   "n"
0543   2???               M             call    writetoPC
                      01148     printchar   "d"
0544   3064               M             movlw   "d"
0545   2???               M             call    writetoPC
                      01149     printchar   "l"
0546   306C               M             movlw   "l"
0547   2???               M             call    writetoPC
                      01150     printchar   "e"
0548   3065               M             movlw   "e"
0549   2???               M             call    writetoPC
                      01151     printchar   "s"
054A   3073               M             movlw   "s"
054B   2???               M             call    writetoPC
                      01152     printchar   ":"
054C   303A               M             movlw   ":"
054D   2???               M             call    writetoPC
                      01153     printchar   " "
054E   3020               M             movlw   " "
054F   2???               M             call    writetoPC
                      01154     printchar   " "
0550   3020               M             movlw   " "
0551   2???               M             call    writetoPC
                      01155     printchar   " "
0552   3020               M             movlw   " "
0553   2???               M             call    writetoPC
                      01156     printchar   " "
0554   3020               M             movlw   " "
0555   2???               M             call    writetoPC
                      01157     printchar   " "
0556   3020               M             movlw   " "
0557   2???               M             call    writetoPC
                      01158     printchar   " "
0558   3020               M             movlw   " "
0559   2???               M             call    writetoPC
                      01159     printBCD    num_tot
055A   1283 1303          M             banksel num_tot
055C   0834               M             movf    num_tot, W
055D   3E30               M             addlw   0x30
055E   2???               M             call    writetoPC
                      01160     newline
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             printchar   0xA ;changes line
055F   300A               M             movlw   0xA
0560   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0561   300D               M             movlw   0xD
0562   2???               M             call    writetoPC
                      01161     printchar   "L"
0563   304C               M             movlw   "L"
0564   2???               M             call    writetoPC
                      01162     printchar   "E"
0565   3045               M             movlw   "E"
0566   2???               M             call    writetoPC
                      01163     printchar   "D"
0567   3044               M             movlw   "D"
0568   2???               M             call    writetoPC
                      01164     printchar   " "
0569   3020               M             movlw   " "
056A   2???               M             call    writetoPC
                      01165     printchar   "f"
056B   3066               M             movlw   "f"
056C   2???               M             call    writetoPC
                      01166     printchar   "a"
056D   3061               M             movlw   "a"
056E   2???               M             call    writetoPC
                      01167     printchar   "i"
056F   3069               M             movlw   "i"
0570   2???               M             call    writetoPC
                      01168     printchar   "l"
0571   306C               M             movlw   "l"
0572   2???               M             call    writetoPC
                      01169     printchar   ":"
0573   303A               M             movlw   ":"
0574   2???               M             call    writetoPC
                      01170     printchar   " "
0575   3020               M             movlw   " "
0576   2???               M             call    writetoPC
                      01171     printchar   " "
0577   3020               M             movlw   " "
0578   2???               M             call    writetoPC
                      01172     printchar   " "
0579   3020               M             movlw   " "
057A   2???               M             call    writetoPC
                      01173     printchar   " "
057B   3020               M             movlw   " "
057C   2???               M             call    writetoPC
                      01174     printchar   " "
057D   3020               M             movlw   " "
057E   2???               M             call    writetoPC
                      01175     printBCD    num_LF
057F   1283 1303          M             banksel num_LF
0581   0835               M             movf    num_LF, W
0582   3E30               M             addlw   0x30
0583   2???               M             call    writetoPC
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01176     newline
                          M             printchar   0xA ;changes line
0584   300A               M             movlw   0xA
0585   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0586   300D               M             movlw   0xD
0587   2???               M             call    writetoPC
                      01177     printchar   "F"
0588   3046               M             movlw   "F"
0589   2???               M             call    writetoPC
                      01178     printchar   "l"
058A   306C               M             movlw   "l"
058B   2???               M             call    writetoPC
                      01179     printchar   "i"
058C   3069               M             movlw   "i"
058D   2???               M             call    writetoPC
                      01180     printchar   "c"
058E   3063               M             movlw   "c"
058F   2???               M             call    writetoPC
                      01181     printchar   "k"
0590   306B               M             movlw   "k"
0591   2???               M             call    writetoPC
                      01182     printchar   "e"
0592   3065               M             movlw   "e"
0593   2???               M             call    writetoPC
                      01183     printchar   "r"
0594   3072               M             movlw   "r"
0595   2???               M             call    writetoPC
                      01184     printchar   " "
0596   3020               M             movlw   " "
0597   2???               M             call    writetoPC
                      01185     printchar   "f"
0598   3066               M             movlw   "f"
0599   2???               M             call    writetoPC
                      01186     printchar   "a"
059A   3061               M             movlw   "a"
059B   2???               M             call    writetoPC
                      01187     printchar   "i"
059C   3069               M             movlw   "i"
059D   2???               M             call    writetoPC
                      01188     printchar   "l"
059E   306C               M             movlw   "l"
059F   2???               M             call    writetoPC
                      01189     printchar   ":"
05A0   303A               M             movlw   ":"
05A1   2???               M             call    writetoPC
                      01190     printchar   " "
05A2   3020               M             movlw   " "
05A3   2???               M             call    writetoPC
                      01191     printBCD    num_FF
05A4   1283 1303          M             banksel num_FF
05A6   0836               M             movf    num_FF, W
05A7   3E30               M             addlw   0x30
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A8   2???               M             call    writetoPC
                      01192     newline
                          M             printchar   0xA ;changes line
05A9   300A               M             movlw   0xA
05AA   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05AB   300D               M             movlw   0xD
05AC   2???               M             call    writetoPC
                      01193     newline
                          M             printchar   0xA ;changes line
05AD   300A               M             movlw   0xA
05AE   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05AF   300D               M             movlw   0xD
05B0   2???               M             call    writetoPC
05B1   1283           01194     bcf STATUS,RP0
05B2   1303           01195     bcf STATUS,RP1     ; back to bank 0
05B3   0008           01196     return
                      01197 
                      01198 
                      01199 ;***************************************
                      01200 ; GENERAL PURPOSE SUBROUTINES
                      01201 ;***************************************
                      01202 
                      01203 ; DISPLAY BIG NUMBER SUBROUTINE
                      01204 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01205 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01206 ; Uses "shift and add 3" algorithm
05B4                  01207 big_number
                      01208     movff   op_time, op_time_save         ;save the original op_time
05B4   0833               M         movf    op_time, W
05B5   00BF               M         movwf   op_time_save
                      01209     movlf   8, bignumcount                ;will shift 8 times
05B6   3008               M         movlw   8
05B7   00C3               M         movwf   bignumcount
05B8   01C0           01210     clrf    huns
05B9   01C1           01211     clrf    tens
05BA   01C2           01212     clrf    ones
                      01213 
05BB                  01214 BCDadd3                             ; if any digit > 5, add3
05BB   3005           01215     movlw   0x5
05BC   0240           01216     subwf   huns, W
05BD   1803           01217     btfsc   STATUS, C
05BE   2???           01218     call    add3huns
                      01219 
05BF   3005           01220     movlw   0x5
05C0   0241           01221     subwf   tens, W
05C1   1803           01222     btfsc   STATUS, C
05C2   2???           01223     call    add3tens
                      01224 
05C3   3005           01225     movlw   0x5
05C4   0242           01226     subwf   ones, W
05C5   1803           01227     btfsc   STATUS, C
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C6   2???           01228     call    add3ones
                      01229 
05C7   03C3           01230     decf    bignumcount, 1
05C8   1003           01231     bcf     STATUS, C
05C9   0DB3           01232     rlf     op_time, 1              ; shift
05CA   0DC2           01233     rlf     ones, 1
05CB   1A42           01234     btfsc   ones,4 ;
05CC   2???           01235     call    carryones               ; carry if too large
05CD   0DC1           01236     rlf     tens, 1
                      01237 
05CE   1A41           01238     btfsc   tens,4 ;
05CF   2???           01239     call    carrytens
05D0   0DC0           01240     rlf     huns,1
05D1   1003           01241     bcf     STATUS, C
                      01242 
05D2   0843           01243     movf    bignumcount, W
05D3   1D03           01244     btfss   STATUS, Z
05D4   2???           01245     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01246 
                      01247     movff    op_time_save, op_time     ;restore the original op_time
05D5   083F               M         movf    op_time_save, W
05D6   00B3               M         movwf   op_time
05D7   0008           01248     return
                      01249 
05D8                  01250 add3huns
05D8   3003           01251     movlw 0x3
05D9   07C0           01252     addwf huns,F
05DA   0008           01253     return
05DB                  01254 add3tens
05DB   3003           01255     movlw 0x3
05DC   07C1           01256     addwf tens,F
05DD   0008           01257     return
05DE                  01258 add3ones
05DE   3003           01259     movlw 0x3
05DF   07C2           01260     addwf ones,F
05E0   0008           01261     return
05E1                  01262 carryones
05E1   1242           01263     bcf ones, 4
05E2   1403           01264     bsf STATUS, C
05E3   0008           01265     return
05E4                  01266 carrytens
05E4   1241           01267     bcf tens, 4
05E5   1403           01268     bsf STATUS, C
05E6   0008           01269     return
                      01270 
                      01271 
                      01272 ;***************************************
                      01273 ; DELAY SUBROUTINES
                      01274 ;***************************************
                      01275 
                      01276 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01277 ; Delays exactly 0.5sec
05E7                  01278 HalfS
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01279       movlf 0x8A, delH
05E7   308A               M         movlw   0x8A
05E8   00BC               M         movwf   delH
                      01280       movlf 0xBA, delM
05E9   30BA               M         movlw   0xBA
05EA   00BD               M         movwf   delM
                      01281       movlf 0x03, delL
05EB   3003               M         movlw   0x03
05EC   00BE               M         movwf   delL
05ED                  01282 HalfS_0
05ED   0BBC           01283       decfsz    delH, F
05EE   2???           01284           goto  $+2
05EF   0BBD           01285           decfsz        delM, F
05F0   2???           01286           goto  $+2
05F1   0BBE           01287           decfsz        delL, F
05F2   2???           01288           goto  HalfS_0
                      01289 
05F3   2???           01290           goto  $+1
05F4   0000           01291           nop
05F5   0008           01292           return
                      01293 
                      01294 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01295 ; Useful for LCD because PIC is way faster than it can handle
                      01296 ; Delays exactly 5ms
05F6                  01297 delay5ms
                      01298         movlf   0xC3, delH
05F6   30C3               M         movlw   0xC3
05F7   00BC               M         movwf   delH
                      01299         movlf   0x0A, delL
05F8   300A               M         movlw   0x0A
05F9   00BE               M         movwf   delL
05FA                  01300 Delay_0
05FA   0BBC           01301         decfsz  delH, f
05FB   2???           01302         goto    $+2
05FC   0BBE           01303         decfsz  delL, f
05FD   2???           01304         goto    Delay_0
05FE   0008           01305     return
                      01306 
                      01307 ; MOTOR DELAY SUBROUTINE.
                      01308 ; Delays ~10ms for the motor. Also checks IRDATA and sets PRESENT if there is a candle
05FF                  01309 motor_del
                      01310       movlf 0xF3, delH
05FF   30F3               M         movlw   0xF3
0600   00BC               M         movwf   delH
                      01311       movlf 0x2F, delL
0601   302F               M         movlw   0x2F
0602   00BE               M         movwf   delL
0603                  01312 motor_del_0
                      01313       ;btfsc     IRDATA
                      01314       ;bsf       present, 0
0603   0BBC           01315       decfsz    delH, F
0604   2???           01316           goto      $+2
0605   0BBE           01317           decfsz        delL, F
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0606   2???           01318           goto      motor_del_0
0607   0008           01319           return
                      01320 
                      01321 ;***************************************
                      01322 ; LCD SUBROUTINES (from sample code)
                      01323 ;***************************************
                      01324 
                      01325 ; Initialize the LCD
0608                  01326 InitLCD
0608   1283           01327         bcf STATUS,RP0
0609   1588           01328         bsf E     ;E default high
                      01329 
                      01330         ;Wait for LCD POR to finish (~15ms)
060A   2???           01331         call delay5ms
060B   2???           01332         call delay5ms
060C   2???           01333         call delay5ms
                      01334 
                      01335         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01336         ; -> Send b'0011' 3 times
060D   3033           01337         movlw   b'00110011'
060E   2???           01338         call    WR_INS
060F   2???           01339         call delay5ms
0610   2???           01340         call delay5ms
0611   3032           01341         movlw   b'00110010'
0612   2???           01342         call    WR_INS
0613   2???           01343         call delay5ms
0614   2???           01344         call delay5ms
                      01345 
                      01346         ; 4 bits, 2 lines, 5x7 dots
0615   3028           01347         movlw   b'00101000'
0616   2???           01348         call    WR_INS
0617   2???           01349         call delay5ms
0618   2???           01350         call delay5ms
                      01351 
                      01352         ; display on/off
0619   300C           01353         movlw   b'00001100'
061A   2???           01354         call    WR_INS
061B   2???           01355         call delay5ms
061C   2???           01356         call delay5ms
                      01357 
                      01358         ; Entry mode
061D   3006           01359         movlw   b'00000110'
061E   2???           01360         call    WR_INS
061F   2???           01361         call delay5ms
0620   2???           01362         call delay5ms
                      01363 
                      01364         ; Clear ram
0621   3001           01365         movlw   b'00000001'
0622   2???           01366         call    WR_INS
0623   2???           01367         call delay5ms
0624   2???           01368         call delay5ms
0625   0008           01369         return
                      01370 
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01371 ; Clear the display
0626                  01372 Clear_Display
0626   3001           01373                 movlw   B'00000001'
0627   2???           01374                 call    WR_INS
0628   0008           01375                 return
                      01376 
                      01377 ;Switch lines
0629                  01378 Switch_Lines
0629   30C0           01379                 movlw   B'11000000'
062A   2???           01380                 call    WR_INS
062B   0008           01381                 return
                      01382 
                      01383 ; Write an instruction to the LCD (see page 7-104)
                      01384 ; The instruction must be in W
062C                  01385 WR_INS
062C   1108           01386         bcf             RS                              ;clear RS
062D   00BA           01387         movwf   com                             ;W --> com
062E   39F0           01388         andlw   0xF0                    ;mask 4 bits MSB w = X0
062F   0088           01389         movwf   PORTD                   ;Send 4 bits MSB
0630   1588           01390         bsf             E                               ;
0631   2???           01391         call    delay5ms        ;__    __
0632   1188           01392         bcf             E                               ;  |__|
0633   0E3A           01393         swapf   com,w
0634   39F0           01394         andlw   0xF0                    ;1111 0010
0635   0088           01395         movwf   PORTD                   ;send 4 bits LSB
0636   1588           01396         bsf             E                               ;
0637   2???           01397         call    delay5ms        ;__    __
0638   1188           01398         bcf             E                               ;  |__|
0639   2???           01399         call    delay5ms
063A   0008           01400         return
                      01401 
                      01402 ; Write data at current cursor location
                      01403 ; Character code (see page 7-104) must be in W
063B                  01404 WR_DATA
063B   1508           01405         bsf             RS
063C   00BB           01406         movwf   dat
063D   083B           01407         movf    dat,w
063E   39F0           01408         andlw   0xF0
063F   3E04           01409         addlw   4
0640   0088           01410         movwf   PORTD
0641   1588           01411         bsf             E                               ;
0642   2???           01412         call    delay5ms        ;__    __
0643   1188           01413         bcf             E                               ;  |__|
0644   0E3B           01414         swapf   dat,w
0645   39F0           01415         andlw   0xF0
0646   3E04           01416         addlw   4
0647   0088           01417         movwf   PORTD
0648   1588           01418         bsf             E                               ;
0649   2???           01419         call    delay5ms        ;__    __
064A   1188           01420         bcf             E                               ;  |__|
064B   0008           01421         return
                      01422 
                      01423 
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01424 ;***************************************
                      01425 ; PC INTERFACE SUBROUTINES (from sample code)
                      01426 ;***************************************
064C                  01427 InitUSART
064C   1683           01428         bsf       STATUS,RP0     ; select bank 1
064D   300F           01429         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064E   0099           01430         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064F   0198           01431         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01432 
0650   1283           01433         bcf       STATUS,RP0     ; select bank 0
0651   1798           01434         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0652   1618           01435         bsf       RCSTA,CREN     ; continuous receive
                      01436 
0653   1683           01437         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0654   1698           01438         bsf       TXSTA,TXEN     ; Transmit enable
0655   0008           01439         return
                      01440 
                      01441 
0656                  01442 writetoPC
                      01443 ; Writes the data in W to the PC
                      01444 ; end up in bank1!
0656   1283           01445         bcf       STATUS,RP0     ; Go to bank 0
0657   0099           01446         movwf     TXREG          ; Send contents of W to RS232
0658   1683           01447         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0659   1C98           01448         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
065A   2???           01449         goto      $-1
065B   0008           01450         return
                      01451 
                      01452 
                      01453 ;***************************************
                      01454 ; ISR
                      01455 ; Currently only care about TMR0
                      01456 ; TMR0 overflows at 256*256; each time, decrement count38
                      01457 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01458 ; When this hapens, op_time increments
                      01459 ; Also check photodata every time for 2 sec = total of 76 reads
                      01460 ;***************************************
065C                  01461 isr
065C   00F9           01462     movwf   w_isr           ;save W and status
065D   0E03           01463     swapf   STATUS, W
065E   0183           01464     clrf    STATUS
065F   00FA           01465     movwf   status_isr
                      01466 ;    movf    PCLATH, W      ;if using pages
                      01467 ;    movwf   pclath_isr
                      01468 ;    clrf    PCLATH
                      01469 
0660   0BC4           01470     decfsz  count38, F     ;if count38 gets to 38 it's been one second
0661   2???           01471     goto    end_isr
                      01472     movlf   D'38', count38  ;so reset count38
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0662   3026               M         movlw   D'38'
0663   00C4               M         movwf   count38
0664   0AB3           01473     incf    op_time, F         ; and increment op_time
                      01474 
0665                  01475 end_isr
                      01476 
0665   1889           01477     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
0666   0AC7           01478     incf    photocount, F       ;if it is 1, light is on so photocount++
                      01479 
                      01480 ;    movf    pclath_isr, W  ;if using pages
                      01481 ;    movwf    PCLATH
0667   0E7A           01482     swapf   status_isr, W   ;restore W and status
0668   0083           01483     movwf   STATUS
0669   0EF9           01484     swapf   w_isr, F
066A   0E79           01485     swapf   w_isr, W
066B   110B           01486     bcf     INTCON, T0IF    ;clear the interrupt flag
066C   0009           01487     retfie
                      01488 
                      01489 
3F72                  01490     END
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005BB
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000626
D                                 00000005
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           000005FA
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000005E7
HalfS_0                           000005ED
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           00000608
InitUSART                         0000064C
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000326
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      00000629
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           0000063B
WR_INS                            0000062C
Z                                 00000002
_.org_1_0172                      00000172
_.org_1_01C8                      000001C8
_.org_1_01EF                      000001EF
_.org_1_020F                      0000020F
_.org_1_0214                      00000214
_.org_1_022D                      0000022D
_.org_1_0293                      00000293
_.org_1_0303                      00000303
_.org_1_0324                      00000324
_.org_1_05EE                      000005EE
_.org_1_05F0                      000005F0
_.org_1_05F3                      000005F3
_.org_1_05FB                      000005FB
_.org_1_0604                      00000604
_.org_1_065A                      0000065A
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001AE
add3huns                          000005D8
add3ones                          000005DE
add3tens                          000005DB
badkey                            00000292
badkeyagain                       00000323
big_number                        000005B4
bignumcount                       00000043
candle_index                      00000046
carryones                         000005E1
carrytens                         000005E4
check_1                           00000345
check_2                           0000034E
check_3                           00000358
check_4                           00000362
check_5                           0000036C
check_6                           00000376
check_7                           00000380
check_8                           0000038A
check_9                           00000394
check_FF                          00000475
check_LED                         000003EB
check_LF                          0000045A
check_defective                   000003A4
check_done                        00000281
check_export                      000003B0
check_flick                       000003FA
check_for_fail                    00000478
check_immapeace                   00000312
check_log1                        00000231
check_log2                        00000239
check_log3                        00000242
check_log4                        0000024B
check_log5                        00000254
check_log6                        0000025D
check_log7                        00000266
check_log8                        0000026F
check_log9                        00000278
check_next                        0000047E
check_none                        000003CE
check_nothx                       0000030D
check_pass                        000003DC
check_standby                     000003B6
check_start                       000003C7
check_summary                     0000039E
check_threshold1                  0000019F
check_threshold2                  000001A7
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

check_time                        000003AA
check_wanna                       00000307
com                               0000003A
count38                           00000044
dat                               0000003B
default_key                       000003CC
default_state                     00000409
defective                         00000438
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          000005F6
detect_candle                     00000192
display_log                       00000295
display_state                     000003CD
end_check_fail                    00000490
end_isr                           00000665
end_operation                     000001B2
export                            000004B9
huns                              00000040
i2c_common_setup                  00000000
information                       00000344
init                              000000E7
isr                               0000065C
keytemp                           00000037
logs                              00000216
more_than_six                     0000048F
morethansix                       00000045
motor_count                       00000049
motor_del                         000005FF
motor_del_0                       00000603
movff                             
movlf                             
newline                           
no_huns                           000004A5
no_log                            000002AD
no_tens                           000004AB
nohuns                            00000523
notens                            0000052D
now_FF                            0000045C
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000047
photoval                          00000048
poll                              0000020E
polling                           0000022C
printASC                          
printBCD                          
printchar                         
MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

read_EEPROM                       00000298
read_rtc                          00000000
rotate                            0000018B
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001BF
shiftlogs_0                       000001C3
spacebar                          
start                             00000174
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000328
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           0000040A
tens                              00000041
test_candle                       00000197
threshold1                        D'7'
threshold2                        D'69'
time                              00000491
w_isr                             00000079
waiting                           0000010C
wanna_export                      00000302
writeASC                          
writeBCD                          
write_log1                        000001E5
write_log1_0                      000001EC
write_rtc                         00000000
writechar                         
writetoPC                         00000656
yes_log                           000002B9

MPASM 5.55                         MAINN.ASM   3-21-2014  13:10:53         PAGE 59





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

