MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'7'
                      00014     #define threshold2  D'69'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017    ; note: check analog v digital!
                      00018 
                      00019 
                      00020 ;***************************************
                      00021 ; VARIABLES
                      00022 ;***************************************
                      00023 
                      00024 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00025 
                      00026     cblock      0x20
                      00027     ; Important information (will be displayed)
  00000020            00028         state1     ;where   0 = none      1 = pass
  00000021            00029         state2     ;        2 = led fail  3 = flicker fail
  00000022            00030         state3
  00000023            00031         state4
  00000024            00032         state5
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            00033         state6
  00000026            00034         state7
  00000027            00035         state8
  00000028            00036         state9
  00000029            00037         start_year10    ;starting time (for log)
  0000002A            00038         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00039         start_month10
  0000002C            00040         start_month1
  0000002D            00041         start_date10
  0000002E            00042         start_date1
  0000002F            00043         start_hour10
  00000030            00044         start_hour1
  00000031            00045         start_min10
  00000032            00046         start_min1
  00000033            00047         op_time     ;BCD in seconds
  00000034            00048         num_tot     ;BCD
  00000035            00049         num_LF      ;BCD
  00000036            00050         num_FF      ;BCD
                      00051 ; For general program / interface: temps, counters, etc.
  00000037            00052         keytemp         ; for data display mode
  00000038            00053         statetemp
  00000039            00054                 Table_Counter   ; for LCD stuff
  0000003A            00055                 com
  0000003B            00056                 dat
  0000003C            00057         delH          ;for delay 0.5s routine
  0000003D            00058         delM
  0000003E            00059         delL
  0000003F            00060         op_time_save    ;for operation time
  00000040            00061         huns
  00000041            00062         tens
  00000042            00063         ones
  00000043            00064         bignumcount
  00000044            00065         count38         ;for isr
                      00066 ; For machine program: temps, counters, etc.
  00000045            00067         candle_index
  00000046            00068         photocount      ;for testing candle
  00000047            00069         photoval
  00000048            00070         motor_count     ;for rotate
                      00071     endc
                      00072 
                      00073     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00074         w_isr
  0000007A            00075         status_isr
                      00076         endc
                      00077 
                      00078 
                      00079 ;***************************************
                      00080 ; MACROS
                      00081 ;***************************************
                      00082 
                      00083 ; Display a msg on LCD
                      00084 Display macro   Message
                      00085                 local   loop_disp
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086                 local   end_disp
                      00087                 clrf    Table_Counter
                      00088                 clrw
                      00089 loop_disp
                      00090         movf    Table_Counter,W
                      00091                 call    Message
                      00092                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00093                 btfsc   STATUS,Z
                      00094                 goto    end_disp
                      00095                 call    WR_DATA
                      00096                 incf    Table_Counter,F
                      00097                 goto    loop_disp
                      00098 end_disp
                      00099                 endm
                      00100 
                      00101 
                      00102 ;Shortcuts for moving literals / registers
                      00103 movlf   macro   l, f
                      00104         movlw   l
                      00105         movwf   f
                      00106         endm
                      00107 
                      00108 movff   macro   source, dest
                      00109         movf    source, W
                      00110         movwf   dest
                      00111         endm
                      00112 
                      00113 ; Write to LCD (all in bank0 please)
                      00114 writeBCD    macro   reg         ; from a register containing BCD
                      00115             movf    reg, W
                      00116             addlw   B'00110000'
                      00117             call WR_DATA
                      00118             endm
                      00119 
                      00120 writechar   macro   asc             ;ASCII code literal (or in "")
                      00121             movlw   asc
                      00122             call    WR_DATA
                      00123             endm
                      00124 
                      00125 writeASC        macro   reg         ;from a register containing ASCII
                      00126             movf    reg, W
                      00127             call WR_DATA
                      00128             endm
                      00129 
                      00130 spacebar    macro
                      00131             movlw   B'00010100'
                      00132             call    WR_INS
                      00133             endm
                      00134 
                      00135 ;Print to PC (hyperterminal)
                      00136 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00137             movlw   char
                      00138             call    writetoPC
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             endm
                      00140 
                      00141 printASC    macro   reg            ;ASCII code inside a register
                      00142             banksel reg
                      00143             movf    reg,W
                      00144             call    writetoPC
                      00145             endm
                      00146 
                      00147 printBCD    macro   BCD            ;BCD inside a register
                      00148             banksel BCD
                      00149             movf    BCD, W
                      00150             addlw   0x30
                      00151             call    writetoPC
                      00152             endm
                      00153 
                      00154 newline     macro
                      00155             printchar   0xA ;changes line
                      00156             printchar   0xD ;goes back to left
                      00157             endm
                      00158 ;***************************************
                      00159 ; VECTORS
                      00160 ;***************************************
                      00161 
                      00162     ORG       0x000
0000   2???           00163          goto      init
                      00164     ORG       0x004
0004   2???           00165         goto    isr
                      00166 
                      00167 
                      00168 ;***************************************
                      00169 ; TABLES (MESSAGES)
                      00170 ;***************************************
0005                  00171 Standby_Msg
0005   0782           00172                 addwf   PCL,F
0006   3453 3454 3441 00173                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00174 Start_Msg
000E   0782           00175         addwf   PCL,F
000F   3449 346E 3473 00176         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00177 End_Msg
0020   0782           00178         addwf   PCL,F
0021   3443 346F 346D 00179         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00180 Time_Msg
002A   0782           00181                 addwf   PCL,F
002B   344F 3470 3465 00182                 dt              "Operation time:",0
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00183 Seconds
003B   0782           00184         addwf   PCL,F
003C   3420 3473 3465 00185         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00186 Not_present
0045   0782           00187         addwf   PCL,F
0046   343A 3420 344E 00188         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00189 Pass
0054   0782           00190                 addwf   PCL,F
0055   343A 3420 3450 00191                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00192 LED_fail
005C   0782           00193                 addwf   PCL,F
005D   343A 3420 344C 00194                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00195 Flick_fail
0068   0782           00196                 addwf   PCL,F
0069   343A 3420 3446 00197                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00198 Total_Msg
0078   0782           00199         addwf   PCL,F
0079   3454 346F 3474 00200         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00201 LF
0089   0782           00202         addwf   PCL,F
008A   344C 3446 343A 00203         dt      "LF: ",0
       3420 3400 
008F                  00204 FF
008F   0782           00205         addwf   PCL,F
0090   3446 3446 343A 00206         dt      "FF: ",0
       3420 3400 
0095                  00207 None
0095   0782           00208         addwf   PCL,F
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0096   343C 346E 346F 00209         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00210 Logs_Msg1
009D   0782           00211         addwf   PCL,F
009E   3431 342D 3439 00212         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00213 Logs_Msg2
00AE   0782           00214         addwf   PCL,F
00AF   3453 3454 3441 00215         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00216 Logs_Msg3
00BF   0782           00217         addwf   PCL,F
00C0   3445 3478 3470 00218         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00219 Logs_Msg4
00C8   0782           00220         addwf   PCL,F
00C9   344C 344F 3447 00221         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00222 Op_at
00D8   0782           00223         addwf   PCL,F
00D9   344F 3470 3465 00224         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00225 
                      00226 ;***************************************
                      00227 ; MAIN PROGRAM
                      00228 ;***************************************
                      00229 
00E7                  00230 init
                      00231         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00232 
00E9   1683 1303      00233         banksel   TRISA                 ; bank 1
                      00234         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EB   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00235         clrf      TRISA                 ; PortA used for motor
                      00236         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00237                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00238         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00239         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                      00240         movlf     b'011', TRISE         ; PortE is ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00241         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00242 
00F7   1283           00243         bcf       STATUS,RP0        ; select bank 0
00F8   0185           00244         clrf      PORTA
00F9   0186           00245         clrf      PORTB
00FA   0187           00246         clrf      PORTC
00FB   0188           00247         clrf      PORTD
00FC   0189           00248         clrf      PORTE
                      00249 
00FD   2???           00250         call      i2c_common_setup  ;Set up I2C for communication
00FE   2???           00251         call      InitLCD           ;Initialize the LCD
00FF   2???           00252         call      InitUSART         ;Set up USART for RS232
                      00253 
0100   1283           00254         bcf       STATUS,RP0        ; back to bank0
                      00255 
                      00256         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0101   01B9               M                 clrf    Table_Counter
0102   0103               M                 clrw
0103                      M loop_disp
0103   0839               M         movf    Table_Counter,W
0104   2???               M                 call    Standby_Msg
0105   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0106   1903               M                 btfsc   STATUS,Z
0107   2???               M                 goto    end_disp
0108   2???               M                 call    WR_DATA
0109   0AB9               M                 incf    Table_Counter,F
010A   2???               M                 goto    loop_disp
010B                      M end_disp
010B   2???           00257         call    Switch_Lines
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00258 
                      00259  ;--------------------------------------------------
                      00260  ;      STANDBY MODE
                      00261 
010C                  00262 waiting
                      00263         ; Display date and time.
                      00264         ; Also save starting time for log (will stop updating once we start)
                      00265         writechar "2"       ;First line shows 20**/**/**
010C   3032               M             movlw   "2"
010D   2???               M             call    WR_DATA
                      00266         writechar "0"
010E   3030               M             movlw   "0"
010F   2???               M             call    WR_DATA
                      00267         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0110   3006               M         movlw   0x06
0111   1283 1303          M         banksel 0x73
0113   00F3               M         movwf   0x73
0114   2???               M         call    read_rtc
0115   1283 1303          M         banksel 0x75
0117   0875               M         movf    0x75,w
0118   2???               M         call    rtc_convert   
0119   0877           00268                 movf    0x77,W
011A   00A9           00269         movwf    start_year10    ;Save starting year dig10
011B   2???           00270                 call    WR_DATA
011C   0878           00271                 movf    0x78,W
011D   00AA           00272         movwf    start_year1    ;Save starting year dig1
011E   2???           00273                 call    WR_DATA
                      00274                 writechar "/"
011F   302F               M             movlw   "/"
0120   2???               M             call    WR_DATA
                      00275                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0121   3005               M         movlw   0x05
0122   1283 1303          M         banksel 0x73
0124   00F3               M         movwf   0x73
0125   2???               M         call    read_rtc
0126   1283 1303          M         banksel 0x75
0128   0875               M         movf    0x75,w
0129   2???               M         call    rtc_convert   
012A   0877           00276                 movf    0x77,W
012B   00AB           00277         movwf    start_month10    ;Save starting month dig10
012C   2???           00278                 call    WR_DATA
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012D   0878           00279                 movf    0x78,W
012E   00AC           00280         movwf    start_month1    ;Save starting month dig1
012F   2???           00281                 call    WR_DATA
                      00282                 writechar       "/"
0130   302F               M             movlw   "/"
0131   2???               M             call    WR_DATA
                      00283                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0132   3004               M         movlw   0x04
0133   1283 1303          M         banksel 0x73
0135   00F3               M         movwf   0x73
0136   2???               M         call    read_rtc
0137   1283 1303          M         banksel 0x75
0139   0875               M         movf    0x75,w
013A   2???               M         call    rtc_convert   
013B   0877           00284                 movf    0x77,W
013C   00AD           00285         movwf    start_date10    ;Save starting date dig10
013D   2???           00286                 call    WR_DATA
013E   0878           00287                 movf    0x78,W
013F   00AE           00288         movwf    start_date1    ;Save starting date dig1
0140   2???           00289                 call    WR_DATA
                      00290                 spacebar
0141   3014               M             movlw   B'00010100'
0142   2???               M             call    WR_INS
                      00291                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0143   3002               M         movlw   0x02
0144   1283 1303          M         banksel 0x73
0146   00F3               M         movwf   0x73
0147   2???               M         call    read_rtc
0148   1283 1303          M         banksel 0x75
014A   0875               M         movf    0x75,w
014B   2???               M         call    rtc_convert   
014C   0877           00292                 movf    0x77,W
014D   00AF           00293         movwf    start_hour10    ;Save starting hour dig10
014E   2???           00294                 call    WR_DATA
014F   0878           00295                 movf    0x78,W
0150   00B0           00296         movwf    start_hour1    ;Save starting hour dig1
0151   2???           00297                 call    WR_DATA
                      00298                 writechar ":"
0152   303A               M             movlw   ":"
0153   2???               M             call    WR_DATA
                      00299                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0154   3001               M         movlw   0x01
0155   1283 1303          M         banksel 0x73
0157   00F3               M         movwf   0x73
0158   2???               M         call    read_rtc
0159   1283 1303          M         banksel 0x75
015B   0875               M         movf    0x75,w
015C   2???               M         call    rtc_convert   
015D   0877           00300                 movf    0x77,W
015E   00B1           00301         movwf    start_min10    ;Save starting min dig10
015F   2???           00302                 call    WR_DATA
0160   0878           00303                 movf    0x78,W
0161   00B2           00304         movwf    start_min1    ;Save starting min dig1
0162   2???           00305                 call    WR_DATA
                      00306 
                      00307         ; Move cursor back to start of second line
                      00308         ; We will update displayed time but not the word "STANDBY"
0163   30C0           00309         movlw   B'11000000'
0164   2???           00310         call    WR_INS
                      00311 
                      00312         ;Poll to start (will have to hold key for ~0.5sec)
0165   1C86           00313          btfss          PORTB,1     ;Wait until data is available from the keypad
0166   2???           00314          goto           waiting
                      00315 
0167   0E06           00316          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0168   390F           00317          andlw          0x0F
0169   00B7           00318          movwf      keytemp
016A   3A0C           00319          xorlw      0xC         ;Will be all zeros if its "START"
016B   1903           00320          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016C   2???           00321          goto       start
                      00322 
016D   0837           00323          movf       keytemp,W     ;Go to log interface
016E   3A0E           00324          xorlw      0xE
016F   1903           00325          btfsc      STATUS,Z
0170   2???           00326          goto       logs
                      00327 
0171   1886           00328          btfsc          PORTB,1     ;Wait until key is released
0172   2???           00329          goto           $-1
0173   2???           00330          goto       waiting
                      00331 
                      00332 ;-----------------------------------------------------------
                      00333 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00334 
0174                  00335 start
                      00336         ;Start the timer
                      00337         movlf       D'38', count38
0174   3026               M         movlw   D'38'
0175   00C4               M         movwf   count38
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0176   01B3           00338         clrf        op_time
0177   0181           00339         clrf        TMR0
0178   178B           00340         bsf         INTCON, GIE     ;enable interrupts
                      00341 
                      00342         ;Display starting message
0179   2???           00343         call        Clear_Display
                      00344         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
017A   01B9               M                 clrf    Table_Counter
017B   0103               M                 clrw
017C                      M loop_disp
017C   0839               M         movf    Table_Counter,W
017D   2???               M                 call    Start_Msg
017E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
017F   1903               M                 btfsc   STATUS,Z
0180   2???               M                 goto    end_disp
0181   2???               M                 call    WR_DATA
0182   0AB9               M                 incf    Table_Counter,F
0183   2???               M                 goto    loop_disp
0184                      M end_disp
                      00345 
                      00346 
                      00347 ;****FAKE CODE ******************************************
                      00348 ;        ; Just delaying
                      00349 ;        call        HalfS
                      00350 ;        call        HalfS
                      00351 ;
                      00352 ;       ; Putting values in manually.
                      00353 ;        movlf     B'01', state1     ;pass
                      00354 ;        movlf     B'01', state2     ;pass
                      00355 ;        movlf     B'10', state3     ;LED fail
                      00356 ;        movlf     B'01', state4     ;pass
                      00357 ;        movlf     B'01', state5     ;pass
                      00358 ;        movlf     B'01', state6     ;pass
                      00359 ;        movlf     B'01', state7     ;pass
                      00360 ;        movlf     B'11', state8     ;flicker fail
                      00361 ;        movlf     B'01', state9     ;pass
                      00362 ;        movlf     D'1', num_LF
                      00363 ;        movlf     D'1', num_FF
                      00364 ;        movlf     D'9', num_tot
                      00365 ;*******************************************************
                      00366 
                      00367 ; choose fake or real!
                      00368 
                      00369 ;******REAL CODE ******************************************
0184   01C5           00370     clrf    candle_index     ; n = 0
0185   1383           00371     bcf STATUS, IRP
                      00372     movlf   0x1F, FSR       ;pointing at right before state1
0186   301F               M         movlw   0x1F
0187   0084               M         movwf   FSR
                      00373 
0188                  00374 rotate
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0188   300A           00375         movlw   d'10'               ; stop operation after 10 rotations (n=10)
0189   0245           00376    subwf   candle_index,W      ; candle_index (n) is # you've already tested before rotating
018A   1903           00377    btfsc   STATUS,Z
018B   2???           00378         goto    end_operation
018C   2???           00379         call    ROTATEMOTOR
018D   0AC5           00380         incf    candle_index, F
018E   0A84           00381    incf    FSR, F
                      00382 
018F                  00383 detect_candle
                      00384         ;btfsc   present,0       ;1 if there's a light, 0 if there's no light
018F   1809           00385    btfsc   IRDATA
0190   2???           00386         goto    test_candle     ;yes candle, go test it
                      00387    movlf   D'0', INDF      ;no candle, state = not present
0191   3000               M         movlw   D'0'
0192   0080               M         movwf   INDF
0193   2???           00388         goto rotate                 ;and go try next
                      00389 
0194                  00390 test_candle
0194   0AB4           00391         incf    num_tot, F                      ; keeping track of total number of candles
0195   01C6           00392         clrf    photocount
0196   2???           00393         call    HalfS       ; delay 2 sec or whatever
0197   2???           00394    call    HalfS
0198   2???           00395    call    HalfS
0199   2???           00396    call    HalfS
                      00397         movff   photocount, photoval        ;to ensure it wont change again
019A   0846               M         movf    photocount, W
019B   00C7               M         movwf   photoval
019C                  00398 check_threshold1
019C   3007           00399     movlw    threshold1
019D   0247           00400     subwf   photoval, W
019E   1803           00401     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
019F   2???           00402     goto check_threshold2
                      00403     movlf   D'2', INDF      ; < threshold 1 means led fail
01A0   3002               M         movlw   D'2'
01A1   0080               M         movwf   INDF
01A2   0AB5           00404          incf    num_LF, F
01A3   2???           00405     goto    rotate
01A4                  00406 check_threshold2
01A4   3045           00407     movlw    threshold2
01A5   0247           00408     subwf   photoval, W
01A6   1803           00409     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01A7   2???           00410     goto aboveboth
                      00411     movlf   D'1', INDF      ; < threshold 2 means pass
01A8   3001               M         movlw   D'1'
01A9   0080               M         movwf   INDF
01AA   2???           00412     goto    rotate
01AB                  00413 aboveboth
                      00414    movlf   D'3', INDF       ;else flicker fail
01AB   3003               M         movlw   D'3'
01AC   0080               M         movwf   INDF
01AD   0AB6           00415    incf    num_FF, F
01AE   2???           00416    goto    rotate
                      00417  ;****************************************************
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00418 
01AF                  00419 end_operation
                      00420         ; Stop the timer
01AF   138B           00421          bcf         INTCON, GIE  ;disable interrupts
                      00422 
                      00423         ;Display "complete"
01B0   2???           00424         call       Clear_Display
                      00425         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01B1   01B9               M                 clrf    Table_Counter
01B2   0103               M                 clrw
01B3                      M loop_disp
01B3   0839               M         movf    Table_Counter,W
01B4   2???               M                 call    End_Msg
01B5   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01B6   1903               M                 btfsc   STATUS,Z
01B7   2???               M                 goto    end_disp
01B8   2???               M                 call    WR_DATA
01B9   0AB9               M                 incf    Table_Counter,F
01BA   2???               M                 goto    loop_disp
01BB                      M end_disp
                      00426 
                      00427         ; Shift logs 1-8 -> 2-9
                      00428         ; Then store current run as log 1
01BB                  00429 shiftlogs
01BB   1283 1703      00430         banksel     EEADR               ; bank 2
                      00431         movlf       D'111', EEADR        ; start shifting from 111->125
01BD   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BE   008D               M         movwf   EEADR
                      00432 
01BF                  00433 shiftlogs_0
01BF   1683 1703      00434         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C1   138C           00435         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C2   140C           00436         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C3   188C           00437         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01C4   2???           00438         goto        $-1
01C5   1283 1703      00439         banksel     EEADR               ;bank 2
01C7   300E           00440         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C8   078D           00441         addwf       EEADR, F
01C9   1683 1703      00442         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CB   138C           00443         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CC   150C           00444         bsf         EECON1, WREN
01CD   3055           00445         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CE   008D           00446         movwf       EECON2
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01CF   30AA           00447         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D0   008D           00448         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D1   148C           00449         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D2   110C           00450         bcf         EECON1, WREN
01D3   1283 1703      00451         banksel     EEADR               ;bank 2
01D5   300E           00452         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D6   020D           00453         subwf       EEADR, W
01D7   1903           00454         btfsc       STATUS, Z
01D8   2???           00455         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00456 
01D9   1283 1303      00457         banksel op_time             ; for some reason I need to delay here
01DB   2???           00458         call   delay5ms             ; or else I get an infinite loop
01DC   1283 1703      00459         banksel EEADR
                      00460 
01DE   300F           00461         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DF   028D           00462         subwf       EEADR, F
01E0   2???           00463         goto        shiftlogs_0
                      00464 
01E1                  00465 write_log1
01E1   1283 1703      00466         banksel     EEADR
01E3   1383           00467         bcf         STATUS, IRP
                      00468         movlf       0x37, FSR           ;points to one after last important data
01E4   3037               M         movlw   0x37
01E5   0084               M         movwf   FSR
                      00469         movlf       D'14', EEADR        ;points to one after last place to write to
01E6   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E7   008D               M         movwf   EEADR
01E8                  00470 write_log1_0
01E8   1683 1703      00471         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EA   188C           00472         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01EB   2???           00473         goto        $-1
01EC   1283 1703      00474         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EE   038D           00475         decf        EEADR, F            ;writing backwords
01EF   0384           00476         decf        FSR, F
                      00477         movff       INDF, EEDATA
01F0   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F1   008C               M         movwf   EEDATA
01F2   1683 1703      00478         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F4   138C           00479         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F5   150C           00480         bsf         EECON1, WREN
01F6   3055           00481         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F7   008D           00482         movwf       EECON2
01F8   30AA           00483         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F9   008D           00484         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FA   148C           00485         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FB   110C           00486         bcf         EECON1, WREN
01FC   1283 1703      00487         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FE   088D           00488         movf        EEADR, F
01FF   1D03           00489         btfss       STATUS, Z           ;if EEADR = 0 we're done
0200   2???           00490         goto        write_log1_0
0201   1283           00491         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0202   1303           00492         bcf         STATUS, RP1
                      00493 
                      00494         ; Display info screens
0203   2???           00495         call       time             ; "Operation time: X sec"
0204   2???           00496         call       HalfS
0205   2???           00497         call       HalfS
0206   2???           00498         call       summary          ; "Total candles: X. Defective: Y"
0207   2???           00499         call       HalfS
0208   2???           00500         call       HalfS
0209   2???           00501         call       defective        ; "FF: a b c. LF: d e f"
                      00502 ;-----------------------------------------------------------------------
                      00503 ; Data display interface
                      00504 
020A   1C86           00505 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
020B   2???           00506          goto           $-1
                      00507 
020C   0E06           00508          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
020D   390F           00509          andlw          0x0F
020E   2???           00510          call       information ;Do the right thing
                      00511 
020F   1886           00512          btfsc          PORTB,1     ;Wait until key is released
0210   2???           00513          goto           $-1
0211   2???           00514          goto       poll
                      00515 
                      00516 
                      00517 ;-------------------------------------------------------------------------
                      00518 ; LOGS INTERFACE
                      00519 ; Shows last runs of last 9 logs
                      00520 ; Access from STANDBY and return to STANDBY
                      00521 
0212                  00522 logs
0212   2???           00523     call    Clear_Display
                      00524     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0213   01B9               M                 clrf    Table_Counter
0214   0103               M                 clrw
0215                      M loop_disp
0215   0839               M         movf    Table_Counter,W
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0216   2???               M                 call    Logs_Msg1
0217   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0218   1903               M                 btfsc   STATUS,Z
0219   2???               M                 goto    end_disp
021A   2???               M                 call    WR_DATA
021B   0AB9               M                 incf    Table_Counter,F
021C   2???               M                 goto    loop_disp
021D                      M end_disp
021D   2???           00525     call    Switch_Lines
                      00526     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
021E   01B9               M                 clrf    Table_Counter
021F   0103               M                 clrw
0220                      M loop_disp
0220   0839               M         movf    Table_Counter,W
0221   2???               M                 call    Logs_Msg2
0222   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0223   1903               M                 btfsc   STATUS,Z
0224   2???               M                 goto    end_disp
0225   2???               M                 call    WR_DATA
0226   0AB9               M                 incf    Table_Counter,F
0227   2???               M                 goto    loop_disp
0228                      M end_disp
                      00527 
0228                  00528 polling
0228   1C86           00529     btfss               PORTB,1     ;Wait until data is available from the keypad
0229   2???           00530     goto                $-1
                      00531 
022A   0E06           00532     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
022B   390F           00533     andlw               0x0F
022C   00B7           00534     movwf       keytemp     ; Save which key was pressed
                      00535 
022D                  00536 check_log1
022D   3A00           00537     xorlw   0x0         ;will be all zeros if its 1
022E   1D03           00538     btfss   STATUS,Z    ;and Z will be high, so skip
022F   2???           00539     goto    check_log2
0230   1283 1703      00540     banksel EEADR
                      00541     movlf   d'0', EEADR
0232   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0233   008D               M         movwf   EEADR
0234   2???           00542     goto    display_log
                      00543 
0235                  00544 check_log2
0235   0837           00545     movf    keytemp, W
0236   3A01           00546     xorlw   0x1
0237   1D03           00547     btfss   STATUS,Z
0238   2???           00548     goto    check_log3
0239   1283 1703      00549     banksel EEADR
                      00550     movlf   d'14', EEADR
023B   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023C   008D               M         movwf   EEADR
023D   2???           00551     goto    display_log
                      00552 
023E                  00553 check_log3
023E   0837           00554     movf    keytemp, W
023F   3A02           00555     xorlw   0x2
0240   1D03           00556     btfss   STATUS,Z
0241   2???           00557     goto    check_log4
0242   1283 1703      00558     banksel EEADR
                      00559     movlf   d'28', EEADR
0244   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0245   008D               M         movwf   EEADR
0246   2???           00560     goto    display_log
                      00561 
0247                  00562 check_log4
0247   0837           00563     movf    keytemp, W
0248   3A04           00564     xorlw   0x4
0249   1D03           00565     btfss   STATUS,Z
024A   2???           00566     goto    check_log5
024B   1283 1703      00567     banksel EEADR
                      00568     movlf   d'42', EEADR
024D   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
024E   008D               M         movwf   EEADR
024F   2???           00569     goto    display_log
                      00570 
0250                  00571 check_log5
0250   0837           00572     movf    keytemp, W
0251   3A05           00573     xorlw   0x5
0252   1D03           00574     btfss   STATUS,Z
0253   2???           00575     goto    check_log6
0254   1283 1703      00576     banksel EEADR
                      00577     movlf   d'56', EEADR
0256   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0257   008D               M         movwf   EEADR
0258   2???           00578     goto    display_log
                      00579 
0259                  00580 check_log6
0259   0837           00581     movf    keytemp, W
025A   3A06           00582     xorlw   0x6
025B   1D03           00583     btfss   STATUS,Z
025C   2???           00584     goto    check_log7
025D   1283 1703      00585     banksel EEADR
                      00586     movlf   d'70', EEADR
025F   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0260   008D               M         movwf   EEADR
0261   2???           00587     goto    display_log
                      00588 
0262                  00589 check_log7
0262   0837           00590     movf    keytemp, W
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0263   3A08           00591     xorlw   0x8
0264   1D03           00592     btfss   STATUS,Z
0265   2???           00593     goto    check_log8
0266   1283 1703      00594     banksel EEADR
                      00595     movlf   d'84', EEADR
0268   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0269   008D               M         movwf   EEADR
026A   2???           00596     goto    display_log
                      00597 
026B                  00598 check_log8
026B   0837           00599     movf    keytemp, W
026C   3A09           00600     xorlw   0x9
026D   1D03           00601     btfss   STATUS,Z
026E   2???           00602     goto    check_log9
026F   1283 1703      00603     banksel EEADR
                      00604     movlf   d'98', EEADR
0271   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0272   008D               M         movwf   EEADR
0273   2???           00605     goto    display_log
                      00606 
0274                  00607 check_log9
0274   0837           00608     movf    keytemp, W
0275   3A0A           00609     xorlw   0xA
0276   1D03           00610     btfss   STATUS,Z
0277   2???           00611     goto    check_done
0278   1283 1703      00612     banksel EEADR
                      00613     movlf   d'112', EEADR
027A   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027B   008D               M         movwf   EEADR
027C   2???           00614     goto    display_log
                      00615 
027D                  00616 check_done
027D   0837           00617     movf    keytemp, W
027E   3A0D           00618     xorlw   0xD
027F   1D03           00619     btfss   STATUS,Z
0280   2???           00620     goto    badkey
0281   2???           00621     call    Clear_Display
                      00622     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0282   01B9               M                 clrf    Table_Counter
0283   0103               M                 clrw
0284                      M loop_disp
0284   0839               M         movf    Table_Counter,W
0285   2???               M                 call    Standby_Msg
0286   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0287   1903               M                 btfsc   STATUS,Z
0288   2???               M                 goto    end_disp
0289   2???               M                 call    WR_DATA
028A   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

028B   2???               M                 goto    loop_disp
028C                      M end_disp
028C   2???           00623     call    Switch_Lines
028D   2???           00624     goto    waiting
                      00625 
028E                  00626 badkey
028E   1886           00627     btfsc               PORTB,1     ;Wait until key is released
028F   2???           00628     goto                $-1
0290   2???           00629     goto        polling
                      00630 
                      00631 
0291                  00632 display_log                 ;start in bank2
                      00633     ; move EEPROM data back to "current" data
0291   1383           00634     bcf STATUS, IRP
                      00635     movlf   0x29, FSR
0292   3029               M         movlw   0x29
0293   0084               M         movwf   FSR
0294                  00636 read_EEPROM
0294   1683 1703      00637     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0296   138C           00638     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0297   140C           00639     bsf EECON1, RD          ; read EEPROM
0298   1283 1703      00640     banksel EEDATA          ;bank 2
                      00641     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029A   080C               M         movf    EEDATA, W
029B   0080               M         movwf   INDF
029C   0A84           00642     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029D   0A8D           00643     incf    EEADR, F
029E   3037           00644     movlw   0x37            ;done if FSR = 0x37
029F   0204           00645     subwf   FSR, W
02A0   1D03           00646     btfss   STATUS, Z
02A1   2???           00647     goto    read_EEPROM
                      00648 
                      00649     ;display that shit
02A2   1283 1303      00650     banksel Table_Counter   ; bank0
02A4   2???           00651     call    Clear_Display
                      00652     ;if first data is 0xFF (no log) just display "none"
02A5   30FF           00653     movlw   0xFF
02A6   0229           00654     subwf   start_year10, W
02A7   1D03           00655     btfss   STATUS, Z
02A8   2???           00656     goto yes_log
02A9                  00657 no_log
                      00658     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02A9   01B9               M                 clrf    Table_Counter
02AA   0103               M                 clrw
02AB                      M loop_disp
02AB   0839               M         movf    Table_Counter,W
02AC   2???               M                 call    None
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02AD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02AE   1903               M                 btfsc   STATUS,Z
02AF   2???               M                 goto    end_disp
02B0   2???               M                 call    WR_DATA
02B1   0AB9               M                 incf    Table_Counter,F
02B2   2???               M                 goto    loop_disp
02B3                      M end_disp
02B3   2???           00659     call    HalfS
02B4   2???           00660     goto    logs
                      00661     ;else display the log
02B5                  00662 yes_log
                      00663     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02B5   01B9               M                 clrf    Table_Counter
02B6   0103               M                 clrw
02B7                      M loop_disp
02B7   0839               M         movf    Table_Counter,W
02B8   2???               M                 call    Op_at
02B9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02BA   1903               M                 btfsc   STATUS,Z
02BB   2???               M                 goto    end_disp
02BC   2???               M                 call    WR_DATA
02BD   0AB9               M                 incf    Table_Counter,F
02BE   2???               M                 goto    loop_disp
02BF                      M end_disp
02BF   2???           00664     call    Switch_Lines
                      00665     writechar    "2"
02C0   3032               M             movlw   "2"
02C1   2???               M             call    WR_DATA
                      00666     writechar    "0"
02C2   3030               M             movlw   "0"
02C3   2???               M             call    WR_DATA
                      00667     writeASC   start_year10
02C4   0829               M             movf    start_year10, W
02C5   2???               M             call WR_DATA
                      00668     writeASC   start_year1
02C6   082A               M             movf    start_year1, W
02C7   2???               M             call WR_DATA
                      00669     writechar   "/"
02C8   302F               M             movlw   "/"
02C9   2???               M             call    WR_DATA
                      00670     writeASC   start_month10
02CA   082B               M             movf    start_month10, W
02CB   2???               M             call WR_DATA
                      00671     writeASC   start_month1
02CC   082C               M             movf    start_month1, W
02CD   2???               M             call WR_DATA
                      00672     writechar   "/"
02CE   302F               M             movlw   "/"
02CF   2???               M             call    WR_DATA
                      00673     writeASC   start_date10
02D0   082D               M             movf    start_date10, W
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D1   2???               M             call WR_DATA
                      00674     writeASC   start_date1
02D2   082E               M             movf    start_date1, W
02D3   2???               M             call WR_DATA
                      00675     writechar   " "
02D4   3020               M             movlw   " "
02D5   2???               M             call    WR_DATA
                      00676     writeASC   start_hour10
02D6   082F               M             movf    start_hour10, W
02D7   2???               M             call WR_DATA
                      00677     writeASC   start_hour1
02D8   0830               M             movf    start_hour1, W
02D9   2???               M             call WR_DATA
                      00678     writechar   ":"
02DA   303A               M             movlw   ":"
02DB   2???               M             call    WR_DATA
                      00679     writeASC  start_min10
02DC   0831               M             movf    start_min10, W
02DD   2???               M             call WR_DATA
                      00680     writeASC   start_min1
02DE   0832               M             movf    start_min1, W
02DF   2???               M             call WR_DATA
02E0   2???           00681     call    HalfS
02E1   2???           00682     call    HalfS
02E2   2???           00683     call    time
02E3   2???           00684     call    HalfS
02E4   2???           00685     call    HalfS
02E5   2???           00686     call    summary
02E6   2???           00687     call    HalfS
02E7   2???           00688     call    HalfS
                      00689     ;option to Export
02E8   2???           00690     call    Clear_Display
                      00691     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02E9   01B9               M                 clrf    Table_Counter
02EA   0103               M                 clrw
02EB                      M loop_disp
02EB   0839               M         movf    Table_Counter,W
02EC   2???               M                 call    Logs_Msg3
02ED   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02EE   1903               M                 btfsc   STATUS,Z
02EF   2???               M                 goto    end_disp
02F0   2???               M                 call    WR_DATA
02F1   0AB9               M                 incf    Table_Counter,F
02F2   2???               M                 goto    loop_disp
02F3                      M end_disp
02F3   2???           00692     call    Switch_Lines
                      00693     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02F4   01B9               M                 clrf    Table_Counter
02F5   0103               M                 clrw
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F6                      M loop_disp
02F6   0839               M         movf    Table_Counter,W
02F7   2???               M                 call    Logs_Msg4
02F8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02F9   1903               M                 btfsc   STATUS,Z
02FA   2???               M                 goto    end_disp
02FB   2???               M                 call    WR_DATA
02FC   0AB9               M                 incf    Table_Counter,F
02FD   2???               M                 goto    loop_disp
02FE                      M end_disp
                      00694 
02FE                  00695 wanna_export
02FE   1C86           00696     btfss               PORTB,1     ;Wait until data is available from the keypad
02FF   2???           00697     goto                $-1
                      00698 
0300   0E06           00699     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0301   390F           00700     andlw               0x0F
0302   00B7           00701     movwf       keytemp     ; Save which key was pressed
                      00702 
0303                  00703 check_wanna
0303   0837           00704     movf    keytemp, W
0304   3A0F           00705     xorlw   0xF
0305   1D03           00706     btfss   STATUS,Z
0306   2???           00707     goto    check_nothx
0307   2???           00708     call    export
0308   2???           00709     goto    logs
                      00710 
0309                  00711 check_nothx
0309   0837           00712     movf    keytemp, W
030A   3A0E           00713     xorlw   0xE
030B   1D03           00714     btfss   STATUS,Z
030C   2???           00715     goto    check_immapeace
030D   2???           00716     goto    logs
                      00717 
030E                  00718 check_immapeace
030E   0837           00719     movf    keytemp, W
030F   3A0D           00720     xorlw   0xD
0310   1D03           00721     btfss   STATUS,Z
0311   2???           00722     goto    badkeyagain
0312   2???           00723     call    Clear_Display
                      00724     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0313   01B9               M                 clrf    Table_Counter
0314   0103               M                 clrw
0315                      M loop_disp
0315   0839               M         movf    Table_Counter,W
0316   2???               M                 call    Standby_Msg
0317   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0318   1903               M                 btfsc   STATUS,Z
0319   2???               M                 goto    end_disp
031A   2???               M                 call    WR_DATA
031B   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

031C   2???               M                 goto    loop_disp
031D                      M end_disp
031D   2???           00725     call    Switch_Lines
031E   2???           00726     goto    waiting
                      00727 
031F                  00728 badkeyagain
031F   1886           00729     btfsc               PORTB,1     ;Wait until key is released
0320   2???           00730     goto                $-1
0321   2???           00731     goto        wanna_export
                      00732 
                      00733 ; END OF MAIN PROGRAM
                      00734 ;------------------------------------------------------------
                      00735 
                      00736 ;***************************************
                      00737 ; ROTATE MOTOR ROUTINE
                      00738 ; Rotates motor 36deg. (20 steps)
                      00739 ;***************************************
                      00740 
0322                  00741 ROTATEMOTOR
                      00742     movlf   d'5', motor_count
0322   3005               M         movlw   d'5'
0323   00C8               M         movwf   motor_count
0324                  00743 start_rot
                      00744     movlf   b'1001', PORTA
0324   3009               M         movlw   b'1001'
0325   0085               M         movwf   PORTA
0326   2???           00745     call    motor_del
                      00746     movlf   b'1000', PORTA
0327   3008               M         movlw   b'1000'
0328   0085               M         movwf   PORTA
0329   2???           00747     call    motor_del
                      00748     movlf   b'1010', PORTA
032A   300A               M         movlw   b'1010'
032B   0085               M         movwf   PORTA
032C   2???           00749     call    motor_del
                      00750     movlf   b'0010', PORTA
032D   3002               M         movlw   b'0010'
032E   0085               M         movwf   PORTA
032F   2???           00751     call    motor_del
                      00752     movlf   b'0110', PORTA
0330   3006               M         movlw   b'0110'
0331   0085               M         movwf   PORTA
0332   2???           00753     call    motor_del
                      00754     movlf   b'0100', PORTA
0333   3004               M         movlw   b'0100'
0334   0085               M         movwf   PORTA
0335   2???           00755     call    motor_del
                      00756     movlf   b'0101', PORTA
0336   3005               M         movlw   b'0101'
0337   0085               M         movwf   PORTA
0338   2???           00757     call    motor_del
                      00758     movlf   b'0001', PORTA
0339   3001               M         movlw   b'0001'
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033A   0085               M         movwf   PORTA
033B   2???           00759     call    motor_del
                      00760 
Message[305]: Using default destination of 1 (file).
033C   0BC8           00761     decfsz  motor_count
033D   2???           00762     goto    start_rot
033E   0185           00763     clrf    PORTA
033F   0008           00764     return
                      00765 
                      00766 ;***************************************
                      00767 ; DATA DISPLAY ROUTINE
                      00768 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00769 ; Determines which key it was and displays appropriate info / branch
                      00770 ;***************************************
                      00771 
0340                  00772 information
0340   00B7           00773     movwf   keytemp             ; Save which key was pressed
                      00774 
0341                  00775 check_1
0341   3A00           00776     xorlw   0x0         ;will be all zeros if its 1
0342   1D03           00777     btfss   STATUS,Z    ;and Z will be high, so skip
0343   2???           00778     goto    check_2
0344   2???           00779     call    Clear_Display
                      00780     writechar "1"
0345   3031               M             movlw   "1"
0346   2???               M             call    WR_DATA
0347   0820           00781     movf    state1, W
0348   2???           00782     call    display_state
0349   0008           00783     return
                      00784 
034A                  00785 check_2
034A   0837           00786     movf    keytemp, W
034B   3A01           00787     xorlw   0x1
034C   1D03           00788     btfss   STATUS,Z
034D   2???           00789     goto    check_3
034E   2???           00790     call    Clear_Display
                      00791     writechar "2"
034F   3032               M             movlw   "2"
0350   2???               M             call    WR_DATA
0351   0821           00792     movf    state2, W
0352   2???           00793     call    display_state
0353   0008           00794     return
                      00795 
0354                  00796 check_3
0354   0837           00797     movf    keytemp, W
0355   3A02           00798     xorlw   0x2
0356   1D03           00799     btfss   STATUS,Z
0357   2???           00800     goto    check_4
0358   2???           00801     call    Clear_Display
                      00802     writechar "3"
0359   3033               M             movlw   "3"
035A   2???               M             call    WR_DATA
035B   0822           00803     movf    state3, W
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

035C   2???           00804     call    display_state
035D   0008           00805     return
                      00806 
035E                  00807 check_4
035E   0837           00808     movf    keytemp, W
035F   3A04           00809     xorlw   0x4
0360   1D03           00810     btfss   STATUS,Z
0361   2???           00811     goto    check_5
0362   2???           00812     call    Clear_Display
                      00813     writechar "4"
0363   3034               M             movlw   "4"
0364   2???               M             call    WR_DATA
0365   0823           00814     movf    state4, W
0366   2???           00815     call    display_state
0367   0008           00816     return
                      00817 
0368                  00818 check_5
0368   0837           00819     movf    keytemp, W
0369   3A05           00820     xorlw   0x5
036A   1D03           00821     btfss   STATUS,Z
036B   2???           00822     goto    check_6
036C   2???           00823     call    Clear_Display
                      00824     writechar "5"
036D   3035               M             movlw   "5"
036E   2???               M             call    WR_DATA
036F   0824           00825     movf    state5, W
0370   2???           00826     call    display_state
0371   0008           00827     return
                      00828 
0372                  00829 check_6
0372   0837           00830     movf    keytemp, W
0373   3A06           00831     xorlw   0x6
0374   1D03           00832     btfss   STATUS,Z
0375   2???           00833     goto    check_7
0376   2???           00834     call    Clear_Display
                      00835     writechar "6"
0377   3036               M             movlw   "6"
0378   2???               M             call    WR_DATA
0379   0825           00836     movf    state6, W
037A   2???           00837     call    display_state
037B   0008           00838     return
                      00839 
037C                  00840 check_7
037C   0837           00841     movf    keytemp, W
037D   3A08           00842     xorlw   0x8
037E   1D03           00843     btfss   STATUS,Z
037F   2???           00844     goto    check_8
0380   2???           00845     call    Clear_Display
                      00846     writechar "7"
0381   3037               M             movlw   "7"
0382   2???               M             call    WR_DATA
0383   0826           00847     movf    state7, W
0384   2???           00848     call    display_state
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0385   0008           00849     return
                      00850 
0386                  00851 check_8
0386   0837           00852     movf    keytemp, W
0387   3A09           00853     xorlw   0x9
0388   1D03           00854     btfss   STATUS,Z
0389   2???           00855     goto    check_9
038A   2???           00856     call    Clear_Display
                      00857     writechar "8"
038B   3038               M             movlw   "8"
038C   2???               M             call    WR_DATA
038D   0827           00858     movf    state8, W
038E   2???           00859     call    display_state
038F   0008           00860     return
                      00861 
0390                  00862 check_9
0390   0837           00863     movf    keytemp, W
0391   3A0A           00864     xorlw   0xA
0392   1D03           00865     btfss   STATUS,Z
0393   2???           00866     goto    check_summary
0394   2???           00867     call    Clear_Display
                      00868     writechar "9"
0395   3039               M             movlw   "9"
0396   2???               M             call    WR_DATA
0397   0828           00869     movf    state9, W
0398   2???           00870     call    display_state
0399   0008           00871     return
                      00872 
039A                  00873 check_summary
039A   0837           00874     movf    keytemp, W
039B   3A03           00875     xorlw   0x3
039C   1D03           00876     btfss   STATUS,Z
039D   2???           00877     goto    check_defective
039E   2???           00878     call    summary
039F   0008           00879     return
                      00880 
03A0                  00881 check_defective
03A0   0837           00882     movf    keytemp, W
03A1   3A07           00883     xorlw   0x7
03A2   1D03           00884     btfss   STATUS,Z
03A3   2???           00885     goto    check_time
03A4   2???           00886     call    defective
03A5   0008           00887     return
                      00888 
03A6                  00889 check_time
03A6   0837           00890     movf    keytemp, W
03A7   3A0B           00891     xorlw   0xB
03A8   1D03           00892     btfss   STATUS,Z
03A9   2???           00893     goto    check_export
03AA   2???           00894     call    time
03AB   0008           00895     return
                      00896 
03AC                  00897 check_export
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AC   0837           00898     movf    keytemp, W
03AD   3A0F           00899     xorlw   0xF
03AE   1D03           00900     btfss   STATUS,Z
03AF   2???           00901     goto    check_standby       ;or do you wanna allow to check logs?
03B0   2???           00902     call    export
03B1   0008           00903     return
                      00904 
                      00905 ;check_logs
                      00906 ;    movf    keytemp, W
                      00907 ;    xorlw   0xE
                      00908 ;    btfss   STATUS,Z
                      00909 ;    goto    check_standby
                      00910 ;    goto    logs
                      00911 
03B2                  00912 check_standby
03B2   0837           00913     movf    keytemp, W
03B3   3A0D           00914     xorlw   0xD
03B4   1D03           00915     btfss   STATUS,Z
03B5   2???           00916     goto    check_start
03B6   2???           00917     call    Clear_Display
                      00918     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03B7   01B9               M                 clrf    Table_Counter
03B8   0103               M                 clrw
03B9                      M loop_disp
03B9   0839               M         movf    Table_Counter,W
03BA   2???               M                 call    Standby_Msg
03BB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03BC   1903               M                 btfsc   STATUS,Z
03BD   2???               M                 goto    end_disp
03BE   2???               M                 call    WR_DATA
03BF   0AB9               M                 incf    Table_Counter,F
03C0   2???               M                 goto    loop_disp
03C1                      M end_disp
03C1   2???           00919     call    Switch_Lines
03C2   2???           00920     goto    waiting
                      00921 
03C3                  00922 check_start
03C3   0837           00923     movf    keytemp, W
03C4   3A0C           00924     xorlw   0xC
03C5   1D03           00925     btfss   STATUS,Z
03C6   2???           00926     goto    default_key
03C7   2???           00927     goto    start
                      00928 
03C8                  00929 default_key         ; will never get here
03C8   0008           00930     return
                      00931 
                      00932 
                      00933 ;Display state subroutine
                      00934 ;stateN is in W
03C9                  00935 display_state
03C9   00B8           00936     movwf  statetemp    ; save stateN
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00937 
03CA                  00938 check_none
03CA   3A00           00939     xorlw   0x0
03CB   1D03           00940     btfss   STATUS,Z
03CC   2???           00941     goto    check_pass
                      00942     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03CD   01B9               M                 clrf    Table_Counter
03CE   0103               M                 clrw
03CF                      M loop_disp
03CF   0839               M         movf    Table_Counter,W
03D0   2???               M                 call    Not_present
03D1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03D2   1903               M                 btfsc   STATUS,Z
03D3   2???               M                 goto    end_disp
03D4   2???               M                 call    WR_DATA
03D5   0AB9               M                 incf    Table_Counter,F
03D6   2???               M                 goto    loop_disp
03D7                      M end_disp
03D7   0008           00943     return
                      00944 
03D8                  00945 check_pass
03D8   0838           00946     movf    statetemp, W
03D9   3A01           00947     xorlw   0x1
03DA   1D03           00948     btfss   STATUS,Z
03DB   2???           00949     goto    check_LED
                      00950     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03DC   01B9               M                 clrf    Table_Counter
03DD   0103               M                 clrw
03DE                      M loop_disp
03DE   0839               M         movf    Table_Counter,W
03DF   2???               M                 call    Pass
03E0   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E1   1903               M                 btfsc   STATUS,Z
03E2   2???               M                 goto    end_disp
03E3   2???               M                 call    WR_DATA
03E4   0AB9               M                 incf    Table_Counter,F
03E5   2???               M                 goto    loop_disp
03E6                      M end_disp
03E6   0008           00951     return
                      00952 
03E7                  00953 check_LED
03E7   0838           00954     movf    statetemp, W
03E8   3A02           00955     xorlw   0x2
03E9   1D03           00956     btfss   STATUS,Z
03EA   2???           00957     goto    check_flick
                      00958     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03EB   01B9               M                 clrf    Table_Counter
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03EC   0103               M                 clrw
03ED                      M loop_disp
03ED   0839               M         movf    Table_Counter,W
03EE   2???               M                 call    LED_fail
03EF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F0   1903               M                 btfsc   STATUS,Z
03F1   2???               M                 goto    end_disp
03F2   2???               M                 call    WR_DATA
03F3   0AB9               M                 incf    Table_Counter,F
03F4   2???               M                 goto    loop_disp
03F5                      M end_disp
03F5   0008           00959     return
                      00960 
03F6                  00961 check_flick
03F6   0838           00962     movf    statetemp, W
03F7   3A03           00963     xorlw   0x3
03F8   1D03           00964     btfss   STATUS,Z
03F9   2???           00965     goto    default_state
                      00966     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03FA   01B9               M                 clrf    Table_Counter
03FB   0103               M                 clrw
03FC                      M loop_disp
03FC   0839               M         movf    Table_Counter,W
03FD   2???               M                 call    Flick_fail
03FE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03FF   1903               M                 btfsc   STATUS,Z
0400   2???               M                 goto    end_disp
0401   2???               M                 call    WR_DATA
0402   0AB9               M                 incf    Table_Counter,F
0403   2???               M                 goto    loop_disp
0404                      M end_disp
0404   0008           00967     return
                      00968 
0405                  00969 default_state   ; should never get here
0405   0008           00970     return
                      00971 
                      00972 ; Summary Subroutine
                      00973 ; Displays total number of candles and number of defective candles
                      00974 ; Reads data from num_tot, num_LF, num_FF
0406                  00975 summary
0406   2???           00976     call            Clear_Display
                      00977     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0407   01B9               M                 clrf    Table_Counter
0408   0103               M                 clrw
0409                      M loop_disp
0409   0839               M         movf    Table_Counter,W
040A   2???               M                 call    Total_Msg
040B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
040C   1903               M                 btfsc   STATUS,Z
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040D   2???               M                 goto    end_disp
040E   2???               M                 call    WR_DATA
040F   0AB9               M                 incf    Table_Counter,F
0410   2???               M                 goto    loop_disp
0411                      M end_disp
                      00978     writeBCD        num_tot
0411   0834               M             movf    num_tot, W
0412   3E30               M             addlw   B'00110000'
0413   2???               M             call WR_DATA
0414   2???           00979     call            Switch_Lines
                      00980     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0415   01B9               M                 clrf    Table_Counter
0416   0103               M                 clrw
0417                      M loop_disp
0417   0839               M         movf    Table_Counter,W
0418   2???               M                 call    LF
0419   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
041A   1903               M                 btfsc   STATUS,Z
041B   2???               M                 goto    end_disp
041C   2???               M                 call    WR_DATA
041D   0AB9               M                 incf    Table_Counter,F
041E   2???               M                 goto    loop_disp
041F                      M end_disp
                      00981     writeBCD        num_LF
041F   0835               M             movf    num_LF, W
0420   3E30               M             addlw   B'00110000'
0421   2???               M             call WR_DATA
                      00982     spacebar
0422   3014               M             movlw   B'00010100'
0423   2???               M             call    WR_INS
                      00983     spacebar
0424   3014               M             movlw   B'00010100'
0425   2???               M             call    WR_INS
                      00984     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0426   01B9               M                 clrf    Table_Counter
0427   0103               M                 clrw
0428                      M loop_disp
0428   0839               M         movf    Table_Counter,W
0429   2???               M                 call    FF
042A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
042B   1903               M                 btfsc   STATUS,Z
042C   2???               M                 goto    end_disp
042D   2???               M                 call    WR_DATA
042E   0AB9               M                 incf    Table_Counter,F
042F   2???               M                 goto    loop_disp
0430                      M end_disp
                      00985     writeBCD        num_FF
0430   0836               M             movf    num_FF, W
0431   3E30               M             addlw   B'00110000'
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0432   2???               M             call WR_DATA
0433   0008           00986     return
                      00987 
                      00988 ; Defective candles Subroutine
                      00989 ; Displays index of each defective candle (LF or FF)
                      00990 ; Reads data from state1 - state9
0434                  00991 defective
0434   2???           00992     call            Clear_Display
                      00993 
                      00994     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0435   01B9               M                 clrf    Table_Counter
0436   0103               M                 clrw
0437                      M loop_disp
0437   0839               M         movf    Table_Counter,W
0438   2???               M                 call    LF
0439   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
043A   1903               M                 btfsc   STATUS,Z
043B   2???               M                 goto    end_disp
043C   2???               M                 call    WR_DATA
043D   0AB9               M                 incf    Table_Counter,F
043E   2???               M                 goto    loop_disp
043F                      M end_disp
043F   08B5           00995     movf            num_LF, F
0440   1D03           00996     btfss           STATUS,Z         ;if none LF, just say "none"
0441   2???           00997     goto            check_LF
                      00998     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0442   01B9               M                 clrf    Table_Counter
0443   0103               M                 clrw
0444                      M loop_disp
0444   0839               M         movf    Table_Counter,W
0445   2???               M                 call    None
0446   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0447   1903               M                 btfsc   STATUS,Z
0448   2???               M                 goto    end_disp
0449   2???               M                 call    WR_DATA
044A   0AB9               M                 incf    Table_Counter,F
044B   2???               M                 goto    loop_disp
044C                      M end_disp
044C   2???           00999     goto            now_FF
                      01000 
044D                  01001 check_LF                            ; list all LF candles
044D   3002           01002     movlw           B'00000010'
044E   2???           01003     call            check_for_fail
                      01004 
044F                  01005 now_FF                              ; now look at FF
044F   2???           01006     call            Switch_Lines
                      01007     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0450   01B9               M                 clrf    Table_Counter
0451   0103               M                 clrw
0452                      M loop_disp
0452   0839               M         movf    Table_Counter,W
0453   2???               M                 call    FF
0454   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0455   1903               M                 btfsc   STATUS,Z
0456   2???               M                 goto    end_disp
0457   2???               M                 call    WR_DATA
0458   0AB9               M                 incf    Table_Counter,F
0459   2???               M                 goto    loop_disp
045A                      M end_disp
045A   08B6           01008     movf            num_FF, F
045B   1D03           01009     btfss           STATUS,Z         ;if none FF, just say "none"
045C   2???           01010     goto            check_FF
                      01011     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
045D   01B9               M                 clrf    Table_Counter
045E   0103               M                 clrw
045F                      M loop_disp
045F   0839               M         movf    Table_Counter,W
0460   2???               M                 call    None
0461   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0462   1903               M                 btfsc   STATUS,Z
0463   2???               M                 goto    end_disp
0464   2???               M                 call    WR_DATA
0465   0AB9               M                 incf    Table_Counter,F
0466   2???               M                 goto    loop_disp
0467                      M end_disp
0467   0008           01012     return
                      01013 
0468                  01014 check_FF                            ; list all FF candles
0468   3003           01015     movlw           B'00000011'
0469   2???           01016     call            check_for_fail
046A   0008           01017     return
                      01018 
046B                  01019 check_for_fail  ;lists all candles that have status currently in W "stateX"
046B   00B8           01020     movwf   statetemp
                      01021         movlf   D'0', candle_index
046C   3000               M         movlw   D'0'
046D   00C5               M         movwf   candle_index
046E   1383           01022         bcf     STATUS, IRP
                      01023         movlf   0x1F, FSR           ;index of right before state1
046F   301F               M         movlw   0x1F
0470   0084               M         movwf   FSR
0471                  01024 check_next
0471   3009           01025         movlw   D'9'                ;exit loop if at 9
0472   0245           01026         subwf   candle_index, W
0473   1803           01027         btfsc   STATUS,W
0474   2???           01028         goto    end_check_fail
0475   0A84           01029         incf    FSR,F               ; increment
0476   0AC5           01030         incf    candle_index,F
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0477   0838           01031         movf    statetemp, W            ;see if stateN = stateX
0478   0200           01032         subwf   INDF, W
0479   1D03           01033         btfss   STATUS, Z
047A   2???           01034         goto    check_next              ;if not, go to next
                      01035         writeBCD        candle_index    ;if so, write down the number
047B   0845               M             movf    candle_index, W
047C   3E30               M             addlw   B'00110000'
047D   2???               M             call WR_DATA
                      01036         spacebar
047E   3014               M             movlw   B'00010100'
047F   2???               M             call    WR_INS
0480   2???           01037         goto check_next
0481                  01038 end_check_fail
0481   0008           01039         return
                      01040 
                      01041 ; Time subroutine
                      01042 ; Right now this takes the time in seconds as a binary number in op_time
                      01043 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01044 ; incremented every second. However I may just take the stop time - start time
                      01045 ; from the RTC data so this might change a lot.
0482                  01046 time
0482   2???           01047     call    Clear_Display
                      01048     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0483   01B9               M                 clrf    Table_Counter
0484   0103               M                 clrw
0485                      M loop_disp
0485   0839               M         movf    Table_Counter,W
0486   2???               M                 call    Time_Msg
0487   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0488   1903               M                 btfsc   STATUS,Z
0489   2???               M                 goto    end_disp
048A   2???               M                 call    WR_DATA
048B   0AB9               M                 incf    Table_Counter,F
048C   2???               M                 goto    loop_disp
048D                      M end_disp
048D   2???           01049     call    Switch_Lines
048E   0833           01050     movf    op_time, W
048F   2???           01051     call    big_number
0490   08C0           01052     movf    huns, F
0491   1903           01053     btfsc   STATUS,Z        ;if huns is zero don't display it
0492   2???           01054     goto    no_huns
                      01055     writeBCD    huns
0493   0840               M             movf    huns, W
0494   3E30               M             addlw   B'00110000'
0495   2???               M             call WR_DATA
0496                  01056 no_huns
0496   08C1           01057     movf    tens, F
0497   1903           01058     btfsc   STATUS,Z        ;if tens is zero don't display it
0498   2???           01059     goto    no_tens
                      01060     writeBCD    tens
0499   0841               M             movf    tens, W
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

049A   3E30               M             addlw   B'00110000'
049B   2???               M             call WR_DATA
049C                  01061 no_tens
                      01062     writeBCD    ones
049C   0842               M             movf    ones, W
049D   3E30               M             addlw   B'00110000'
049E   2???               M             call WR_DATA
                      01063     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
049F   01B9               M                 clrf    Table_Counter
04A0   0103               M                 clrw
04A1                      M loop_disp
04A1   0839               M         movf    Table_Counter,W
04A2   2???               M                 call    Seconds
04A3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04A4   1903               M                 btfsc   STATUS,Z
04A5   2???               M                 goto    end_disp
04A6   2???               M                 call    WR_DATA
04A7   0AB9               M                 incf    Table_Counter,F
04A8   2???               M                 goto    loop_disp
04A9                      M end_disp
04A9   0008           01064     return
                      01065 
                      01066 ; Export subroutine
                      01067 ; Exports data from current run to hyperterminal
                      01068 ; reads start time and num_tot/num_ff/num_lf data
04AA                  01069 export
                      01070     printchar   0x7       ;makes a noise on the PC
04AA   3007               M             movlw   0x7
04AB   2???               M             call    writetoPC
                      01071     printchar   0xD       ;go back to left edge
04AC   300D               M             movlw   0xD
04AD   2???               M             call    writetoPC
                      01072     printchar   "T"
04AE   3054               M             movlw   "T"
04AF   2???               M             call    writetoPC
                      01073     printchar   "e"
04B0   3065               M             movlw   "e"
04B1   2???               M             call    writetoPC
                      01074     printchar   "s"
04B2   3073               M             movlw   "s"
04B3   2???               M             call    writetoPC
                      01075     printchar   "t"
04B4   3074               M             movlw   "t"
04B5   2???               M             call    writetoPC
                      01076     printchar   " "
04B6   3020               M             movlw   " "
04B7   2???               M             call    writetoPC
                      01077     printchar   "a"
04B8   3061               M             movlw   "a"
04B9   2???               M             call    writetoPC
                      01078     printchar   "t"
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BA   3074               M             movlw   "t"
04BB   2???               M             call    writetoPC
                      01079     printchar   ":"
04BC   303A               M             movlw   ":"
04BD   2???               M             call    writetoPC
                      01080     printchar   " "
04BE   3020               M             movlw   " "
04BF   2???               M             call    writetoPC
                      01081     printchar   "2"
04C0   3032               M             movlw   "2"
04C1   2???               M             call    writetoPC
                      01082     printchar   "0"
04C2   3030               M             movlw   "0"
04C3   2???               M             call    writetoPC
                      01083     printASC   start_year10
04C4   1283 1303          M             banksel start_year10
04C6   0829               M             movf    start_year10,W
04C7   2???               M             call    writetoPC
                      01084     printASC   start_year1
04C8   1283 1303          M             banksel start_year1
04CA   082A               M             movf    start_year1,W
04CB   2???               M             call    writetoPC
                      01085     printchar   "/"
04CC   302F               M             movlw   "/"
04CD   2???               M             call    writetoPC
                      01086     printASC   start_month10
04CE   1283 1303          M             banksel start_month10
04D0   082B               M             movf    start_month10,W
04D1   2???               M             call    writetoPC
                      01087     printASC   start_month1
04D2   1283 1303          M             banksel start_month1
04D4   082C               M             movf    start_month1,W
04D5   2???               M             call    writetoPC
                      01088     printchar   "/"
04D6   302F               M             movlw   "/"
04D7   2???               M             call    writetoPC
                      01089     printASC   start_date10
04D8   1283 1303          M             banksel start_date10
04DA   082D               M             movf    start_date10,W
04DB   2???               M             call    writetoPC
                      01090     printASC   start_date1
04DC   1283 1303          M             banksel start_date1
04DE   082E               M             movf    start_date1,W
04DF   2???               M             call    writetoPC
                      01091     printchar   " "
04E0   3020               M             movlw   " "
04E1   2???               M             call    writetoPC
                      01092     printASC   start_hour10
04E2   1283 1303          M             banksel start_hour10
04E4   082F               M             movf    start_hour10,W
04E5   2???               M             call    writetoPC
                      01093     printASC   start_hour1
04E6   1283 1303          M             banksel start_hour1
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04E8   0830               M             movf    start_hour1,W
04E9   2???               M             call    writetoPC
                      01094     printchar   ":"
04EA   303A               M             movlw   ":"
04EB   2???               M             call    writetoPC
                      01095     printASC   start_min10
04EC   1283 1303          M             banksel start_min10
04EE   0831               M             movf    start_min10,W
04EF   2???               M             call    writetoPC
                      01096     printASC   start_min1
04F0   1283 1303          M             banksel start_min1
04F2   0832               M             movf    start_min1,W
04F3   2???               M             call    writetoPC
                      01097     newline
                          M             printchar   0xA ;changes line
04F4   300A               M             movlw   0xA
04F5   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04F6   300D               M             movlw   0xD
04F7   2???               M             call    writetoPC
                      01098     printchar   "T"
04F8   3054               M             movlw   "T"
04F9   2???               M             call    writetoPC
                      01099     printchar   "i"
04FA   3069               M             movlw   "i"
04FB   2???               M             call    writetoPC
                      01100     printchar   "m"
04FC   306D               M             movlw   "m"
04FD   2???               M             call    writetoPC
                      01101     printchar   "e"
04FE   3065               M             movlw   "e"
04FF   2???               M             call    writetoPC
                      01102     printchar   ":"
0500   303A               M             movlw   ":"
0501   2???               M             call    writetoPC
                      01103     printchar   " "
0502   3020               M             movlw   " "
0503   2???               M             call    writetoPC
                      01104     printchar   " "
0504   3020               M             movlw   " "
0505   2???               M             call    writetoPC
                      01105     printchar   " "
0506   3020               M             movlw   " "
0507   2???               M             call    writetoPC
                      01106     printchar   " "
0508   3020               M             movlw   " "
0509   2???               M             call    writetoPC
050A   1283 1303      01107     banksel huns
050C   08C0           01108     movf    huns, F
050D   1903           01109     btfsc   STATUS,Z        ;if huns is zero don't display it
050E   2???           01110     goto    nohuns
                      01111     printBCD   huns
050F   1283 1303          M             banksel huns
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0511   0840               M             movf    huns, W
0512   3E30               M             addlw   0x30
0513   2???               M             call    writetoPC
0514                  01112 nohuns
0514   1283 1303      01113     banksel tens
0516   08C1           01114     movf    tens, F
0517   1903           01115     btfsc   STATUS,Z        ;if tens is zero don't display it
0518   2???           01116     goto    notens
                      01117     printBCD   tens
0519   1283 1303          M             banksel tens
051B   0841               M             movf    tens, W
051C   3E30               M             addlw   0x30
051D   2???               M             call    writetoPC
051E                  01118 notens
                      01119     printBCD   ones
051E   1283 1303          M             banksel ones
0520   0842               M             movf    ones, W
0521   3E30               M             addlw   0x30
0522   2???               M             call    writetoPC
                      01120     printchar   " "
0523   3020               M             movlw   " "
0524   2???               M             call    writetoPC
                      01121     printchar   "s"
0525   3073               M             movlw   "s"
0526   2???               M             call    writetoPC
                      01122     printchar   "e"
0527   3065               M             movlw   "e"
0528   2???               M             call    writetoPC
                      01123     printchar   "c"
0529   3063               M             movlw   "c"
052A   2???               M             call    writetoPC
                      01124     newline
                          M             printchar   0xA ;changes line
052B   300A               M             movlw   0xA
052C   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
052D   300D               M             movlw   0xD
052E   2???               M             call    writetoPC
                      01125     printchar   "C"
052F   3043               M             movlw   "C"
0530   2???               M             call    writetoPC
                      01126     printchar   "a"
0531   3061               M             movlw   "a"
0532   2???               M             call    writetoPC
                      01127     printchar   "n"
0533   306E               M             movlw   "n"
0534   2???               M             call    writetoPC
                      01128     printchar   "d"
0535   3064               M             movlw   "d"
0536   2???               M             call    writetoPC
                      01129     printchar   "l"
0537   306C               M             movlw   "l"
0538   2???               M             call    writetoPC
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01130     printchar   "e"
0539   3065               M             movlw   "e"
053A   2???               M             call    writetoPC
                      01131     printchar   "s"
053B   3073               M             movlw   "s"
053C   2???               M             call    writetoPC
                      01132     printchar   ":"
053D   303A               M             movlw   ":"
053E   2???               M             call    writetoPC
                      01133     printchar   " "
053F   3020               M             movlw   " "
0540   2???               M             call    writetoPC
                      01134     printchar   " "
0541   3020               M             movlw   " "
0542   2???               M             call    writetoPC
                      01135     printchar   " "
0543   3020               M             movlw   " "
0544   2???               M             call    writetoPC
                      01136     printchar   " "
0545   3020               M             movlw   " "
0546   2???               M             call    writetoPC
                      01137     printchar   " "
0547   3020               M             movlw   " "
0548   2???               M             call    writetoPC
                      01138     printchar   " "
0549   3020               M             movlw   " "
054A   2???               M             call    writetoPC
                      01139     printBCD    num_tot
054B   1283 1303          M             banksel num_tot
054D   0834               M             movf    num_tot, W
054E   3E30               M             addlw   0x30
054F   2???               M             call    writetoPC
                      01140     newline
                          M             printchar   0xA ;changes line
0550   300A               M             movlw   0xA
0551   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0552   300D               M             movlw   0xD
0553   2???               M             call    writetoPC
                      01141     printchar   "L"
0554   304C               M             movlw   "L"
0555   2???               M             call    writetoPC
                      01142     printchar   "E"
0556   3045               M             movlw   "E"
0557   2???               M             call    writetoPC
                      01143     printchar   "D"
0558   3044               M             movlw   "D"
0559   2???               M             call    writetoPC
                      01144     printchar   " "
055A   3020               M             movlw   " "
055B   2???               M             call    writetoPC
                      01145     printchar   "f"
055C   3066               M             movlw   "f"
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

055D   2???               M             call    writetoPC
                      01146     printchar   "a"
055E   3061               M             movlw   "a"
055F   2???               M             call    writetoPC
                      01147     printchar   "i"
0560   3069               M             movlw   "i"
0561   2???               M             call    writetoPC
                      01148     printchar   "l"
0562   306C               M             movlw   "l"
0563   2???               M             call    writetoPC
                      01149     printchar   ":"
0564   303A               M             movlw   ":"
0565   2???               M             call    writetoPC
                      01150     printchar   " "
0566   3020               M             movlw   " "
0567   2???               M             call    writetoPC
                      01151     printchar   " "
0568   3020               M             movlw   " "
0569   2???               M             call    writetoPC
                      01152     printchar   " "
056A   3020               M             movlw   " "
056B   2???               M             call    writetoPC
                      01153     printchar   " "
056C   3020               M             movlw   " "
056D   2???               M             call    writetoPC
                      01154     printchar   " "
056E   3020               M             movlw   " "
056F   2???               M             call    writetoPC
                      01155     printBCD    num_LF
0570   1283 1303          M             banksel num_LF
0572   0835               M             movf    num_LF, W
0573   3E30               M             addlw   0x30
0574   2???               M             call    writetoPC
                      01156     newline
                          M             printchar   0xA ;changes line
0575   300A               M             movlw   0xA
0576   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0577   300D               M             movlw   0xD
0578   2???               M             call    writetoPC
                      01157     printchar   "F"
0579   3046               M             movlw   "F"
057A   2???               M             call    writetoPC
                      01158     printchar   "l"
057B   306C               M             movlw   "l"
057C   2???               M             call    writetoPC
                      01159     printchar   "i"
057D   3069               M             movlw   "i"
057E   2???               M             call    writetoPC
                      01160     printchar   "c"
057F   3063               M             movlw   "c"
0580   2???               M             call    writetoPC
                      01161     printchar   "k"
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0581   306B               M             movlw   "k"
0582   2???               M             call    writetoPC
                      01162     printchar   "e"
0583   3065               M             movlw   "e"
0584   2???               M             call    writetoPC
                      01163     printchar   "r"
0585   3072               M             movlw   "r"
0586   2???               M             call    writetoPC
                      01164     printchar   " "
0587   3020               M             movlw   " "
0588   2???               M             call    writetoPC
                      01165     printchar   "f"
0589   3066               M             movlw   "f"
058A   2???               M             call    writetoPC
                      01166     printchar   "a"
058B   3061               M             movlw   "a"
058C   2???               M             call    writetoPC
                      01167     printchar   "i"
058D   3069               M             movlw   "i"
058E   2???               M             call    writetoPC
                      01168     printchar   "l"
058F   306C               M             movlw   "l"
0590   2???               M             call    writetoPC
                      01169     printchar   ":"
0591   303A               M             movlw   ":"
0592   2???               M             call    writetoPC
                      01170     printchar   " "
0593   3020               M             movlw   " "
0594   2???               M             call    writetoPC
                      01171     printBCD    num_FF
0595   1283 1303          M             banksel num_FF
0597   0836               M             movf    num_FF, W
0598   3E30               M             addlw   0x30
0599   2???               M             call    writetoPC
                      01172     newline
                          M             printchar   0xA ;changes line
059A   300A               M             movlw   0xA
059B   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
059C   300D               M             movlw   0xD
059D   2???               M             call    writetoPC
                      01173     newline
                          M             printchar   0xA ;changes line
059E   300A               M             movlw   0xA
059F   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05A0   300D               M             movlw   0xD
05A1   2???               M             call    writetoPC
05A2   1283           01174     bcf STATUS,RP0
05A3   1303           01175     bcf STATUS,RP1     ; back to bank 0
05A4   0008           01176     return
                      01177 
                      01178 
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01179 ;***************************************
                      01180 ; GENERAL PURPOSE SUBROUTINES
                      01181 ;***************************************
                      01182 
                      01183 ; DISPLAY BIG NUMBER SUBROUTINE
                      01184 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01185 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01186 ; Uses "shift and add 3" algorithm
05A5                  01187 big_number
                      01188     movff   op_time, op_time_save         ;save the original op_time
05A5   0833               M         movf    op_time, W
05A6   00BF               M         movwf   op_time_save
                      01189     movlf   8, bignumcount                ;will shift 8 times
05A7   3008               M         movlw   8
05A8   00C3               M         movwf   bignumcount
05A9   01C0           01190     clrf    huns
05AA   01C1           01191     clrf    tens
05AB   01C2           01192     clrf    ones
                      01193 
05AC                  01194 BCDadd3                             ; if any digit > 5, add3
05AC   3005           01195     movlw   0x5
05AD   0240           01196     subwf   huns, W
05AE   1803           01197     btfsc   STATUS, C
05AF   2???           01198     call    add3huns
                      01199 
05B0   3005           01200     movlw   0x5
05B1   0241           01201     subwf   tens, W
05B2   1803           01202     btfsc   STATUS, C
05B3   2???           01203     call    add3tens
                      01204 
05B4   3005           01205     movlw   0x5
05B5   0242           01206     subwf   ones, W
05B6   1803           01207     btfsc   STATUS, C
05B7   2???           01208     call    add3ones
                      01209 
05B8   03C3           01210     decf    bignumcount, 1
05B9   1003           01211     bcf     STATUS, C
05BA   0DB3           01212     rlf     op_time, 1              ; shift
05BB   0DC2           01213     rlf     ones, 1
05BC   1A42           01214     btfsc   ones,4 ;
05BD   2???           01215     call    carryones               ; carry if too large
05BE   0DC1           01216     rlf     tens, 1
                      01217 
05BF   1A41           01218     btfsc   tens,4 ;
05C0   2???           01219     call    carrytens
05C1   0DC0           01220     rlf     huns,1
05C2   1003           01221     bcf     STATUS, C
                      01222 
05C3   0843           01223     movf    bignumcount, W
05C4   1D03           01224     btfss   STATUS, Z
05C5   2???           01225     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01226 
                      01227     movff    op_time_save, op_time     ;restore the original op_time
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C6   083F               M         movf    op_time_save, W
05C7   00B3               M         movwf   op_time
05C8   0008           01228     return
                      01229 
05C9                  01230 add3huns
05C9   3003           01231     movlw 0x3
05CA   07C0           01232     addwf huns,F
05CB   0008           01233     return
05CC                  01234 add3tens
05CC   3003           01235     movlw 0x3
05CD   07C1           01236     addwf tens,F
05CE   0008           01237     return
05CF                  01238 add3ones
05CF   3003           01239     movlw 0x3
05D0   07C2           01240     addwf ones,F
05D1   0008           01241     return
05D2                  01242 carryones
05D2   1242           01243     bcf ones, 4
05D3   1403           01244     bsf STATUS, C
05D4   0008           01245     return
05D5                  01246 carrytens
05D5   1241           01247     bcf tens, 4
05D6   1403           01248     bsf STATUS, C
05D7   0008           01249     return
                      01250 
                      01251 
                      01252 ;***************************************
                      01253 ; DELAY SUBROUTINES
                      01254 ;***************************************
                      01255 
                      01256 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01257 ; Delays exactly 0.5sec
05D8                  01258 HalfS
                      01259       movlf 0x8A, delH
05D8   308A               M         movlw   0x8A
05D9   00BC               M         movwf   delH
                      01260       movlf 0xBA, delM
05DA   30BA               M         movlw   0xBA
05DB   00BD               M         movwf   delM
                      01261       movlf 0x03, delL
05DC   3003               M         movlw   0x03
05DD   00BE               M         movwf   delL
05DE                  01262 HalfS_0
05DE   0BBC           01263       decfsz    delH, F
05DF   2???           01264           goto  $+2
05E0   0BBD           01265           decfsz        delM, F
05E1   2???           01266           goto  $+2
05E2   0BBE           01267           decfsz        delL, F
05E3   2???           01268           goto  HalfS_0
                      01269 
05E4   2???           01270           goto  $+1
05E5   0000           01271           nop
05E6   0008           01272           return
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01273 
                      01274 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01275 ; Useful for LCD because PIC is way faster than it can handle
                      01276 ; Delays exactly 5ms
05E7                  01277 delay5ms
                      01278         movlf   0xC3, delH
05E7   30C3               M         movlw   0xC3
05E8   00BC               M         movwf   delH
                      01279         movlf   0x0A, delL
05E9   300A               M         movlw   0x0A
05EA   00BE               M         movwf   delL
05EB                  01280 Delay_0
05EB   0BBC           01281         decfsz  delH, f
05EC   2???           01282         goto    $+2
05ED   0BBE           01283         decfsz  delL, f
05EE   2???           01284         goto    Delay_0
05EF   0008           01285     return
                      01286 
                      01287 ; MOTOR DELAY SUBROUTINE.
                      01288 ; Delays ~10ms for the motor. Also checks IRDATA and sets PRESENT if there is a candle
05F0                  01289 motor_del
                      01290       movlf 0xF3, delH
05F0   30F3               M         movlw   0xF3
05F1   00BC               M         movwf   delH
                      01291       movlf 0x2F, delL
05F2   302F               M         movlw   0x2F
05F3   00BE               M         movwf   delL
05F4                  01292 motor_del_0
                      01293       ;btfsc     IRDATA
                      01294       ;bsf       present, 0
05F4   0BBC           01295       decfsz    delH, F
05F5   2???           01296           goto      $+2
05F6   0BBE           01297           decfsz        delL, F
05F7   2???           01298           goto      motor_del_0
05F8   0008           01299           return
                      01300 
                      01301 ;***************************************
                      01302 ; LCD SUBROUTINES (from sample code)
                      01303 ;***************************************
                      01304 
                      01305 ; Initialize the LCD
05F9                  01306 InitLCD
05F9   1283           01307         bcf STATUS,RP0
05FA   1588           01308         bsf E     ;E default high
                      01309 
                      01310         ;Wait for LCD POR to finish (~15ms)
05FB   2???           01311         call delay5ms
05FC   2???           01312         call delay5ms
05FD   2???           01313         call delay5ms
                      01314 
                      01315         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01316         ; -> Send b'0011' 3 times
05FE   3033           01317         movlw   b'00110011'
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05FF   2???           01318         call    WR_INS
0600   2???           01319         call delay5ms
0601   2???           01320         call delay5ms
0602   3032           01321         movlw   b'00110010'
0603   2???           01322         call    WR_INS
0604   2???           01323         call delay5ms
0605   2???           01324         call delay5ms
                      01325 
                      01326         ; 4 bits, 2 lines, 5x7 dots
0606   3028           01327         movlw   b'00101000'
0607   2???           01328         call    WR_INS
0608   2???           01329         call delay5ms
0609   2???           01330         call delay5ms
                      01331 
                      01332         ; display on/off
060A   300C           01333         movlw   b'00001100'
060B   2???           01334         call    WR_INS
060C   2???           01335         call delay5ms
060D   2???           01336         call delay5ms
                      01337 
                      01338         ; Entry mode
060E   3006           01339         movlw   b'00000110'
060F   2???           01340         call    WR_INS
0610   2???           01341         call delay5ms
0611   2???           01342         call delay5ms
                      01343 
                      01344         ; Clear ram
0612   3001           01345         movlw   b'00000001'
0613   2???           01346         call    WR_INS
0614   2???           01347         call delay5ms
0615   2???           01348         call delay5ms
0616   0008           01349         return
                      01350 
                      01351 ; Clear the display
0617                  01352 Clear_Display
0617   3001           01353                 movlw   B'00000001'
0618   2???           01354                 call    WR_INS
0619   0008           01355                 return
                      01356 
                      01357 ;Switch lines
061A                  01358 Switch_Lines
061A   30C0           01359                 movlw   B'11000000'
061B   2???           01360                 call    WR_INS
061C   0008           01361                 return
                      01362 
                      01363 ; Write an instruction to the LCD (see page 7-104)
                      01364 ; The instruction must be in W
061D                  01365 WR_INS
061D   1108           01366         bcf             RS                              ;clear RS
061E   00BA           01367         movwf   com                             ;W --> com
061F   39F0           01368         andlw   0xF0                    ;mask 4 bits MSB w = X0
0620   0088           01369         movwf   PORTD                   ;Send 4 bits MSB
0621   1588           01370         bsf             E                               ;
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0622   2???           01371         call    delay5ms        ;__    __
0623   1188           01372         bcf             E                               ;  |__|
0624   0E3A           01373         swapf   com,w
0625   39F0           01374         andlw   0xF0                    ;1111 0010
0626   0088           01375         movwf   PORTD                   ;send 4 bits LSB
0627   1588           01376         bsf             E                               ;
0628   2???           01377         call    delay5ms        ;__    __
0629   1188           01378         bcf             E                               ;  |__|
062A   2???           01379         call    delay5ms
062B   0008           01380         return
                      01381 
                      01382 ; Write data at current cursor location
                      01383 ; Character code (see page 7-104) must be in W
062C                  01384 WR_DATA
062C   1508           01385         bsf             RS
062D   00BB           01386         movwf   dat
062E   083B           01387         movf    dat,w
062F   39F0           01388         andlw   0xF0
0630   3E04           01389         addlw   4
0631   0088           01390         movwf   PORTD
0632   1588           01391         bsf             E                               ;
0633   2???           01392         call    delay5ms        ;__    __
0634   1188           01393         bcf             E                               ;  |__|
0635   0E3B           01394         swapf   dat,w
0636   39F0           01395         andlw   0xF0
0637   3E04           01396         addlw   4
0638   0088           01397         movwf   PORTD
0639   1588           01398         bsf             E                               ;
063A   2???           01399         call    delay5ms        ;__    __
063B   1188           01400         bcf             E                               ;  |__|
063C   0008           01401         return
                      01402 
                      01403 
                      01404 ;***************************************
                      01405 ; PC INTERFACE SUBROUTINES (from sample code)
                      01406 ;***************************************
063D                  01407 InitUSART
063D   1683           01408         bsf       STATUS,RP0     ; select bank 1
063E   300F           01409         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
063F   0099           01410         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0640   0198           01411         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01412 
0641   1283           01413         bcf       STATUS,RP0     ; select bank 0
0642   1798           01414         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0643   1618           01415         bsf       RCSTA,CREN     ; continuous receive
                      01416 
0644   1683           01417         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0645   1698           01418         bsf       TXSTA,TXEN     ; Transmit enable
0646   0008           01419         return
                      01420 
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01421 
0647                  01422 writetoPC
                      01423 ; Writes the data in W to the PC
                      01424 ; end up in bank1!
0647   1283           01425         bcf       STATUS,RP0     ; Go to bank 0
0648   0099           01426         movwf     TXREG          ; Send contents of W to RS232
0649   1683           01427         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064A   1C98           01428         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
064B   2???           01429         goto      $-1
064C   0008           01430         return
                      01431 
                      01432 
                      01433 ;***************************************
                      01434 ; ISR
                      01435 ; Currently only care about TMR0
                      01436 ; TMR0 overflows at 256*256; each time, decrement count38
                      01437 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01438 ; When this hapens, op_time increments
                      01439 ; Also check photodata every time for 2 sec = total of 76 reads
                      01440 ;***************************************
064D                  01441 isr
064D   00F9           01442     movwf   w_isr           ;save W and status
064E   0E03           01443     swapf   STATUS, W
064F   0183           01444     clrf    STATUS
0650   00FA           01445     movwf   status_isr
                      01446 ;    movf    PCLATH, W      ;if using pages
                      01447 ;    movwf   pclath_isr
                      01448 ;    clrf    PCLATH
                      01449 
0651   0BC4           01450     decfsz  count38, F     ;if count38 gets to 38 it's been one second
0652   2???           01451     goto    end_isr
                      01452     movlf   D'38', count38  ;so reset count38
0653   3026               M         movlw   D'38'
0654   00C4               M         movwf   count38
0655   0AB3           01453     incf    op_time, F         ; and increment op_time
                      01454 
0656                  01455 end_isr
                      01456 
0656   1C89           01457     btfss   PHOTODATA       ;if PHOTODATA is 1, light is off
0657   0AC6           01458     incf    photocount, F       ;if it is 0, light is on so photocount++
                      01459 
                      01460 ;    movf    pclath_isr, W  ;if using pages
                      01461 ;    movwf    PCLATH
0658   0E7A           01462     swapf   status_isr, W   ;restore W and status
0659   0083           01463     movwf   STATUS
065A   0EF9           01464     swapf   w_isr, F
065B   0E79           01465     swapf   w_isr, W
065C   110B           01466     bcf     INTCON, T0IF    ;clear the interrupt flag
065D   0009           01467     retfie
                      01468 
                      01469 
3F72                  01470     END
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005AC
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000617
D                                 00000005
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           000005EB
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000005D8
HalfS_0                           000005DE
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           000005F9
InitUSART                         0000063D
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000322
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      0000061A
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           0000062C
WR_INS                            0000061D
Z                                 00000002
_.org_1_0172                      00000172
_.org_1_01C4                      000001C4
_.org_1_01EB                      000001EB
_.org_1_020B                      0000020B
_.org_1_0210                      00000210
_.org_1_0229                      00000229
_.org_1_028F                      0000028F
_.org_1_02FF                      000002FF
_.org_1_0320                      00000320
_.org_1_05DF                      000005DF
_.org_1_05E1                      000005E1
_.org_1_05E4                      000005E4
_.org_1_05EC                      000005EC
_.org_1_05F5                      000005F5
_.org_1_064B                      0000064B
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001AB
add3huns                          000005C9
add3ones                          000005CF
add3tens                          000005CC
badkey                            0000028E
badkeyagain                       0000031F
big_number                        000005A5
bignumcount                       00000043
candle_index                      00000045
carryones                         000005D2
carrytens                         000005D5
check_1                           00000341
check_2                           0000034A
check_3                           00000354
check_4                           0000035E
check_5                           00000368
check_6                           00000372
check_7                           0000037C
check_8                           00000386
check_9                           00000390
check_FF                          00000468
check_LED                         000003E7
check_LF                          0000044D
check_defective                   000003A0
check_done                        0000027D
check_export                      000003AC
check_flick                       000003F6
check_for_fail                    0000046B
check_immapeace                   0000030E
check_log1                        0000022D
check_log2                        00000235
check_log3                        0000023E
check_log4                        00000247
check_log5                        00000250
check_log6                        00000259
check_log7                        00000262
check_log8                        0000026B
check_log9                        00000274
check_next                        00000471
check_none                        000003CA
check_nothx                       00000309
check_pass                        000003D8
check_standby                     000003B2
check_start                       000003C3
check_summary                     0000039A
check_threshold1                  0000019C
check_threshold2                  000001A4
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

check_time                        000003A6
check_wanna                       00000303
com                               0000003A
count38                           00000044
dat                               0000003B
default_key                       000003C8
default_state                     00000405
defective                         00000434
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          000005E7
detect_candle                     0000018F
display_log                       00000291
display_state                     000003C9
end_check_fail                    00000481
end_isr                           00000656
end_operation                     000001AF
export                            000004AA
huns                              00000040
i2c_common_setup                  00000000
information                       00000340
init                              000000E7
isr                               0000064D
keytemp                           00000037
logs                              00000212
motor_count                       00000048
motor_del                         000005F0
motor_del_0                       000005F4
movff                             
movlf                             
newline                           
no_huns                           00000496
no_log                            000002A9
no_tens                           0000049C
nohuns                            00000514
notens                            0000051E
now_FF                            0000044F
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000046
photoval                          00000047
poll                              0000020A
polling                           00000228
printASC                          
printBCD                          
printchar                         
read_EEPROM                       00000294
read_rtc                          00000000
MPASM 5.55                         MAINN.ASM   3-19-2014  17:39:29         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

rotate                            00000188
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001BB
shiftlogs_0                       000001BF
spacebar                          
start                             00000174
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000324
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           00000406
tens                              00000041
test_candle                       00000194
threshold1                        D'7'
threshold2                        D'69'
time                              00000482
w_isr                             00000079
waiting                           0000010C
wanna_export                      000002FE
writeASC                          
writeBCD                          
write_log1                        000001E1
write_log1_0                      000001E8
write_rtc                         00000000
writechar                         
writetoPC                         00000647
yes_log                           000002B5

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

