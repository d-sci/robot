MPASM 5.54                      PORTTEST.ASM   1-20-2014  22:17:24         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;Port Tester for PIC184620
                      00002 ;Sequentially turns on all pins that have debug lights on the DevBugger board
                      00003 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4620 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01439         LIST
                      00004                 list P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00005 
                      00006 ;;;;;;Configuration Bits;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00007 
                      00008                 CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00009                 CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00010                 CONFIG WDT = OFF, WDTPS = 32768
                      00011                 CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF, CCP2MX = PORTC
                      00012                 CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00013                 CONFIG DEBUG = OFF
                      00014                 CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00015                 CONFIG CPB = OFF, CPD = OFF
                      00016                 CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00017                 CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00018                 CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00019                 CONFIG EBTRB = OFF
                      00020 
                      00021 ;;;;;;Variables;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00022 
                      00023       cblock   0x70
  00000070            00024          d1                   ;at 0x70
  00000071            00025          d2                   ;at 0x71
                      00026       endc
                      00027 
                      00028 ;;;;;;Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00029 
                      00030 ROTATE   macro    PORT
                      00031          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
                      00032          rlncf    PORT        ;Rotate PORT to the left (bitshift)
                      00033          call     delay       ;Delay for a bit so we can actually see it
                      00034          endm
                      00035 
                      00036 
                      00037 ;;;;;;Code;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00038 
                      00039       org 0x00
000000 6AF2           00040          clrf     INTCON         ;Turn off interrupts
000002 6A92           00041          clrf     TRISA          ; All ports are completely output
000004 6A93           00042          clrf     TRISB
000006 6A94           00043          clrf     TRISC
000008 6A95           00044          clrf     TRISD
00000A 6A96           00045          clrf     TRISE
00000C 0E0F           00046          movlw    0x0F           ;Turn off A/D conversion
00000E 6EC1           00047          movwf    ADCON1
                      00048 
                      00049          ;Initialize all ports to 0
000010 6A89           00050          clrf     LATA
000012 6A8A           00051          clrf     LATB
000014 6A8B           00052          clrf     LATC
000016 6A8C           00053          clrf     LATD
000018 6A8D           00054          clrf     LATE
                      00055 
00001A 0E01           00056 begin    movlw    d'1'     ;Start PORTE as 0b00000001
00001C 6E8D           00057          movwf    LATE
00001E EC?? F???      00058          call     delay
                      00059          ROTATE   LATE    ;PORTE = 0b00000010
000022 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000024 468D               M          rlncf    LATE        ;Rotate PORT to the left (bitshift)
000026 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
00002A 6A8D           00060          clrf     LATE    ;PORTE = 0
                      00061 
00002C 0E01           00062          movlw    d'1'
MPASM 5.54                      PORTTEST.ASM   1-20-2014  22:17:24         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00002E 6E89           00063          movwf    LATA    ;PORTA = 0b00000001
000030 EC?? F???      00064          call     delay
                      00065          ROTATE   LATA    ;PORTA = b'00000010'
000034 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000036 4689               M          rlncf    LATA        ;Rotate PORT to the left (bitshift)
000038 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00066          ROTATE   LATA    ;PORTA = b'00000100'
00003C 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
00003E 4689               M          rlncf    LATA        ;Rotate PORT to the left (bitshift)
000040 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00067          ROTATE   LATA    ;PORTA = b'00001000'
000044 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000046 4689               M          rlncf    LATA        ;Rotate PORT to the left (bitshift)
000048 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00068          ROTATE   LATA    ;PORTA = b'00010000'
00004C 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
00004E 4689               M          rlncf    LATA        ;Rotate PORT to the left (bitshift)
000050 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00069          ROTATE   LATA    ;PORTA = b'00100000;
000054 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000056 4689               M          rlncf    LATA        ;Rotate PORT to the left (bitshift)
000058 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
00005C 6A89           00070          clrf     LATA    ;PORTA = 0
                      00071 
00005E 0E01           00072          movlw    d'1'
000060 6E8A           00073          movwf    LATB
000062 EC?? F???      00074          call     delay
                      00075          ROTATE   LATB
000066 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000068 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
00006A EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00076          ROTATE   LATB
00006E 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000070 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
000072 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00077          ROTATE   LATB
000076 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000078 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
00007A EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00078          ROTATE   LATB
00007E 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000080 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
000082 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00079          ROTATE   LATB
000086 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000088 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
00008A EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00080          ROTATE   LATB
00008E 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000090 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
000092 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00081          ROTATE   LATB
000096 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000098 468A               M          rlncf    LATB        ;Rotate PORT to the left (bitshift)
00009A EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
00009E 6A8A           00082          clrf     LATB
                      00083 
0000A0 0E01           00084          movlw    d'1'
0000A2 6E8B           00085          movwf    LATC
0000A4 EC?? F???      00086          call     delay
                      00087          ROTATE   LATC
0000A8 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000AA 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000AC EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00088          ROTATE   LATC
0000B0 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000B2 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000B4 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00089          ROTATE   LATC
0000B8 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000BA 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000BC EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00090          ROTATE   LATC
0000C0 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
MPASM 5.54                      PORTTEST.ASM   1-20-2014  22:17:24         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000C2 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000C4 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00091          ROTATE   LATC
0000C8 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000CA 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000CC EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00092          ROTATE   LATC
0000D0 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000D2 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000D4 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00093          ROTATE   LATC
0000D8 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000DA 468B               M          rlncf    LATC        ;Rotate PORT to the left (bitshift)
0000DC EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
0000E0 6A8B           00094          clrf     LATC
                      00095 
0000E2 0E01           00096          movlw    d'1'
0000E4 6E8C           00097          movwf    LATD
0000E6 EC?? F???      00098          call     delay
                      00099          ROTATE   LATD
0000EA 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000EC 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
0000EE EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00100          ROTATE   LATD
0000F2 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000F4 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
0000F6 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00101          ROTATE   LATD
0000FA 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
0000FC 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
0000FE EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00102          ROTATE   LATD
000102 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000104 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
000106 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00103          ROTATE   LATD
00010A 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
00010C 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
00010E EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00104          ROTATE   LATD
000112 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
000114 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
000116 EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
                      00105          ROTATE   LATD
00011A 90D8               M          bcf      STATUS,C    ;Clear the Carry bit so it isn't rotated into PORT
00011C 468C               M          rlncf    LATD        ;Rotate PORT to the left (bitshift)
00011E EC?? F???          M          call     delay       ;Delay for a bit so we can actually see it
000122 6A8C           00106          clrf     LATD
                      00107 
000124 EF?? F???      00108          goto     begin
                      00109 
                      00110          ;DELAY FUNCTION
000128                00111 delay    ;Executes loop 65536 times, with approx. 3 instructions per loop (decf=1, goto=2).
000128 6A70           00112                  clrf     d1
00012A 6A71           00113                  clrf     d2
00012C 2E70           00114 delay1   decfsz   d1, 1 ;Count from 255 to 0 (we rely on overflow to reset the counter)
00012E EF?? F???      00115          goto     $-2   ;Note: each instruction is 2 bytes long, so to go to the previous instruction, $-2 is needed
                      00116         ;goto     delay1        - Alternatively, could use label
000132 2E71           00117                  decfsz   d2, 1
000134 EF?? F???      00118          goto     $-8   ;NOTE: each goto instruction is 2 words long (4 bytes) so $-8 is needed to go to label delay1
                      00119                 ;goto     delay1
000138 0012           00120                  return
                      00121          end

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

