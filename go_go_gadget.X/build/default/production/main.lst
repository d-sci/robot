MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'7'
                      00014     #define threshold2  D'69'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017    ; note: check analog vs digital!
                      00018 
                      00019 
                      00020 ;***************************************
                      00021 ; VARIABLES
                      00022 ;***************************************
                      00023 
                      00024 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00025 
                      00026     cblock      0x20
                      00027     ; Important information (will be displayed)
  00000020            00028         state1     ;where   0 = none      1 = pass
  00000021            00029         state2     ;        2 = led fail  3 = flicker fail
  00000022            00030         state3
  00000023            00031         state4
  00000024            00032         state5
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            00033         state6
  00000026            00034         state7
  00000027            00035         state8
  00000028            00036         state9
  00000029            00037         start_year10    ;starting time (for log)
  0000002A            00038         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00039         start_month10
  0000002C            00040         start_month1
  0000002D            00041         start_date10
  0000002E            00042         start_date1
  0000002F            00043         start_hour10
  00000030            00044         start_hour1
  00000031            00045         start_min10
  00000032            00046         start_min1
  00000033            00047         op_time     ;BCD in seconds
  00000034            00048         num_tot     ;BCD
  00000035            00049         num_LF      ;BCD
  00000036            00050         num_FF      ;BCD
                      00051 ; For general program / interface: temps, counters, etc.
  00000037            00052         keytemp         ; for data display mode
  00000038            00053         statetemp
  00000039            00054                 Table_Counter   ; for LCD stuff
  0000003A            00055                 com
  0000003B            00056                 dat
  0000003C            00057         del1            ; for delay 5ms delay routine
  0000003D            00058         del2
  0000003E            00059         hdelH          ;for delay 0.5s routine
  0000003F            00060         hdelM
  00000040            00061         hdelL
  00000041            00062         op_time_save    ;for operation time
  00000042            00063         huns
  00000043            00064         tens
  00000044            00065         ones
  00000045            00066         bignumcount
  00000046            00067         count38         ;for isr
                      00068 ; For machine program: temps, counters, etc.
  00000047            00069         candle_index
  00000048            00070         photocount      ;for detecting candle
  00000049            00071         photoval
  0000004A            00072         start_step      ;for motor
  0000004B            00073         step_count
  0000004C            00074         step_max
                      00075     endc
                      00076 
                      00077     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00078         w_isr
  0000007A            00079         status_isr
                      00080         endc
                      00081 
                      00082 
                      00083 ;***************************************
                      00084 ; MACROS
                      00085 ;***************************************
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 
                      00087 ; Display a msg on LCD
                      00088 Display macro   Message
                      00089                 local   loop_disp
                      00090                 local   end_disp
                      00091                 clrf    Table_Counter
                      00092                 clrw
                      00093 loop_disp
                      00094         movf    Table_Counter,W
                      00095                 call    Message
                      00096                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00097                 btfsc   STATUS,Z
                      00098                 goto    end_disp
                      00099                 call    WR_DATA
                      00100                 incf    Table_Counter,F
                      00101                 goto    loop_disp
                      00102 end_disp
                      00103                 endm
                      00104 
                      00105 
                      00106 ;Shortcuts for moving literals / registers
                      00107 movlf   macro   l, f
                      00108         movlw   l
                      00109         movwf   f
                      00110         endm
                      00111 
                      00112 movff   macro   source, dest
                      00113         movf    source, W
                      00114         movwf   dest
                      00115         endm
                      00116 
                      00117 ; Write to LCD (all in bank0 please)
                      00118 writeBCD    macro   reg         ; from a register containing BCD
                      00119             movf    reg, W
                      00120             addlw   B'00110000'
                      00121             call WR_DATA
                      00122             endm
                      00123 
                      00124 writechar   macro   asc             ;ASCII code literal (or in "")
                      00125             movlw   asc
                      00126             call    WR_DATA
                      00127             endm
                      00128 
                      00129 writeASC        macro   reg         ;from a register containing ASCII
                      00130             movf    reg, W
                      00131             call WR_DATA
                      00132             endm
                      00133 
                      00134 spacebar    macro
                      00135             movlw   B'00010100'
                      00136             call    WR_INS
                      00137             endm
                      00138 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139 ;Print to PC (hyperterminal)
                      00140 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00141             movlw   char
                      00142             call    writetoPC
                      00143             endm
                      00144 
                      00145 printASC    macro   reg            ;ASCII code inside a register
                      00146             banksel reg
                      00147             movf    reg,W
                      00148             call    writetoPC
                      00149             endm
                      00150 
                      00151 printBCD    macro   BCD            ;BCD inside a register
                      00152             banksel BCD
                      00153             movf    BCD, W
                      00154             addlw   0x30
                      00155             call    writetoPC
                      00156             endm
                      00157 
                      00158 newline     macro
                      00159             printchar   0xA ;changes line
                      00160             printchar   0xD ;goes back to left
                      00161             endm
                      00162 ;***************************************
                      00163 ; VECTORS
                      00164 ;***************************************
                      00165 
                      00166     ORG       0x000
0000   2???           00167          goto      init
                      00168     ORG       0x004
0004   2???           00169         goto    isr
                      00170 
                      00171 
                      00172 ;***************************************
                      00173 ; TABLES (MESSAGES)
                      00174 ;***************************************
0005                  00175 Standby_Msg
0005   0782           00176                 addwf   PCL,F
0006   3453 3454 3441 00177                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00178 Start_Msg
000E   0782           00179         addwf   PCL,F
000F   3449 346E 3473 00180         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00181 End_Msg
0020   0782           00182         addwf   PCL,F
0021   3443 346F 346D 00183         dt      "Complete",0
       3470 346C 3465 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3474 3465 3400 
002A                  00184 Time_Msg
002A   0782           00185                 addwf   PCL,F
002B   344F 3470 3465 00186                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00187 Seconds
003B   0782           00188         addwf   PCL,F
003C   3420 3473 3465 00189         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00190 Not_present
0045   0782           00191         addwf   PCL,F
0046   343A 3420 344E 00192         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00193 Pass
0054   0782           00194                 addwf   PCL,F
0055   343A 3420 3450 00195                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00196 LED_fail
005C   0782           00197                 addwf   PCL,F
005D   343A 3420 344C 00198                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00199 Flick_fail
0068   0782           00200                 addwf   PCL,F
0069   343A 3420 3446 00201                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00202 Total_Msg
0078   0782           00203         addwf   PCL,F
0079   3454 346F 3474 00204         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00205 LF
0089   0782           00206         addwf   PCL,F
008A   344C 3446 343A 00207         dt      "LF: ",0
       3420 3400 
008F                  00208 FF
008F   0782           00209         addwf   PCL,F
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0090   3446 3446 343A 00210         dt      "FF: ",0
       3420 3400 
0095                  00211 None
0095   0782           00212         addwf   PCL,F
0096   343C 346E 346F 00213         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00214 Logs_Msg1
009D   0782           00215         addwf   PCL,F
009E   3431 342D 3439 00216         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00217 Logs_Msg2
00AE   0782           00218         addwf   PCL,F
00AF   3453 3454 3441 00219         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00220 Logs_Msg3
00BF   0782           00221         addwf   PCL,F
00C0   3445 3478 3470 00222         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00223 Logs_Msg4
00C8   0782           00224         addwf   PCL,F
00C9   344C 344F 3447 00225         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00226 Op_at
00D8   0782           00227         addwf   PCL,F
00D9   344F 3470 3465 00228         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00229 
                      00230 ;***************************************
                      00231 ; MAIN PROGRAM
                      00232 ;***************************************
                      00233 
00E7                  00234 init
                      00235         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00236 
00E9   1683 1303      00237         banksel   TRISA                 ; bank 1
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EB   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00239         clrf      TRISA                 ; PortA *may* be used for motor
                      00240         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00241                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00242         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; [2:1] *may* be solenoid
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00243         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                      00244         movlf     b'011', TRISE         ; PortE *may* be used for ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00245         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00246 
00F7   1283 1303      00247         banksel   PORTA                 ; bank 0
00F9   0185           00248         clrf      PORTA
00FA   0186           00249         clrf      PORTB
00FB   0187           00250         clrf      PORTC
00FC   0188           00251         clrf      PORTD
00FD   0189           00252         clrf      PORTE
                      00253 
00FE   2???           00254         call      i2c_common_setup      ;Set up I2C for communication
00FF   2???           00255         call      InitLCD               ;Initialize the LCD
0100   2???           00256         call      InitUSART          ;Set up USART for RS232
                      00257 
0101   1283 1303      00258         banksel     start_step          ; back to bank0
                      00259         movlf       d'1', start_step    ; set-up for motor
0103   3001               M         movlw   d'1'
0104   00CA               M         movwf   start_step
                      00260         movlf       d'15', step_max
0105   300F               M         movlw   d'15'
0106   00CC               M         movwf   step_max
                      00261 
                      00262         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0107   01B9               M                 clrf    Table_Counter
0108   0103               M                 clrw
0109                      M loop_disp
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0109   0839               M         movf    Table_Counter,W
010A   2???               M                 call    Standby_Msg
010B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
010C   1903               M                 btfsc   STATUS,Z
010D   2???               M                 goto    end_disp
010E   2???               M                 call    WR_DATA
010F   0AB9               M                 incf    Table_Counter,F
0110   2???               M                 goto    loop_disp
0111                      M end_disp
0111   2???           00263         call    Switch_Lines
                      00264 
                      00265  ;--------------------------------------------------
                      00266  ;      STANDBY MODE
                      00267 
0112                  00268 waiting
                      00269         ; Display date and time.
                      00270         ; Also save starting time for log (will stop updating once we start)
                      00271         writechar "2"       ;First line shows 20**/**/**
0112   3032               M             movlw   "2"
0113   2???               M             call    WR_DATA
                      00272         writechar "0"
0114   3030               M             movlw   "0"
0115   2???               M             call    WR_DATA
                      00273         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0116   3006               M         movlw   0x06
0117   1283 1303          M         banksel 0x73
0119   00F3               M         movwf   0x73
011A   2???               M         call    read_rtc
011B   1283 1303          M         banksel 0x75
011D   0875               M         movf    0x75,w
011E   2???               M         call    rtc_convert   
011F   0877           00274                 movf    0x77,W
0120   00A9           00275         movwf    start_year10    ;Save starting year dig10
0121   2???           00276                 call    WR_DATA
0122   0878           00277                 movf    0x78,W
0123   00AA           00278         movwf    start_year1    ;Save starting year dig1
0124   2???           00279                 call    WR_DATA
                      00280                 writechar "/"
0125   302F               M             movlw   "/"
0126   2???               M             call    WR_DATA
                      00281                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0127   3005               M         movlw   0x05
0128   1283 1303          M         banksel 0x73
012A   00F3               M         movwf   0x73
012B   2???               M         call    read_rtc
012C   1283 1303          M         banksel 0x75
012E   0875               M         movf    0x75,w
012F   2???               M         call    rtc_convert   
0130   0877           00282                 movf    0x77,W
0131   00AB           00283         movwf    start_month10    ;Save starting month dig10
0132   2???           00284                 call    WR_DATA
0133   0878           00285                 movf    0x78,W
0134   00AC           00286         movwf    start_month1    ;Save starting month dig1
0135   2???           00287                 call    WR_DATA
                      00288                 writechar       "/"
0136   302F               M             movlw   "/"
0137   2???               M             call    WR_DATA
                      00289                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0138   3004               M         movlw   0x04
0139   1283 1303          M         banksel 0x73
013B   00F3               M         movwf   0x73
013C   2???               M         call    read_rtc
013D   1283 1303          M         banksel 0x75
013F   0875               M         movf    0x75,w
0140   2???               M         call    rtc_convert   
0141   0877           00290                 movf    0x77,W
0142   00AD           00291         movwf    start_date10    ;Save starting date dig10
0143   2???           00292                 call    WR_DATA
0144   0878           00293                 movf    0x78,W
0145   00AE           00294         movwf    start_date1    ;Save starting date dig1
0146   2???           00295                 call    WR_DATA
                      00296                 spacebar
0147   3014               M             movlw   B'00010100'
0148   2???               M             call    WR_INS
                      00297                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0149   3002               M         movlw   0x02
014A   1283 1303          M         banksel 0x73
014C   00F3               M         movwf   0x73
014D   2???               M         call    read_rtc
014E   1283 1303          M         banksel 0x75
0150   0875               M         movf    0x75,w
0151   2???               M         call    rtc_convert   
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0152   0877           00298                 movf    0x77,W
0153   00AF           00299         movwf    start_hour10    ;Save starting hour dig10
0154   2???           00300                 call    WR_DATA
0155   0878           00301                 movf    0x78,W
0156   00B0           00302         movwf    start_hour1    ;Save starting hour dig1
0157   2???           00303                 call    WR_DATA
                      00304                 writechar ":"
0158   303A               M             movlw   ":"
0159   2???               M             call    WR_DATA
                      00305                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
015A   3001               M         movlw   0x01
015B   1283 1303          M         banksel 0x73
015D   00F3               M         movwf   0x73
015E   2???               M         call    read_rtc
015F   1283 1303          M         banksel 0x75
0161   0875               M         movf    0x75,w
0162   2???               M         call    rtc_convert   
0163   0877           00306                 movf    0x77,W
0164   00B1           00307         movwf    start_min10    ;Save starting min dig10
0165   2???           00308                 call    WR_DATA
0166   0878           00309                 movf    0x78,W
0167   00B2           00310         movwf    start_min1    ;Save starting min dig1
0168   2???           00311                 call    WR_DATA
                      00312 
                      00313         ; Move cursor back to start of second line
                      00314         ; We will update displayed time but not the word "STANDBY"
0169   30C0           00315         movlw   B'11000000'
016A   2???           00316         call    WR_INS
                      00317 
                      00318         ;Poll to start (will have to hold key for ~0.5sec)
016B   1C86           00319          btfss          PORTB,1     ;Wait until data is available from the keypad
016C   2???           00320          goto           waiting
                      00321 
016D   0E06           00322          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
016E   390F           00323          andlw          0x0F
016F   00B7           00324          movwf      keytemp
0170   3A0C           00325          xorlw      0xC         ;Will be all zeros if its "START"
0171   1903           00326          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
0172   2???           00327          goto       start
                      00328 
0173   0837           00329          movf       keytemp,W     ;Go to log interface
0174   3A0E           00330          xorlw      0xE
0175   1903           00331          btfsc      STATUS,Z
0176   2???           00332          goto       logs
                      00333 
0177   1886           00334          btfsc          PORTB,1     ;Wait until key is released
0178   2???           00335          goto           $-1
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0179   2???           00336          goto       waiting
                      00337 
                      00338 ;-----------------------------------------------------------
                      00339 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00340 
017A                  00341 start
                      00342         ;Start the timer
                      00343         movlf       D'38', count38
017A   3026               M         movlw   D'38'
017B   00C6               M         movwf   count38
017C   01B3           00344         clrf        op_time
017D   0181           00345         clrf        TMR0
017E   178B           00346         bsf         INTCON, GIE     ;enable interrupts
                      00347 
                      00348         ;Display starting message
017F   2???           00349         call        Clear_Display
                      00350         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0180   01B9               M                 clrf    Table_Counter
0181   0103               M                 clrw
0182                      M loop_disp
0182   0839               M         movf    Table_Counter,W
0183   2???               M                 call    Start_Msg
0184   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0185   1903               M                 btfsc   STATUS,Z
0186   2???               M                 goto    end_disp
0187   2???               M                 call    WR_DATA
0188   0AB9               M                 incf    Table_Counter,F
0189   2???               M                 goto    loop_disp
018A                      M end_disp
                      00351 
                      00352 
                      00353 ;****FAKE CODE ******************************************
                      00354 ;        ; Just delaying
                      00355 ;        call        HalfS
                      00356 ;        call        HalfS
                      00357 ;
                      00358 ;       ; Putting values in manually.
                      00359 ;        movlf     B'01', state1     ;pass
                      00360 ;        movlf     B'01', state2     ;pass
                      00361 ;        movlf     B'10', state3     ;LED fail
                      00362 ;        movlf     B'01', state4     ;pass
                      00363 ;        movlf     B'01', state5     ;pass
                      00364 ;        movlf     B'01', state6     ;pass
                      00365 ;        movlf     B'01', state7     ;pass
                      00366 ;        movlf     B'11', state8     ;flicker fail
                      00367 ;        movlf     B'01', state9     ;pass
                      00368 ;        movlf     D'1', num_LF
                      00369 ;        movlf     D'1', num_FF
                      00370 ;        movlf     D'9', num_tot
                      00371 ;*******************************************************
                      00372 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00373 ; choose fake or real!
                      00374 
                      00375 ;******REAL CODE ******************************************
018A   01C7           00376     clrf    candle_index
018B   1383           00377     bcf STATUS, IRP
                      00378     movlf   0x1F, FSR       ;pointing at right before state1
018C   301F               M         movlw   0x1F
018D   0084               M         movwf   FSR
                      00379 
018E                  00380 rotate
018E   300A           00381         movlw   d'10'                 ; stop operation after 10 rotations
018F   0247           00382     subwf   candle_index,W      ; candle_index is # you've already tested before rotating
0190   1903           00383     btfsc   STATUS,Z
0191   2???           00384         goto    end_operation
0192   2???           00385         call    ROTATEMOTOR          ; else rotate motor and n++
0193   0AC7           00386         incf    candle_index, F
0194   0A84           00387     incf    FSR, F
                      00388 
0195                  00389 detect_candle
0195   1C09           00390         btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
0196   2???           00391         goto    test_candle     ;yes candle, go test it
                      00392    movlf   D'0', INDF      ;no candle, state = not present
0197   3000               M         movlw   D'0'
0198   0080               M         movwf   INDF
0199   2???           00393         goto rotate                 ;and go try next
                      00394 
019A                  00395 test_candle
019A   0AB4           00396         incf    num_tot, F                      ; keeping track of total number of candles
019B   01C8           00397         clrf    photocount
019C   2???           00398         call    HalfS       ; delay 2 sec or whatever
019D   2???           00399    call    HalfS
019E   2???           00400    call    HalfS
019F   2???           00401    call    HalfS
                      00402         movff   photocount, photoval        ;to ensure it wont change again
01A0   0848               M         movf    photocount, W
01A1   00C9               M         movwf   photoval
01A2                  00403 check_threshold1
01A2   3007           00404     movlw    threshold1
01A3   0249           00405     subwf   photoval, W
01A4   1803           00406     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01A5   2???           00407     goto check_threshold2
                      00408     movlf   D'2', INDF      ; < threshold 1 means led fail
01A6   3002               M         movlw   D'2'
01A7   0080               M         movwf   INDF
01A8   0AB5           00409          incf    num_LF, F
01A9   2???           00410     goto    rotate
01AA                  00411 check_threshold2
01AA   3045           00412     movlw    threshold2
01AB   0249           00413     subwf   photoval, W
01AC   1803           00414     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01AD   2???           00415     goto aboveboth
                      00416     movlf   D'1', INDF      ; < threshold 2 means pass
01AE   3001               M         movlw   D'1'
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AF   0080               M         movwf   INDF
01B0   2???           00417     goto    rotate
01B1                  00418 aboveboth
                      00419    movlf   D'3', INDF       ;else flicker fail
01B1   3003               M         movlw   D'3'
01B2   0080               M         movwf   INDF
01B3   0AB6           00420    incf    num_FF, F
01B4   2???           00421    goto    rotate
                      00422 
                      00423 ; ;****************************************************
                      00424 
01B5                  00425 end_operation
                      00426         ; Stop the timer
01B5   138B           00427          bcf         INTCON, GIE  ;disable interrupts
                      00428 
                      00429         ;Display "complete"
01B6   2???           00430         call       Clear_Display
                      00431         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01B7   01B9               M                 clrf    Table_Counter
01B8   0103               M                 clrw
01B9                      M loop_disp
01B9   0839               M         movf    Table_Counter,W
01BA   2???               M                 call    End_Msg
01BB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01BC   1903               M                 btfsc   STATUS,Z
01BD   2???               M                 goto    end_disp
01BE   2???               M                 call    WR_DATA
01BF   0AB9               M                 incf    Table_Counter,F
01C0   2???               M                 goto    loop_disp
01C1                      M end_disp
                      00432 
                      00433         ; Shift logs 1-8 -> 2-9
                      00434         ; Then store current run as log 1
01C1                  00435 shiftlogs
01C1   1283 1703      00436         banksel     EEADR               ; bank 2
                      00437         movlf       D'111', EEADR        ; start shifting from 111->125
01C3   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C4   008D               M         movwf   EEADR
                      00438 
01C5                  00439 shiftlogs_0
01C5   1683 1703      00440         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C7   138C           00441         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C8   140C           00442         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C9   188C           00443         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01CA   2???           00444         goto        $-1
01CB   1283 1703      00445         banksel     EEADR               ;bank 2
01CD   300E           00446         movlw       D'14'               ;add 14 to EEADR to shift 14 places
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CE   078D           00447         addwf       EEADR, F
01CF   1683 1703      00448         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D1   138C           00449         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D2   150C           00450         bsf         EECON1, WREN
01D3   3055           00451         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D4   008D           00452         movwf       EECON2
01D5   30AA           00453         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D6   008D           00454         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D7   148C           00455         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D8   110C           00456         bcf         EECON1, WREN
01D9   1283 1703      00457         banksel     EEADR               ;bank 2
01DB   300E           00458         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DC   020D           00459         subwf       EEADR, W
01DD   1903           00460         btfsc       STATUS, Z
01DE   2???           00461         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00462 
01DF   1283 1303      00463         banksel op_time             ; for some reason I need to delay here
01E1   2???           00464         call   delay5ms             ; or else I get an infinite loop
01E2   1283 1703      00465         banksel EEADR
                      00466 
01E4   300F           00467         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E5   028D           00468         subwf       EEADR, F
01E6   2???           00469         goto        shiftlogs_0
                      00470 
01E7                  00471 write_log1
01E7   1283 1703      00472         banksel     EEADR
01E9   1383           00473         bcf         STATUS, IRP
                      00474         movlf       0x37, FSR           ;points to one after last important data
01EA   3037               M         movlw   0x37
01EB   0084               M         movwf   FSR
                      00475         movlf       D'14', EEADR        ;points to one after last place to write to
01EC   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01ED   008D               M         movwf   EEADR
01EE                  00476 write_log1_0
01EE   1683 1703      00477         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F0   188C           00478         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01F1   2???           00479         goto        $-1
01F2   1283 1703      00480         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F4   038D           00481         decf        EEADR, F            ;writing backwords
01F5   0384           00482         decf        FSR, F
                      00483         movff       INDF, EEDATA
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F6   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F7   008C               M         movwf   EEDATA
01F8   1683 1703      00484         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FA   138C           00485         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FB   150C           00486         bsf         EECON1, WREN
01FC   3055           00487         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FD   008D           00488         movwf       EECON2
01FE   30AA           00489         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FF   008D           00490         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0200   148C           00491         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0201   110C           00492         bcf         EECON1, WREN
0202   1283 1703      00493         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0204   088D           00494         movf        EEADR, F
0205   1D03           00495         btfss       STATUS, Z           ;if EEADR = 0 we're done
0206   2???           00496         goto        write_log1_0
0207   1283           00497         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0208   1303           00498         bcf         STATUS, RP1
                      00499 
                      00500         ; Display info screens
0209   2???           00501         call       time             ; "Operation time: X sec"
020A   2???           00502         call       HalfS
020B   2???           00503         call       HalfS
020C   2???           00504         call       summary          ; "Total candles: X. Defective: Y"
020D   2???           00505         call       HalfS
020E   2???           00506         call       HalfS
020F   2???           00507         call       defective        ; "FF: a b c. LF: d e f"
                      00508 ;-----------------------------------------------------------------------
                      00509 ; Data display interface
                      00510 
0210   1C86           00511 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
0211   2???           00512          goto           $-1
                      00513 
0212   0E06           00514          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0213   390F           00515          andlw          0x0F
0214   2???           00516          call       information ;Do the right thing
                      00517 
0215   1886           00518          btfsc          PORTB,1     ;Wait until key is released
0216   2???           00519          goto           $-1
0217   2???           00520          goto       poll
                      00521 
                      00522 
                      00523 ;-------------------------------------------------------------------------
                      00524 ; LOGS INTERFACE
                      00525 ; Shows last runs of last 9 logs
                      00526 ; Access from STANDBY and return to STANDBY
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00527 
0218                  00528 logs
0218   2???           00529     call    Clear_Display
                      00530     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0219   01B9               M                 clrf    Table_Counter
021A   0103               M                 clrw
021B                      M loop_disp
021B   0839               M         movf    Table_Counter,W
021C   2???               M                 call    Logs_Msg1
021D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
021E   1903               M                 btfsc   STATUS,Z
021F   2???               M                 goto    end_disp
0220   2???               M                 call    WR_DATA
0221   0AB9               M                 incf    Table_Counter,F
0222   2???               M                 goto    loop_disp
0223                      M end_disp
0223   2???           00531     call    Switch_Lines
                      00532     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0224   01B9               M                 clrf    Table_Counter
0225   0103               M                 clrw
0226                      M loop_disp
0226   0839               M         movf    Table_Counter,W
0227   2???               M                 call    Logs_Msg2
0228   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0229   1903               M                 btfsc   STATUS,Z
022A   2???               M                 goto    end_disp
022B   2???               M                 call    WR_DATA
022C   0AB9               M                 incf    Table_Counter,F
022D   2???               M                 goto    loop_disp
022E                      M end_disp
                      00533 
022E                  00534 polling
022E   1C86           00535     btfss               PORTB,1     ;Wait until data is available from the keypad
022F   2???           00536     goto                $-1
                      00537 
0230   0E06           00538     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0231   390F           00539     andlw               0x0F
0232   00B7           00540     movwf       keytemp     ; Save which key was pressed
                      00541 
0233                  00542 check_log1
0233   3A00           00543     xorlw   0x0         ;will be all zeros if its 1
0234   1D03           00544     btfss   STATUS,Z    ;and Z will be high, so skip
0235   2???           00545     goto    check_log2
0236   1283 1703      00546     banksel EEADR
                      00547     movlf   d'0', EEADR
0238   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0239   008D               M         movwf   EEADR
023A   2???           00548     goto    display_log
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00549 
023B                  00550 check_log2
023B   0837           00551     movf    keytemp, W
023C   3A01           00552     xorlw   0x1
023D   1D03           00553     btfss   STATUS,Z
023E   2???           00554     goto    check_log3
023F   1283 1703      00555     banksel EEADR
                      00556     movlf   d'14', EEADR
0241   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0242   008D               M         movwf   EEADR
0243   2???           00557     goto    display_log
                      00558 
0244                  00559 check_log3
0244   0837           00560     movf    keytemp, W
0245   3A02           00561     xorlw   0x2
0246   1D03           00562     btfss   STATUS,Z
0247   2???           00563     goto    check_log4
0248   1283 1703      00564     banksel EEADR
                      00565     movlf   d'28', EEADR
024A   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
024B   008D               M         movwf   EEADR
024C   2???           00566     goto    display_log
                      00567 
024D                  00568 check_log4
024D   0837           00569     movf    keytemp, W
024E   3A04           00570     xorlw   0x4
024F   1D03           00571     btfss   STATUS,Z
0250   2???           00572     goto    check_log5
0251   1283 1703      00573     banksel EEADR
                      00574     movlf   d'42', EEADR
0253   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0254   008D               M         movwf   EEADR
0255   2???           00575     goto    display_log
                      00576 
0256                  00577 check_log5
0256   0837           00578     movf    keytemp, W
0257   3A05           00579     xorlw   0x5
0258   1D03           00580     btfss   STATUS,Z
0259   2???           00581     goto    check_log6
025A   1283 1703      00582     banksel EEADR
                      00583     movlf   d'56', EEADR
025C   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025D   008D               M         movwf   EEADR
025E   2???           00584     goto    display_log
                      00585 
025F                  00586 check_log6
025F   0837           00587     movf    keytemp, W
0260   3A06           00588     xorlw   0x6
0261   1D03           00589     btfss   STATUS,Z
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0262   2???           00590     goto    check_log7
0263   1283 1703      00591     banksel EEADR
                      00592     movlf   d'70', EEADR
0265   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0266   008D               M         movwf   EEADR
0267   2???           00593     goto    display_log
                      00594 
0268                  00595 check_log7
0268   0837           00596     movf    keytemp, W
0269   3A08           00597     xorlw   0x8
026A   1D03           00598     btfss   STATUS,Z
026B   2???           00599     goto    check_log8
026C   1283 1703      00600     banksel EEADR
                      00601     movlf   d'84', EEADR
026E   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026F   008D               M         movwf   EEADR
0270   2???           00602     goto    display_log
                      00603 
0271                  00604 check_log8
0271   0837           00605     movf    keytemp, W
0272   3A09           00606     xorlw   0x9
0273   1D03           00607     btfss   STATUS,Z
0274   2???           00608     goto    check_log9
0275   1283 1703      00609     banksel EEADR
                      00610     movlf   d'98', EEADR
0277   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0278   008D               M         movwf   EEADR
0279   2???           00611     goto    display_log
                      00612 
027A                  00613 check_log9
027A   0837           00614     movf    keytemp, W
027B   3A0A           00615     xorlw   0xA
027C   1D03           00616     btfss   STATUS,Z
027D   2???           00617     goto    check_done
027E   1283 1703      00618     banksel EEADR
                      00619     movlf   d'112', EEADR
0280   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0281   008D               M         movwf   EEADR
0282   2???           00620     goto    display_log
                      00621 
0283                  00622 check_done
0283   0837           00623     movf    keytemp, W
0284   3A0D           00624     xorlw   0xD
0285   1D03           00625     btfss   STATUS,Z
0286   2???           00626     goto    badkey
0287   2???           00627     call    Clear_Display
                      00628     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0288   01B9               M                 clrf    Table_Counter
0289   0103               M                 clrw
028A                      M loop_disp
028A   0839               M         movf    Table_Counter,W
028B   2???               M                 call    Standby_Msg
028C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
028D   1903               M                 btfsc   STATUS,Z
028E   2???               M                 goto    end_disp
028F   2???               M                 call    WR_DATA
0290   0AB9               M                 incf    Table_Counter,F
0291   2???               M                 goto    loop_disp
0292                      M end_disp
0292   2???           00629     call    Switch_Lines
0293   2???           00630     goto    waiting
                      00631 
0294                  00632 badkey
0294   1886           00633     btfsc               PORTB,1     ;Wait until key is released
0295   2???           00634     goto                $-1
0296   2???           00635     goto        polling
                      00636 
                      00637 
0297                  00638 display_log                 ;start in bank2
                      00639     ; move EEPROM data back to "current" data
0297   1383           00640     bcf STATUS, IRP
                      00641     movlf   0x29, FSR
0298   3029               M         movlw   0x29
0299   0084               M         movwf   FSR
029A                  00642 read_EEPROM
029A   1683 1703      00643     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029C   138C           00644     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029D   140C           00645     bsf EECON1, RD          ; read EEPROM
029E   1283 1703      00646     banksel EEDATA          ;bank 2
                      00647     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A0   080C               M         movf    EEDATA, W
02A1   0080               M         movwf   INDF
02A2   0A84           00648     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A3   0A8D           00649     incf    EEADR, F
02A4   3037           00650     movlw   0x37            ;done if FSR = 0x37
02A5   0204           00651     subwf   FSR, W
02A6   1D03           00652     btfss   STATUS, Z
02A7   2???           00653     goto    read_EEPROM
                      00654 
                      00655     ;display that shit
02A8   1283 1303      00656     banksel Table_Counter   ; bank0
02AA   2???           00657     call    Clear_Display
                      00658     ;if first data is 0xFF (no log) just display "none"
02AB   30FF           00659     movlw   0xFF
02AC   0229           00660     subwf   start_year10, W
02AD   1D03           00661     btfss   STATUS, Z
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02AE   2???           00662     goto yes_log
02AF                  00663 no_log
                      00664     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02AF   01B9               M                 clrf    Table_Counter
02B0   0103               M                 clrw
02B1                      M loop_disp
02B1   0839               M         movf    Table_Counter,W
02B2   2???               M                 call    None
02B3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02B4   1903               M                 btfsc   STATUS,Z
02B5   2???               M                 goto    end_disp
02B6   2???               M                 call    WR_DATA
02B7   0AB9               M                 incf    Table_Counter,F
02B8   2???               M                 goto    loop_disp
02B9                      M end_disp
02B9   2???           00665     call    HalfS
02BA   2???           00666     goto    logs
                      00667     ;else display the log
02BB                  00668 yes_log
                      00669     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02BB   01B9               M                 clrf    Table_Counter
02BC   0103               M                 clrw
02BD                      M loop_disp
02BD   0839               M         movf    Table_Counter,W
02BE   2???               M                 call    Op_at
02BF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02C0   1903               M                 btfsc   STATUS,Z
02C1   2???               M                 goto    end_disp
02C2   2???               M                 call    WR_DATA
02C3   0AB9               M                 incf    Table_Counter,F
02C4   2???               M                 goto    loop_disp
02C5                      M end_disp
02C5   2???           00670     call    Switch_Lines
                      00671     writechar    "2"
02C6   3032               M             movlw   "2"
02C7   2???               M             call    WR_DATA
                      00672     writechar    "0"
02C8   3030               M             movlw   "0"
02C9   2???               M             call    WR_DATA
                      00673     writeASC   start_year10
02CA   0829               M             movf    start_year10, W
02CB   2???               M             call WR_DATA
                      00674     writeASC   start_year1
02CC   082A               M             movf    start_year1, W
02CD   2???               M             call WR_DATA
                      00675     writechar   "/"
02CE   302F               M             movlw   "/"
02CF   2???               M             call    WR_DATA
                      00676     writeASC   start_month10
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D0   082B               M             movf    start_month10, W
02D1   2???               M             call WR_DATA
                      00677     writeASC   start_month1
02D2   082C               M             movf    start_month1, W
02D3   2???               M             call WR_DATA
                      00678     writechar   "/"
02D4   302F               M             movlw   "/"
02D5   2???               M             call    WR_DATA
                      00679     writeASC   start_date10
02D6   082D               M             movf    start_date10, W
02D7   2???               M             call WR_DATA
                      00680     writeASC   start_date1
02D8   082E               M             movf    start_date1, W
02D9   2???               M             call WR_DATA
                      00681     writechar   " "
02DA   3020               M             movlw   " "
02DB   2???               M             call    WR_DATA
                      00682     writeASC   start_hour10
02DC   082F               M             movf    start_hour10, W
02DD   2???               M             call WR_DATA
                      00683     writeASC   start_hour1
02DE   0830               M             movf    start_hour1, W
02DF   2???               M             call WR_DATA
                      00684     writechar   ":"
02E0   303A               M             movlw   ":"
02E1   2???               M             call    WR_DATA
                      00685     writeASC  start_min10
02E2   0831               M             movf    start_min10, W
02E3   2???               M             call WR_DATA
                      00686     writeASC   start_min1
02E4   0832               M             movf    start_min1, W
02E5   2???               M             call WR_DATA
02E6   2???           00687     call    HalfS
02E7   2???           00688     call    HalfS
02E8   2???           00689     call    time
02E9   2???           00690     call    HalfS
02EA   2???           00691     call    HalfS
02EB   2???           00692     call    summary
02EC   2???           00693     call    HalfS
02ED   2???           00694     call    HalfS
                      00695     ;option to Export
02EE   2???           00696     call    Clear_Display
                      00697     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02EF   01B9               M                 clrf    Table_Counter
02F0   0103               M                 clrw
02F1                      M loop_disp
02F1   0839               M         movf    Table_Counter,W
02F2   2???               M                 call    Logs_Msg3
02F3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02F4   1903               M                 btfsc   STATUS,Z
02F5   2???               M                 goto    end_disp
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02F6   2???               M                 call    WR_DATA
02F7   0AB9               M                 incf    Table_Counter,F
02F8   2???               M                 goto    loop_disp
02F9                      M end_disp
02F9   2???           00698     call    Switch_Lines
                      00699     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02FA   01B9               M                 clrf    Table_Counter
02FB   0103               M                 clrw
02FC                      M loop_disp
02FC   0839               M         movf    Table_Counter,W
02FD   2???               M                 call    Logs_Msg4
02FE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FF   1903               M                 btfsc   STATUS,Z
0300   2???               M                 goto    end_disp
0301   2???               M                 call    WR_DATA
0302   0AB9               M                 incf    Table_Counter,F
0303   2???               M                 goto    loop_disp
0304                      M end_disp
                      00700 
0304                  00701 wanna_export
0304   1C86           00702     btfss               PORTB,1     ;Wait until data is available from the keypad
0305   2???           00703     goto                $-1
                      00704 
0306   0E06           00705     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0307   390F           00706     andlw               0x0F
0308   00B7           00707     movwf       keytemp     ; Save which key was pressed
                      00708 
0309                  00709 check_wanna
0309   0837           00710     movf    keytemp, W
030A   3A0F           00711     xorlw   0xF
030B   1D03           00712     btfss   STATUS,Z
030C   2???           00713     goto    check_nothx
030D   2???           00714     call    export
030E   2???           00715     goto    logs
                      00716 
030F                  00717 check_nothx
030F   0837           00718     movf    keytemp, W
0310   3A0E           00719     xorlw   0xE
0311   1D03           00720     btfss   STATUS,Z
0312   2???           00721     goto    check_immapeace
0313   2???           00722     goto    logs
                      00723 
0314                  00724 check_immapeace
0314   0837           00725     movf    keytemp, W
0315   3A0D           00726     xorlw   0xD
0316   1D03           00727     btfss   STATUS,Z
0317   2???           00728     goto    badkeyagain
0318   2???           00729     call    Clear_Display
                      00730     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0319   01B9               M                 clrf    Table_Counter
031A   0103               M                 clrw
031B                      M loop_disp
031B   0839               M         movf    Table_Counter,W
031C   2???               M                 call    Standby_Msg
031D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
031E   1903               M                 btfsc   STATUS,Z
031F   2???               M                 goto    end_disp
0320   2???               M                 call    WR_DATA
0321   0AB9               M                 incf    Table_Counter,F
0322   2???               M                 goto    loop_disp
0323                      M end_disp
0323   2???           00731     call    Switch_Lines
0324   2???           00732     goto    waiting
                      00733 
0325                  00734 badkeyagain
0325   1886           00735     btfsc               PORTB,1     ;Wait until key is released
0326   2???           00736     goto                $-1
0327   2???           00737     goto        wanna_export
                      00738 
                      00739 ; END OF MAIN PROGRAM
                      00740 ;------------------------------------------------------------
                      00741 
                      00742 ;***************************************
                      00743 ; ROTATE MOTOR ROUTINE
                      00744 ; Rotates motor approx 36deg. Alternates between 15 and 16 steps
                      00745 ; for average of 116.25deg per turn = 36.1 deg on actual thing
                      00746 ;***************************************
                      00747 
0328                  00748 ROTATEMOTOR        
0328   01CB           00749     clrf    step_count
                      00750 
                      00751     ;go to the right starting step
0329   3001           00752     movlw   d'1'
032A   024A           00753     subwf   start_step, W
032B   1903           00754     btfsc   STATUS,Z
032C   2???           00755     goto    firststep
                      00756 
032D   3002           00757     movlw   d'2'
032E   024A           00758     subwf   start_step, W
032F   1903           00759     btfsc   STATUS,Z
0330   2???           00760     goto    secondstep
                      00761 
0331   3003           00762     movlw   d'3'
0332   024A           00763     subwf   start_step, W
0333   1903           00764     btfsc   STATUS,Z
0334   2???           00765     goto    thirdstep
                      00766 
0335   3004           00767     movlw   d'4'
0336   024A           00768     subwf   start_step, W
0337   1903           00769     btfsc   STATUS,Z
0338   2???           00770     goto    fourthstep
                      00771 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0339                  00772 four_steps
                      00773 
0339                  00774 firststep
0339   084C           00775     movf    step_max, W
033A   024B           00776     subwf   step_count, W
033B   1D03           00777     btfss   STATUS, Z
033C   2???           00778     goto    pulse1
                      00779     movlf   d'1', start_step
033D   3001               M         movlw   d'1'
033E   00CA               M         movwf   start_step
033F   2???           00780     goto    end_rotate
0340                  00781 pulse1
                      00782     movlf   B'1001', PORTA
0340   3009               M         movlw   B'1001'
0341   0085               M         movwf   PORTA
0342   2???           00783     call    delay5ms
0343   2???           00784     call    delay5ms
0344   2???           00785     call    HalfS
0345   0ACB           00786     incf    step_count, F
                      00787 
0346                  00788 secondstep
0346   084C           00789     movf    step_max, W
0347   024B           00790     subwf   step_count, W
0348   1D03           00791     btfss   STATUS, Z
0349   2???           00792     goto    pulse2
                      00793     movlf   d'2', start_step
034A   3002               M         movlw   d'2'
034B   00CA               M         movwf   start_step
034C   2???           00794     goto    end_rotate
034D                  00795 pulse2
                      00796     movlf   B'1010', PORTA
034D   300A               M         movlw   B'1010'
034E   0085               M         movwf   PORTA
034F   2???           00797     call    delay5ms
0350   2???           00798     call    delay5ms
0351   2???           00799     call    HalfS
0352   0ACB           00800     incf    step_count, F
                      00801 
0353                  00802 thirdstep
0353   084C           00803     movf    step_max, W
0354   024B           00804     subwf   step_count, W
0355   1D03           00805     btfss   STATUS, Z
0356   2???           00806     goto    pulse3
                      00807     movlf   d'3', start_step
0357   3003               M         movlw   d'3'
0358   00CA               M         movwf   start_step
0359   2???           00808     goto    end_rotate
035A                  00809 pulse3
                      00810     movlf   B'0110', PORTA
035A   3006               M         movlw   B'0110'
035B   0085               M         movwf   PORTA
035C   2???           00811     call    delay5ms
035D   2???           00812     call    delay5ms
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

035E   2???           00813     call    HalfS
035F   0ACB           00814     incf    step_count, F
                      00815 
0360                  00816 fourthstep
0360   084C           00817     movf    step_max, W
0361   024B           00818     subwf   step_count, W
0362   1D03           00819     btfss   STATUS, Z
0363   2???           00820     goto    pulse4
                      00821     movlf   d'4', start_step
0364   3004               M         movlw   d'4'
0365   00CA               M         movwf   start_step
0366   2???           00822     goto    end_rotate
0367                  00823 pulse4
                      00824     movlf   B'0101', PORTA
0367   3005               M         movlw   B'0101'
0368   0085               M         movwf   PORTA
0369   2???           00825     call    delay5ms
036A   2???           00826     call    delay5ms
036B   2???           00827     call    HalfS
036C   0ACB           00828     incf    step_count, F
                      00829 
036D   2???           00830     goto    four_steps
                      00831 
036E                  00832 end_rotate
                      00833    ;if step_max is 15 incr, 16 dec
036E   3010           00834     movlw    d'16'
036F   024C           00835     subwf   step_max, W
0370   1D03           00836     btfss   STATUS,Z
0371   2???           00837     goto    must_inc
0372                  00838 must_dec
0372   03CC           00839     decf    step_max, F
0373   0008           00840     return
0374                  00841 must_inc
0374   0ACC           00842     incf     step_max, F
0375   0008           00843     return
                      00844 
                      00845 
                      00846 ;***************************************
                      00847 ; DATA DISPLAY ROUTINE
                      00848 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00849 ; Determines which key it was and displays appropriate info / branch
                      00850 ;***************************************
                      00851 
0376                  00852 information
0376   00B7           00853     movwf   keytemp             ; Save which key was pressed
                      00854 
0377                  00855 check_1
0377   3A00           00856     xorlw   0x0         ;will be all zeros if its 1
0378   1D03           00857     btfss   STATUS,Z    ;and Z will be high, so skip
0379   2???           00858     goto    check_2
037A   2???           00859     call    Clear_Display
                      00860     writechar "1"
037B   3031               M             movlw   "1"
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

037C   2???               M             call    WR_DATA
037D   0820           00861     movf    state1, W
037E   2???           00862     call    display_state
037F   0008           00863     return
                      00864 
0380                  00865 check_2
0380   0837           00866     movf    keytemp, W
0381   3A01           00867     xorlw   0x1
0382   1D03           00868     btfss   STATUS,Z
0383   2???           00869     goto    check_3
0384   2???           00870     call    Clear_Display
                      00871     writechar "2"
0385   3032               M             movlw   "2"
0386   2???               M             call    WR_DATA
0387   0821           00872     movf    state2, W
0388   2???           00873     call    display_state
0389   0008           00874     return
                      00875 
038A                  00876 check_3
038A   0837           00877     movf    keytemp, W
038B   3A02           00878     xorlw   0x2
038C   1D03           00879     btfss   STATUS,Z
038D   2???           00880     goto    check_4
038E   2???           00881     call    Clear_Display
                      00882     writechar "3"
038F   3033               M             movlw   "3"
0390   2???               M             call    WR_DATA
0391   0822           00883     movf    state3, W
0392   2???           00884     call    display_state
0393   0008           00885     return
                      00886 
0394                  00887 check_4
0394   0837           00888     movf    keytemp, W
0395   3A04           00889     xorlw   0x4
0396   1D03           00890     btfss   STATUS,Z
0397   2???           00891     goto    check_5
0398   2???           00892     call    Clear_Display
                      00893     writechar "4"
0399   3034               M             movlw   "4"
039A   2???               M             call    WR_DATA
039B   0823           00894     movf    state4, W
039C   2???           00895     call    display_state
039D   0008           00896     return
                      00897 
039E                  00898 check_5
039E   0837           00899     movf    keytemp, W
039F   3A05           00900     xorlw   0x5
03A0   1D03           00901     btfss   STATUS,Z
03A1   2???           00902     goto    check_6
03A2   2???           00903     call    Clear_Display
                      00904     writechar "5"
03A3   3035               M             movlw   "5"
03A4   2???               M             call    WR_DATA
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03A5   0824           00905     movf    state5, W
03A6   2???           00906     call    display_state
03A7   0008           00907     return
                      00908 
03A8                  00909 check_6
03A8   0837           00910     movf    keytemp, W
03A9   3A06           00911     xorlw   0x6
03AA   1D03           00912     btfss   STATUS,Z
03AB   2???           00913     goto    check_7
03AC   2???           00914     call    Clear_Display
                      00915     writechar "6"
03AD   3036               M             movlw   "6"
03AE   2???               M             call    WR_DATA
03AF   0825           00916     movf    state6, W
03B0   2???           00917     call    display_state
03B1   0008           00918     return
                      00919 
03B2                  00920 check_7
03B2   0837           00921     movf    keytemp, W
03B3   3A08           00922     xorlw   0x8
03B4   1D03           00923     btfss   STATUS,Z
03B5   2???           00924     goto    check_8
03B6   2???           00925     call    Clear_Display
                      00926     writechar "7"
03B7   3037               M             movlw   "7"
03B8   2???               M             call    WR_DATA
03B9   0826           00927     movf    state7, W
03BA   2???           00928     call    display_state
03BB   0008           00929     return
                      00930 
03BC                  00931 check_8
03BC   0837           00932     movf    keytemp, W
03BD   3A09           00933     xorlw   0x9
03BE   1D03           00934     btfss   STATUS,Z
03BF   2???           00935     goto    check_9
03C0   2???           00936     call    Clear_Display
                      00937     writechar "8"
03C1   3038               M             movlw   "8"
03C2   2???               M             call    WR_DATA
03C3   0827           00938     movf    state8, W
03C4   2???           00939     call    display_state
03C5   0008           00940     return
                      00941 
03C6                  00942 check_9
03C6   0837           00943     movf    keytemp, W
03C7   3A0A           00944     xorlw   0xA
03C8   1D03           00945     btfss   STATUS,Z
03C9   2???           00946     goto    check_summary
03CA   2???           00947     call    Clear_Display
                      00948     writechar "9"
03CB   3039               M             movlw   "9"
03CC   2???               M             call    WR_DATA
03CD   0828           00949     movf    state9, W
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03CE   2???           00950     call    display_state
03CF   0008           00951     return
                      00952 
03D0                  00953 check_summary
03D0   0837           00954     movf    keytemp, W
03D1   3A03           00955     xorlw   0x3
03D2   1D03           00956     btfss   STATUS,Z
03D3   2???           00957     goto    check_defective
03D4   2???           00958     call    summary
03D5   0008           00959     return
                      00960 
03D6                  00961 check_defective
03D6   0837           00962     movf    keytemp, W
03D7   3A07           00963     xorlw   0x7
03D8   1D03           00964     btfss   STATUS,Z
03D9   2???           00965     goto    check_time
03DA   2???           00966     call    defective
03DB   0008           00967     return
                      00968 
03DC                  00969 check_time
03DC   0837           00970     movf    keytemp, W
03DD   3A0B           00971     xorlw   0xB
03DE   1D03           00972     btfss   STATUS,Z
03DF   2???           00973     goto    check_export
03E0   2???           00974     call    time
03E1   0008           00975     return
                      00976 
03E2                  00977 check_export
03E2   0837           00978     movf    keytemp, W
03E3   3A0F           00979     xorlw   0xF
03E4   1D03           00980     btfss   STATUS,Z
03E5   2???           00981     goto    check_standby       ;or do you wanna allow to check logs?
03E6   2???           00982     call    export
03E7   0008           00983     return
                      00984 
                      00985 ;check_logs
                      00986 ;    movf    keytemp, W
                      00987 ;    xorlw   0xE
                      00988 ;    btfss   STATUS,Z
                      00989 ;    goto    check_standby
                      00990 ;    goto    logs
                      00991 
03E8                  00992 check_standby
03E8   0837           00993     movf    keytemp, W
03E9   3A0D           00994     xorlw   0xD
03EA   1D03           00995     btfss   STATUS,Z
03EB   2???           00996     goto    check_start
03EC   2???           00997     call    Clear_Display
                      00998     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03ED   01B9               M                 clrf    Table_Counter
03EE   0103               M                 clrw
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03EF                      M loop_disp
03EF   0839               M         movf    Table_Counter,W
03F0   2???               M                 call    Standby_Msg
03F1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F2   1903               M                 btfsc   STATUS,Z
03F3   2???               M                 goto    end_disp
03F4   2???               M                 call    WR_DATA
03F5   0AB9               M                 incf    Table_Counter,F
03F6   2???               M                 goto    loop_disp
03F7                      M end_disp
03F7   2???           00999     call    Switch_Lines
03F8   2???           01000     goto    waiting
                      01001 
03F9                  01002 check_start
03F9   0837           01003     movf    keytemp, W
03FA   3A0C           01004     xorlw   0xC
03FB   1D03           01005     btfss   STATUS,Z
03FC   2???           01006     goto    default_key
03FD   2???           01007     goto    start
                      01008 
03FE                  01009 default_key         ; may never get here
03FE   0008           01010     return
                      01011 
                      01012 ;Display state subroutine
                      01013 ;stateN is in W
03FF                  01014 display_state
03FF   00B8           01015     movwf  statetemp    ; save stateN
                      01016 
0400                  01017 check_none
0400   3A00           01018     xorlw   0x0
0401   1D03           01019     btfss   STATUS,Z
0402   2???           01020     goto    check_pass
                      01021     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0403   01B9               M                 clrf    Table_Counter
0404   0103               M                 clrw
0405                      M loop_disp
0405   0839               M         movf    Table_Counter,W
0406   2???               M                 call    Not_present
0407   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0408   1903               M                 btfsc   STATUS,Z
0409   2???               M                 goto    end_disp
040A   2???               M                 call    WR_DATA
040B   0AB9               M                 incf    Table_Counter,F
040C   2???               M                 goto    loop_disp
040D                      M end_disp
040D   0008           01022     return
                      01023 
040E                  01024 check_pass
040E   0838           01025     movf    statetemp, W
040F   3A01           01026     xorlw   0x1
0410   1D03           01027     btfss   STATUS,Z
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0411   2???           01028     goto    check_LED
                      01029     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0412   01B9               M                 clrf    Table_Counter
0413   0103               M                 clrw
0414                      M loop_disp
0414   0839               M         movf    Table_Counter,W
0415   2???               M                 call    Pass
0416   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0417   1903               M                 btfsc   STATUS,Z
0418   2???               M                 goto    end_disp
0419   2???               M                 call    WR_DATA
041A   0AB9               M                 incf    Table_Counter,F
041B   2???               M                 goto    loop_disp
041C                      M end_disp
041C   0008           01030     return
                      01031 
041D                  01032 check_LED
041D   0838           01033     movf    statetemp, W
041E   3A02           01034     xorlw   0x2
041F   1D03           01035     btfss   STATUS,Z
0420   2???           01036     goto    check_flick
                      01037     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0421   01B9               M                 clrf    Table_Counter
0422   0103               M                 clrw
0423                      M loop_disp
0423   0839               M         movf    Table_Counter,W
0424   2???               M                 call    LED_fail
0425   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0426   1903               M                 btfsc   STATUS,Z
0427   2???               M                 goto    end_disp
0428   2???               M                 call    WR_DATA
0429   0AB9               M                 incf    Table_Counter,F
042A   2???               M                 goto    loop_disp
042B                      M end_disp
042B   0008           01038     return
                      01039 
042C                  01040 check_flick
042C   0838           01041     movf    statetemp, W
042D   3A03           01042     xorlw   0x3
042E   1D03           01043     btfss   STATUS,Z
042F   2???           01044     goto    default_state
                      01045     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0430   01B9               M                 clrf    Table_Counter
0431   0103               M                 clrw
0432                      M loop_disp
0432   0839               M         movf    Table_Counter,W
0433   2???               M                 call    Flick_fail
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0434   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0435   1903               M                 btfsc   STATUS,Z
0436   2???               M                 goto    end_disp
0437   2???               M                 call    WR_DATA
0438   0AB9               M                 incf    Table_Counter,F
0439   2???               M                 goto    loop_disp
043A                      M end_disp
043A   0008           01046     return
                      01047 
043B                  01048 default_state   ; should never get here
043B   0008           01049     return
                      01050 
                      01051 ; Summary Subroutine
                      01052 ; Displays total number of candles and number of defective candles
                      01053 ; Reads data from num_tot, num_LF, num_FF
043C                  01054 summary
043C   2???           01055     call            Clear_Display
                      01056     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
043D   01B9               M                 clrf    Table_Counter
043E   0103               M                 clrw
043F                      M loop_disp
043F   0839               M         movf    Table_Counter,W
0440   2???               M                 call    Total_Msg
0441   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0442   1903               M                 btfsc   STATUS,Z
0443   2???               M                 goto    end_disp
0444   2???               M                 call    WR_DATA
0445   0AB9               M                 incf    Table_Counter,F
0446   2???               M                 goto    loop_disp
0447                      M end_disp
                      01057     writeBCD        num_tot
0447   0834               M             movf    num_tot, W
0448   3E30               M             addlw   B'00110000'
0449   2???               M             call WR_DATA
044A   2???           01058     call            Switch_Lines
                      01059     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
044B   01B9               M                 clrf    Table_Counter
044C   0103               M                 clrw
044D                      M loop_disp
044D   0839               M         movf    Table_Counter,W
044E   2???               M                 call    LF
044F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0450   1903               M                 btfsc   STATUS,Z
0451   2???               M                 goto    end_disp
0452   2???               M                 call    WR_DATA
0453   0AB9               M                 incf    Table_Counter,F
0454   2???               M                 goto    loop_disp
0455                      M end_disp
                      01060     writeBCD        num_LF
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0455   0835               M             movf    num_LF, W
0456   3E30               M             addlw   B'00110000'
0457   2???               M             call WR_DATA
                      01061     spacebar
0458   3014               M             movlw   B'00010100'
0459   2???               M             call    WR_INS
                      01062     spacebar
045A   3014               M             movlw   B'00010100'
045B   2???               M             call    WR_INS
                      01063     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
045C   01B9               M                 clrf    Table_Counter
045D   0103               M                 clrw
045E                      M loop_disp
045E   0839               M         movf    Table_Counter,W
045F   2???               M                 call    FF
0460   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0461   1903               M                 btfsc   STATUS,Z
0462   2???               M                 goto    end_disp
0463   2???               M                 call    WR_DATA
0464   0AB9               M                 incf    Table_Counter,F
0465   2???               M                 goto    loop_disp
0466                      M end_disp
                      01064     writeBCD        num_FF
0466   0836               M             movf    num_FF, W
0467   3E30               M             addlw   B'00110000'
0468   2???               M             call WR_DATA
0469   0008           01065     return
                      01066 
                      01067 ; Defective candles Subroutine
                      01068 ; Displays index of each defective candle (LF or FF)
                      01069 ; Reads data from state1 - state9
046A                  01070 defective
046A   2???           01071     call            Clear_Display
                      01072 
                      01073     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
046B   01B9               M                 clrf    Table_Counter
046C   0103               M                 clrw
046D                      M loop_disp
046D   0839               M         movf    Table_Counter,W
046E   2???               M                 call    LF
046F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0470   1903               M                 btfsc   STATUS,Z
0471   2???               M                 goto    end_disp
0472   2???               M                 call    WR_DATA
0473   0AB9               M                 incf    Table_Counter,F
0474   2???               M                 goto    loop_disp
0475                      M end_disp
0475   08B5           01074     movf            num_LF, F
0476   1D03           01075     btfss           STATUS,Z         ;if none LF, just say "none"
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0477   2???           01076     goto            check_LF
                      01077     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0478   01B9               M                 clrf    Table_Counter
0479   0103               M                 clrw
047A                      M loop_disp
047A   0839               M         movf    Table_Counter,W
047B   2???               M                 call    None
047C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
047D   1903               M                 btfsc   STATUS,Z
047E   2???               M                 goto    end_disp
047F   2???               M                 call    WR_DATA
0480   0AB9               M                 incf    Table_Counter,F
0481   2???               M                 goto    loop_disp
0482                      M end_disp
0482   2???           01078     goto            now_FF
                      01079 
0483                  01080 check_LF                            ; list all LF candles
0483   3002           01081     movlw           B'00000010'
0484   2???           01082     call            check_for_fail
                      01083 
0485                  01084 now_FF                              ; now look at FF
0485   2???           01085     call            Switch_Lines
                      01086     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0486   01B9               M                 clrf    Table_Counter
0487   0103               M                 clrw
0488                      M loop_disp
0488   0839               M         movf    Table_Counter,W
0489   2???               M                 call    FF
048A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
048B   1903               M                 btfsc   STATUS,Z
048C   2???               M                 goto    end_disp
048D   2???               M                 call    WR_DATA
048E   0AB9               M                 incf    Table_Counter,F
048F   2???               M                 goto    loop_disp
0490                      M end_disp
0490   08B6           01087     movf            num_FF, F
0491   1D03           01088     btfss           STATUS,Z         ;if none FF, just say "none"
0492   2???           01089     goto            check_FF
                      01090     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0493   01B9               M                 clrf    Table_Counter
0494   0103               M                 clrw
0495                      M loop_disp
0495   0839               M         movf    Table_Counter,W
0496   2???               M                 call    None
0497   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0498   1903               M                 btfsc   STATUS,Z
0499   2???               M                 goto    end_disp
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

049A   2???               M                 call    WR_DATA
049B   0AB9               M                 incf    Table_Counter,F
049C   2???               M                 goto    loop_disp
049D                      M end_disp
049D   0008           01091     return
                      01092 
049E                  01093 check_FF                            ; list all FF candles
049E   3003           01094     movlw           B'00000011'
049F   2???           01095     call            check_for_fail
04A0   0008           01096     return
                      01097 
04A1                  01098 check_for_fail  ;lists all candles that have status currently in W "stateX"
04A1   00B8           01099     movwf   statetemp
                      01100         movlf   D'0', candle_index
04A2   3000               M         movlw   D'0'
04A3   00C7               M         movwf   candle_index
04A4   1383           01101         bcf     STATUS, IRP
                      01102         movlf   0x1F, FSR           ;index of right before state1
04A5   301F               M         movlw   0x1F
04A6   0084               M         movwf   FSR
04A7                  01103 check_next
04A7   3009           01104         movlw   D'9'                ;exit loop if at 9
04A8   0247           01105         subwf   candle_index, W
04A9   1803           01106         btfsc   STATUS,W
04AA   2???           01107         goto    end_check_fail
04AB   0A84           01108         incf    FSR,F               ; increment
04AC   0AC7           01109         incf    candle_index,F
04AD   0838           01110         movf    statetemp, W            ;see if stateN = stateX
04AE   0200           01111         subwf   INDF, W
04AF   1D03           01112         btfss   STATUS, Z
04B0   2???           01113         goto    check_next              ;if not, go to next
                      01114         writeBCD        candle_index    ;if so, write down the number
04B1   0847               M             movf    candle_index, W
04B2   3E30               M             addlw   B'00110000'
04B3   2???               M             call WR_DATA
                      01115         spacebar
04B4   3014               M             movlw   B'00010100'
04B5   2???               M             call    WR_INS
04B6   2???           01116         goto check_next
04B7                  01117 end_check_fail
04B7   0008           01118         return
                      01119 
                      01120 ; Time subroutine
                      01121 ; Right now this takes the time in seconds as a binary number in op_time
                      01122 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01123 ; incremented every second. However I may just take the stop time - start time
                      01124 ; from the RTC data so this might change a lot.
04B8                  01125 time
04B8   2???           01126     call    Clear_Display
                      01127     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04B9   01B9               M                 clrf    Table_Counter
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BA   0103               M                 clrw
04BB                      M loop_disp
04BB   0839               M         movf    Table_Counter,W
04BC   2???               M                 call    Time_Msg
04BD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04BE   1903               M                 btfsc   STATUS,Z
04BF   2???               M                 goto    end_disp
04C0   2???               M                 call    WR_DATA
04C1   0AB9               M                 incf    Table_Counter,F
04C2   2???               M                 goto    loop_disp
04C3                      M end_disp
04C3   2???           01128     call    Switch_Lines
04C4   0833           01129     movf    op_time, W
04C5   2???           01130     call    big_number
04C6   08C2           01131     movf    huns, F
04C7   1903           01132     btfsc   STATUS,Z        ;if huns is zero don't display it
04C8   2???           01133     goto    no_huns
                      01134     writeBCD    huns
04C9   0842               M             movf    huns, W
04CA   3E30               M             addlw   B'00110000'
04CB   2???               M             call WR_DATA
04CC                  01135 no_huns
04CC   08C3           01136     movf    tens, F
04CD   1903           01137     btfsc   STATUS,Z        ;if tens is zero don't display it
04CE   2???           01138     goto    no_tens
                      01139     writeBCD    tens
04CF   0843               M             movf    tens, W
04D0   3E30               M             addlw   B'00110000'
04D1   2???               M             call WR_DATA
04D2                  01140 no_tens
                      01141     writeBCD    ones
04D2   0844               M             movf    ones, W
04D3   3E30               M             addlw   B'00110000'
04D4   2???               M             call WR_DATA
                      01142     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04D5   01B9               M                 clrf    Table_Counter
04D6   0103               M                 clrw
04D7                      M loop_disp
04D7   0839               M         movf    Table_Counter,W
04D8   2???               M                 call    Seconds
04D9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04DA   1903               M                 btfsc   STATUS,Z
04DB   2???               M                 goto    end_disp
04DC   2???               M                 call    WR_DATA
04DD   0AB9               M                 incf    Table_Counter,F
04DE   2???               M                 goto    loop_disp
04DF                      M end_disp
04DF   0008           01143     return
                      01144 
                      01145 ; Export subroutine
                      01146 ; Exports data from current run to hyperterminal
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01147 ; reads start time and num_tot/num_ff/num_lf data
04E0                  01148 export
                      01149     printchar   0x7       ;makes a noise on the PC
04E0   3007               M             movlw   0x7
04E1   2???               M             call    writetoPC
                      01150     printchar   0xD       ;go back to left edge
04E2   300D               M             movlw   0xD
04E3   2???               M             call    writetoPC
                      01151     printchar   "T"
04E4   3054               M             movlw   "T"
04E5   2???               M             call    writetoPC
                      01152     printchar   "e"
04E6   3065               M             movlw   "e"
04E7   2???               M             call    writetoPC
                      01153     printchar   "s"
04E8   3073               M             movlw   "s"
04E9   2???               M             call    writetoPC
                      01154     printchar   "t"
04EA   3074               M             movlw   "t"
04EB   2???               M             call    writetoPC
                      01155     printchar   " "
04EC   3020               M             movlw   " "
04ED   2???               M             call    writetoPC
                      01156     printchar   "a"
04EE   3061               M             movlw   "a"
04EF   2???               M             call    writetoPC
                      01157     printchar   "t"
04F0   3074               M             movlw   "t"
04F1   2???               M             call    writetoPC
                      01158     printchar   ":"
04F2   303A               M             movlw   ":"
04F3   2???               M             call    writetoPC
                      01159     printchar   " "
04F4   3020               M             movlw   " "
04F5   2???               M             call    writetoPC
                      01160     printchar   "2"
04F6   3032               M             movlw   "2"
04F7   2???               M             call    writetoPC
                      01161     printchar   "0"
04F8   3030               M             movlw   "0"
04F9   2???               M             call    writetoPC
                      01162     printASC   start_year10
04FA   1283 1303          M             banksel start_year10
04FC   0829               M             movf    start_year10,W
04FD   2???               M             call    writetoPC
                      01163     printASC   start_year1
04FE   1283 1303          M             banksel start_year1
0500   082A               M             movf    start_year1,W
0501   2???               M             call    writetoPC
                      01164     printchar   "/"
0502   302F               M             movlw   "/"
0503   2???               M             call    writetoPC
                      01165     printASC   start_month10
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0504   1283 1303          M             banksel start_month10
0506   082B               M             movf    start_month10,W
0507   2???               M             call    writetoPC
                      01166     printASC   start_month1
0508   1283 1303          M             banksel start_month1
050A   082C               M             movf    start_month1,W
050B   2???               M             call    writetoPC
                      01167     printchar   "/"
050C   302F               M             movlw   "/"
050D   2???               M             call    writetoPC
                      01168     printASC   start_date10
050E   1283 1303          M             banksel start_date10
0510   082D               M             movf    start_date10,W
0511   2???               M             call    writetoPC
                      01169     printASC   start_date1
0512   1283 1303          M             banksel start_date1
0514   082E               M             movf    start_date1,W
0515   2???               M             call    writetoPC
                      01170     printchar   " "
0516   3020               M             movlw   " "
0517   2???               M             call    writetoPC
                      01171     printASC   start_hour10
0518   1283 1303          M             banksel start_hour10
051A   082F               M             movf    start_hour10,W
051B   2???               M             call    writetoPC
                      01172     printASC   start_hour1
051C   1283 1303          M             banksel start_hour1
051E   0830               M             movf    start_hour1,W
051F   2???               M             call    writetoPC
                      01173     printchar   ":"
0520   303A               M             movlw   ":"
0521   2???               M             call    writetoPC
                      01174     printASC   start_min10
0522   1283 1303          M             banksel start_min10
0524   0831               M             movf    start_min10,W
0525   2???               M             call    writetoPC
                      01175     printASC   start_min1
0526   1283 1303          M             banksel start_min1
0528   0832               M             movf    start_min1,W
0529   2???               M             call    writetoPC
                      01176     newline
                          M             printchar   0xA ;changes line
052A   300A               M             movlw   0xA
052B   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
052C   300D               M             movlw   0xD
052D   2???               M             call    writetoPC
                      01177     printchar   "T"
052E   3054               M             movlw   "T"
052F   2???               M             call    writetoPC
                      01178     printchar   "i"
0530   3069               M             movlw   "i"
0531   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01179     printchar   "m"
0532   306D               M             movlw   "m"
0533   2???               M             call    writetoPC
                      01180     printchar   "e"
0534   3065               M             movlw   "e"
0535   2???               M             call    writetoPC
                      01181     printchar   ":"
0536   303A               M             movlw   ":"
0537   2???               M             call    writetoPC
                      01182     printchar   " "
0538   3020               M             movlw   " "
0539   2???               M             call    writetoPC
                      01183     printchar   " "
053A   3020               M             movlw   " "
053B   2???               M             call    writetoPC
                      01184     printchar   " "
053C   3020               M             movlw   " "
053D   2???               M             call    writetoPC
                      01185     printchar   " "
053E   3020               M             movlw   " "
053F   2???               M             call    writetoPC
0540   1283 1303      01186     banksel huns
0542   08C2           01187     movf    huns, F
0543   1903           01188     btfsc   STATUS,Z        ;if huns is zero don't display it
0544   2???           01189     goto    nohuns
                      01190     printBCD   huns
0545   1283 1303          M             banksel huns
0547   0842               M             movf    huns, W
0548   3E30               M             addlw   0x30
0549   2???               M             call    writetoPC
054A                  01191 nohuns
054A   1283 1303      01192     banksel tens
054C   08C3           01193     movf    tens, F
054D   1903           01194     btfsc   STATUS,Z        ;if tens is zero don't display it
054E   2???           01195     goto    notens
                      01196     printBCD   tens
054F   1283 1303          M             banksel tens
0551   0843               M             movf    tens, W
0552   3E30               M             addlw   0x30
0553   2???               M             call    writetoPC
0554                  01197 notens
                      01198     printBCD   ones
0554   1283 1303          M             banksel ones
0556   0844               M             movf    ones, W
0557   3E30               M             addlw   0x30
0558   2???               M             call    writetoPC
                      01199     printchar   " "
0559   3020               M             movlw   " "
055A   2???               M             call    writetoPC
                      01200     printchar   "s"
055B   3073               M             movlw   "s"
055C   2???               M             call    writetoPC
                      01201     printchar   "e"
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

055D   3065               M             movlw   "e"
055E   2???               M             call    writetoPC
                      01202     printchar   "c"
055F   3063               M             movlw   "c"
0560   2???               M             call    writetoPC
                      01203     newline
                          M             printchar   0xA ;changes line
0561   300A               M             movlw   0xA
0562   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0563   300D               M             movlw   0xD
0564   2???               M             call    writetoPC
                      01204     printchar   "C"
0565   3043               M             movlw   "C"
0566   2???               M             call    writetoPC
                      01205     printchar   "a"
0567   3061               M             movlw   "a"
0568   2???               M             call    writetoPC
                      01206     printchar   "n"
0569   306E               M             movlw   "n"
056A   2???               M             call    writetoPC
                      01207     printchar   "d"
056B   3064               M             movlw   "d"
056C   2???               M             call    writetoPC
                      01208     printchar   "l"
056D   306C               M             movlw   "l"
056E   2???               M             call    writetoPC
                      01209     printchar   "e"
056F   3065               M             movlw   "e"
0570   2???               M             call    writetoPC
                      01210     printchar   "s"
0571   3073               M             movlw   "s"
0572   2???               M             call    writetoPC
                      01211     printchar   ":"
0573   303A               M             movlw   ":"
0574   2???               M             call    writetoPC
                      01212     printchar   " "
0575   3020               M             movlw   " "
0576   2???               M             call    writetoPC
                      01213     printchar   " "
0577   3020               M             movlw   " "
0578   2???               M             call    writetoPC
                      01214     printchar   " "
0579   3020               M             movlw   " "
057A   2???               M             call    writetoPC
                      01215     printchar   " "
057B   3020               M             movlw   " "
057C   2???               M             call    writetoPC
                      01216     printchar   " "
057D   3020               M             movlw   " "
057E   2???               M             call    writetoPC
                      01217     printchar   " "
057F   3020               M             movlw   " "
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0580   2???               M             call    writetoPC
                      01218     printBCD    num_tot
0581   1283 1303          M             banksel num_tot
0583   0834               M             movf    num_tot, W
0584   3E30               M             addlw   0x30
0585   2???               M             call    writetoPC
                      01219     newline
                          M             printchar   0xA ;changes line
0586   300A               M             movlw   0xA
0587   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0588   300D               M             movlw   0xD
0589   2???               M             call    writetoPC
                      01220     printchar   "L"
058A   304C               M             movlw   "L"
058B   2???               M             call    writetoPC
                      01221     printchar   "E"
058C   3045               M             movlw   "E"
058D   2???               M             call    writetoPC
                      01222     printchar   "D"
058E   3044               M             movlw   "D"
058F   2???               M             call    writetoPC
                      01223     printchar   " "
0590   3020               M             movlw   " "
0591   2???               M             call    writetoPC
                      01224     printchar   "f"
0592   3066               M             movlw   "f"
0593   2???               M             call    writetoPC
                      01225     printchar   "a"
0594   3061               M             movlw   "a"
0595   2???               M             call    writetoPC
                      01226     printchar   "i"
0596   3069               M             movlw   "i"
0597   2???               M             call    writetoPC
                      01227     printchar   "l"
0598   306C               M             movlw   "l"
0599   2???               M             call    writetoPC
                      01228     printchar   ":"
059A   303A               M             movlw   ":"
059B   2???               M             call    writetoPC
                      01229     printchar   " "
059C   3020               M             movlw   " "
059D   2???               M             call    writetoPC
                      01230     printchar   " "
059E   3020               M             movlw   " "
059F   2???               M             call    writetoPC
                      01231     printchar   " "
05A0   3020               M             movlw   " "
05A1   2???               M             call    writetoPC
                      01232     printchar   " "
05A2   3020               M             movlw   " "
05A3   2???               M             call    writetoPC
                      01233     printchar   " "
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A4   3020               M             movlw   " "
05A5   2???               M             call    writetoPC
                      01234     printBCD    num_LF
05A6   1283 1303          M             banksel num_LF
05A8   0835               M             movf    num_LF, W
05A9   3E30               M             addlw   0x30
05AA   2???               M             call    writetoPC
                      01235     newline
                          M             printchar   0xA ;changes line
05AB   300A               M             movlw   0xA
05AC   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05AD   300D               M             movlw   0xD
05AE   2???               M             call    writetoPC
                      01236     printchar   "F"
05AF   3046               M             movlw   "F"
05B0   2???               M             call    writetoPC
                      01237     printchar   "l"
05B1   306C               M             movlw   "l"
05B2   2???               M             call    writetoPC
                      01238     printchar   "i"
05B3   3069               M             movlw   "i"
05B4   2???               M             call    writetoPC
                      01239     printchar   "c"
05B5   3063               M             movlw   "c"
05B6   2???               M             call    writetoPC
                      01240     printchar   "k"
05B7   306B               M             movlw   "k"
05B8   2???               M             call    writetoPC
                      01241     printchar   "e"
05B9   3065               M             movlw   "e"
05BA   2???               M             call    writetoPC
                      01242     printchar   "r"
05BB   3072               M             movlw   "r"
05BC   2???               M             call    writetoPC
                      01243     printchar   " "
05BD   3020               M             movlw   " "
05BE   2???               M             call    writetoPC
                      01244     printchar   "f"
05BF   3066               M             movlw   "f"
05C0   2???               M             call    writetoPC
                      01245     printchar   "a"
05C1   3061               M             movlw   "a"
05C2   2???               M             call    writetoPC
                      01246     printchar   "i"
05C3   3069               M             movlw   "i"
05C4   2???               M             call    writetoPC
                      01247     printchar   "l"
05C5   306C               M             movlw   "l"
05C6   2???               M             call    writetoPC
                      01248     printchar   ":"
05C7   303A               M             movlw   ":"
05C8   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01249     printchar   " "
05C9   3020               M             movlw   " "
05CA   2???               M             call    writetoPC
                      01250     printBCD    num_FF
05CB   1283 1303          M             banksel num_FF
05CD   0836               M             movf    num_FF, W
05CE   3E30               M             addlw   0x30
05CF   2???               M             call    writetoPC
                      01251     newline
                          M             printchar   0xA ;changes line
05D0   300A               M             movlw   0xA
05D1   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05D2   300D               M             movlw   0xD
05D3   2???               M             call    writetoPC
                      01252     newline
                          M             printchar   0xA ;changes line
05D4   300A               M             movlw   0xA
05D5   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05D6   300D               M             movlw   0xD
05D7   2???               M             call    writetoPC
05D8   1283           01253     bcf STATUS,RP0
05D9   1303           01254     bcf STATUS,RP1     ; back to bank 0
05DA   0008           01255     return
                      01256 
                      01257 
                      01258 ;***************************************
                      01259 ; GENERAL PURPOSE SUBROUTINES
                      01260 ;***************************************
                      01261 
                      01262 ; DISPLAY BIG NUMBER SUBROUTINE
                      01263 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01264 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01265 ; Uses "shift and add 3" algorithm
05DB                  01266 big_number
                      01267     movff   op_time, op_time_save         ;save the original op_time
05DB   0833               M         movf    op_time, W
05DC   00C1               M         movwf   op_time_save
                      01268     movlf   8, bignumcount                ;will shift 8 times
05DD   3008               M         movlw   8
05DE   00C5               M         movwf   bignumcount
05DF   01C2           01269     clrf    huns
05E0   01C3           01270     clrf    tens
05E1   01C4           01271     clrf    ones
                      01272 
05E2                  01273 BCDadd3                             ; if any digit > 5, add3
05E2   3005           01274     movlw   0x5
05E3   0242           01275     subwf   huns, W
05E4   1803           01276     btfsc   STATUS, C
05E5   2???           01277     call    add3huns
                      01278 
05E6   3005           01279     movlw   0x5
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05E7   0243           01280     subwf   tens, W
05E8   1803           01281     btfsc   STATUS, C
05E9   2???           01282     call    add3tens
                      01283 
05EA   3005           01284     movlw   0x5
05EB   0244           01285     subwf   ones, W
05EC   1803           01286     btfsc   STATUS, C
05ED   2???           01287     call    add3ones
                      01288 
05EE   03C5           01289     decf    bignumcount, 1
05EF   1003           01290     bcf     STATUS, C
05F0   0DB3           01291     rlf     op_time, 1              ; shift
05F1   0DC4           01292     rlf     ones, 1
05F2   1A44           01293     btfsc   ones,4 ;
05F3   2???           01294     call    carryones               ; carry if too large
05F4   0DC3           01295     rlf     tens, 1
                      01296 
05F5   1A43           01297     btfsc   tens,4 ;
05F6   2???           01298     call    carrytens
05F7   0DC2           01299     rlf     huns,1
05F8   1003           01300     bcf     STATUS, C
                      01301 
05F9   0845           01302     movf    bignumcount, W
05FA   1D03           01303     btfss   STATUS, Z
05FB   2???           01304     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01305 
                      01306     movff    op_time_save, op_time     ;restore the original op_time
05FC   0841               M         movf    op_time_save, W
05FD   00B3               M         movwf   op_time
05FE   0008           01307     return
                      01308 
05FF                  01309 add3huns
05FF   3003           01310     movlw 0x3
0600   07C2           01311     addwf huns,F
0601   0008           01312     return
0602                  01313 add3tens
0602   3003           01314     movlw 0x3
0603   07C3           01315     addwf tens,F
0604   0008           01316     return
0605                  01317 add3ones
0605   3003           01318     movlw 0x3
0606   07C4           01319     addwf ones,F
0607   0008           01320     return
0608                  01321 carryones
0608   1244           01322     bcf ones, 4
0609   1403           01323     bsf STATUS, C
060A   0008           01324     return
060B                  01325 carrytens
060B   1243           01326     bcf tens, 4
060C   1403           01327     bsf STATUS, C
060D   0008           01328     return
                      01329 
                      01330 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01331 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01332 ; Delays exactly 0.5sec
060E                  01333 HalfS
                      01334       movlf 0x8A, hdelH
060E   308A               M         movlw   0x8A
060F   00BE               M         movwf   hdelH
                      01335       movlf 0xBA, hdelM
0610   30BA               M         movlw   0xBA
0611   00BF               M         movwf   hdelM
                      01336       movlf 0x03, hdelL
0612   3003               M         movlw   0x03
0613   00C0               M         movwf   hdelL
0614                  01337 HalfS_0
0614   0BBE           01338       decfsz    hdelH, F
0615   2???           01339           goto  $+2
0616   0BBF           01340           decfsz        hdelM, F
0617   2???           01341           goto  $+2
0618   0BC0           01342           decfsz        hdelL, F
0619   2???           01343           goto  HalfS_0
                      01344 
061A   2???           01345           goto  $+1
061B   0000           01346           nop
061C   0008           01347           return
                      01348 
                      01349 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01350 ; Useful for LCD because PIC is way faster than it can handle
                      01351 ; Delays exactly 5ms
061D                  01352 delay5ms
                      01353         movlf   0xC3, del1
061D   30C3               M         movlw   0xC3
061E   00BC               M         movwf   del1
                      01354         movlf   0x0A, del2
061F   300A               M         movlw   0x0A
0620   00BD               M         movwf   del2
0621                  01355 Delay_0
0621   0BBC           01356         decfsz  del1, f
0622   2???           01357         goto    $+2
0623   0BBD           01358         decfsz  del2, f
0624   2???           01359         goto    Delay_0
0625   0008           01360     return
                      01361 
                      01362 ;***************************************
                      01363 ; LCD SUBROUTINES (from sample code)
                      01364 ;***************************************
                      01365 
                      01366 ; Initialize the LCD
0626                  01367 InitLCD
0626   1283           01368         bcf STATUS,RP0
0627   1588           01369         bsf E     ;E default high
                      01370 
                      01371         ;Wait for LCD POR to finish (~15ms)
0628   2???           01372         call delay5ms
0629   2???           01373         call delay5ms
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062A   2???           01374         call delay5ms
                      01375 
                      01376         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01377         ; -> Send b'0011' 3 times
062B   3033           01378         movlw   b'00110011'
062C   2???           01379         call    WR_INS
062D   2???           01380         call delay5ms
062E   2???           01381         call delay5ms
062F   3032           01382         movlw   b'00110010'
0630   2???           01383         call    WR_INS
0631   2???           01384         call delay5ms
0632   2???           01385         call delay5ms
                      01386 
                      01387         ; 4 bits, 2 lines, 5x7 dots
0633   3028           01388         movlw   b'00101000'
0634   2???           01389         call    WR_INS
0635   2???           01390         call delay5ms
0636   2???           01391         call delay5ms
                      01392 
                      01393         ; display on/off
0637   300C           01394         movlw   b'00001100'
0638   2???           01395         call    WR_INS
0639   2???           01396         call delay5ms
063A   2???           01397         call delay5ms
                      01398 
                      01399         ; Entry mode
063B   3006           01400         movlw   b'00000110'
063C   2???           01401         call    WR_INS
063D   2???           01402         call delay5ms
063E   2???           01403         call delay5ms
                      01404 
                      01405         ; Clear ram
063F   3001           01406         movlw   b'00000001'
0640   2???           01407         call    WR_INS
0641   2???           01408         call delay5ms
0642   2???           01409         call delay5ms
0643   0008           01410         return
                      01411 
                      01412 ; Clear the display
0644                  01413 Clear_Display
0644   3001           01414                 movlw   B'00000001'
0645   2???           01415                 call    WR_INS
0646   0008           01416                 return
                      01417 
                      01418 ;Switch lines
0647                  01419 Switch_Lines
0647   30C0           01420                 movlw   B'11000000'
0648   2???           01421                 call    WR_INS
0649   0008           01422                 return
                      01423 
                      01424 ; Write an instruction to the LCD (see page 7-104)
                      01425 ; The instruction must be in W
064A                  01426 WR_INS
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064A   1108           01427         bcf             RS                              ;clear RS
064B   00BA           01428         movwf   com                             ;W --> com
064C   39F0           01429         andlw   0xF0                    ;mask 4 bits MSB w = X0
064D   0088           01430         movwf   PORTD                   ;Send 4 bits MSB
064E   1588           01431         bsf             E                               ;
064F   2???           01432         call    delay5ms        ;__    __
0650   1188           01433         bcf             E                               ;  |__|
0651   0E3A           01434         swapf   com,w
0652   39F0           01435         andlw   0xF0                    ;1111 0010
0653   0088           01436         movwf   PORTD                   ;send 4 bits LSB
0654   1588           01437         bsf             E                               ;
0655   2???           01438         call    delay5ms        ;__    __
0656   1188           01439         bcf             E                               ;  |__|
0657   2???           01440         call    delay5ms
0658   0008           01441         return
                      01442 
                      01443 ; Write data at current cursor location
                      01444 ; Character code (see page 7-104) must be in W
0659                  01445 WR_DATA
0659   1508           01446         bsf             RS
065A   00BB           01447         movwf   dat
065B   083B           01448         movf    dat,w
065C   39F0           01449         andlw   0xF0
065D   3E04           01450         addlw   4
065E   0088           01451         movwf   PORTD
065F   1588           01452         bsf             E                               ;
0660   2???           01453         call    delay5ms        ;__    __
0661   1188           01454         bcf             E                               ;  |__|
0662   0E3B           01455         swapf   dat,w
0663   39F0           01456         andlw   0xF0
0664   3E04           01457         addlw   4
0665   0088           01458         movwf   PORTD
0666   1588           01459         bsf             E                               ;
0667   2???           01460         call    delay5ms        ;__    __
0668   1188           01461         bcf             E                               ;  |__|
0669   0008           01462         return
                      01463 
                      01464 
                      01465 ;***************************************
                      01466 ; PC INTERFACE SUBROUTINES (from sample code)
                      01467 ;***************************************
066A                  01468 InitUSART
066A   1683           01469         bsf       STATUS,RP0     ; select bank 1
066B   300F           01470         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
066C   0099           01471         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
066D   0198           01472         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01473 
066E   1283           01474         bcf       STATUS,RP0     ; select bank 0
066F   1798           01475         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0670   1618           01476         bsf       RCSTA,CREN     ; continuous receive
                      01477 
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0671   1683           01478         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0672   1698           01479         bsf       TXSTA,TXEN     ; Transmit enable
0673   0008           01480         return
                      01481 
                      01482 
0674                  01483 writetoPC
                      01484 ; Writes the data in W to the PC
                      01485 ; end up in bank1!
0674   1283           01486         bcf       STATUS,RP0     ; Go to bank 0
0675   0099           01487         movwf     TXREG          ; Send contents of W to RS232
0676   1683           01488         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0677   1C98           01489         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0678   2???           01490         goto      $-1
0679   0008           01491         return
                      01492 
                      01493 
                      01494 ;***************************************
                      01495 ; ISR
                      01496 ; Currently only care about TMR0
                      01497 ; TMR0 overflows at 256*256; each time, decrement count38
                      01498 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01499 ; When this hapens, op_time increments
                      01500 ; Also check photodata every time for 2 sec = total of 76 reads
                      01501 ;***************************************
067A                  01502 isr
067A   00F9           01503     movwf   w_isr           ;save W and status
067B   0E03           01504     swapf   STATUS, W
067C   0183           01505     clrf    STATUS
067D   00FA           01506     movwf   status_isr
                      01507 ;    movf    PCLATH, W      ;if using pages
                      01508 ;    movwf   pclath_isr
                      01509 ;    clrf    PCLATH
                      01510 
067E   0BC6           01511     decfsz  count38, F     ;if count38 gets to 38 it's been one second
067F   2???           01512     goto    end_isr
                      01513     movlf   D'38', count38  ;so reset count38
0680   3026               M         movlw   D'38'
0681   00C6               M         movwf   count38
0682   0AB3           01514     incf    op_time, F         ; and increment op_time
                      01515 
0683                  01516 end_isr
                      01517 
0683   1889           01518     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
0684   0AC8           01519     incf    photocount, F       ;if it is 1, light is on so photocount++
                      01520 
                      01521 ;    movf    pclath_isr, W  ;if using pages
                      01522 ;    movwf    PCLATH
0685   0E7A           01523     swapf   status_isr, W   ;restore W and status
0686   0083           01524     movwf   STATUS
0687   0EF9           01525     swapf   w_isr, F
0688   0E79           01526     swapf   w_isr, W
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0689   110B           01527     bcf     INTCON, T0IF    ;clear the interrupt flag
068A   0009           01528     retfie
                      01529 
                      01530 
3F72                  01531     END
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005E2
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000644
D                                 00000005
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           00000621
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             0000060E
HalfS_0                           00000614
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           00000626
InitUSART                         0000066A
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000328
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      00000647
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           00000659
WR_INS                            0000064A
Z                                 00000002
_.org_1_0178                      00000178
_.org_1_01CA                      000001CA
_.org_1_01F1                      000001F1
_.org_1_0211                      00000211
_.org_1_0216                      00000216
_.org_1_022F                      0000022F
_.org_1_0295                      00000295
_.org_1_0305                      00000305
_.org_1_0326                      00000326
_.org_1_0615                      00000615
_.org_1_0617                      00000617
_.org_1_061A                      0000061A
_.org_1_0622                      00000622
_.org_1_0678                      00000678
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001B1
add3huns                          000005FF
add3ones                          00000605
add3tens                          00000602
badkey                            00000294
badkeyagain                       00000325
big_number                        000005DB
bignumcount                       00000045
candle_index                      00000047
carryones                         00000608
carrytens                         0000060B
check_1                           00000377
check_2                           00000380
check_3                           0000038A
check_4                           00000394
check_5                           0000039E
check_6                           000003A8
check_7                           000003B2
check_8                           000003BC
check_9                           000003C6
check_FF                          0000049E
check_LED                         0000041D
check_LF                          00000483
check_defective                   000003D6
check_done                        00000283
check_export                      000003E2
check_flick                       0000042C
check_for_fail                    000004A1
check_immapeace                   00000314
check_log1                        00000233
check_log2                        0000023B
check_log3                        00000244
check_log4                        0000024D
check_log5                        00000256
check_log6                        0000025F
check_log7                        00000268
check_log8                        00000271
check_log9                        0000027A
check_next                        000004A7
check_none                        00000400
check_nothx                       0000030F
check_pass                        0000040E
check_standby                     000003E8
check_start                       000003F9
check_summary                     000003D0
check_threshold1                  000001A2
check_threshold2                  000001AA
check_time                        000003DC
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

check_wanna                       00000309
com                               0000003A
count38                           00000046
dat                               0000003B
default_key                       000003FE
default_state                     0000043B
defective                         0000046A
del1                              0000003C
del2                              0000003D
delay5ms                          0000061D
detect_candle                     00000195
display_log                       00000297
display_state                     000003FF
end_check_fail                    000004B7
end_isr                           00000683
end_operation                     000001B5
end_rotate                        0000036E
export                            000004E0
firststep                         00000339
four_steps                        00000339
fourthstep                        00000360
hdelH                             0000003E
hdelL                             00000040
hdelM                             0000003F
huns                              00000042
i2c_common_setup                  00000000
information                       00000376
init                              000000E7
isr                               0000067A
keytemp                           00000037
logs                              00000218
movff                             
movlf                             
must_dec                          00000372
must_inc                          00000374
newline                           
no_huns                           000004CC
no_log                            000002AF
no_tens                           000004D2
nohuns                            0000054A
notens                            00000554
now_FF                            00000485
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000044
op_time                           00000033
op_time_save                      00000041
photocount                        00000048
photoval                          00000049
poll                              00000210
polling                           0000022E
printASC                          
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

printBCD                          
printchar                         
pulse1                            00000340
pulse2                            0000034D
pulse3                            0000035A
pulse4                            00000367
read_EEPROM                       0000029A
read_rtc                          00000000
rotate                            0000018E
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
secondstep                        00000346
shiftlogs                         000001C1
shiftlogs_0                       000001C5
spacebar                          
start                             0000017A
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_step                        0000004A
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
step_count                        0000004B
step_max                          0000004C
summary                           0000043C
tens                              00000043
test_candle                       0000019A
thirdstep                         00000353
threshold1                        D'7'
threshold2                        D'69'
time                              000004B8
w_isr                             00000079
waiting                           00000112
wanna_export                      00000304
writeASC                          
MPASM 5.55                          MAIN.ASM   2-26-2014  18:17:34         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

writeBCD                          
write_log1                        000001E7
write_log1_0                      000001EE
write_rtc                         00000000
writechar                         
writetoPC                         00000674
yes_log                           000002BB

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    48 reported,     0 suppressed

