MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; GO-GO-GADGET CANDLELIGHT!
                      00002 ; David Simons 996639124
                      00003 ; AER201 Spring 2014
                      00004 ; Written for PIC16F877 on DevBugger
                      00005 
                      00006 ;***************************************
                      00007 ;               CONTENTS
                      00008 ;
                      00009 ; Configuration                     30
                      00010 ; Definions                         37
                      00011 ; Variables                         48
                      00012 ; Macros                            109
                      00013 ; Vectors                           188
                      00014 ; Tables                            198
                      00015 ; Main program                      256
                      00016 ;   Standby                         288
                      00017 ;   Actual operation                361
                      00018 ;   End of operation                451
                      00019 ;   Data display interface          534
                      00020 ;   Logs interface                  546
                      00021 ; Motor routines                    765
                      00022 ; Data display routines             837
                      00023 ; General purpose subroutines       1254
                      00024 ; Delay subroutines                 1328
                      00025 ; LCD subroutines                   1377
                      00026 ; PC interface subroutines          1480
                      00027 ; ISR                               1509
                      00028 ;***************************************
                      00029 
                      00030    list p=16f877                   ; list directive to define processor
                      00031       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00032       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00033 
                      00034       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063         call    rtc_convert   
                      00064         endm
                      00035 
                      00036 ;***************************************
                      00037 ; DEFINITIONS
                      00038 ;***************************************
                      00039     #define     RS          PORTD,2
                      00040         #define E           PORTD,3
                      00041     #define threshold1  D'2'
                      00042     #define threshold2  D'151'
                      00043     #define IRDATA      PORTE, 0
                      00044     #define PHOTODATA   PORTE, 1
                      00045 
                      00046 
                      00047 ;***************************************
                      00048 ; VARIABLES
                      00049 ;***************************************
                      00050 
                      00051 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00052 
                      00053     cblock      0x20        ;bank0 variables
                      00054     ; Important information (will be displayed)
  00000020            00055         state1     ;where   0 = none      1 = pass
  00000021            00056         state2     ;        2 = led fail  3 = flicker fail
  00000022            00057         state3
  00000023            00058         state4
  00000024            00059         state5
  00000025            00060         state6
  00000026            00061         state7
  00000027            00062         state8
  00000028            00063         state9
  00000029            00064         start_year10    ;starting time (for log)
  0000002A            00065         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00066         start_month10
  0000002C            00067         start_month1
  0000002D            00068         start_date10
  0000002E            00069         start_date1
  0000002F            00070         start_hour10
  00000030            00071         start_hour1
  00000031            00072         start_min10
  00000032            00073         start_min1
  00000033            00074         op_time     ;BCD in seconds
  00000034            00075         num_tot     ;BCD
  00000035            00076         num_LF      ;BCD
  00000036            00077         num_FF      ;BCD
                      00078 ; For general program / interface: temps, counters, etc.
  00000037            00079         keytemp         ; for data display mode
  00000038            00080         statetemp
  00000039            00081                 Table_Counter   ; for LCD stuff
  0000003A            00082                 com
  0000003B            00083                 dat
  0000003C            00084         delH            ;for delay 0.5s routine
  0000003D            00085         delM
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003E            00086         delL
  0000003F            00087         op_time_save    ;for big_number routine
  00000040            00088         huns
  00000041            00089         tens
  00000042            00090         ones
  00000043            00091         bignumcount
  00000044            00092         count76         ;for isr
  00000045            00093         morethansix     ;for displaying defective
                      00094 ; For machine program: temps, counters, etc.
  00000046            00095         candle_index
  00000047            00096         photocount      ;for testing candle
  00000048            00097         photoval
  00000049            00098         motor_count     ;for rotate
  0000004A            00099         startfrom3      ;for rotate troubleshooting
                      00100     endc
                      00101 
                      00102     cblock  0x79        ;stuff that needs to be in all banks (for ISR)
  00000079            00103         w_isr
  0000007A            00104         status_isr
                      00105         endc
                      00106 
                      00107 
                      00108 ;***************************************
                      00109 ; MACROS
                      00110 ;***************************************
                      00111 
                      00112 ; Display a msg on LCD
                      00113 Display macro   Message
                      00114                 local   loop_disp
                      00115                 local   end_disp
                      00116                 clrf    Table_Counter
                      00117                 clrw
                      00118 loop_disp
                      00119         movf    Table_Counter,W
                      00120                 call    Message
                      00121                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00122                 btfsc   STATUS,Z
                      00123                 goto    end_disp
                      00124                 call    WR_DATA
                      00125                 incf    Table_Counter,F
                      00126                 goto    loop_disp
                      00127 end_disp
                      00128                 endm
                      00129 
                      00130 
                      00131 ;Shortcuts for moving literals / registers
                      00132 movlf   macro   l, f
                      00133         movlw   l
                      00134         movwf   f
                      00135         endm
                      00136 
                      00137 movff   macro   source, dest
                      00138         movf    source, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139         movwf   dest
                      00140         endm
                      00141 
                      00142 ; Write to LCD (all in bank0 please)
                      00143 writeBCD    macro   reg             ;from a register containing BCD
                      00144             movf    reg, W
                      00145             addlw   B'00110000'
                      00146             call WR_DATA
                      00147             endm
                      00148 
                      00149 writechar   macro   asc             ;ASCII code literal (or in "")
                      00150             movlw   asc
                      00151             call    WR_DATA
                      00152             endm
                      00153 
                      00154 writeASC        macro   reg         ;from a register containing ASCII
                      00155             movf    reg, W
                      00156             call WR_DATA
                      00157             endm
                      00158 
                      00159 spacebar    macro                   ; move LCD over 1 space
                      00160             movlw   B'00010100'
                      00161             call    WR_INS
                      00162             endm
                      00163 
                      00164 ;Print to PC (hyperterminal). Any bank OK
                      00165 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00166             movlw   char
                      00167             call    writetoPC
                      00168             endm
                      00169 
                      00170 printASC    macro   reg            ;ASCII code inside a register
                      00171             banksel reg
                      00172             movf    reg,W
                      00173             call    writetoPC
                      00174             endm
                      00175 
                      00176 printBCD    macro   BCD            ;BCD inside a register
                      00177             banksel BCD
                      00178             movf    BCD, W
                      00179             addlw   0x30
                      00180             call    writetoPC
                      00181             endm
                      00182 
                      00183 newline     macro                  ;new line on computer
                      00184             printchar   0xA ;changes line
                      00185             printchar   0xD ;goes back to left margin
                      00186             endm
                      00187 ;***************************************
                      00188 ; VECTORS
                      00189 ;***************************************
                      00190 
                      00191     ORG       0x000
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000   2???           00192          goto      init
                      00193     ORG       0x004
0004   2???           00194         goto    isr
                      00195 
                      00196 
                      00197 ;***************************************
                      00198 ; TABLES (MESSAGES)
                      00199 ;***************************************
0005                  00200 Standby_Msg
0005   0782           00201                 addwf   PCL,F
0006   3453 3454 3441 00202                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00203 Start_Msg
000E   0782           00204         addwf   PCL,F
000F   3449 346E 3473 00205         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00206 End_Msg
0020   0782           00207         addwf   PCL,F
0021   3443 346F 346D 00208         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00209 Time_Msg
002A   0782           00210                 addwf   PCL,F
002B   344F 3470 3465 00211                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00212 Seconds
003B   0782           00213         addwf   PCL,F
003C   3420 3473 3465 00214         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00215 Not_present
0045   0782           00216         addwf   PCL,F
0046   343A 3420 344E 00217         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00218 Pass
0054   0782           00219                 addwf   PCL,F
0055   343A 3420 3450 00220                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00221 LED_fail
005C   0782           00222                 addwf   PCL,F
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005D   343A 3420 344C 00223                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00224 Flick_fail
0068   0782           00225                 addwf   PCL,F
0069   343A 3420 3446 00226                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00227 Total_Msg
0078   0782           00228         addwf   PCL,F
0079   3454 346F 3474 00229         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00230 LF
0089   0782           00231         addwf   PCL,F
008A   344C 3446 343A 00232         dt      "LF: ",0
       3420 3400 
008F                  00233 FF
008F   0782           00234         addwf   PCL,F
0090   3446 3446 343A 00235         dt      "FF: ",0
       3420 3400 
0095                  00236 None
0095   0782           00237         addwf   PCL,F
0096   343C 346E 346F 00238         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00239 Logs_Msg1
009D   0782           00240         addwf   PCL,F
009E   3431 342D 3439 00241         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00242 Logs_Msg2
00AE   0782           00243         addwf   PCL,F
00AF   3453 3454 3441 00244         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00245 Logs_Msg3
00BF   0782           00246         addwf   PCL,F
00C0   3445 3478 3470 00247         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C8                  00248 Logs_Msg4
00C8   0782           00249         addwf   PCL,F
00C9   344C 344F 3447 00250         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00251 Op_at
00D8   0782           00252         addwf   PCL,F
00D9   344F 3470 3465 00253         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00254 
                      00255 ;***************************************
                      00256 ; MAIN PROGRAM
                      00257 ;***************************************
                      00258 
00E7                  00259 init
                      00260         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready 
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00261 
00E9   1683 1303      00262         banksel   TRISA                 ; bank 1
                      00263         movlf     b'11000110', OPTION_REG ; 1:128 prescaler for timer
00EB   30C6               M         movlw   b'11000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00264         clrf      TRISA                 ; PortA[3:0] used for motor
                      00265         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00266         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00267         clrf      TRISD                 ; PortD[2:7] is LCD output
                      00268         movlf     b'011', TRISE         ; PortE is IR and PHOTODATA
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00269         movlf     0x07, ADCON1          ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00270 
00F7   1283           00271         bcf       STATUS,RP0        ; select bank 0
00F8   0185           00272         clrf      PORTA
00F9   0186           00273         clrf      PORTB
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FA   0187           00274         clrf      PORTC
00FB   0188           00275         clrf      PORTD
00FC   0189           00276         clrf      PORTE
                      00277 
00FD   2???           00278         call      i2c_common_setup  ;Set up I2C for communication. End in bank1
00FE   2???           00279         call      InitLCD           ;Initialize the LCD. End in bank0
00FF   2???           00280         call      InitUSART         ;Set up USART for RS232. End in bank1
                      00281 
0100   1283           00282         bcf       STATUS,RP0        ;Back to bank0
                      00283 
                      00284         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0101   01B9               M                 clrf    Table_Counter
0102   0103               M                 clrw
0103                      M loop_disp
0103   0839               M         movf    Table_Counter,W
0104   2???               M                 call    Standby_Msg
0105   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0106   1903               M                 btfsc   STATUS,Z
0107   2???               M                 goto    end_disp
0108   2???               M                 call    WR_DATA
0109   0AB9               M                 incf    Table_Counter,F
010A   2???               M                 goto    loop_disp
010B                      M end_disp
010B   2???           00285         call    Switch_Lines
                      00286 
                      00287  ;--------------------------------------------------
                      00288  ;      STANDBY MODE
                      00289 
010C                  00290 waiting
                      00291         ; Display date and time.
                      00292         ; Also save starting time for log (will stop updating once we start)
                      00293         writechar "2"           ;First line shows 20**/**/**
010C   3032               M             movlw   "2"
010D   2???               M             call    WR_DATA
                      00294         writechar "0"
010E   3030               M             movlw   "0"
010F   2???               M             call    WR_DATA
                      00295         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0110   3006               M         movlw   0x06
0111   1283 1303          M         banksel 0x73
0113   00F3               M         movwf   0x73
0114   2???               M         call    read_rtc
0115   1283 1303          M         banksel 0x75
0117   0875               M         movf    0x75,w
0118   2???               M         call    rtc_convert   
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0119   0877           00296                 movf    0x77,W
011A   00A9           00297         movwf    start_year10   ;Save starting year dig10
011B   2???           00298                 call    WR_DATA
011C   0878           00299                 movf    0x78,W
011D   00AA           00300         movwf    start_year1    ;Save starting year dig1
011E   2???           00301                 call    WR_DATA
                      00302                 writechar "/"
011F   302F               M             movlw   "/"
0120   2???               M             call    WR_DATA
                      00303                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0121   3005               M         movlw   0x05
0122   1283 1303          M         banksel 0x73
0124   00F3               M         movwf   0x73
0125   2???               M         call    read_rtc
0126   1283 1303          M         banksel 0x75
0128   0875               M         movf    0x75,w
0129   2???               M         call    rtc_convert   
012A   0877           00304                 movf    0x77,W
012B   00AB           00305         movwf    start_month10  ;Save starting month dig10
012C   2???           00306                 call    WR_DATA
012D   0878           00307                 movf    0x78,W
012E   00AC           00308         movwf    start_month1   ;Save starting month dig1
012F   2???           00309                 call    WR_DATA
                      00310                 writechar       "/"
0130   302F               M             movlw   "/"
0131   2???               M             call    WR_DATA
                      00311                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0132   3004               M         movlw   0x04
0133   1283 1303          M         banksel 0x73
0135   00F3               M         movwf   0x73
0136   2???               M         call    read_rtc
0137   1283 1303          M         banksel 0x75
0139   0875               M         movf    0x75,w
013A   2???               M         call    rtc_convert   
013B   0877           00312                 movf    0x77,W
013C   00AD           00313         movwf    start_date10   ;Save starting date dig10
013D   2???           00314                 call    WR_DATA
013E   0878           00315                 movf    0x78,W
013F   00AE           00316         movwf    start_date1    ;Save starting date dig1
0140   2???           00317                 call    WR_DATA
                      00318                 spacebar
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0141   3014               M             movlw   B'00010100'
0142   2???               M             call    WR_INS
                      00319                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0143   3002               M         movlw   0x02
0144   1283 1303          M         banksel 0x73
0146   00F3               M         movwf   0x73
0147   2???               M         call    read_rtc
0148   1283 1303          M         banksel 0x75
014A   0875               M         movf    0x75,w
014B   2???               M         call    rtc_convert   
014C   0877           00320                 movf    0x77,W
014D   00AF           00321         movwf    start_hour10   ;Save starting hour dig10
014E   2???           00322                 call    WR_DATA
014F   0878           00323                 movf    0x78,W
0150   00B0           00324         movwf    start_hour1    ;Save starting hour dig1
0151   2???           00325                 call    WR_DATA
                      00326                 writechar ":"
0152   303A               M             movlw   ":"
0153   2???               M             call    WR_DATA
                      00327                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0154   3001               M         movlw   0x01
0155   1283 1303          M         banksel 0x73
0157   00F3               M         movwf   0x73
0158   2???               M         call    read_rtc
0159   1283 1303          M         banksel 0x75
015B   0875               M         movf    0x75,w
015C   2???               M         call    rtc_convert   
015D   0877           00328                 movf    0x77,W
015E   00B1           00329         movwf    start_min10    ;Save starting min dig10
015F   2???           00330                 call    WR_DATA
0160   0878           00331                 movf    0x78,W
0161   00B2           00332         movwf    start_min1     ;Save starting min dig1
0162   2???           00333                 call    WR_DATA
                      00334 
                      00335         ; Move cursor back to start of second line
                      00336         ; We will update displayed time but not the word "STANDBY"
0163   30C0           00337         movlw   B'11000000'
0164   2???           00338         call    WR_INS
                      00339 
                      00340         ;Poll to start (will have to hold key for ~0.5sec)
0165   1C86           00341          btfss          PORTB,1     ;Wait until data is available from the keypad
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0166   2???           00342          goto           waiting
                      00343 
0167   0E06           00344          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0168   390F           00345          andlw          0x0F
0169   00B7           00346          movwf      keytemp
016A   3A0C           00347          xorlw      0xC         ;Will be all zeros if its "START"
016B   1903           00348          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016C   2???           00349          goto       start
                      00350 
016D   0837           00351          movf       keytemp,W   ;Go to log interface
016E   3A0E           00352          xorlw      0xE
016F   1903           00353          btfsc      STATUS,Z
0170   2???           00354          goto       logs
                      00355 
0171   0837           00356          movf       keytemp,W   ;Do calibrate module
0172   3A0A           00357          xorlw      0xA
0173   1903           00358          btfsc      STATUS,Z
0174   2???           00359          call       calibrate
                      00360 
0175   1886           00361          btfsc          PORTB,1     ;Wait until key is released
0176   2???           00362          goto           $-1
0177   2???           00363          goto       waiting
                      00364 
                      00365 ;-----------------------------------------------------------
                      00366 ;       ACTUAL OPERATION
                      00367 
0178                  00368 start
                      00369         ;clear numbers
0178   01B6           00370         clrf    num_FF
0179   01B4           00371         clrf    num_tot
017A   01B5           00372         clrf    num_LF
017B   01CA           00373         clrf    startfrom3
                      00374 
                      00375         ;Start the timer
                      00376         movlf       D'38', count76  ;start with half a second (to round)
017C   3026               M         movlw   D'38'
017D   00C4               M         movwf   count76
017E   01B3           00377         clrf        op_time
017F   0181           00378         clrf        TMR0
0180   178B           00379         bsf         INTCON, GIE     ;enable interrupts
                      00380 
                      00381         ;Display starting message
0181   2???           00382         call        Clear_Display
                      00383         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0182   01B9               M                 clrf    Table_Counter
0183   0103               M                 clrw
0184                      M loop_disp
0184   0839               M         movf    Table_Counter,W
0185   2???               M                 call    Start_Msg
0186   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0187   1903               M                 btfsc   STATUS,Z
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0188   2???               M                 goto    end_disp
0189   2???               M                 call    WR_DATA
018A   0AB9               M                 incf    Table_Counter,F
018B   2???               M                 goto    loop_disp
018C                      M end_disp
                      00384 
018C   01C6           00385         clrf    candle_index        ; n = 0
018D   1383           00386         bcf     STATUS, IRP
                      00387         movlf   0x1F, FSR           ;pointing at right before state1
018E   301F               M         movlw   0x1F
018F   0084               M         movwf   FSR
                      00388 
0190                  00389 rotate
0190   3009           00390         movlw   d'9'               ; done inspecting once canlex_index (n) = 9
0191   0246           00391         subwf   candle_index,W     ; n is # already tested before rotating
0192   1903           00392         btfsc   STATUS,Z
0193   2???           00393         goto    end_operation
                      00394         movlf    D'5', motor_count
0194   3005               M         movlw   D'5'
0195   00C9               M         movwf   motor_count
0196   2???           00395         call    ROTATEMOTOR         ; rotate 20 steps (full rotation)
0197   0AC6           00396         incf    candle_index, F     ; n++
0198   0A84           00397         incf    FSR, F
                      00398 
0199                  00399 detect_candle
0199   1809           00400    btfsc   IRDATA
019A   2???           00401    goto    test_candle      ;yes candle, go test it
                      00402 
019B   2???           00403    call     first_two       ; two more steps
019C   1809           00404    btfsc    IRDATA
019D   2???           00405    goto     test_candle     ;yes candle, it just lagged 2 steps
019E   2???           00406    call     last_two        ; two more steps
019F   1809           00407    btfsc    IRDATA
01A0   2???           00408    goto     test_candle     ;yes candle, it just lagged 4 steps
01A1   2???           00409    call     first_two       ; two more steps
01A2   1809           00410    btfsc    IRDATA
01A3   2???           00411    goto     test_candle     ;yes candle, it just lagged 6 steps
01A4   2???           00412    call     last_two        ; two more steps
01A5   1809           00413    btfsc    IRDATA
01A6   2???           00414    goto     test_candle     ;yes candle, it just lagged 8 steps
                      00415 
                      00416    movlf   D'0',INDF        ;really no candle, keep rotating 12 more steps
01A7   3000               M         movlw   D'0'
01A8   0080               M         movwf   INDF
01A9   3009           00417    movlw   d'9'               ; done inspecting if n=9
01AA   0246           00418    subwf   candle_index,W     
01AB   1903           00419    btfsc   STATUS,Z
01AC   2???           00420    goto    end_operation
                      00421    movlf   D'3', motor_count
01AD   3003               M         movlw   D'3'
01AE   00C9               M         movwf   motor_count
01AF   2???           00422    call    ROTATEMOTOR
01B0   0AC6           00423    incf    candle_index, F    ; n++
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B1   0A84           00424    incf    FSR, F
01B2   2???           00425    goto    detect_candle      ; detect next candle
                      00426 
01B3                  00427 test_candle
01B3   0AB4           00428    incf    num_tot, F                   ; keeping track of total number of candles
01B4   01C7           00429    clrf    photocount
01B5   2???           00430    call    HalfS                ; test for 2 seconds
01B6   2???           00431    call    HalfS
01B7   2???           00432    call    HalfS
01B8   2???           00433    call    HalfS
                      00434    movff   photocount, photoval        ;to ensure it wont change again
01B9   0847               M         movf    photocount, W
01BA   00C8               M         movwf   photoval
01BB                  00435 check_threshold1
01BB   3002           00436     movlw    threshold1
01BC   0248           00437     subwf   photoval, W
01BD   1803           00438     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01BE   2???           00439     goto check_threshold2
                      00440     movlf   D'2', INDF      ; < threshold 1 means led fail
01BF   3002               M         movlw   D'2'
01C0   0080               M         movwf   INDF
01C1   0AB5           00441         incf    num_LF, F
01C2   2???           00442     goto    rotate
01C3                  00443 check_threshold2
01C3   3097           00444     movlw    threshold2
01C4   0248           00445     subwf   photoval, W
01C5   1803           00446     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01C6   2???           00447     goto aboveboth
                      00448     movlf   D'1', INDF      ; < threshold 2 means pass
01C7   3001               M         movlw   D'1'
01C8   0080               M         movwf   INDF
01C9   2???           00449     goto    rotate
01CA                  00450 aboveboth
                      00451     movlf   D'3', INDF       ;else flicker fail
01CA   3003               M         movlw   D'3'
01CB   0080               M         movwf   INDF
01CC   0AB6           00452     incf    num_FF, F
01CD   2???           00453     goto    rotate
                      00454 
                      00455 
01CE                  00456 end_operation
                      00457 
                      00458         movlf   D'5', motor_count
01CE   3005               M         movlw   D'5'
01CF   00C9               M         movwf   motor_count
01D0   2???           00459         call    ROTATEMOTOR ; rotate once more  back to starting position
01D1   138B           00460         bcf         INTCON, GIE  ;disable interrupts to stop timer
                      00461 
                      00462         ;Display "complete"
01D2   2???           00463         call       Clear_Display
                      00464         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D3   01B9               M                 clrf    Table_Counter
01D4   0103               M                 clrw
01D5                      M loop_disp
01D5   0839               M         movf    Table_Counter,W
01D6   2???               M                 call    End_Msg
01D7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01D8   1903               M                 btfsc   STATUS,Z
01D9   2???               M                 goto    end_disp
01DA   2???               M                 call    WR_DATA
01DB   0AB9               M                 incf    Table_Counter,F
01DC   2???               M                 goto    loop_disp
01DD                      M end_disp
                      00465 
                      00466         ; Shift logs 1-8 -> 2-9
01DD                  00467 shiftlogs
01DD   1283 1703      00468         banksel     EEADR               ; bank 2
                      00469         movlf       D'111', EEADR        ; start shifting from 111->125
01DF   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E0   008D               M         movwf   EEADR
01E1                  00470 shiftlogs_0
01E1   1683 1703      00471         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E3   138C           00472         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E4   140C           00473         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E5   188C           00474         btfsc       EECON1, WR          ; ensure a write is not in progress
01E6   2???           00475         goto        $-1
01E7   1283 1703      00476         banksel     EEADR               ;bank 2
01E9   300E           00477         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EA   078D           00478         addwf       EEADR, F
01EB   1683 1703      00479         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01ED   138C           00480         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EE   150C           00481         bsf         EECON1, WREN
01EF   3055           00482         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F0   008D           00483         movwf       EECON2
01F1   30AA           00484         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F2   008D           00485         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F3   148C           00486         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F4   110C           00487         bcf         EECON1, WREN
01F5   1283 1703      00488         banksel     EEADR               ;bank 2
01F7   300E           00489         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F8   020D           00490         subwf       EEADR, W
01F9   1903           00491         btfsc       STATUS, Z
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01FA   2???           00492         goto        write_log1          ; if EEADR = 14 we're done 
01FB   1283 1303      00493         banksel op_time             ; for some reason I need to delay here
01FD   2???           00494         call   delay5ms             ; or else I get an infinite loop
01FE   1283 1703      00495         banksel EEADR
0200   300F           00496         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0201   028D           00497         subwf       EEADR, F
0202   2???           00498         goto        shiftlogs_0
                      00499 
                      00500         ; Then store current run as log 1
0203                  00501 write_log1
0203   1283 1703      00502         banksel     EEADR
0205   1383           00503         bcf         STATUS, IRP
                      00504         movlf       0x37, FSR           ;points to 1 after last important data
0206   3037               M         movlw   0x37
0207   0084               M         movwf   FSR
                      00505         movlf       D'14', EEADR        ;points to 1 after last place to write
0208   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0209   008D               M         movwf   EEADR
020A                  00506 write_log1_0
020A   1683 1703      00507         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
020C   188C           00508         btfsc       EECON1, WR          ;ensure a write is not in progress
020D   2???           00509         goto        $-1
020E   1283 1703      00510         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0210   038D           00511         decf        EEADR, F            ;writing backwords
0211   0384           00512         decf        FSR, F
                      00513         movff       INDF, EEDATA
0212   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0213   008C               M         movwf   EEDATA
0214   1683 1703      00514         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0216   138C           00515         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0217   150C           00516         bsf         EECON1, WREN
0218   3055           00517         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0219   008D           00518         movwf       EECON2
021A   30AA           00519         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021B   008D           00520         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021C   148C           00521         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021D   110C           00522         bcf         EECON1, WREN
021E   1283 1703      00523         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0220   088D           00524         movf        EEADR, F
0221   1D03           00525         btfss       STATUS, Z           ;if EEADR = 0 we're done
0222   2???           00526         goto        write_log1_0
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0223   1283           00527         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0224   1303           00528         bcf         STATUS, RP1
                      00529 
                      00530         ; Display info screens
0225   2???           00531         call       time             ; "Operation time: X sec"
0226   2???           00532         call       HalfS
0227   2???           00533         call       HalfS
0228   2???           00534         call       summary          ; "Total candles: X. Defective: Y"
0229   2???           00535         call       HalfS
022A   2???           00536         call       HalfS
022B   2???           00537         call       defective        ; "FF: a b c. LF: d e f"
                      00538 ;-----------------------------------------------------------------------
                      00539 ; DATA DISPLAY INTERFACE
                      00540 
022C   1C86           00541 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
022D   2???           00542          goto           $-1
022E   0E06           00543          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
022F   390F           00544          andlw          0x0F
0230   2???           00545          call       information ;Do the right thing
0231   1886           00546          btfsc          PORTB,1     ;Wait until key is released
0232   2???           00547          goto           $-1
0233   2???           00548          goto       poll
                      00549 
                      00550 ;-------------------------------------------------------------------------
                      00551 ; LOGS INTERFACE
                      00552 ; Shows runs of last 9 logs
                      00553 ; Access from STANDBY and return to STANDBY
                      00554 
0234                  00555 logs
0234   2???           00556     call    Clear_Display
                      00557     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0235   01B9               M                 clrf    Table_Counter
0236   0103               M                 clrw
0237                      M loop_disp
0237   0839               M         movf    Table_Counter,W
0238   2???               M                 call    Logs_Msg1
0239   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
023A   1903               M                 btfsc   STATUS,Z
023B   2???               M                 goto    end_disp
023C   2???               M                 call    WR_DATA
023D   0AB9               M                 incf    Table_Counter,F
023E   2???               M                 goto    loop_disp
023F                      M end_disp
023F   2???           00558     call    Switch_Lines
                      00559     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0240   01B9               M                 clrf    Table_Counter
0241   0103               M                 clrw
0242                      M loop_disp
0242   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0243   2???               M                 call    Logs_Msg2
0244   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0245   1903               M                 btfsc   STATUS,Z
0246   2???               M                 goto    end_disp
0247   2???               M                 call    WR_DATA
0248   0AB9               M                 incf    Table_Counter,F
0249   2???               M                 goto    loop_disp
024A                      M end_disp
                      00560 
024A                  00561 polling
024A   1C86           00562     btfss               PORTB,1     ;Wait until data is available from the keypad
024B   2???           00563     goto                $-1
024C   0E06           00564     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
024D   390F           00565     andlw               0x0F
024E   00B7           00566     movwf       keytemp     ; Save which key was pressed
                      00567 
024F                  00568 check_log1
024F   3A00           00569     xorlw   0x0         ;will be all zeros if its 1
0250   1D03           00570     btfss   STATUS,Z    ;and Z will be high, so skip
0251   2???           00571     goto    check_log2
0252   1283 1703      00572     banksel EEADR
                      00573     movlf   d'0', EEADR
0254   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0255   008D               M         movwf   EEADR
0256   2???           00574     goto    display_log
                      00575 
0257                  00576 check_log2
0257   0837           00577     movf    keytemp, W
0258   3A01           00578     xorlw   0x1
0259   1D03           00579     btfss   STATUS,Z
025A   2???           00580     goto    check_log3
025B   1283 1703      00581     banksel EEADR
                      00582     movlf   d'14', EEADR
025D   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025E   008D               M         movwf   EEADR
025F   2???           00583     goto    display_log
                      00584 
0260                  00585 check_log3
0260   0837           00586     movf    keytemp, W
0261   3A02           00587     xorlw   0x2
0262   1D03           00588     btfss   STATUS,Z
0263   2???           00589     goto    check_log4
0264   1283 1703      00590     banksel EEADR
                      00591     movlf   d'28', EEADR
0266   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0267   008D               M         movwf   EEADR
0268   2???           00592     goto    display_log
                      00593 
0269                  00594 check_log4
0269   0837           00595     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

026A   3A04           00596     xorlw   0x4
026B   1D03           00597     btfss   STATUS,Z
026C   2???           00598     goto    check_log5
026D   1283 1703      00599     banksel EEADR
                      00600     movlf   d'42', EEADR
026F   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0270   008D               M         movwf   EEADR
0271   2???           00601     goto    display_log
                      00602 
0272                  00603 check_log5
0272   0837           00604     movf    keytemp, W
0273   3A05           00605     xorlw   0x5
0274   1D03           00606     btfss   STATUS,Z
0275   2???           00607     goto    check_log6
0276   1283 1703      00608     banksel EEADR
                      00609     movlf   d'56', EEADR
0278   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0279   008D               M         movwf   EEADR
027A   2???           00610     goto    display_log
                      00611 
027B                  00612 check_log6
027B   0837           00613     movf    keytemp, W
027C   3A06           00614     xorlw   0x6
027D   1D03           00615     btfss   STATUS,Z
027E   2???           00616     goto    check_log7
027F   1283 1703      00617     banksel EEADR
                      00618     movlf   d'70', EEADR
0281   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0282   008D               M         movwf   EEADR
0283   2???           00619     goto    display_log
                      00620 
0284                  00621 check_log7
0284   0837           00622     movf    keytemp, W
0285   3A08           00623     xorlw   0x8
0286   1D03           00624     btfss   STATUS,Z
0287   2???           00625     goto    check_log8
0288   1283 1703      00626     banksel EEADR
                      00627     movlf   d'84', EEADR
028A   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
028B   008D               M         movwf   EEADR
028C   2???           00628     goto    display_log
                      00629 
028D                  00630 check_log8
028D   0837           00631     movf    keytemp, W
028E   3A09           00632     xorlw   0x9
028F   1D03           00633     btfss   STATUS,Z
0290   2???           00634     goto    check_log9
0291   1283 1703      00635     banksel EEADR
                      00636     movlf   d'98', EEADR
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0293   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0294   008D               M         movwf   EEADR
0295   2???           00637     goto    display_log
                      00638 
0296                  00639 check_log9
0296   0837           00640     movf    keytemp, W
0297   3A0A           00641     xorlw   0xA
0298   1D03           00642     btfss   STATUS,Z
0299   2???           00643     goto    check_done
029A   1283 1703      00644     banksel EEADR
                      00645     movlf   d'112', EEADR
029C   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029D   008D               M         movwf   EEADR
029E   2???           00646     goto    display_log
                      00647 
029F                  00648 check_done
029F   0837           00649     movf    keytemp, W
02A0   3A0D           00650     xorlw   0xD
02A1   1D03           00651     btfss   STATUS,Z
02A2   2???           00652     goto    badkey
02A3   2???           00653     call    Clear_Display
                      00654     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02A4   01B9               M                 clrf    Table_Counter
02A5   0103               M                 clrw
02A6                      M loop_disp
02A6   0839               M         movf    Table_Counter,W
02A7   2???               M                 call    Standby_Msg
02A8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02A9   1903               M                 btfsc   STATUS,Z
02AA   2???               M                 goto    end_disp
02AB   2???               M                 call    WR_DATA
02AC   0AB9               M                 incf    Table_Counter,F
02AD   2???               M                 goto    loop_disp
02AE                      M end_disp
02AE   2???           00655     call    Switch_Lines
02AF   2???           00656     goto    waiting
                      00657 
02B0                  00658 badkey
02B0   1886           00659     btfsc               PORTB,1     ;Wait until key is released
02B1   2???           00660     goto                $-1
02B2   2???           00661     goto        polling
                      00662 
                      00663 
02B3                  00664 display_log                 ;start in bank2
                      00665 
                      00666     ; move EEPROM data back to "current" data
02B3   1383           00667     bcf STATUS, IRP
                      00668     movlf   0x29, FSR
02B4   3029               M         movlw   0x29
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02B5   0084               M         movwf   FSR
02B6                  00669 read_EEPROM
02B6   1683 1703      00670     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B8   138C           00671     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B9   140C           00672     bsf EECON1, RD          ; read EEPROM
02BA   1283 1703      00673     banksel EEDATA          ;bank 2
                      00674     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02BC   080C               M         movf    EEDATA, W
02BD   0080               M         movwf   INDF
02BE   0A84           00675     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02BF   0A8D           00676     incf    EEADR, F
02C0   3037           00677     movlw   0x37            ;done if FSR = 0x37
02C1   0204           00678     subwf   FSR, W
02C2   1D03           00679     btfss   STATUS, Z
02C3   2???           00680     goto    read_EEPROM
                      00681 
                      00682     ;display data
02C4   1283 1303      00683     banksel Table_Counter   ; bank0
02C6   2???           00684     call    Clear_Display
                      00685     ;if first data is 0xFF (no log) just display "none"
02C7   30FF           00686     movlw   0xFF
02C8   0229           00687     subwf   start_year10, W
02C9   1D03           00688     btfss   STATUS, Z
02CA   2???           00689     goto yes_log
02CB                  00690 no_log
                      00691     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02CB   01B9               M                 clrf    Table_Counter
02CC   0103               M                 clrw
02CD                      M loop_disp
02CD   0839               M         movf    Table_Counter,W
02CE   2???               M                 call    None
02CF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02D0   1903               M                 btfsc   STATUS,Z
02D1   2???               M                 goto    end_disp
02D2   2???               M                 call    WR_DATA
02D3   0AB9               M                 incf    Table_Counter,F
02D4   2???               M                 goto    loop_disp
02D5                      M end_disp
02D5   2???           00692     call    HalfS
02D6   2???           00693     goto    logs
                      00694     ;else display the log
02D7                  00695 yes_log
                      00696     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02D7   01B9               M                 clrf    Table_Counter
02D8   0103               M                 clrw
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D9                      M loop_disp
02D9   0839               M         movf    Table_Counter,W
02DA   2???               M                 call    Op_at
02DB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02DC   1903               M                 btfsc   STATUS,Z
02DD   2???               M                 goto    end_disp
02DE   2???               M                 call    WR_DATA
02DF   0AB9               M                 incf    Table_Counter,F
02E0   2???               M                 goto    loop_disp
02E1                      M end_disp
02E1   2???           00697     call    Switch_Lines
                      00698     writechar    "2"
02E2   3032               M             movlw   "2"
02E3   2???               M             call    WR_DATA
                      00699     writechar    "0"
02E4   3030               M             movlw   "0"
02E5   2???               M             call    WR_DATA
                      00700     writeASC   start_year10
02E6   0829               M             movf    start_year10, W
02E7   2???               M             call WR_DATA
                      00701     writeASC   start_year1
02E8   082A               M             movf    start_year1, W
02E9   2???               M             call WR_DATA
                      00702     writechar   "/"
02EA   302F               M             movlw   "/"
02EB   2???               M             call    WR_DATA
                      00703     writeASC   start_month10
02EC   082B               M             movf    start_month10, W
02ED   2???               M             call WR_DATA
                      00704     writeASC   start_month1
02EE   082C               M             movf    start_month1, W
02EF   2???               M             call WR_DATA
                      00705     writechar   "/"
02F0   302F               M             movlw   "/"
02F1   2???               M             call    WR_DATA
                      00706     writeASC   start_date10
02F2   082D               M             movf    start_date10, W
02F3   2???               M             call WR_DATA
                      00707     writeASC   start_date1
02F4   082E               M             movf    start_date1, W
02F5   2???               M             call WR_DATA
                      00708     writechar   " "
02F6   3020               M             movlw   " "
02F7   2???               M             call    WR_DATA
                      00709     writeASC   start_hour10
02F8   082F               M             movf    start_hour10, W
02F9   2???               M             call WR_DATA
                      00710     writeASC   start_hour1
02FA   0830               M             movf    start_hour1, W
02FB   2???               M             call WR_DATA
                      00711     writechar   ":"
02FC   303A               M             movlw   ":"
02FD   2???               M             call    WR_DATA
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00712     writeASC  start_min10
02FE   0831               M             movf    start_min10, W
02FF   2???               M             call WR_DATA
                      00713     writeASC   start_min1
0300   0832               M             movf    start_min1, W
0301   2???               M             call WR_DATA
0302   2???           00714     call    HalfS
0303   2???           00715     call    HalfS
0304   2???           00716     call    time
0305   2???           00717     call    HalfS
0306   2???           00718     call    HalfS
0307   2???           00719     call    summary
0308   2???           00720     call    HalfS
0309   2???           00721     call    HalfS
                      00722 
                      00723     ;option to Export
030A   2???           00724     call    Clear_Display
                      00725     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
030B   01B9               M                 clrf    Table_Counter
030C   0103               M                 clrw
030D                      M loop_disp
030D   0839               M         movf    Table_Counter,W
030E   2???               M                 call    Logs_Msg3
030F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0310   1903               M                 btfsc   STATUS,Z
0311   2???               M                 goto    end_disp
0312   2???               M                 call    WR_DATA
0313   0AB9               M                 incf    Table_Counter,F
0314   2???               M                 goto    loop_disp
0315                      M end_disp
0315   2???           00726     call    Switch_Lines
                      00727     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0316   01B9               M                 clrf    Table_Counter
0317   0103               M                 clrw
0318                      M loop_disp
0318   0839               M         movf    Table_Counter,W
0319   2???               M                 call    Logs_Msg4
031A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
031B   1903               M                 btfsc   STATUS,Z
031C   2???               M                 goto    end_disp
031D   2???               M                 call    WR_DATA
031E   0AB9               M                 incf    Table_Counter,F
031F   2???               M                 goto    loop_disp
0320                      M end_disp
                      00728 
0320                  00729 wanna_export
0320   1C86           00730     btfss               PORTB,1     ;Wait until data is available from the keypad
0321   2???           00731     goto                $-1
0322   0E06           00732     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0323   390F           00733     andlw               0x0F
0324   00B7           00734     movwf       keytemp     ; Save which key was pressed
                      00735 
0325                  00736 check_wanna                 ;export
0325   0837           00737     movf    keytemp, W
0326   3A0F           00738     xorlw   0xF
0327   1D03           00739     btfss   STATUS,Z
0328   2???           00740     goto    check_nothx
0329   2???           00741     call    export
032A   2???           00742     goto    logs
                      00743 
032B                  00744 check_nothx                 ;return to logs
032B   0837           00745     movf    keytemp, W
032C   3A0E           00746     xorlw   0xE
032D   1D03           00747     btfss   STATUS,Z
032E   2???           00748     goto    check_immapeace
032F   2???           00749     goto    logs
                      00750 
0330                  00751 check_immapeace             ;return to standby
0330   0837           00752     movf    keytemp, W
0331   3A0D           00753     xorlw   0xD
0332   1D03           00754     btfss   STATUS,Z
0333   2???           00755     goto    badkeyagain
0334   2???           00756     call    Clear_Display
                      00757     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0335   01B9               M                 clrf    Table_Counter
0336   0103               M                 clrw
0337                      M loop_disp
0337   0839               M         movf    Table_Counter,W
0338   2???               M                 call    Standby_Msg
0339   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
033A   1903               M                 btfsc   STATUS,Z
033B   2???               M                 goto    end_disp
033C   2???               M                 call    WR_DATA
033D   0AB9               M                 incf    Table_Counter,F
033E   2???               M                 goto    loop_disp
033F                      M end_disp
033F   2???           00758     call    Switch_Lines
0340   2???           00759     goto    waiting
                      00760 
0341                  00761 badkeyagain
0341   1886           00762     btfsc               PORTB,1     ;Wait until key is released
0342   2???           00763     goto                $-1
0343   2???           00764     goto        wanna_export
                      00765 
                      00766 ; END OF MAIN PROGRAM
                      00767 ;------------------------------------------------------------
                      00768 
                      00769 ;***************************************
                      00770 ; CALIBRATION MODULE
                      00771 ; For adjusting sensitivity of photoresistor.
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00772 ; Tests a candle and displays # of times PR reads high (0-152)
                      00773 ; As well as what state this means (LF, PASS, FF)
                      00774 ;***************************************
0344                  00775 calibrate
0344   2???           00776     call    Clear_Display
0345   01C7           00777     clrf    photocount
0346   0181           00778     clrf    TMR0
0347   178B           00779     bsf     INTCON, GIE     ;enable interrupts
0348   2???           00780     call    HalfS
0349   2???           00781     call    HalfS
034A   2???           00782     call    HalfS
034B   2???           00783     call    HalfS
                      00784     movff   photocount, op_time
034C   0847               M         movf    photocount, W
034D   00B3               M         movwf   op_time
034E   138B           00785     bcf     INTCON,GIE
034F   2???           00786     call    big_number
0350                  00787 cal1
0350   3002           00788     movlw    threshold1
0351   0233           00789     subwf   op_time, W
0352   1803           00790     btfsc   STATUS, C       ;if  < threshold 1, C = 0
0353   2???           00791     goto cal2
                      00792     Display LED_fail        ; < threshold 1 means led fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0354   01B9               M                 clrf    Table_Counter
0355   0103               M                 clrw
0356                      M loop_disp
0356   0839               M         movf    Table_Counter,W
0357   2???               M                 call    LED_fail
0358   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0359   1903               M                 btfsc   STATUS,Z
035A   2???               M                 goto    end_disp
035B   2???               M                 call    WR_DATA
035C   0AB9               M                 incf    Table_Counter,F
035D   2???               M                 goto    loop_disp
035E                      M end_disp
035E   2???           00793     goto   end_calibrate
035F                  00794 cal2
035F   3097           00795     movlw    threshold2
0360   0233           00796     subwf   op_time, W
0361   1803           00797     btfsc   STATUS, C       ;if  < threshold 2, C = 0
0362   2???           00798     goto cal3
                      00799     Display Pass      ; < threshold 2 means pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0363   01B9               M                 clrf    Table_Counter
0364   0103               M                 clrw
0365                      M loop_disp
0365   0839               M         movf    Table_Counter,W
0366   2???               M                 call    Pass
0367   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0368   1903               M                 btfsc   STATUS,Z
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0369   2???               M                 goto    end_disp
036A   2???               M                 call    WR_DATA
036B   0AB9               M                 incf    Table_Counter,F
036C   2???               M                 goto    loop_disp
036D                      M end_disp
036D   2???           00800     goto   end_calibrate
036E                  00801 cal3
                      00802     Display  Flick_fail      ; else flicker fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
036E   01B9               M                 clrf    Table_Counter
036F   0103               M                 clrw
0370                      M loop_disp
0370   0839               M         movf    Table_Counter,W
0371   2???               M                 call    Flick_fail
0372   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0373   1903               M                 btfsc   STATUS,Z
0374   2???               M                 goto    end_disp
0375   2???               M                 call    WR_DATA
0376   0AB9               M                 incf    Table_Counter,F
0377   2???               M                 goto    loop_disp
0378                      M end_disp
                      00803 
0378                  00804 end_calibrate
0378   2???           00805     call    Switch_Lines
                      00806     writeBCD    huns
0379   0840               M             movf    huns, W
037A   3E30               M             addlw   B'00110000'
037B   2???               M             call WR_DATA
                      00807     writeBCD    tens
037C   0841               M             movf    tens, W
037D   3E30               M             addlw   B'00110000'
037E   2???               M             call WR_DATA
                      00808     writeBCD    ones
037F   0842               M             movf    ones, W
0380   3E30               M             addlw   B'00110000'
0381   2???               M             call WR_DATA
0382   2???           00809     call    HalfS
0383   2???           00810     call    HalfS
0384   2???           00811     call    Clear_Display
                      00812     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0385   01B9               M                 clrf    Table_Counter
0386   0103               M                 clrw
0387                      M loop_disp
0387   0839               M         movf    Table_Counter,W
0388   2???               M                 call    Standby_Msg
0389   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
038A   1903               M                 btfsc   STATUS,Z
038B   2???               M                 goto    end_disp
038C   2???               M                 call    WR_DATA
038D   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

038E   2???               M                 goto    loop_disp
038F                      M end_disp
038F   2???           00813     call    Switch_Lines
0390   0008           00814     return
                      00815 
                      00816 ;***************************************
                      00817 ; ROTATE MOTOR ROUTINE
                      00818 ; Rotates motor by number of steps in motor_count times 4.
                      00819 ; (5 gives 20 steps = 36 deg = one slot)
                      00820 ; pulses ABCD if startfrom3 = 0; else pulses CDAB
                      00821 ; uses half-stepping
                      00822 ;***************************************
                      00823 
0391                  00824 ROTATEMOTOR
0391   184A           00825     btfsc   startfrom3, 0
0392   2???           00826     goto    halfway
0393                  00827 start_rot
                      00828     movlf   b'1001', PORTA          ; pulse A
0393   3009               M         movlw   b'1001'
0394   0085               M         movwf   PORTA
0395   2???           00829     call    motor_del
                      00830     movlf   b'1000', PORTA
0396   3008               M         movlw   b'1000'
0397   0085               M         movwf   PORTA
0398   2???           00831     call    motor_del
                      00832     movlf   b'1010', PORTA          ; pulse B
0399   300A               M         movlw   b'1010'
039A   0085               M         movwf   PORTA
039B   2???           00833     call    motor_del
                      00834     movlf   b'0010', PORTA
039C   3002               M         movlw   b'0010'
039D   0085               M         movwf   PORTA
039E   2???           00835     call    motor_del
039F   184A           00836     btfsc   startfrom3, 0
03A0   2???           00837     goto    decrement
03A1                  00838 halfway
                      00839     movlf   b'0110', PORTA          ; pulse C
03A1   3006               M         movlw   b'0110'
03A2   0085               M         movwf   PORTA
03A3   2???           00840     call    motor_del
                      00841     movlf   b'0100', PORTA
03A4   3004               M         movlw   b'0100'
03A5   0085               M         movwf   PORTA
03A6   2???           00842     call    motor_del
                      00843     movlf   b'0101', PORTA          ; pulse D
03A7   3005               M         movlw   b'0101'
03A8   0085               M         movwf   PORTA
03A9   2???           00844     call    motor_del
                      00845     movlf   b'0001', PORTA
03AA   3001               M         movlw   b'0001'
03AB   0085               M         movwf   PORTA
03AC   2???           00846     call    motor_del
03AD   184A           00847     btfsc   startfrom3, 0
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AE   2???           00848     goto    start_rot
03AF                  00849 decrement
Message[305]: Using default destination of 1 (file).
03AF   0BC9           00850     decfsz  motor_count
03B0   2???           00851     goto    restart_motor
03B1   2???           00852     goto    finish_motor
03B2                  00853 restart_motor
03B2   184A           00854     btfsc   startfrom3, 0
03B3   2???           00855     goto    halfway
03B4   2???           00856     goto    start_rot
03B5                  00857 finish_motor
03B5   0185           00858     clrf    PORTA
03B6   0008           00859     return
                      00860 
03B7                  00861 first_two                       ; pulses AB only
                      00862     movlf   b'1001', PORTA
03B7   3009               M         movlw   b'1001'
03B8   0085               M         movwf   PORTA
03B9   2???           00863     call    motor_del
                      00864     movlf   b'1000', PORTA
03BA   3008               M         movlw   b'1000'
03BB   0085               M         movwf   PORTA
03BC   2???           00865     call    motor_del
                      00866     movlf   b'1010', PORTA
03BD   300A               M         movlw   b'1010'
03BE   0085               M         movwf   PORTA
03BF   2???           00867     call    motor_del
                      00868     movlf   b'0010', PORTA
03C0   3002               M         movlw   b'0010'
03C1   0085               M         movwf   PORTA
03C2   2???           00869     call    motor_del
03C3   0185           00870     clrf    PORTA
03C4   144A           00871     bsf     startfrom3, 0
03C5   0008           00872     return
                      00873 
03C6                  00874 last_two                        ; pulses CD only
                      00875     movlf   b'0110', PORTA
03C6   3006               M         movlw   b'0110'
03C7   0085               M         movwf   PORTA
03C8   2???           00876     call    motor_del
                      00877     movlf   b'0100', PORTA
03C9   3004               M         movlw   b'0100'
03CA   0085               M         movwf   PORTA
03CB   2???           00878     call    motor_del
                      00879     movlf   b'0101', PORTA
03CC   3005               M         movlw   b'0101'
03CD   0085               M         movwf   PORTA
03CE   2???           00880     call    motor_del
                      00881     movlf   b'0001', PORTA
03CF   3001               M         movlw   b'0001'
03D0   0085               M         movwf   PORTA
03D1   2???           00882     call    motor_del
03D2   0185           00883     clrf    PORTA
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D3   104A           00884     bcf     startfrom3,0
03D4   0008           00885     return
                      00886 
                      00887 
                      00888 ;***************************************
                      00889 ; DATA DISPLAY ROUTINE
                      00890 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00891 ; Determines which key it was and displays appropriate info / branch
                      00892 ;***************************************
                      00893 
03D5                  00894 information
03D5   00B7           00895     movwf   keytemp             ; Save which key was pressed
                      00896 
03D6                  00897 check_1
03D6   3A00           00898     xorlw   0x0         ;will be all zeros if its 1
03D7   1D03           00899     btfss   STATUS,Z    ;and Z will be high, so skip
03D8   2???           00900     goto    check_2
03D9   2???           00901     call    Clear_Display
                      00902     writechar "1"
03DA   3031               M             movlw   "1"
03DB   2???               M             call    WR_DATA
03DC   0820           00903     movf    state1, W
03DD   2???           00904     call    display_state
03DE   0008           00905     return
                      00906 
03DF                  00907 check_2
03DF   0837           00908     movf    keytemp, W
03E0   3A01           00909     xorlw   0x1
03E1   1D03           00910     btfss   STATUS,Z
03E2   2???           00911     goto    check_3
03E3   2???           00912     call    Clear_Display
                      00913     writechar "2"
03E4   3032               M             movlw   "2"
03E5   2???               M             call    WR_DATA
03E6   0821           00914     movf    state2, W
03E7   2???           00915     call    display_state
03E8   0008           00916     return
                      00917 
03E9                  00918 check_3
03E9   0837           00919     movf    keytemp, W
03EA   3A02           00920     xorlw   0x2
03EB   1D03           00921     btfss   STATUS,Z
03EC   2???           00922     goto    check_4
03ED   2???           00923     call    Clear_Display
                      00924     writechar "3"
03EE   3033               M             movlw   "3"
03EF   2???               M             call    WR_DATA
03F0   0822           00925     movf    state3, W
03F1   2???           00926     call    display_state
03F2   0008           00927     return
                      00928 
03F3                  00929 check_4
03F3   0837           00930     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F4   3A04           00931     xorlw   0x4
03F5   1D03           00932     btfss   STATUS,Z
03F6   2???           00933     goto    check_5
03F7   2???           00934     call    Clear_Display
                      00935     writechar "4"
03F8   3034               M             movlw   "4"
03F9   2???               M             call    WR_DATA
03FA   0823           00936     movf    state4, W
03FB   2???           00937     call    display_state
03FC   0008           00938     return
                      00939 
03FD                  00940 check_5
03FD   0837           00941     movf    keytemp, W
03FE   3A05           00942     xorlw   0x5
03FF   1D03           00943     btfss   STATUS,Z
0400   2???           00944     goto    check_6
0401   2???           00945     call    Clear_Display
                      00946     writechar "5"
0402   3035               M             movlw   "5"
0403   2???               M             call    WR_DATA
0404   0824           00947     movf    state5, W
0405   2???           00948     call    display_state
0406   0008           00949     return
                      00950 
0407                  00951 check_6
0407   0837           00952     movf    keytemp, W
0408   3A06           00953     xorlw   0x6
0409   1D03           00954     btfss   STATUS,Z
040A   2???           00955     goto    check_7
040B   2???           00956     call    Clear_Display
                      00957     writechar "6"
040C   3036               M             movlw   "6"
040D   2???               M             call    WR_DATA
040E   0825           00958     movf    state6, W
040F   2???           00959     call    display_state
0410   0008           00960     return
                      00961 
0411                  00962 check_7
0411   0837           00963     movf    keytemp, W
0412   3A08           00964     xorlw   0x8
0413   1D03           00965     btfss   STATUS,Z
0414   2???           00966     goto    check_8
0415   2???           00967     call    Clear_Display
                      00968     writechar "7"
0416   3037               M             movlw   "7"
0417   2???               M             call    WR_DATA
0418   0826           00969     movf    state7, W
0419   2???           00970     call    display_state
041A   0008           00971     return
                      00972 
041B                  00973 check_8
041B   0837           00974     movf    keytemp, W
041C   3A09           00975     xorlw   0x9
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

041D   1D03           00976     btfss   STATUS,Z
041E   2???           00977     goto    check_9
041F   2???           00978     call    Clear_Display
                      00979     writechar "8"
0420   3038               M             movlw   "8"
0421   2???               M             call    WR_DATA
0422   0827           00980     movf    state8, W
0423   2???           00981     call    display_state
0424   0008           00982     return
                      00983 
0425                  00984 check_9
0425   0837           00985     movf    keytemp, W
0426   3A0A           00986     xorlw   0xA
0427   1D03           00987     btfss   STATUS,Z
0428   2???           00988     goto    check_summary
0429   2???           00989     call    Clear_Display
                      00990     writechar "9"
042A   3039               M             movlw   "9"
042B   2???               M             call    WR_DATA
042C   0828           00991     movf    state9, W
042D   2???           00992     call    display_state
042E   0008           00993     return
                      00994 
042F                  00995 check_summary
042F   0837           00996     movf    keytemp, W
0430   3A03           00997     xorlw   0x3
0431   1D03           00998     btfss   STATUS,Z
0432   2???           00999     goto    check_defective
0433   2???           01000     call    summary
0434   0008           01001     return
                      01002 
0435                  01003 check_defective
0435   0837           01004     movf    keytemp, W
0436   3A07           01005     xorlw   0x7
0437   1D03           01006     btfss   STATUS,Z
0438   2???           01007     goto    check_time
0439   2???           01008     call    defective
043A   0008           01009     return
                      01010 
043B                  01011 check_time
043B   0837           01012     movf    keytemp, W
043C   3A0B           01013     xorlw   0xB
043D   1D03           01014     btfss   STATUS,Z
043E   2???           01015     goto    check_export
043F   2???           01016     call    time
0440   0008           01017     return
                      01018 
0441                  01019 check_export
0441   0837           01020     movf    keytemp, W
0442   3A0F           01021     xorlw   0xF
0443   1D03           01022     btfss   STATUS,Z
0444   2???           01023     goto    check_standby       
0445   2???           01024     call    export
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0446   0008           01025     return
                      01026 
0447                  01027 check_standby
0447   0837           01028     movf    keytemp, W
0448   3A0D           01029     xorlw   0xD
0449   1D03           01030     btfss   STATUS,Z
044A   2???           01031     goto    check_start
044B   2???           01032     call    Clear_Display
                      01033     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
044C   01B9               M                 clrf    Table_Counter
044D   0103               M                 clrw
044E                      M loop_disp
044E   0839               M         movf    Table_Counter,W
044F   2???               M                 call    Standby_Msg
0450   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0451   1903               M                 btfsc   STATUS,Z
0452   2???               M                 goto    end_disp
0453   2???               M                 call    WR_DATA
0454   0AB9               M                 incf    Table_Counter,F
0455   2???               M                 goto    loop_disp
0456                      M end_disp
0456   2???           01034     call    Switch_Lines
0457   2???           01035     goto    waiting
                      01036 
0458                  01037 check_start
0458   0837           01038     movf    keytemp, W
0459   3A0C           01039     xorlw   0xC
045A   1D03           01040     btfss   STATUS,Z
045B   2???           01041     goto    default_key
045C   2???           01042     goto    start
                      01043 
045D                  01044 default_key         ; will never get here unless you hit "LOGS"
045D   0008           01045     return
                      01046 
                      01047 
                      01048 ;Display state subroutine
                      01049 ;stateN is in W
045E                  01050 display_state
045E   00B8           01051     movwf  statetemp    ; save stateN
                      01052 
045F                  01053 check_none
045F   3A00           01054     xorlw   0x0
0460   1D03           01055     btfss   STATUS,Z
0461   2???           01056     goto    check_pass
                      01057     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0462   01B9               M                 clrf    Table_Counter
0463   0103               M                 clrw
0464                      M loop_disp
0464   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0465   2???               M                 call    Not_present
0466   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0467   1903               M                 btfsc   STATUS,Z
0468   2???               M                 goto    end_disp
0469   2???               M                 call    WR_DATA
046A   0AB9               M                 incf    Table_Counter,F
046B   2???               M                 goto    loop_disp
046C                      M end_disp
046C   0008           01058     return
                      01059 
046D                  01060 check_pass
046D   0838           01061     movf    statetemp, W
046E   3A01           01062     xorlw   0x1
046F   1D03           01063     btfss   STATUS,Z
0470   2???           01064     goto    check_LED
                      01065     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0471   01B9               M                 clrf    Table_Counter
0472   0103               M                 clrw
0473                      M loop_disp
0473   0839               M         movf    Table_Counter,W
0474   2???               M                 call    Pass
0475   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0476   1903               M                 btfsc   STATUS,Z
0477   2???               M                 goto    end_disp
0478   2???               M                 call    WR_DATA
0479   0AB9               M                 incf    Table_Counter,F
047A   2???               M                 goto    loop_disp
047B                      M end_disp
047B   0008           01066     return
                      01067 
047C                  01068 check_LED
047C   0838           01069     movf    statetemp, W
047D   3A02           01070     xorlw   0x2
047E   1D03           01071     btfss   STATUS,Z
047F   2???           01072     goto    check_flick
                      01073     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0480   01B9               M                 clrf    Table_Counter
0481   0103               M                 clrw
0482                      M loop_disp
0482   0839               M         movf    Table_Counter,W
0483   2???               M                 call    LED_fail
0484   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0485   1903               M                 btfsc   STATUS,Z
0486   2???               M                 goto    end_disp
0487   2???               M                 call    WR_DATA
0488   0AB9               M                 incf    Table_Counter,F
0489   2???               M                 goto    loop_disp
048A                      M end_disp
048A   0008           01074     return
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01075 
048B                  01076 check_flick
048B   0838           01077     movf    statetemp, W
048C   3A03           01078     xorlw   0x3
048D   1D03           01079     btfss   STATUS,Z
048E   2???           01080     goto    default_state
                      01081     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
048F   01B9               M                 clrf    Table_Counter
0490   0103               M                 clrw
0491                      M loop_disp
0491   0839               M         movf    Table_Counter,W
0492   2???               M                 call    Flick_fail
0493   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0494   1903               M                 btfsc   STATUS,Z
0495   2???               M                 goto    end_disp
0496   2???               M                 call    WR_DATA
0497   0AB9               M                 incf    Table_Counter,F
0498   2???               M                 goto    loop_disp
0499                      M end_disp
0499   0008           01082     return
                      01083 
049A                  01084 default_state   ; should never get here
049A   0008           01085     return
                      01086 
                      01087 ; Summary Subroutine
                      01088 ; Displays total number of candles and number of defective candles
                      01089 ; Reads data from num_tot, num_LF, num_FF
049B                  01090 summary
049B   2???           01091     call            Clear_Display
                      01092     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
049C   01B9               M                 clrf    Table_Counter
049D   0103               M                 clrw
049E                      M loop_disp
049E   0839               M         movf    Table_Counter,W
049F   2???               M                 call    Total_Msg
04A0   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04A1   1903               M                 btfsc   STATUS,Z
04A2   2???               M                 goto    end_disp
04A3   2???               M                 call    WR_DATA
04A4   0AB9               M                 incf    Table_Counter,F
04A5   2???               M                 goto    loop_disp
04A6                      M end_disp
                      01093     writeBCD        num_tot
04A6   0834               M             movf    num_tot, W
04A7   3E30               M             addlw   B'00110000'
04A8   2???               M             call WR_DATA
04A9   2???           01094     call            Switch_Lines
                      01095     Display         LF
  0000                    M                 local   loop_disp
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   end_disp
04AA   01B9               M                 clrf    Table_Counter
04AB   0103               M                 clrw
04AC                      M loop_disp
04AC   0839               M         movf    Table_Counter,W
04AD   2???               M                 call    LF
04AE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04AF   1903               M                 btfsc   STATUS,Z
04B0   2???               M                 goto    end_disp
04B1   2???               M                 call    WR_DATA
04B2   0AB9               M                 incf    Table_Counter,F
04B3   2???               M                 goto    loop_disp
04B4                      M end_disp
                      01096     writeBCD        num_LF
04B4   0835               M             movf    num_LF, W
04B5   3E30               M             addlw   B'00110000'
04B6   2???               M             call WR_DATA
                      01097     spacebar
04B7   3014               M             movlw   B'00010100'
04B8   2???               M             call    WR_INS
                      01098     spacebar
04B9   3014               M             movlw   B'00010100'
04BA   2???               M             call    WR_INS
                      01099     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04BB   01B9               M                 clrf    Table_Counter
04BC   0103               M                 clrw
04BD                      M loop_disp
04BD   0839               M         movf    Table_Counter,W
04BE   2???               M                 call    FF
04BF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04C0   1903               M                 btfsc   STATUS,Z
04C1   2???               M                 goto    end_disp
04C2   2???               M                 call    WR_DATA
04C3   0AB9               M                 incf    Table_Counter,F
04C4   2???               M                 goto    loop_disp
04C5                      M end_disp
                      01100     writeBCD        num_FF
04C5   0836               M             movf    num_FF, W
04C6   3E30               M             addlw   B'00110000'
04C7   2???               M             call WR_DATA
04C8   0008           01101     return
                      01102 
                      01103 ; Defective candles Subroutine
                      01104 ; Displays index of each defective candle (LF or FF)
                      01105 ; Reads data from state1 - state9
04C9                  01106 defective
04C9   2???           01107     call            Clear_Display
                      01108 
04CA   01C5           01109     clrf    morethansix
04CB   3007           01110     movlw   d'7'
04CC   0235           01111     subwf   num_LF, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04CD   1803           01112     btfsc   STATUS, C       ;if  num_LF < 7, C = 0
04CE   1445           01113     bsf     morethansix,0
04CF   3007           01114     movlw   d'7'
04D0   0236           01115     subwf   num_FF, W
04D1   1803           01116     btfsc   STATUS, C       ;if  num_FF < 7, C = 0
04D2   1445           01117     bsf     morethansix,0
                      01118 
                      01119     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04D3   01B9               M                 clrf    Table_Counter
04D4   0103               M                 clrw
04D5                      M loop_disp
04D5   0839               M         movf    Table_Counter,W
04D6   2???               M                 call    LF
04D7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04D8   1903               M                 btfsc   STATUS,Z
04D9   2???               M                 goto    end_disp
04DA   2???               M                 call    WR_DATA
04DB   0AB9               M                 incf    Table_Counter,F
04DC   2???               M                 goto    loop_disp
04DD                      M end_disp
04DD   08B5           01120     movf            num_LF, F
04DE   1D03           01121     btfss           STATUS,Z         ;if none LF, just say "none"
04DF   2???           01122     goto            check_LF
                      01123     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04E0   01B9               M                 clrf    Table_Counter
04E1   0103               M                 clrw
04E2                      M loop_disp
04E2   0839               M         movf    Table_Counter,W
04E3   2???               M                 call    None
04E4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04E5   1903               M                 btfsc   STATUS,Z
04E6   2???               M                 goto    end_disp
04E7   2???               M                 call    WR_DATA
04E8   0AB9               M                 incf    Table_Counter,F
04E9   2???               M                 goto    loop_disp
04EA                      M end_disp
04EA   2???           01124     goto            now_FF
                      01125 
04EB                  01126 check_LF                            ; list all LF candles
04EB   3002           01127     movlw           B'00000010'
04EC   2???           01128     call            check_for_fail
                      01129 
04ED                  01130 now_FF                              ; now look at FF
04ED   2???           01131     call            Switch_Lines
                      01132     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04EE   01B9               M                 clrf    Table_Counter
04EF   0103               M                 clrw
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F0                      M loop_disp
04F0   0839               M         movf    Table_Counter,W
04F1   2???               M                 call    FF
04F2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04F3   1903               M                 btfsc   STATUS,Z
04F4   2???               M                 goto    end_disp
04F5   2???               M                 call    WR_DATA
04F6   0AB9               M                 incf    Table_Counter,F
04F7   2???               M                 goto    loop_disp
04F8                      M end_disp
04F8   08B6           01133     movf            num_FF, F
04F9   1D03           01134     btfss           STATUS,Z         ;if none FF, just say "none"
04FA   2???           01135     goto            check_FF
                      01136     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04FB   01B9               M                 clrf    Table_Counter
04FC   0103               M                 clrw
04FD                      M loop_disp
04FD   0839               M         movf    Table_Counter,W
04FE   2???               M                 call    None
04FF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0500   1903               M                 btfsc   STATUS,Z
0501   2???               M                 goto    end_disp
0502   2???               M                 call    WR_DATA
0503   0AB9               M                 incf    Table_Counter,F
0504   2???               M                 goto    loop_disp
0505                      M end_disp
0505   0008           01137     return
                      01138 
0506                  01139 check_FF                            ; list all FF candles
0506   3003           01140     movlw           B'00000011'
0507   2???           01141     call            check_for_fail
0508   0008           01142     return
                      01143 
0509                  01144 check_for_fail  ;lists all candles that have status currently in W "stateX"
0509   00B8           01145     movwf   statetemp
                      01146         movlf   D'0', candle_index
050A   3000               M         movlw   D'0'
050B   00C6               M         movwf   candle_index
050C   1383           01147         bcf     STATUS, IRP
                      01148         movlf   0x1F, FSR           ;index of right before state1
050D   301F               M         movlw   0x1F
050E   0084               M         movwf   FSR
050F                  01149 check_next
050F   3009           01150         movlw   D'9'                ;exit loop if at 9
0510   0246           01151         subwf   candle_index, W
0511   1803           01152         btfsc   STATUS,W
0512   2???           01153         goto    end_check_fail
0513   0A84           01154         incf    FSR,F               ; increment
0514   0AC6           01155         incf    candle_index,F
0515   0838           01156         movf    statetemp, W            ;see if stateN = stateX
0516   0200           01157         subwf   INDF, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0517   1D03           01158         btfss   STATUS, Z
0518   2???           01159         goto    check_next          ;if not, go to next
                      01160         writeBCD        candle_index    ;if so, write down the number
0519   0846               M             movf    candle_index, W
051A   3E30               M             addlw   B'00110000'
051B   2???               M             call WR_DATA
051C   1845           01161     btfsc   morethansix,0       ;don't write space if need more than 6
051D   2???           01162     goto    more_than_six
                      01163     spacebar
051E   3014               M             movlw   B'00010100'
051F   2???               M             call    WR_INS
0520                  01164 more_than_six
0520   2???           01165         goto check_next
0521                  01166 end_check_fail
0521   0008           01167         return
                      01168 
                      01169 ; Time subroutine
                      01170 ; Takes the time in seconds as a binary number in op_time
                      01171 ; and puts it into huns,tens,ones to display.
0522                  01172 time
0522   2???           01173     call    Clear_Display
                      01174     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0523   01B9               M                 clrf    Table_Counter
0524   0103               M                 clrw
0525                      M loop_disp
0525   0839               M         movf    Table_Counter,W
0526   2???               M                 call    Time_Msg
0527   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0528   1903               M                 btfsc   STATUS,Z
0529   2???               M                 goto    end_disp
052A   2???               M                 call    WR_DATA
052B   0AB9               M                 incf    Table_Counter,F
052C   2???               M                 goto    loop_disp
052D                      M end_disp
052D   2???           01175     call    Switch_Lines
052E   0833           01176     movf    op_time, W
052F   2???           01177     call    big_number
0530   08C0           01178     movf    huns, F
0531   1903           01179     btfsc   STATUS,Z        ;if huns is zero don't display it
0532   2???           01180     goto    no_huns
                      01181     writeBCD    huns
0533   0840               M             movf    huns, W
0534   3E30               M             addlw   B'00110000'
0535   2???               M             call WR_DATA
0536                  01182 no_huns
0536   08C1           01183     movf    tens, F
0537   1903           01184     btfsc   STATUS,Z        ;if tens is zero don't display it
0538   2???           01185     goto    no_tens
                      01186     writeBCD    tens
0539   0841               M             movf    tens, W
053A   3E30               M             addlw   B'00110000'
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

053B   2???               M             call WR_DATA
053C                  01187 no_tens
                      01188     writeBCD    ones
053C   0842               M             movf    ones, W
053D   3E30               M             addlw   B'00110000'
053E   2???               M             call WR_DATA
                      01189     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
053F   01B9               M                 clrf    Table_Counter
0540   0103               M                 clrw
0541                      M loop_disp
0541   0839               M         movf    Table_Counter,W
0542   2???               M                 call    Seconds
0543   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0544   1903               M                 btfsc   STATUS,Z
0545   2???               M                 goto    end_disp
0546   2???               M                 call    WR_DATA
0547   0AB9               M                 incf    Table_Counter,F
0548   2???               M                 goto    loop_disp
0549                      M end_disp
0549   0008           01190     return
                      01191 
                      01192 ; Export subroutine
                      01193 ; Exports data from current run to hyperterminal
                      01194 ; reads start time and num_tot/num_ff/num_lf data
054A                  01195 export
                      01196     printchar   0x7       ;makes a noise on the PC
054A   3007               M             movlw   0x7
054B   2???               M             call    writetoPC
                      01197     printchar   0xD       ;go back to left edge
054C   300D               M             movlw   0xD
054D   2???               M             call    writetoPC
                      01198     printchar   "T"
054E   3054               M             movlw   "T"
054F   2???               M             call    writetoPC
                      01199     printchar   "e"
0550   3065               M             movlw   "e"
0551   2???               M             call    writetoPC
                      01200     printchar   "s"
0552   3073               M             movlw   "s"
0553   2???               M             call    writetoPC
                      01201     printchar   "t"
0554   3074               M             movlw   "t"
0555   2???               M             call    writetoPC
                      01202     printchar   " "
0556   3020               M             movlw   " "
0557   2???               M             call    writetoPC
                      01203     printchar   "a"
0558   3061               M             movlw   "a"
0559   2???               M             call    writetoPC
                      01204     printchar   "t"
055A   3074               M             movlw   "t"
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

055B   2???               M             call    writetoPC
                      01205     printchar   ":"
055C   303A               M             movlw   ":"
055D   2???               M             call    writetoPC
                      01206     printchar   " "
055E   3020               M             movlw   " "
055F   2???               M             call    writetoPC
                      01207     printchar   "2"
0560   3032               M             movlw   "2"
0561   2???               M             call    writetoPC
                      01208     printchar   "0"
0562   3030               M             movlw   "0"
0563   2???               M             call    writetoPC
                      01209     printASC   start_year10
0564   1283 1303          M             banksel start_year10
0566   0829               M             movf    start_year10,W
0567   2???               M             call    writetoPC
                      01210     printASC   start_year1
0568   1283 1303          M             banksel start_year1
056A   082A               M             movf    start_year1,W
056B   2???               M             call    writetoPC
                      01211     printchar   "/"
056C   302F               M             movlw   "/"
056D   2???               M             call    writetoPC
                      01212     printASC   start_month10
056E   1283 1303          M             banksel start_month10
0570   082B               M             movf    start_month10,W
0571   2???               M             call    writetoPC
                      01213     printASC   start_month1
0572   1283 1303          M             banksel start_month1
0574   082C               M             movf    start_month1,W
0575   2???               M             call    writetoPC
                      01214     printchar   "/"
0576   302F               M             movlw   "/"
0577   2???               M             call    writetoPC
                      01215     printASC   start_date10
0578   1283 1303          M             banksel start_date10
057A   082D               M             movf    start_date10,W
057B   2???               M             call    writetoPC
                      01216     printASC   start_date1
057C   1283 1303          M             banksel start_date1
057E   082E               M             movf    start_date1,W
057F   2???               M             call    writetoPC
                      01217     printchar   " "
0580   3020               M             movlw   " "
0581   2???               M             call    writetoPC
                      01218     printASC   start_hour10
0582   1283 1303          M             banksel start_hour10
0584   082F               M             movf    start_hour10,W
0585   2???               M             call    writetoPC
                      01219     printASC   start_hour1
0586   1283 1303          M             banksel start_hour1
0588   0830               M             movf    start_hour1,W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0589   2???               M             call    writetoPC
                      01220     printchar   ":"
058A   303A               M             movlw   ":"
058B   2???               M             call    writetoPC
                      01221     printASC   start_min10
058C   1283 1303          M             banksel start_min10
058E   0831               M             movf    start_min10,W
058F   2???               M             call    writetoPC
                      01222     printASC   start_min1
0590   1283 1303          M             banksel start_min1
0592   0832               M             movf    start_min1,W
0593   2???               M             call    writetoPC
                      01223     newline
                          M             printchar   0xA ;changes line
0594   300A               M             movlw   0xA
0595   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
0596   300D               M             movlw   0xD
0597   2???               M             call    writetoPC
                      01224     printchar   "T"
0598   3054               M             movlw   "T"
0599   2???               M             call    writetoPC
                      01225     printchar   "i"
059A   3069               M             movlw   "i"
059B   2???               M             call    writetoPC
                      01226     printchar   "m"
059C   306D               M             movlw   "m"
059D   2???               M             call    writetoPC
                      01227     printchar   "e"
059E   3065               M             movlw   "e"
059F   2???               M             call    writetoPC
                      01228     printchar   ":"
05A0   303A               M             movlw   ":"
05A1   2???               M             call    writetoPC
                      01229     printchar   " "
05A2   3020               M             movlw   " "
05A3   2???               M             call    writetoPC
                      01230     printchar   " "
05A4   3020               M             movlw   " "
05A5   2???               M             call    writetoPC
                      01231     printchar   " "
05A6   3020               M             movlw   " "
05A7   2???               M             call    writetoPC
                      01232     printchar   " "
05A8   3020               M             movlw   " "
05A9   2???               M             call    writetoPC
05AA   1283 1303      01233     banksel huns
05AC   08C0           01234     movf    huns, F
05AD   1903           01235     btfsc   STATUS,Z        ;if huns is zero don't display it
05AE   2???           01236     goto    nohuns
                      01237     printBCD   huns
05AF   1283 1303          M             banksel huns
05B1   0840               M             movf    huns, W
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B2   3E30               M             addlw   0x30
05B3   2???               M             call    writetoPC
05B4                  01238 nohuns
05B4   1283 1303      01239     banksel tens
05B6   08C1           01240     movf    tens, F
05B7   1903           01241     btfsc   STATUS,Z        ;if tens is zero don't display it
05B8   2???           01242     goto    notens
                      01243     printBCD   tens
05B9   1283 1303          M             banksel tens
05BB   0841               M             movf    tens, W
05BC   3E30               M             addlw   0x30
05BD   2???               M             call    writetoPC
05BE                  01244 notens
                      01245     printBCD   ones
05BE   1283 1303          M             banksel ones
05C0   0842               M             movf    ones, W
05C1   3E30               M             addlw   0x30
05C2   2???               M             call    writetoPC
                      01246     printchar   " "
05C3   3020               M             movlw   " "
05C4   2???               M             call    writetoPC
                      01247     printchar   "s"
05C5   3073               M             movlw   "s"
05C6   2???               M             call    writetoPC
                      01248     printchar   "e"
05C7   3065               M             movlw   "e"
05C8   2???               M             call    writetoPC
                      01249     printchar   "c"
05C9   3063               M             movlw   "c"
05CA   2???               M             call    writetoPC
                      01250     newline
                          M             printchar   0xA ;changes line
05CB   300A               M             movlw   0xA
05CC   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05CD   300D               M             movlw   0xD
05CE   2???               M             call    writetoPC
                      01251     printchar   "C"
05CF   3043               M             movlw   "C"
05D0   2???               M             call    writetoPC
                      01252     printchar   "a"
05D1   3061               M             movlw   "a"
05D2   2???               M             call    writetoPC
                      01253     printchar   "n"
05D3   306E               M             movlw   "n"
05D4   2???               M             call    writetoPC
                      01254     printchar   "d"
05D5   3064               M             movlw   "d"
05D6   2???               M             call    writetoPC
                      01255     printchar   "l"
05D7   306C               M             movlw   "l"
05D8   2???               M             call    writetoPC
                      01256     printchar   "e"
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05D9   3065               M             movlw   "e"
05DA   2???               M             call    writetoPC
                      01257     printchar   "s"
05DB   3073               M             movlw   "s"
05DC   2???               M             call    writetoPC
                      01258     printchar   ":"
05DD   303A               M             movlw   ":"
05DE   2???               M             call    writetoPC
                      01259     printchar   " "
05DF   3020               M             movlw   " "
05E0   2???               M             call    writetoPC
                      01260     printchar   " "
05E1   3020               M             movlw   " "
05E2   2???               M             call    writetoPC
                      01261     printchar   " "
05E3   3020               M             movlw   " "
05E4   2???               M             call    writetoPC
                      01262     printchar   " "
05E5   3020               M             movlw   " "
05E6   2???               M             call    writetoPC
                      01263     printchar   " "
05E7   3020               M             movlw   " "
05E8   2???               M             call    writetoPC
                      01264     printchar   " "
05E9   3020               M             movlw   " "
05EA   2???               M             call    writetoPC
                      01265     printBCD    num_tot
05EB   1283 1303          M             banksel num_tot
05ED   0834               M             movf    num_tot, W
05EE   3E30               M             addlw   0x30
05EF   2???               M             call    writetoPC
                      01266     newline
                          M             printchar   0xA ;changes line
05F0   300A               M             movlw   0xA
05F1   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05F2   300D               M             movlw   0xD
05F3   2???               M             call    writetoPC
                      01267     printchar   "L"
05F4   304C               M             movlw   "L"
05F5   2???               M             call    writetoPC
                      01268     printchar   "E"
05F6   3045               M             movlw   "E"
05F7   2???               M             call    writetoPC
                      01269     printchar   "D"
05F8   3044               M             movlw   "D"
05F9   2???               M             call    writetoPC
                      01270     printchar   " "
05FA   3020               M             movlw   " "
05FB   2???               M             call    writetoPC
                      01271     printchar   "f"
05FC   3066               M             movlw   "f"
05FD   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01272     printchar   "a"
05FE   3061               M             movlw   "a"
05FF   2???               M             call    writetoPC
                      01273     printchar   "i"
0600   3069               M             movlw   "i"
0601   2???               M             call    writetoPC
                      01274     printchar   "l"
0602   306C               M             movlw   "l"
0603   2???               M             call    writetoPC
                      01275     printchar   ":"
0604   303A               M             movlw   ":"
0605   2???               M             call    writetoPC
                      01276     printchar   " "
0606   3020               M             movlw   " "
0607   2???               M             call    writetoPC
                      01277     printchar   " "
0608   3020               M             movlw   " "
0609   2???               M             call    writetoPC
                      01278     printchar   " "
060A   3020               M             movlw   " "
060B   2???               M             call    writetoPC
                      01279     printchar   " "
060C   3020               M             movlw   " "
060D   2???               M             call    writetoPC
                      01280     printchar   " "
060E   3020               M             movlw   " "
060F   2???               M             call    writetoPC
                      01281     printBCD    num_LF
0610   1283 1303          M             banksel num_LF
0612   0835               M             movf    num_LF, W
0613   3E30               M             addlw   0x30
0614   2???               M             call    writetoPC
                      01282     newline
                          M             printchar   0xA ;changes line
0615   300A               M             movlw   0xA
0616   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
0617   300D               M             movlw   0xD
0618   2???               M             call    writetoPC
                      01283     printchar   "F"
0619   3046               M             movlw   "F"
061A   2???               M             call    writetoPC
                      01284     printchar   "l"
061B   306C               M             movlw   "l"
061C   2???               M             call    writetoPC
                      01285     printchar   "i"
061D   3069               M             movlw   "i"
061E   2???               M             call    writetoPC
                      01286     printchar   "c"
061F   3063               M             movlw   "c"
0620   2???               M             call    writetoPC
                      01287     printchar   "k"
0621   306B               M             movlw   "k"
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0622   2???               M             call    writetoPC
                      01288     printchar   "e"
0623   3065               M             movlw   "e"
0624   2???               M             call    writetoPC
                      01289     printchar   "r"
0625   3072               M             movlw   "r"
0626   2???               M             call    writetoPC
                      01290     printchar   " "
0627   3020               M             movlw   " "
0628   2???               M             call    writetoPC
                      01291     printchar   "f"
0629   3066               M             movlw   "f"
062A   2???               M             call    writetoPC
                      01292     printchar   "a"
062B   3061               M             movlw   "a"
062C   2???               M             call    writetoPC
                      01293     printchar   "i"
062D   3069               M             movlw   "i"
062E   2???               M             call    writetoPC
                      01294     printchar   "l"
062F   306C               M             movlw   "l"
0630   2???               M             call    writetoPC
                      01295     printchar   ":"
0631   303A               M             movlw   ":"
0632   2???               M             call    writetoPC
                      01296     printchar   " "
0633   3020               M             movlw   " "
0634   2???               M             call    writetoPC
                      01297     printBCD    num_FF
0635   1283 1303          M             banksel num_FF
0637   0836               M             movf    num_FF, W
0638   3E30               M             addlw   0x30
0639   2???               M             call    writetoPC
                      01298     newline
                          M             printchar   0xA ;changes line
063A   300A               M             movlw   0xA
063B   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
063C   300D               M             movlw   0xD
063D   2???               M             call    writetoPC
                      01299     newline
                          M             printchar   0xA ;changes line
063E   300A               M             movlw   0xA
063F   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
0640   300D               M             movlw   0xD
0641   2???               M             call    writetoPC
0642   1283           01300     bcf STATUS,RP0
0643   1303           01301     bcf STATUS,RP1     ; back to bank 0
0644   0008           01302     return
                      01303 
                      01304 
                      01305 ;***************************************
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01306 ; GENERAL PURPOSE SUBROUTINES
                      01307 ;***************************************
                      01308 
                      01309 ; DISPLAY BIG NUMBER SUBROUTINE
                      01310 ; Converts 8-bit binary number op_time to 3 BCDs representing huns, tens, ones
                      01311 ; Uses "shift and add 3" algorithm, modified from:
                      01312 ; http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01313 
0645                  01314 big_number
                      01315     movff   op_time, op_time_save         ;save the original op_time
0645   0833               M         movf    op_time, W
0646   00BF               M         movwf   op_time_save
                      01316     movlf   8, bignumcount                ;will shift 8 times
0647   3008               M         movlw   8
0648   00C3               M         movwf   bignumcount
0649   01C0           01317     clrf    huns
064A   01C1           01318     clrf    tens
064B   01C2           01319     clrf    ones
                      01320 
064C                  01321 BCDadd3                             ; if any digit > 5, add3
064C   3005           01322     movlw   0x5
064D   0240           01323     subwf   huns, W
064E   1803           01324     btfsc   STATUS, C
064F   2???           01325     call    add3huns
                      01326 
0650   3005           01327     movlw   0x5
0651   0241           01328     subwf   tens, W
0652   1803           01329     btfsc   STATUS, C
0653   2???           01330     call    add3tens
                      01331 
0654   3005           01332     movlw   0x5
0655   0242           01333     subwf   ones, W
0656   1803           01334     btfsc   STATUS, C
0657   2???           01335     call    add3ones
                      01336 
0658   03C3           01337     decf    bignumcount, 1
0659   1003           01338     bcf     STATUS, C
065A   0DB3           01339     rlf     op_time, 1              ; shift
065B   0DC2           01340     rlf     ones, 1
065C   1A42           01341     btfsc   ones,4 ;
065D   2???           01342     call    carryones               ; carry if too large
065E   0DC1           01343     rlf     tens, 1
                      01344 
065F   1A41           01345     btfsc   tens,4 ;
0660   2???           01346     call    carrytens
0661   0DC0           01347     rlf     huns,1
0662   1003           01348     bcf     STATUS, C
                      01349 
0663   0843           01350     movf    bignumcount, W
0664   1D03           01351     btfss   STATUS, Z
0665   2???           01352     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01353 
                      01354     movff    op_time_save, op_time     ;restore the original op_time
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0666   083F               M         movf    op_time_save, W
0667   00B3               M         movwf   op_time
0668   0008           01355     return
                      01356 
0669                  01357 add3huns
0669   3003           01358     movlw 0x3
066A   07C0           01359     addwf huns,F
066B   0008           01360     return
066C                  01361 add3tens
066C   3003           01362     movlw 0x3
066D   07C1           01363     addwf tens,F
066E   0008           01364     return
066F                  01365 add3ones
066F   3003           01366     movlw 0x3
0670   07C2           01367     addwf ones,F
0671   0008           01368     return
0672                  01369 carryones
0672   1242           01370     bcf ones, 4
0673   1403           01371     bsf STATUS, C
0674   0008           01372     return
0675                  01373 carrytens
0675   1241           01374     bcf tens, 4
0676   1403           01375     bsf STATUS, C
0677   0008           01376     return
                      01377 
                      01378 
                      01379 ;***************************************
                      01380 ; DELAY SUBROUTINES
                      01381 ;***************************************
                      01382 
                      01383 ; DELAY 0.5S SUBROUTINE 
                      01384 ; Delays exactly 0.5sec, from generator at:
                      01385 ; http://www.piclist.com/techref/piclist/codegen/delay.htm
0678                  01386 HalfS
                      01387       movlf 0x8A, delH
0678   308A               M         movlw   0x8A
0679   00BC               M         movwf   delH
                      01388       movlf 0xBA, delM
067A   30BA               M         movlw   0xBA
067B   00BD               M         movwf   delM
                      01389       movlf 0x03, delL
067C   3003               M         movlw   0x03
067D   00BE               M         movwf   delL
067E                  01390 HalfS_0
067E   0BBC           01391       decfsz    delH, F
067F   2???           01392           goto  $+2
0680   0BBD           01393           decfsz        delM, F
0681   2???           01394           goto  $+2
0682   0BBE           01395           decfsz        delL, F
0683   2???           01396           goto  HalfS_0
                      01397 
0684   2???           01398           goto  $+1
0685   0000           01399           nop
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0686   0008           01400           return
                      01401 
                      01402 ; DELAY 5ms SUBROUTINE
                      01403 ; Useful for LCD because PIC is way faster than it can handle
                      01404 ; Delays exactly 5ms, from generator at:
                      01405 ; http://www.piclist.com/techref/piclist/codegen/delay.htm
0687                  01406 delay5ms
                      01407         movlf   0xC3, delH
0687   30C3               M         movlw   0xC3
0688   00BC               M         movwf   delH
                      01408         movlf   0x0A, delL
0689   300A               M         movlw   0x0A
068A   00BE               M         movwf   delL
068B                  01409 Delay_0
068B   0BBC           01410         decfsz  delH, f
068C   2???           01411         goto    $+2
068D   0BBE           01412         decfsz  delL, f
068E   2???           01413         goto    Delay_0
068F   0008           01414     return
                      01415 
                      01416 ; MOTOR DELAY SUBROUTINE.
                      01417 ; Delays ~10ms for the motor. (~1sec per total rotation)
0690                  01418 motor_del
                      01419       movlf 0xF3, delH
0690   30F3               M         movlw   0xF3
0691   00BC               M         movwf   delH
                      01420       movlf 0x2F, delL          
0692   302F               M         movlw   0x2F
0693   00BE               M         movwf   delL
0694                  01421 motor_del_0
0694   0BBC           01422       decfsz    delH, F
0695   2???           01423           goto      $+2
0696   0BBE           01424           decfsz        delL, F
0697   2???           01425           goto      motor_del_0
0698   0008           01426           return
                      01427 
                      01428 ;***************************************
                      01429 ; LCD SUBROUTINES (from sample code)
                      01430 ;***************************************
                      01431 
                      01432 ; Initialize the LCD
0699                  01433 InitLCD
0699   1283           01434         bcf STATUS,RP0          ;bank0
069A   1588           01435         bsf E                   ;E default high
                      01436 
                      01437         ;Wait for LCD POR to finish (~15ms)
069B   2???           01438         call delay5ms
069C   2???           01439         call delay5ms
069D   2???           01440         call delay5ms
                      01441 
                      01442         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01443         ; -> Send b'0011' 3 times
069E   3033           01444         movlw   b'00110011'
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

069F   2???           01445         call    WR_INS
06A0   2???           01446         call delay5ms
06A1   2???           01447         call delay5ms
06A2   3032           01448         movlw   b'00110010'
06A3   2???           01449         call    WR_INS
06A4   2???           01450         call delay5ms
06A5   2???           01451         call delay5ms
                      01452 
                      01453         ; 4 bits, 2 lines, 5x7 dots
06A6   3028           01454         movlw   b'00101000'
06A7   2???           01455         call    WR_INS
06A8   2???           01456         call delay5ms
06A9   2???           01457         call delay5ms
                      01458 
                      01459         ; display on/off
06AA   300C           01460         movlw   b'00001100'
06AB   2???           01461         call    WR_INS
06AC   2???           01462         call delay5ms
06AD   2???           01463         call delay5ms
                      01464 
                      01465         ; Entry mode
06AE   3006           01466         movlw   b'00000110'
06AF   2???           01467         call    WR_INS
06B0   2???           01468         call delay5ms
06B1   2???           01469         call delay5ms
                      01470 
                      01471         ; Clear ram
06B2   3001           01472         movlw   b'00000001'
06B3   2???           01473         call    WR_INS
06B4   2???           01474         call delay5ms
06B5   2???           01475         call delay5ms
06B6   0008           01476         return
                      01477 
                      01478 ; Clear the display
06B7                  01479 Clear_Display
06B7   3001           01480                 movlw   B'00000001'
06B8   2???           01481                 call    WR_INS
06B9   0008           01482                 return
                      01483 
                      01484 ;Switch lines
06BA                  01485 Switch_Lines
06BA   30C0           01486                 movlw   B'11000000'
06BB   2???           01487                 call    WR_INS
06BC   0008           01488                 return
                      01489 
                      01490 ; Write an instruction to the LCD (see page 7-104)
                      01491 ; The instruction must be in W
06BD                  01492 WR_INS
06BD   1108           01493         bcf             RS                              ;clear RS
06BE   00BA           01494         movwf   com                             ;W --> com
06BF   39F0           01495         andlw   0xF0                    ;mask 4 bits MSB w = X0
06C0   0088           01496         movwf   PORTD                   ;Send 4 bits MSB
06C1   1588           01497         bsf             E                               ;
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06C2   2???           01498         call    delay5ms        ;__    __
06C3   1188           01499         bcf             E                               ;  |__|
06C4   0E3A           01500         swapf   com,w
06C5   39F0           01501         andlw   0xF0                    ;1111 0010
06C6   0088           01502         movwf   PORTD                   ;send 4 bits LSB
06C7   1588           01503         bsf             E                               ;
06C8   2???           01504         call    delay5ms        ;__    __
06C9   1188           01505         bcf             E                               ;  |__|
06CA   2???           01506         call    delay5ms
06CB   0008           01507         return
                      01508 
                      01509 ; Write data at current cursor location
                      01510 ; Character code (see page 7-104) must be in W
06CC                  01511 WR_DATA
06CC   1508           01512         bsf             RS
06CD   00BB           01513         movwf   dat
06CE   083B           01514         movf    dat,w
06CF   39F0           01515         andlw   0xF0
06D0   3E04           01516         addlw   4
06D1   0088           01517         movwf   PORTD
06D2   1588           01518         bsf             E                               ;
06D3   2???           01519         call    delay5ms        ;__    __
06D4   1188           01520         bcf             E                               ;  |__|
06D5   0E3B           01521         swapf   dat,w
06D6   39F0           01522         andlw   0xF0
06D7   3E04           01523         addlw   4
06D8   0088           01524         movwf   PORTD
06D9   1588           01525         bsf             E                               ;
06DA   2???           01526         call    delay5ms        ;__    __
06DB   1188           01527         bcf             E                               ;  |__|
06DC   0008           01528         return
                      01529 
                      01530 
                      01531 ;***************************************
                      01532 ; PC INTERFACE SUBROUTINES (modified from sample code)
                      01533 ;***************************************
06DD                  01534 InitUSART
06DD   1683           01535         bsf       STATUS,RP0     ; select bank 1
06DE   300F           01536         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06DF   0099           01537         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06E0   0198           01538         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01539 
06E1   1283           01540         bcf       STATUS,RP0     ; select bank 0
06E2   1798           01541         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
06E3   1618           01542         bsf       RCSTA,CREN     ; continuous receive
                      01543 
06E4   1683           01544         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06E5   1698           01545         bsf       TXSTA,TXEN     ; Transmit enable
06E6   0008           01546         return
                      01547 
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01548 
06E7                  01549 writetoPC
                      01550 ; Writes the data in W to the PC
                      01551 ; end up in bank1!
06E7   1283           01552         bcf       STATUS,RP0     ; Go to bank 0
06E8   0099           01553         movwf     TXREG          ; Send contents of W to RS232
06E9   1683           01554         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06EA   1C98           01555         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
06EB   2???           01556         goto      $-1
06EC   0008           01557         return
                      01558 
                      01559 
                      01560 ;***************************************
                      01561 ; ISR
                      01562 ; Currently only care about TMR0
                      01563 ; TMR0 overflows at 256*128; each time, decrement count76
                      01564 ; count76 thus hits 0 every 256*128*76 cycles = 1sec with 10MHz clock
                      01565 ; When this hapens, op_time increments
                      01566 ; Also check photodata every time for 2 sec = total of 152 reads
                      01567 ;***************************************
06ED                  01568 isr
06ED   00F9           01569     movwf   w_isr           ;save W and status
06EE   0E03           01570     swapf   STATUS, W
06EF   0183           01571     clrf    STATUS
06F0   00FA           01572     movwf   status_isr
                      01573 
06F1   0BC4           01574     decfsz  count76, F     ;if count76 gets to 76 it's been one second
06F2   2???           01575     goto    end_isr
                      01576     movlf   D'76', count76  ;so reset count76
06F3   304C               M         movlw   D'76'
06F4   00C4               M         movwf   count76
06F5   0AB3           01577     incf    op_time, F         ; and increment op_time
                      01578 
06F6                  01579 end_isr
                      01580 
06F6   1889           01581     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
06F7   0AC7           01582     incf    photocount, F       ;if it is 1, light is on so photocount++
                      01583 
06F8   0E7A           01584     swapf   status_isr, W   ;restore W and status
06F9   0083           01585     movwf   STATUS
06FA   0EF9           01586     swapf   w_isr, F
06FB   0E79           01587     swapf   w_isr, W
06FC   110B           01588     bcf     INTCON, T0IF    ;clear the interrupt flag
06FD   0009           01589     retfie
                      01590 
                      01591 
3F72                  01592     END
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           0000064C
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     000006B7
D                                 00000005
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           0000068B
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             00000678
HalfS_0                           0000067E
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           00000699
InitUSART                         000006DD
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000391
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      000006BA
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           000006CC
WR_INS                            000006BD
Z                                 00000002
_.org_1_0176                      00000176
_.org_1_01E6                      000001E6
_.org_1_020D                      0000020D
_.org_1_022D                      0000022D
_.org_1_0232                      00000232
_.org_1_024B                      0000024B
_.org_1_02B1                      000002B1
_.org_1_0321                      00000321
_.org_1_0342                      00000342
_.org_1_067F                      0000067F
_.org_1_0681                      00000681
_.org_1_0684                      00000684
_.org_1_068C                      0000068C
_.org_1_0695                      00000695
_.org_1_06EB                      000006EB
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001CA
add3huns                          00000669
add3ones                          0000066F
add3tens                          0000066C
badkey                            000002B0
badkeyagain                       00000341
big_number                        00000645
bignumcount                       00000043
cal1                              00000350
cal2                              0000035F
cal3                              0000036E
calibrate                         00000344
candle_index                      00000046
carryones                         00000672
carrytens                         00000675
check_1                           000003D6
check_2                           000003DF
check_3                           000003E9
check_4                           000003F3
check_5                           000003FD
check_6                           00000407
check_7                           00000411
check_8                           0000041B
check_9                           00000425
check_FF                          00000506
check_LED                         0000047C
check_LF                          000004EB
check_defective                   00000435
check_done                        0000029F
check_export                      00000441
check_flick                       0000048B
check_for_fail                    00000509
check_immapeace                   00000330
check_log1                        0000024F
check_log2                        00000257
check_log3                        00000260
check_log4                        00000269
check_log5                        00000272
check_log6                        0000027B
check_log7                        00000284
check_log8                        0000028D
check_log9                        00000296
check_next                        0000050F
check_none                        0000045F
check_nothx                       0000032B
check_pass                        0000046D
check_standby                     00000447
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

check_start                       00000458
check_summary                     0000042F
check_threshold1                  000001BB
check_threshold2                  000001C3
check_time                        0000043B
check_wanna                       00000325
com                               0000003A
count76                           00000044
dat                               0000003B
decrement                         000003AF
default_key                       0000045D
default_state                     0000049A
defective                         000004C9
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          00000687
detect_candle                     00000199
display_log                       000002B3
display_state                     0000045E
end_calibrate                     00000378
end_check_fail                    00000521
end_isr                           000006F6
end_operation                     000001CE
export                            0000054A
finish_motor                      000003B5
first_two                         000003B7
halfway                           000003A1
huns                              00000040
i2c_common_setup                  00000000
information                       000003D5
init                              000000E7
isr                               000006ED
keytemp                           00000037
last_two                          000003C6
logs                              00000234
more_than_six                     00000520
morethansix                       00000045
motor_count                       00000049
motor_del                         00000690
motor_del_0                       00000694
movff                             
movlf                             
newline                           
no_huns                           00000536
no_log                            000002CB
no_tens                           0000053C
nohuns                            000005B4
notens                            000005BE
now_FF                            000004ED
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000047
photoval                          00000048
poll                              0000022C
polling                           0000024A
printASC                          
printBCD                          
printchar                         
read_EEPROM                       000002B6
read_rtc                          00000000
restart_motor                     000003B2
rotate                            00000190
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001DD
shiftlogs_0                       000001E1
spacebar                          
start                             00000178
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000393
start_year1                       0000002A
start_year10                      00000029
startfrom3                        0000004A
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           0000049B
tens                              00000041
test_candle                       000001B3
threshold1                        D'2'
threshold2                        D'151'
time                              00000522
w_isr                             00000079
waiting                           0000010C
MPASM 5.55                          MAIN.ASM   4-2-2014  14:46:47         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

wanna_export                      00000320
writeASC                          
writeBCD                          
write_log1                        00000203
write_log1_0                      0000020A
write_rtc                         00000000
writechar                         
writetoPC                         000006E7
yes_log                           000002D7

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

