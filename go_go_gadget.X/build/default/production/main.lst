MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'7'
                      00014     #define threshold2  D'69'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017    ; note: check analog vs digital!
                      00018 
                      00019 
                      00020 ;***************************************
                      00021 ; VARIABLES
                      00022 ;***************************************
                      00023 
                      00024 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00025 
                      00026     cblock      0x20            ;bank0 variables
                      00027     ; Important information (will be displayed)
  00000020            00028         state1     ;where   0 = none      1 = pass
  00000021            00029         state2     ;        2 = led fail  3 = flicker fail
  00000022            00030         state3
  00000023            00031         state4
  00000024            00032         state5
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            00033         state6
  00000026            00034         state7
  00000027            00035         state8
  00000028            00036         state9
  00000029            00037         start_year10    ;starting time (for log)
  0000002A            00038         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00039         start_month10
  0000002C            00040         start_month1
  0000002D            00041         start_date10
  0000002E            00042         start_date1
  0000002F            00043         start_hour10
  00000030            00044         start_hour1
  00000031            00045         start_min10
  00000032            00046         start_min1
  00000033            00047         op_time     ;BCD in seconds
  00000034            00048         num_tot     ;BCD
  00000035            00049         num_LF      ;BCD
  00000036            00050         num_FF      ;BCD
                      00051 ; For general program / interface: temps, counters, etc.
  00000037            00052         keytemp         ; for data display mode
  00000038            00053         statetemp
  00000039            00054                 Table_Counter   ; for LCD stuff
  0000003A            00055                 com
  0000003B            00056                 dat
  0000003C            00057         delH          ;for delay routines
  0000003D            00058         delM
  0000003E            00059         delL
  0000003F            00060         op_time_save    ;for operation time
  00000040            00061         huns
  00000041            00062         tens
  00000042            00063         ones
  00000043            00064         bignumcount
  00000044            00065         count38         ;for isr
                      00066 ; For machine program: temps, counters, etc.
  00000045            00067         candle_index
  00000046            00068         photocount      ;for testing candle
  00000047            00069         photoval
  00000048            00070         motor_count     ;for rotate
                      00071         ;present
                      00072 
                      00073     endc
                      00074 
                      00075     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00076         w_isr
  0000007A            00077         status_isr
                      00078         endc
                      00079 
                      00080 
                      00081 ;***************************************
                      00082 ; MACROS
                      00083 ;***************************************
                      00084 
                      00085 ; Display a msg on LCD. Bank0 please!
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 Display macro   Message
                      00087                 local   loop_disp
                      00088                 local   end_disp
                      00089                 clrf    Table_Counter
                      00090                 clrw
                      00091 loop_disp
                      00092         movf    Table_Counter,W
                      00093                 call    Message
                      00094                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00095                 btfsc   STATUS,Z
                      00096                 goto    end_disp
                      00097                 call    WR_DATA
                      00098                 incf    Table_Counter,F
                      00099                 goto    loop_disp
                      00100 end_disp
                      00101                 endm
                      00102 
                      00103 
                      00104 ;Shortcuts for moving literals / registers
                      00105 movlf   macro   l, f
                      00106         movlw   l
                      00107         movwf   f
                      00108         endm
                      00109 
                      00110 movff   macro   source, dest
                      00111         movf    source, W
                      00112         movwf   dest
                      00113         endm
                      00114 
                      00115 ; Write to LCD. In bank0 please!
                      00116 writeBCD    macro   reg         ; from a register containing BCD
                      00117             movf    reg, W
                      00118             addlw   B'00110000'
                      00119             call WR_DATA
                      00120             endm
                      00121 
                      00122 writechar   macro   asc             ;ASCII code literal (or in "")
                      00123             movlw   asc
                      00124             call    WR_DATA
                      00125             endm
                      00126 
                      00127 writeASC        macro   reg         ;from a register containing ASCII
                      00128             movf    reg, W
                      00129             call WR_DATA
                      00130             endm
                      00131 
                      00132 spacebar    macro
                      00133             movlw   B'00010100'
                      00134             call    WR_INS
                      00135             endm
                      00136 
                      00137 ;Print to PC (hyperterminal). Any bank fine
                      00138 printchar   macro   char            ;direct ASCII code literal (or in "")
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             movlw   char
                      00140             call    writetoPC
                      00141             endm
                      00142 
                      00143 printASC    macro   reg            ;ASCII code inside a register
                      00144             banksel reg
                      00145             movf    reg,W
                      00146             call    writetoPC
                      00147             endm
                      00148 
                      00149 printBCD    macro   BCD            ;BCD inside a register
                      00150             banksel BCD
                      00151             movf    BCD, W
                      00152             addlw   0x30
                      00153             call    writetoPC
                      00154             endm
                      00155 
                      00156 newline     macro
                      00157             printchar   0xA ;changes line
                      00158             printchar   0xD ;goes back to left
                      00159             endm
                      00160 ;***************************************
                      00161 ; VECTORS
                      00162 ;***************************************
                      00163 
                      00164     ORG       0x000
0000   2???           00165          goto      init
                      00166     ORG       0x004
0004   2???           00167         goto    isr
                      00168 
                      00169 
                      00170 ;***************************************
                      00171 ; TABLES (MESSAGES)
                      00172 ;***************************************
0005                  00173 Standby_Msg
0005   0782           00174                 addwf   PCL,F
0006   3453 3454 3441 00175                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00176 Start_Msg
000E   0782           00177         addwf   PCL,F
000F   3449 346E 3473 00178         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00179 End_Msg
0020   0782           00180         addwf   PCL,F
0021   3443 346F 346D 00181         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00182 Time_Msg
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A   0782           00183                 addwf   PCL,F
002B   344F 3470 3465 00184                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00185 Seconds
003B   0782           00186         addwf   PCL,F
003C   3420 3473 3465 00187         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00188 Not_present
0045   0782           00189         addwf   PCL,F
0046   343A 3420 344E 00190         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00191 Pass
0054   0782           00192                 addwf   PCL,F
0055   343A 3420 3450 00193                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00194 LED_fail
005C   0782           00195                 addwf   PCL,F
005D   343A 3420 344C 00196                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00197 Flick_fail
0068   0782           00198                 addwf   PCL,F
0069   343A 3420 3446 00199                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00200 Total_Msg
0078   0782           00201         addwf   PCL,F
0079   3454 346F 3474 00202         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00203 LF
0089   0782           00204         addwf   PCL,F
008A   344C 3446 343A 00205         dt      "LF: ",0
       3420 3400 
008F                  00206 FF
008F   0782           00207         addwf   PCL,F
0090   3446 3446 343A 00208         dt      "FF: ",0
       3420 3400 
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095                  00209 None
0095   0782           00210         addwf   PCL,F
0096   343C 346E 346F 00211         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00212 Logs_Msg1
009D   0782           00213         addwf   PCL,F
009E   3431 342D 3439 00214         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00215 Logs_Msg2
00AE   0782           00216         addwf   PCL,F
00AF   3453 3454 3441 00217         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00218 Logs_Msg3
00BF   0782           00219         addwf   PCL,F
00C0   3445 3478 3470 00220         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00221 Logs_Msg4
00C8   0782           00222         addwf   PCL,F
00C9   344C 344F 3447 00223         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00224 Op_at
00D8   0782           00225         addwf   PCL,F
00D9   344F 3470 3465 00226         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00227 
                      00228 ;***************************************
                      00229 ; MAIN PROGRAM
                      00230 ;***************************************
                      00231 
00E7                  00232 init
                      00233         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready once GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00234 
00E9   1683 1303      00235         banksel   TRISA                 ; bank 1
                      00236         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EB   30C7               M         movlw   b'11000111'
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00237         clrf      TRISA                 ; PortA used for motor
                      00238         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00239                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00240         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00241         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                      00242         movlf     b'011', TRISE         ; PortE is ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00243         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00244 
00F7   1283 1303      00245         banksel   PORTA                 ; bank 0
00F9   0185           00246         clrf      PORTA
00FA   0186           00247         clrf      PORTB
00FB   0187           00248         clrf      PORTC
00FC   0188           00249         clrf      PORTD
00FD   0189           00250         clrf      PORTE
                      00251 
00FE   2???           00252         call      i2c_common_setup      ;Set up I2C for communication. End in bank1
00FF   2???           00253         call      InitLCD               ;Initialize the LCD. End in bank0
0100   2???           00254         call      InitUSART             ;Set up USART for RS232. End in bank1
                      00255 
0101   1283 1303      00256         banksel     op_time         ; back to bank0
                      00257 
                      00258         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0103   01B9               M                 clrf    Table_Counter
0104   0103               M                 clrw
0105                      M loop_disp
0105   0839               M         movf    Table_Counter,W
0106   2???               M                 call    Standby_Msg
0107   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0108   1903               M                 btfsc   STATUS,Z
0109   2???               M                 goto    end_disp
010A   2???               M                 call    WR_DATA
010B   0AB9               M                 incf    Table_Counter,F
010C   2???               M                 goto    loop_disp
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010D                      M end_disp
010D   2???           00259         call    Switch_Lines
                      00260 
                      00261  ;--------------------------------------------------
                      00262  ;      STANDBY MODE
                      00263 
010E                  00264 waiting
                      00265         ; Display date and time.
                      00266         ; Also save starting time for log (will stop updating once we start)
                      00267         writechar "2"       ;First line shows 20**/**/**
010E   3032               M             movlw   "2"
010F   2???               M             call    WR_DATA
                      00268         writechar "0"
0110   3030               M             movlw   "0"
0111   2???               M             call    WR_DATA
                      00269         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0112   3006               M         movlw   0x06
0113   1283 1303          M         banksel 0x73
0115   00F3               M         movwf   0x73
0116   2???               M         call    read_rtc
0117   1283 1303          M         banksel 0x75
0119   0875               M         movf    0x75,w
011A   2???               M         call    rtc_convert   
011B   0877           00270                 movf    0x77,W
011C   00A9           00271         movwf    start_year10    ;Save starting year dig10
011D   2???           00272                 call    WR_DATA
011E   0878           00273                 movf    0x78,W
011F   00AA           00274         movwf    start_year1    ;Save starting year dig1
0120   2???           00275                 call    WR_DATA
                      00276                 writechar "/"
0121   302F               M             movlw   "/"
0122   2???               M             call    WR_DATA
                      00277                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0123   3005               M         movlw   0x05
0124   1283 1303          M         banksel 0x73
0126   00F3               M         movwf   0x73
0127   2???               M         call    read_rtc
0128   1283 1303          M         banksel 0x75
012A   0875               M         movf    0x75,w
012B   2???               M         call    rtc_convert   
012C   0877           00278                 movf    0x77,W
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012D   00AB           00279         movwf    start_month10    ;Save starting month dig10
012E   2???           00280                 call    WR_DATA
012F   0878           00281                 movf    0x78,W
0130   00AC           00282         movwf    start_month1    ;Save starting month dig1
0131   2???           00283                 call    WR_DATA
                      00284                 writechar       "/"
0132   302F               M             movlw   "/"
0133   2???               M             call    WR_DATA
                      00285                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0134   3004               M         movlw   0x04
0135   1283 1303          M         banksel 0x73
0137   00F3               M         movwf   0x73
0138   2???               M         call    read_rtc
0139   1283 1303          M         banksel 0x75
013B   0875               M         movf    0x75,w
013C   2???               M         call    rtc_convert   
013D   0877           00286                 movf    0x77,W
013E   00AD           00287         movwf    start_date10    ;Save starting date dig10
013F   2???           00288                 call    WR_DATA
0140   0878           00289                 movf    0x78,W
0141   00AE           00290         movwf    start_date1    ;Save starting date dig1
0142   2???           00291                 call    WR_DATA
                      00292                 spacebar
0143   3014               M             movlw   B'00010100'
0144   2???               M             call    WR_INS
                      00293                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0145   3002               M         movlw   0x02
0146   1283 1303          M         banksel 0x73
0148   00F3               M         movwf   0x73
0149   2???               M         call    read_rtc
014A   1283 1303          M         banksel 0x75
014C   0875               M         movf    0x75,w
014D   2???               M         call    rtc_convert   
014E   0877           00294                 movf    0x77,W
014F   00AF           00295         movwf    start_hour10    ;Save starting hour dig10
0150   2???           00296                 call    WR_DATA
0151   0878           00297                 movf    0x78,W
0152   00B0           00298         movwf    start_hour1    ;Save starting hour dig1
0153   2???           00299                 call    WR_DATA
                      00300                 writechar ":"
0154   303A               M             movlw   ":"
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0155   2???               M             call    WR_DATA
                      00301                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0156   3001               M         movlw   0x01
0157   1283 1303          M         banksel 0x73
0159   00F3               M         movwf   0x73
015A   2???               M         call    read_rtc
015B   1283 1303          M         banksel 0x75
015D   0875               M         movf    0x75,w
015E   2???               M         call    rtc_convert   
015F   0877           00302                 movf    0x77,W
0160   00B1           00303         movwf    start_min10    ;Save starting min dig10
0161   2???           00304                 call    WR_DATA
0162   0878           00305                 movf    0x78,W
0163   00B2           00306         movwf    start_min1    ;Save starting min dig1
0164   2???           00307                 call    WR_DATA
                      00308 
                      00309         ; Move cursor back to start of second line
                      00310         ; We will update displayed time but not the word "STANDBY"
0165   30C0           00311         movlw   B'11000000'
0166   2???           00312         call    WR_INS
                      00313 
                      00314         ;Poll to start (will have to hold key for ~0.5sec)
0167   1C86           00315          btfss          PORTB,1     ;Wait until data is available from the keypad
0168   2???           00316          goto           waiting
                      00317 
0169   0E06           00318          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
016A   390F           00319          andlw          0x0F
016B   00B7           00320          movwf      keytemp
016C   3A0C           00321          xorlw      0xC         ;Will be all zeros if its "START"
016D   1903           00322          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016E   2???           00323          goto       start
                      00324 
016F   0837           00325          movf       keytemp,W     ;Go to log interface
0170   3A0E           00326          xorlw      0xE
0171   1903           00327          btfsc      STATUS,Z
0172   2???           00328          goto       logs
                      00329 
0173   1886           00330          btfsc          PORTB,1     ;Wait until key is released
0174   2???           00331          goto           $-1
0175   2???           00332          goto       waiting
                      00333 
                      00334 ;-----------------------------------------------------------
                      00335 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00336 
0176                  00337 start
                      00338         ;Start the timer
                      00339         movlf       D'38', count38
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0176   3026               M         movlw   D'38'
0177   00C4               M         movwf   count38
0178   01B3           00340         clrf        op_time
0179   0181           00341         clrf        TMR0
017A   178B           00342         bsf         INTCON, GIE     ;enable interrupts
                      00343 
                      00344         ;Display starting message
017B   2???           00345         call        Clear_Display
                      00346         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
017C   01B9               M                 clrf    Table_Counter
017D   0103               M                 clrw
017E                      M loop_disp
017E   0839               M         movf    Table_Counter,W
017F   2???               M                 call    Start_Msg
0180   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0181   1903               M                 btfsc   STATUS,Z
0182   2???               M                 goto    end_disp
0183   2???               M                 call    WR_DATA
0184   0AB9               M                 incf    Table_Counter,F
0185   2???               M                 goto    loop_disp
0186                      M end_disp
                      00347 
                      00348 
                      00349 ;;****FAKE CODE ******************************************
                      00350         ; Just delaying
0186   2???           00351         call        HalfS
0187   2???           00352         call        HalfS
0188   2???           00353         call        HalfS
0189   2???           00354         call        HalfS
018A   2???           00355         call        HalfS
018B   2???           00356         call        HalfS
018C   2???           00357         call        HalfS
018D   2???           00358         call        HalfS
018E   2???           00359         call        HalfS
018F   2???           00360         call        HalfS
0190   2???           00361         call        HalfS
0191   2???           00362         call        HalfS
0192   2???           00363         call        HalfS
0193   2???           00364         call        HalfS
0194   2???           00365         call        HalfS
0195   2???           00366         call        HalfS
0196   2???           00367         call        HalfS
0197   2???           00368         call        HalfS
                      00369 
                      00370        ; Putting values in manually.
                      00371         movlf     B'01', state1     ;pass
0198   3001               M         movlw   B'01'
0199   00A0               M         movwf   state1
                      00372         movlf     B'01', state2     ;pass
019A   3001               M         movlw   B'01'
019B   00A1               M         movwf   state2
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00373         movlf     B'10', state3     ;LED fail
019C   3002               M         movlw   B'10'
019D   00A2               M         movwf   state3
                      00374         movlf     B'01', state4     ;pass
019E   3001               M         movlw   B'01'
019F   00A3               M         movwf   state4
                      00375         movlf     B'01', state5     ;pass
01A0   3001               M         movlw   B'01'
01A1   00A4               M         movwf   state5
                      00376         movlf     B'01', state6     ;pass
01A2   3001               M         movlw   B'01'
01A3   00A5               M         movwf   state6
                      00377         movlf     B'01', state7     ;pass
01A4   3001               M         movlw   B'01'
01A5   00A6               M         movwf   state7
                      00378         movlf     B'11', state8     ;flicker fail
01A6   3003               M         movlw   B'11'
01A7   00A7               M         movwf   state8
                      00379         movlf     B'01', state9     ;pass
01A8   3001               M         movlw   B'01'
01A9   00A8               M         movwf   state9
                      00380         movlf     D'1', num_LF
01AA   3001               M         movlw   D'1'
01AB   00B5               M         movwf   num_LF
                      00381         movlf     D'1', num_FF
01AC   3001               M         movlw   D'1'
01AD   00B6               M         movwf   num_FF
                      00382         movlf     D'9', num_tot
01AE   3009               M         movlw   D'9'
01AF   00B4               M         movwf   num_tot
                      00383 ;*******************************************************
                      00384 
                      00385 ; choose fake or real!
                      00386 
                      00387 ;******REAL CODE ******************************************
                      00388 ;    clrf    candle_index     ; n = 0
                      00389 ;    bcf        STATUS, IRP
                      00390 ;    movlf   0x1F, FSR       ;pointing at right before state1
                      00391 ;
                      00392 ;rotate
                      00393 ;       movlw   d'10'               ; stop operation after 10 rotations (n=10)
                      00394 ;   subwf   candle_index,W      ; candle_index (n) is # you've already tested before rotating
                      00395 ;   btfsc   STATUS,Z
                      00396 ;       goto    end_operation
                      00397 ;   ;bcf     present, 0           ; else rotate motor and n++. assume no candle. rotate routine will mak
                            e it 1 if there is. OLD!
                      00398 ;       call    ROTATEMOTOR
                      00399 ;       incf    candle_index, F
                      00400 ;   incf    FSR, F
                      00401 ;
                      00402 ;detect_candle
                      00403 ;       ;btfsc   present,0       ;1 if there's a light, 0 if there's no light
                      00404 ;   btfsc   IRDATA
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00405 ;       goto    test_candle     ;yes candle, go test it
                      00406 ;   movlf   D'0', INDF      ;no candle, state = not present
                      00407 ;       goto rotate                 ;and go try next
                      00408 ;
                      00409 ;test_candle
                      00410 ;       incf    num_tot, F                      ; keeping track of total number of candles
                      00411 ;       clrf    photocount
                      00412 ;       call    HalfS       ; delay 2 sec or whatever
                      00413 ;   call    HalfS
                      00414 ;   call    HalfS
                      00415 ;   call    HalfS
                      00416 ;       movff   photocount, photoval        ;to ensure it wont change again
                      00417 ;check_threshold1
                      00418 ;    movlw    threshold1
                      00419 ;    subwf   photoval, W
                      00420 ;    btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
                      00421 ;    goto check_threshold2
                      00422 ;    movlf   D'2', INDF      ; < threshold 1 means led fail
                      00423 ;        incf    num_LF, F
                      00424 ;    goto    rotate
                      00425 ;check_threshold2
                      00426 ;    movlw    threshold2
                      00427 ;    subwf   photoval, W
                      00428 ;    btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
                      00429 ;    goto aboveboth
                      00430 ;    movlf   D'1', INDF      ; < threshold 2 means pass
                      00431 ;    goto    rotate
                      00432 ;aboveboth
                      00433 ;   movlf   D'3', INDF       ;else flicker fail
                      00434 ;   incf    num_FF, F
                      00435 ;   goto    rotate
                      00436  ;****************************************************
                      00437 
01B0                  00438 end_operation
                      00439         ; Stop the timer
01B0   138B           00440          bcf         INTCON, GIE  ;disable interrupts
                      00441 
                      00442         ;Display "complete"
01B1   2???           00443         call       Clear_Display
                      00444         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01B2   01B9               M                 clrf    Table_Counter
01B3   0103               M                 clrw
01B4                      M loop_disp
01B4   0839               M         movf    Table_Counter,W
01B5   2???               M                 call    End_Msg
01B6   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01B7   1903               M                 btfsc   STATUS,Z
01B8   2???               M                 goto    end_disp
01B9   2???               M                 call    WR_DATA
01BA   0AB9               M                 incf    Table_Counter,F
01BB   2???               M                 goto    loop_disp
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BC                      M end_disp
                      00445 
                      00446         ; Shift logs 1-8 -> 2-9
                      00447         ; Then store current run as log 1
01BC                  00448 shiftlogs
01BC   1283 1703      00449         banksel     EEADR               ; bank 2
                      00450         movlf       D'111', EEADR       ; start shifting from 111->125
01BE   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BF   008D               M         movwf   EEADR
                      00451 
01C0                  00452 shiftlogs_0
01C0   1683 1703      00453         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C2   138C           00454         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C3   140C           00455         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C4   188C           00456         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01C5   2???           00457         goto        $-1
01C6   1283 1703      00458         banksel     EEADR               ;bank 2
01C8   300E           00459         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C9   078D           00460         addwf       EEADR, F
01CA   1683 1703      00461         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CC   138C           00462         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CD   150C           00463         bsf         EECON1, WREN
01CE   3055           00464         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CF   008D           00465         movwf       EECON2
01D0   30AA           00466         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D1   008D           00467         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D2   148C           00468         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D3   110C           00469         bcf         EECON1, WREN
01D4   1283 1703      00470         banksel     EEADR               ;bank 2
01D6   300E           00471         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D7   020D           00472         subwf       EEADR, W
01D8   1903           00473         btfsc       STATUS, Z
01D9   2???           00474         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00475 
01DA   1283 1303      00476         banksel op_time             ; for some reason I need to delay here
01DC   2???           00477         call   delay5ms             ; or else I get an infinite loop
01DD   1283 1703      00478         banksel EEADR
                      00479 
01DF   300F           00480         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E0   028D           00481         subwf       EEADR, F
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E1   2???           00482         goto        shiftlogs_0
                      00483 
01E2                  00484 write_log1
01E2   1283 1703      00485         banksel     EEADR
01E4   1383           00486         bcf         STATUS, IRP
                      00487         movlf       0x37, FSR           ;points to one after last important data
01E5   3037               M         movlw   0x37
01E6   0084               M         movwf   FSR
                      00488         movlf       D'14', EEADR        ;points to one after last place to write to
01E7   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E8   008D               M         movwf   EEADR
01E9                  00489 write_log1_0
01E9   1683 1703      00490         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EB   188C           00491         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01EC   2???           00492         goto        $-1
01ED   1283 1703      00493         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EF   038D           00494         decf        EEADR, F            ;writing backwords
01F0   0384           00495         decf        FSR, F
                      00496         movff       INDF, EEDATA
01F1   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F2   008C               M         movwf   EEDATA
01F3   1683 1703      00497         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F5   138C           00498         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F6   150C           00499         bsf         EECON1, WREN
01F7   3055           00500         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F8   008D           00501         movwf       EECON2
01F9   30AA           00502         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FA   008D           00503         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FB   148C           00504         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FC   110C           00505         bcf         EECON1, WREN
01FD   1283 1703      00506         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FF   088D           00507         movf        EEADR, F
0200   1D03           00508         btfss       STATUS, Z           ;if EEADR = 0 we're done
0201   2???           00509         goto        write_log1_0
                      00510 
                      00511         ; Display info screens
0202   ???? ????      00512         banksel    time            ; back to bank0
0204   2???           00513         call       time             ; "Operation time: X sec"
0205   2???           00514         call       HalfS
0206   2???           00515         call       HalfS
0207   2???           00516         call       summary          ; "Total candles: X. Defective: Y"
0208   2???           00517         call       HalfS
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0209   2???           00518         call       HalfS
020A   2???           00519         call       defective        ; "FF: a b c. LF: d e f"
                      00520 ;-----------------------------------------------------------------------
                      00521 ; Data display interface
                      00522 
020B   1C86           00523 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
020C   2???           00524          goto           $-1
                      00525 
020D   0E06           00526          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
020E   390F           00527          andlw          0x0F
020F   2???           00528          call       information ;Do the right thing
                      00529 
0210   1886           00530          btfsc          PORTB,1     ;Wait until key is released
0211   2???           00531          goto           $-1
0212   2???           00532          goto       poll
                      00533 
                      00534 
                      00535 ;-------------------------------------------------------------------------
                      00536 ; LOGS INTERFACE
                      00537 ; Shows last runs of last 9 logs
                      00538 ; Access from STANDBY and return to STANDBY
                      00539 
0213                  00540 logs
0213   2???           00541     call    Clear_Display
                      00542     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0214   01B9               M                 clrf    Table_Counter
0215   0103               M                 clrw
0216                      M loop_disp
0216   0839               M         movf    Table_Counter,W
0217   2???               M                 call    Logs_Msg1
0218   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0219   1903               M                 btfsc   STATUS,Z
021A   2???               M                 goto    end_disp
021B   2???               M                 call    WR_DATA
021C   0AB9               M                 incf    Table_Counter,F
021D   2???               M                 goto    loop_disp
021E                      M end_disp
021E   2???           00543     call    Switch_Lines
                      00544     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
021F   01B9               M                 clrf    Table_Counter
0220   0103               M                 clrw
0221                      M loop_disp
0221   0839               M         movf    Table_Counter,W
0222   2???               M                 call    Logs_Msg2
0223   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0224   1903               M                 btfsc   STATUS,Z
0225   2???               M                 goto    end_disp
0226   2???               M                 call    WR_DATA
0227   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0228   2???               M                 goto    loop_disp
0229                      M end_disp
                      00545 
0229                  00546 polling
0229   1C86           00547     btfss               PORTB,1     ;Wait until data is available from the keypad
022A   2???           00548     goto                $-1
                      00549 
022B   0E06           00550     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
022C   390F           00551     andlw               0x0F
022D   00B7           00552     movwf       keytemp     ; Save which key was pressed
                      00553 
022E                  00554 check_log1
022E   3A00           00555     xorlw   0x0         ;will be all zeros if its 1
022F   1D03           00556     btfss   STATUS,Z    ;and Z will be high, so skip
0230   2???           00557     goto    check_log2
0231   1283 1703      00558     banksel EEADR           ;(bank2)
                      00559     movlf   d'0', EEADR
0233   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0234   008D               M         movwf   EEADR
0235   2???           00560     goto    display_log
                      00561 
0236                  00562 check_log2
0236   0837           00563     movf    keytemp, W
0237   3A01           00564     xorlw   0x1
0238   1D03           00565     btfss   STATUS,Z
0239   2???           00566     goto    check_log3
023A   1283 1703      00567     banksel EEADR
                      00568     movlf   d'14', EEADR
023C   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
023D   008D               M         movwf   EEADR
023E   2???           00569     goto    display_log
                      00570 
023F                  00571 check_log3
023F   0837           00572     movf    keytemp, W
0240   3A02           00573     xorlw   0x2
0241   1D03           00574     btfss   STATUS,Z
0242   2???           00575     goto    check_log4
0243   1283 1703      00576     banksel EEADR
                      00577     movlf   d'28', EEADR
0245   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0246   008D               M         movwf   EEADR
0247   2???           00578     goto    display_log
                      00579 
0248                  00580 check_log4
0248   0837           00581     movf    keytemp, W
0249   3A04           00582     xorlw   0x4
024A   1D03           00583     btfss   STATUS,Z
024B   2???           00584     goto    check_log5
024C   1283 1703      00585     banksel EEADR
                      00586     movlf   d'42', EEADR
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024E   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
024F   008D               M         movwf   EEADR
0250   2???           00587     goto    display_log
                      00588 
0251                  00589 check_log5
0251   0837           00590     movf    keytemp, W
0252   3A05           00591     xorlw   0x5
0253   1D03           00592     btfss   STATUS,Z
0254   2???           00593     goto    check_log6
0255   1283 1703      00594     banksel EEADR
                      00595     movlf   d'56', EEADR
0257   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0258   008D               M         movwf   EEADR
0259   2???           00596     goto    display_log
                      00597 
025A                  00598 check_log6
025A   0837           00599     movf    keytemp, W
025B   3A06           00600     xorlw   0x6
025C   1D03           00601     btfss   STATUS,Z
025D   2???           00602     goto    check_log7
025E   1283 1703      00603     banksel EEADR
                      00604     movlf   d'70', EEADR
0260   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0261   008D               M         movwf   EEADR
0262   2???           00605     goto    display_log
                      00606 
0263                  00607 check_log7
0263   0837           00608     movf    keytemp, W
0264   3A08           00609     xorlw   0x8
0265   1D03           00610     btfss   STATUS,Z
0266   2???           00611     goto    check_log8
0267   1283 1703      00612     banksel EEADR
                      00613     movlf   d'84', EEADR
0269   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026A   008D               M         movwf   EEADR
026B   2???           00614     goto    display_log
                      00615 
026C                  00616 check_log8
026C   0837           00617     movf    keytemp, W
026D   3A09           00618     xorlw   0x9
026E   1D03           00619     btfss   STATUS,Z
026F   2???           00620     goto    check_log9
0270   1283 1703      00621     banksel EEADR
                      00622     movlf   d'98', EEADR
0272   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0273   008D               M         movwf   EEADR
0274   2???           00623     goto    display_log
                      00624 
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0275                  00625 check_log9
0275   0837           00626     movf    keytemp, W
0276   3A0A           00627     xorlw   0xA
0277   1D03           00628     btfss   STATUS,Z
0278   2???           00629     goto    check_done
0279   1283 1703      00630     banksel EEADR
                      00631     movlf   d'112', EEADR
027B   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027C   008D               M         movwf   EEADR
027D   2???           00632     goto    display_log
                      00633 
027E                  00634 check_done
027E   0837           00635     movf    keytemp, W
027F   3A0D           00636     xorlw   0xD
0280   1D03           00637     btfss   STATUS,Z
0281   2???           00638     goto    badkey
0282   2???           00639     call    Clear_Display
                      00640     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0283   01B9               M                 clrf    Table_Counter
0284   0103               M                 clrw
0285                      M loop_disp
0285   0839               M         movf    Table_Counter,W
0286   2???               M                 call    Standby_Msg
0287   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0288   1903               M                 btfsc   STATUS,Z
0289   2???               M                 goto    end_disp
028A   2???               M                 call    WR_DATA
028B   0AB9               M                 incf    Table_Counter,F
028C   2???               M                 goto    loop_disp
028D                      M end_disp
028D   2???           00641     call    Switch_Lines
028E   2???           00642     goto    waiting
                      00643 
028F                  00644 badkey
028F   1886           00645     btfsc               PORTB,1     ;Wait until key is released
0290   2???           00646     goto                $-1
0291   2???           00647     goto        polling
                      00648 
                      00649 
0292                  00650 display_log                 ;start in bank2
                      00651     ; move EEPROM data back to "current" data
0292   1383           00652     bcf STATUS, IRP
                      00653     movlf   0x29, FSR
0293   3029               M         movlw   0x29
0294   0084               M         movwf   FSR
0295                  00654 read_EEPROM
0295   1683 1703      00655     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0297   138C           00656     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0298   140C           00657     bsf EECON1, RD          ; read EEPROM
0299   1283 1703      00658     banksel EEDATA          ;bank 2
                      00659     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029B   080C               M         movf    EEDATA, W
029C   0080               M         movwf   INDF
029D   0A84           00660     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029E   0A8D           00661     incf    EEADR, F
029F   3037           00662     movlw   0x37            ;done if FSR = 0x37
02A0   0204           00663     subwf   FSR, W
02A1   1D03           00664     btfss   STATUS, Z
02A2   2???           00665     goto    read_EEPROM
                      00666 
                      00667     ;display that shit
02A3   1283 1303      00668     banksel Table_Counter   ; back to bank0
02A5   2???           00669     call    Clear_Display
                      00670     ;if first data is 0xFF (no log) just display "none"
02A6   30FF           00671     movlw   0xFF
02A7   0229           00672     subwf   start_year10, W
02A8   1D03           00673     btfss   STATUS, Z
02A9   2???           00674     goto yes_log
02AA                  00675 no_log
                      00676     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02AA   01B9               M                 clrf    Table_Counter
02AB   0103               M                 clrw
02AC                      M loop_disp
02AC   0839               M         movf    Table_Counter,W
02AD   2???               M                 call    None
02AE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02AF   1903               M                 btfsc   STATUS,Z
02B0   2???               M                 goto    end_disp
02B1   2???               M                 call    WR_DATA
02B2   0AB9               M                 incf    Table_Counter,F
02B3   2???               M                 goto    loop_disp
02B4                      M end_disp
02B4   2???           00677     call    HalfS
02B5   2???           00678     goto    logs
                      00679     ;else display the log
02B6                  00680 yes_log
                      00681     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02B6   01B9               M                 clrf    Table_Counter
02B7   0103               M                 clrw
02B8                      M loop_disp
02B8   0839               M         movf    Table_Counter,W
02B9   2???               M                 call    Op_at
02BA   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02BB   1903               M                 btfsc   STATUS,Z
02BC   2???               M                 goto    end_disp
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02BD   2???               M                 call    WR_DATA
02BE   0AB9               M                 incf    Table_Counter,F
02BF   2???               M                 goto    loop_disp
02C0                      M end_disp
02C0   2???           00682     call    Switch_Lines
                      00683     writechar    "2"
02C1   3032               M             movlw   "2"
02C2   2???               M             call    WR_DATA
                      00684     writechar    "0"
02C3   3030               M             movlw   "0"
02C4   2???               M             call    WR_DATA
                      00685     writeASC   start_year10
02C5   0829               M             movf    start_year10, W
02C6   2???               M             call WR_DATA
                      00686     writeASC   start_year1
02C7   082A               M             movf    start_year1, W
02C8   2???               M             call WR_DATA
                      00687     writechar   "/"
02C9   302F               M             movlw   "/"
02CA   2???               M             call    WR_DATA
                      00688     writeASC   start_month10
02CB   082B               M             movf    start_month10, W
02CC   2???               M             call WR_DATA
                      00689     writeASC   start_month1
02CD   082C               M             movf    start_month1, W
02CE   2???               M             call WR_DATA
                      00690     writechar   "/"
02CF   302F               M             movlw   "/"
02D0   2???               M             call    WR_DATA
                      00691     writeASC   start_date10
02D1   082D               M             movf    start_date10, W
02D2   2???               M             call WR_DATA
                      00692     writeASC   start_date1
02D3   082E               M             movf    start_date1, W
02D4   2???               M             call WR_DATA
                      00693     writechar   " "
02D5   3020               M             movlw   " "
02D6   2???               M             call    WR_DATA
                      00694     writeASC   start_hour10
02D7   082F               M             movf    start_hour10, W
02D8   2???               M             call WR_DATA
                      00695     writeASC   start_hour1
02D9   0830               M             movf    start_hour1, W
02DA   2???               M             call WR_DATA
                      00696     writechar   ":"
02DB   303A               M             movlw   ":"
02DC   2???               M             call    WR_DATA
                      00697     writeASC  start_min10
02DD   0831               M             movf    start_min10, W
02DE   2???               M             call WR_DATA
                      00698     writeASC   start_min1
02DF   0832               M             movf    start_min1, W
02E0   2???               M             call WR_DATA
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E1   2???           00699     call    HalfS
02E2   2???           00700     call    HalfS
02E3   2???           00701     call    time
02E4   2???           00702     call    HalfS
02E5   2???           00703     call    HalfS
02E6   2???           00704     call    summary
02E7   2???           00705     call    HalfS
02E8   2???           00706     call    HalfS
                      00707     ;option to Export
02E9   2???           00708     call    Clear_Display
                      00709     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02EA   01B9               M                 clrf    Table_Counter
02EB   0103               M                 clrw
02EC                      M loop_disp
02EC   0839               M         movf    Table_Counter,W
02ED   2???               M                 call    Logs_Msg3
02EE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02EF   1903               M                 btfsc   STATUS,Z
02F0   2???               M                 goto    end_disp
02F1   2???               M                 call    WR_DATA
02F2   0AB9               M                 incf    Table_Counter,F
02F3   2???               M                 goto    loop_disp
02F4                      M end_disp
02F4   2???           00710     call    Switch_Lines
                      00711     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02F5   01B9               M                 clrf    Table_Counter
02F6   0103               M                 clrw
02F7                      M loop_disp
02F7   0839               M         movf    Table_Counter,W
02F8   2???               M                 call    Logs_Msg4
02F9   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FA   1903               M                 btfsc   STATUS,Z
02FB   2???               M                 goto    end_disp
02FC   2???               M                 call    WR_DATA
02FD   0AB9               M                 incf    Table_Counter,F
02FE   2???               M                 goto    loop_disp
02FF                      M end_disp
                      00712 
02FF                  00713 wanna_export
02FF   1C86           00714     btfss               PORTB,1     ;Wait until data is available from the keypad
0300   2???           00715     goto                $-1
                      00716 
0301   0E06           00717     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0302   390F           00718     andlw               0x0F
0303   00B7           00719     movwf       keytemp     ; Save which key was pressed
                      00720 
0304                  00721 check_wanna
0304   0837           00722     movf    keytemp, W
0305   3A0F           00723     xorlw   0xF
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0306   1D03           00724     btfss   STATUS,Z
0307   2???           00725     goto    check_nothx
0308   2???           00726     call    export
0309   2???           00727     goto    logs
                      00728 
030A                  00729 check_nothx
030A   0837           00730     movf    keytemp, W
030B   3A0E           00731     xorlw   0xE
030C   1D03           00732     btfss   STATUS,Z
030D   2???           00733     goto    check_immapeace
030E   2???           00734     goto    logs
                      00735 
030F                  00736 check_immapeace
030F   0837           00737     movf    keytemp, W
0310   3A0D           00738     xorlw   0xD
0311   1D03           00739     btfss   STATUS,Z
0312   2???           00740     goto    badkeyagain
0313   2???           00741     call    Clear_Display
                      00742     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0314   01B9               M                 clrf    Table_Counter
0315   0103               M                 clrw
0316                      M loop_disp
0316   0839               M         movf    Table_Counter,W
0317   2???               M                 call    Standby_Msg
0318   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0319   1903               M                 btfsc   STATUS,Z
031A   2???               M                 goto    end_disp
031B   2???               M                 call    WR_DATA
031C   0AB9               M                 incf    Table_Counter,F
031D   2???               M                 goto    loop_disp
031E                      M end_disp
031E   2???           00743     call    Switch_Lines
031F   2???           00744     goto    waiting
                      00745 
0320                  00746 badkeyagain
0320   1886           00747     btfsc               PORTB,1     ;Wait until key is released
0321   2???           00748     goto                $-1
0322   2???           00749     goto        wanna_export
                      00750 
                      00751 ; END OF MAIN PROGRAM
                      00752 ;------------------------------------------------------------
                      00753 
                      00754 ;***************************************
                      00755 ; ROTATE MOTOR ROUTINE
                      00756 ; Rotates motor 36deg. (20 steps)
                      00757 ;***************************************
                      00758 
0323                  00759 ROTATEMOTOR
                      00760     movlf   d'5', motor_count
0323   3005               M         movlw   d'5'
0324   00C8               M         movwf   motor_count
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0325                  00761 start_rot
                      00762     movlf   b'1001', PORTA
0325   3009               M         movlw   b'1001'
0326   0085               M         movwf   PORTA
0327   2???           00763     call    motor_del
                      00764     movlf   b'1000', PORTA
0328   3008               M         movlw   b'1000'
0329   0085               M         movwf   PORTA
032A   2???           00765     call    motor_del
                      00766     movlf   b'1010', PORTA
032B   300A               M         movlw   b'1010'
032C   0085               M         movwf   PORTA
032D   2???           00767     call    motor_del
                      00768     movlf   b'0010', PORTA
032E   3002               M         movlw   b'0010'
032F   0085               M         movwf   PORTA
0330   2???           00769     call    motor_del
                      00770     movlf   b'0110', PORTA
0331   3006               M         movlw   b'0110'
0332   0085               M         movwf   PORTA
0333   2???           00771     call    motor_del
                      00772     movlf   b'0100', PORTA
0334   3004               M         movlw   b'0100'
0335   0085               M         movwf   PORTA
0336   2???           00773     call    motor_del
                      00774     movlf   b'0101', PORTA
0337   3005               M         movlw   b'0101'
0338   0085               M         movwf   PORTA
0339   2???           00775     call    motor_del
                      00776     movlf   b'0001', PORTA
033A   3001               M         movlw   b'0001'
033B   0085               M         movwf   PORTA
033C   2???           00777     call    motor_del
                      00778 
Message[305]: Using default destination of 1 (file).
033D   0BC8           00779     decfsz  motor_count
033E   2???           00780     goto    start_rot
033F   0185           00781     clrf    PORTA
0340   0008           00782     return
                      00783 
                      00784 
                      00785 ;***************************************
                      00786 ; DATA DISPLAY ROUTINE
                      00787 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00788 ; Determines which key it was and displays appropriate info / branch
                      00789 ;***************************************
                      00790 
0341                  00791 information
0341   00B7           00792     movwf   keytemp             ; Save which key was pressed
                      00793 
0342                  00794 check_1
0342   3A00           00795     xorlw   0x0         ;will be all zeros if its 1
0343   1D03           00796     btfss   STATUS,Z    ;and Z will be high, so skip
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0344   2???           00797     goto    check_2
0345   2???           00798     call    Clear_Display
                      00799     writechar "1"
0346   3031               M             movlw   "1"
0347   2???               M             call    WR_DATA
0348   0820           00800     movf    state1, W
0349   2???           00801     call    display_state
034A   0008           00802     return
                      00803 
034B                  00804 check_2
034B   0837           00805     movf    keytemp, W
034C   3A01           00806     xorlw   0x1
034D   1D03           00807     btfss   STATUS,Z
034E   2???           00808     goto    check_3
034F   2???           00809     call    Clear_Display
                      00810     writechar "2"
0350   3032               M             movlw   "2"
0351   2???               M             call    WR_DATA
0352   0821           00811     movf    state2, W
0353   2???           00812     call    display_state
0354   0008           00813     return
                      00814 
0355                  00815 check_3
0355   0837           00816     movf    keytemp, W
0356   3A02           00817     xorlw   0x2
0357   1D03           00818     btfss   STATUS,Z
0358   2???           00819     goto    check_4
0359   2???           00820     call    Clear_Display
                      00821     writechar "3"
035A   3033               M             movlw   "3"
035B   2???               M             call    WR_DATA
035C   0822           00822     movf    state3, W
035D   2???           00823     call    display_state
035E   0008           00824     return
                      00825 
035F                  00826 check_4
035F   0837           00827     movf    keytemp, W
0360   3A04           00828     xorlw   0x4
0361   1D03           00829     btfss   STATUS,Z
0362   2???           00830     goto    check_5
0363   2???           00831     call    Clear_Display
                      00832     writechar "4"
0364   3034               M             movlw   "4"
0365   2???               M             call    WR_DATA
0366   0823           00833     movf    state4, W
0367   2???           00834     call    display_state
0368   0008           00835     return
                      00836 
0369                  00837 check_5
0369   0837           00838     movf    keytemp, W
036A   3A05           00839     xorlw   0x5
036B   1D03           00840     btfss   STATUS,Z
036C   2???           00841     goto    check_6
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

036D   2???           00842     call    Clear_Display
                      00843     writechar "5"
036E   3035               M             movlw   "5"
036F   2???               M             call    WR_DATA
0370   0824           00844     movf    state5, W
0371   2???           00845     call    display_state
0372   0008           00846     return
                      00847 
0373                  00848 check_6
0373   0837           00849     movf    keytemp, W
0374   3A06           00850     xorlw   0x6
0375   1D03           00851     btfss   STATUS,Z
0376   2???           00852     goto    check_7
0377   2???           00853     call    Clear_Display
                      00854     writechar "6"
0378   3036               M             movlw   "6"
0379   2???               M             call    WR_DATA
037A   0825           00855     movf    state6, W
037B   2???           00856     call    display_state
037C   0008           00857     return
                      00858 
037D                  00859 check_7
037D   0837           00860     movf    keytemp, W
037E   3A08           00861     xorlw   0x8
037F   1D03           00862     btfss   STATUS,Z
0380   2???           00863     goto    check_8
0381   2???           00864     call    Clear_Display
                      00865     writechar "7"
0382   3037               M             movlw   "7"
0383   2???               M             call    WR_DATA
0384   0826           00866     movf    state7, W
0385   2???           00867     call    display_state
0386   0008           00868     return
                      00869 
0387                  00870 check_8
0387   0837           00871     movf    keytemp, W
0388   3A09           00872     xorlw   0x9
0389   1D03           00873     btfss   STATUS,Z
038A   2???           00874     goto    check_9
038B   2???           00875     call    Clear_Display
                      00876     writechar "8"
038C   3038               M             movlw   "8"
038D   2???               M             call    WR_DATA
038E   0827           00877     movf    state8, W
038F   2???           00878     call    display_state
0390   0008           00879     return
                      00880 
0391                  00881 check_9
0391   0837           00882     movf    keytemp, W
0392   3A0A           00883     xorlw   0xA
0393   1D03           00884     btfss   STATUS,Z
0394   2???           00885     goto    check_summary
0395   2???           00886     call    Clear_Display
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00887     writechar "9"
0396   3039               M             movlw   "9"
0397   2???               M             call    WR_DATA
0398   0828           00888     movf    state9, W
0399   2???           00889     call    display_state
039A   0008           00890     return
                      00891 
039B                  00892 check_summary
039B   0837           00893     movf    keytemp, W
039C   3A03           00894     xorlw   0x3
039D   1D03           00895     btfss   STATUS,Z
039E   2???           00896     goto    check_defective
039F   2???           00897     call    summary
03A0   0008           00898     return
                      00899 
03A1                  00900 check_defective
03A1   0837           00901     movf    keytemp, W
03A2   3A07           00902     xorlw   0x7
03A3   1D03           00903     btfss   STATUS,Z
03A4   2???           00904     goto    check_time
03A5   2???           00905     call    defective
03A6   0008           00906     return
                      00907 
03A7                  00908 check_time
03A7   0837           00909     movf    keytemp, W
03A8   3A0B           00910     xorlw   0xB
03A9   1D03           00911     btfss   STATUS,Z
03AA   2???           00912     goto    check_export
03AB   2???           00913     call    time
03AC   0008           00914     return
                      00915 
03AD                  00916 check_export
03AD   0837           00917     movf    keytemp, W
03AE   3A0F           00918     xorlw   0xF
03AF   1D03           00919     btfss   STATUS,Z
03B0   2???           00920     goto    check_standby       ;or do you wanna allow to check logs?
03B1   2???           00921     call    export
03B2   0008           00922     return
                      00923 
                      00924 ;check_logs
                      00925 ;    movf    keytemp, W
                      00926 ;    xorlw   0xE
                      00927 ;    btfss   STATUS,Z
                      00928 ;    goto    check_standby
                      00929 ;    goto    logs
                      00930 
03B3                  00931 check_standby
03B3   0837           00932     movf    keytemp, W
03B4   3A0D           00933     xorlw   0xD
03B5   1D03           00934     btfss   STATUS,Z
03B6   2???           00935     goto    check_start
03B7   2???           00936     call    Clear_Display
                      00937     Display Standby_Msg
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03B8   01B9               M                 clrf    Table_Counter
03B9   0103               M                 clrw
03BA                      M loop_disp
03BA   0839               M         movf    Table_Counter,W
03BB   2???               M                 call    Standby_Msg
03BC   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03BD   1903               M                 btfsc   STATUS,Z
03BE   2???               M                 goto    end_disp
03BF   2???               M                 call    WR_DATA
03C0   0AB9               M                 incf    Table_Counter,F
03C1   2???               M                 goto    loop_disp
03C2                      M end_disp
03C2   2???           00938     call    Switch_Lines
03C3   2???           00939     goto    waiting
                      00940 
03C4                  00941 check_start
03C4   0837           00942     movf    keytemp, W
03C5   3A0C           00943     xorlw   0xC
03C6   1D03           00944     btfss   STATUS,Z
03C7   2???           00945     goto    default_key
03C8   2???           00946     goto    start
                      00947 
03C9                  00948 default_key         ; may never get here
03C9   0008           00949     return
                      00950 
                      00951 ;Display state subroutine
                      00952 ;stateN is in W
03CA                  00953 display_state
03CA   00B8           00954     movwf  statetemp    ; save stateN
                      00955 
03CB                  00956 check_none
03CB   3A00           00957     xorlw   0x0
03CC   1D03           00958     btfss   STATUS,Z
03CD   2???           00959     goto    check_pass
                      00960     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03CE   01B9               M                 clrf    Table_Counter
03CF   0103               M                 clrw
03D0                      M loop_disp
03D0   0839               M         movf    Table_Counter,W
03D1   2???               M                 call    Not_present
03D2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03D3   1903               M                 btfsc   STATUS,Z
03D4   2???               M                 goto    end_disp
03D5   2???               M                 call    WR_DATA
03D6   0AB9               M                 incf    Table_Counter,F
03D7   2???               M                 goto    loop_disp
03D8                      M end_disp
03D8   0008           00961     return
                      00962 
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D9                  00963 check_pass
03D9   0838           00964     movf    statetemp, W
03DA   3A01           00965     xorlw   0x1
03DB   1D03           00966     btfss   STATUS,Z
03DC   2???           00967     goto    check_LED
                      00968     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03DD   01B9               M                 clrf    Table_Counter
03DE   0103               M                 clrw
03DF                      M loop_disp
03DF   0839               M         movf    Table_Counter,W
03E0   2???               M                 call    Pass
03E1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E2   1903               M                 btfsc   STATUS,Z
03E3   2???               M                 goto    end_disp
03E4   2???               M                 call    WR_DATA
03E5   0AB9               M                 incf    Table_Counter,F
03E6   2???               M                 goto    loop_disp
03E7                      M end_disp
03E7   0008           00969     return
                      00970 
03E8                  00971 check_LED
03E8   0838           00972     movf    statetemp, W
03E9   3A02           00973     xorlw   0x2
03EA   1D03           00974     btfss   STATUS,Z
03EB   2???           00975     goto    check_flick
                      00976     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03EC   01B9               M                 clrf    Table_Counter
03ED   0103               M                 clrw
03EE                      M loop_disp
03EE   0839               M         movf    Table_Counter,W
03EF   2???               M                 call    LED_fail
03F0   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F1   1903               M                 btfsc   STATUS,Z
03F2   2???               M                 goto    end_disp
03F3   2???               M                 call    WR_DATA
03F4   0AB9               M                 incf    Table_Counter,F
03F5   2???               M                 goto    loop_disp
03F6                      M end_disp
03F6   0008           00977     return
                      00978 
03F7                  00979 check_flick
03F7   0838           00980     movf    statetemp, W
03F8   3A03           00981     xorlw   0x3
03F9   1D03           00982     btfss   STATUS,Z
03FA   2???           00983     goto    default_state
                      00984     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03FB   01B9               M                 clrf    Table_Counter
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FC   0103               M                 clrw
03FD                      M loop_disp
03FD   0839               M         movf    Table_Counter,W
03FE   2???               M                 call    Flick_fail
03FF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0400   1903               M                 btfsc   STATUS,Z
0401   2???               M                 goto    end_disp
0402   2???               M                 call    WR_DATA
0403   0AB9               M                 incf    Table_Counter,F
0404   2???               M                 goto    loop_disp
0405                      M end_disp
0405   0008           00985     return
                      00986 
0406                  00987 default_state   ; should never get here
0406   0008           00988     return
                      00989 
                      00990 ; Summary Subroutine
                      00991 ; Displays total number of candles and number of defective candles
                      00992 ; Reads data from num_tot, num_LF, num_FF
0407                  00993 summary
0407   2???           00994     call            Clear_Display
                      00995     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0408   01B9               M                 clrf    Table_Counter
0409   0103               M                 clrw
040A                      M loop_disp
040A   0839               M         movf    Table_Counter,W
040B   2???               M                 call    Total_Msg
040C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
040D   1903               M                 btfsc   STATUS,Z
040E   2???               M                 goto    end_disp
040F   2???               M                 call    WR_DATA
0410   0AB9               M                 incf    Table_Counter,F
0411   2???               M                 goto    loop_disp
0412                      M end_disp
                      00996     writeBCD        num_tot
0412   0834               M             movf    num_tot, W
0413   3E30               M             addlw   B'00110000'
0414   2???               M             call WR_DATA
0415   2???           00997     call            Switch_Lines
                      00998     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0416   01B9               M                 clrf    Table_Counter
0417   0103               M                 clrw
0418                      M loop_disp
0418   0839               M         movf    Table_Counter,W
0419   2???               M                 call    LF
041A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
041B   1903               M                 btfsc   STATUS,Z
041C   2???               M                 goto    end_disp
041D   2???               M                 call    WR_DATA
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

041E   0AB9               M                 incf    Table_Counter,F
041F   2???               M                 goto    loop_disp
0420                      M end_disp
                      00999     writeBCD        num_LF
0420   0835               M             movf    num_LF, W
0421   3E30               M             addlw   B'00110000'
0422   2???               M             call WR_DATA
                      01000     spacebar
0423   3014               M             movlw   B'00010100'
0424   2???               M             call    WR_INS
                      01001     spacebar
0425   3014               M             movlw   B'00010100'
0426   2???               M             call    WR_INS
                      01002     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0427   01B9               M                 clrf    Table_Counter
0428   0103               M                 clrw
0429                      M loop_disp
0429   0839               M         movf    Table_Counter,W
042A   2???               M                 call    FF
042B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
042C   1903               M                 btfsc   STATUS,Z
042D   2???               M                 goto    end_disp
042E   2???               M                 call    WR_DATA
042F   0AB9               M                 incf    Table_Counter,F
0430   2???               M                 goto    loop_disp
0431                      M end_disp
                      01003     writeBCD        num_FF
0431   0836               M             movf    num_FF, W
0432   3E30               M             addlw   B'00110000'
0433   2???               M             call WR_DATA
0434   0008           01004     return
                      01005 
                      01006 ; Defective candles Subroutine
                      01007 ; Displays index of each defective candle (LF or FF)
                      01008 ; Reads data from state1 - state9
0435                  01009 defective
0435   2???           01010     call            Clear_Display
                      01011 
                      01012     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0436   01B9               M                 clrf    Table_Counter
0437   0103               M                 clrw
0438                      M loop_disp
0438   0839               M         movf    Table_Counter,W
0439   2???               M                 call    LF
043A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
043B   1903               M                 btfsc   STATUS,Z
043C   2???               M                 goto    end_disp
043D   2???               M                 call    WR_DATA
043E   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

043F   2???               M                 goto    loop_disp
0440                      M end_disp
0440   08B5           01013     movf            num_LF, F
0441   1D03           01014     btfss           STATUS,Z         ;if none LF, just say "none"
0442   2???           01015     goto            check_LF
                      01016     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0443   01B9               M                 clrf    Table_Counter
0444   0103               M                 clrw
0445                      M loop_disp
0445   0839               M         movf    Table_Counter,W
0446   2???               M                 call    None
0447   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0448   1903               M                 btfsc   STATUS,Z
0449   2???               M                 goto    end_disp
044A   2???               M                 call    WR_DATA
044B   0AB9               M                 incf    Table_Counter,F
044C   2???               M                 goto    loop_disp
044D                      M end_disp
044D   2???           01017     goto            now_FF
                      01018 
044E                  01019 check_LF                            ; list all LF candles
044E   3002           01020     movlw           B'00000010'
044F   2???           01021     call            check_for_fail
                      01022 
0450                  01023 now_FF                              ; now look at FF
0450   2???           01024     call            Switch_Lines
                      01025     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0451   01B9               M                 clrf    Table_Counter
0452   0103               M                 clrw
0453                      M loop_disp
0453   0839               M         movf    Table_Counter,W
0454   2???               M                 call    FF
0455   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0456   1903               M                 btfsc   STATUS,Z
0457   2???               M                 goto    end_disp
0458   2???               M                 call    WR_DATA
0459   0AB9               M                 incf    Table_Counter,F
045A   2???               M                 goto    loop_disp
045B                      M end_disp
045B   08B6           01026     movf            num_FF, F
045C   1D03           01027     btfss           STATUS,Z         ;if none FF, just say "none"
045D   2???           01028     goto            check_FF
                      01029     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
045E   01B9               M                 clrf    Table_Counter
045F   0103               M                 clrw
0460                      M loop_disp
0460   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0461   2???               M                 call    None
0462   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0463   1903               M                 btfsc   STATUS,Z
0464   2???               M                 goto    end_disp
0465   2???               M                 call    WR_DATA
0466   0AB9               M                 incf    Table_Counter,F
0467   2???               M                 goto    loop_disp
0468                      M end_disp
0468   0008           01030     return
                      01031 
0469                  01032 check_FF                            ; list all FF candles
0469   3003           01033     movlw           B'00000011'
046A   2???           01034     call            check_for_fail
046B   0008           01035     return
                      01036 
046C                  01037 check_for_fail  ;lists all candles that have status currently in W "stateX"
046C   00B8           01038     movwf   statetemp
                      01039         movlf   D'0', candle_index
046D   3000               M         movlw   D'0'
046E   00C5               M         movwf   candle_index
046F   1383           01040         bcf     STATUS, IRP
                      01041         movlf   0x1F, FSR           ;index of right before state1
0470   301F               M         movlw   0x1F
0471   0084               M         movwf   FSR
0472                  01042 check_next
0472   3009           01043         movlw   D'9'                ;exit loop if at 9
0473   0245           01044         subwf   candle_index, W
0474   1803           01045         btfsc   STATUS,W
0475   2???           01046         goto    end_check_fail
0476   0A84           01047         incf    FSR,F               ; increment
0477   0AC5           01048         incf    candle_index,F
0478   0838           01049         movf    statetemp, W            ;see if stateN = stateX
0479   0200           01050         subwf   INDF, W
047A   1D03           01051         btfss   STATUS, Z
047B   2???           01052         goto    check_next              ;if not, go to next
                      01053         writeBCD        candle_index    ;if so, write down the number
047C   0845               M             movf    candle_index, W
047D   3E30               M             addlw   B'00110000'
047E   2???               M             call WR_DATA
                      01054         spacebar
047F   3014               M             movlw   B'00010100'
0480   2???               M             call    WR_INS
0481   2???           01055         goto check_next
0482                  01056 end_check_fail
0482   0008           01057         return
                      01058 
                      01059 ; Time subroutine
                      01060 ; Right now this takes the time in seconds as a binary number in op_time
                      01061 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01062 ; incremented every second. However I may just take the stop time - start time
                      01063 ; from the RTC data so this might change a lot.
0483                  01064 time
0483   2???           01065     call    Clear_Display
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01066     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0484   01B9               M                 clrf    Table_Counter
0485   0103               M                 clrw
0486                      M loop_disp
0486   0839               M         movf    Table_Counter,W
0487   2???               M                 call    Time_Msg
0488   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0489   1903               M                 btfsc   STATUS,Z
048A   2???               M                 goto    end_disp
048B   2???               M                 call    WR_DATA
048C   0AB9               M                 incf    Table_Counter,F
048D   2???               M                 goto    loop_disp
048E                      M end_disp
048E   2???           01067     call    Switch_Lines
048F   0833           01068     movf    op_time, W
0490   2???           01069     call    big_number
0491   08C0           01070     movf    huns, F
0492   1903           01071     btfsc   STATUS,Z        ;if huns is zero don't display it
0493   2???           01072     goto    no_huns
                      01073     writeBCD    huns
0494   0840               M             movf    huns, W
0495   3E30               M             addlw   B'00110000'
0496   2???               M             call WR_DATA
0497                  01074 no_huns
0497   08C1           01075     movf    tens, F
0498   1903           01076     btfsc   STATUS,Z        ;if tens is zero don't display it
0499   2???           01077     goto    no_tens
                      01078     writeBCD    tens
049A   0841               M             movf    tens, W
049B   3E30               M             addlw   B'00110000'
049C   2???               M             call WR_DATA
049D                  01079 no_tens
                      01080     writeBCD    ones
049D   0842               M             movf    ones, W
049E   3E30               M             addlw   B'00110000'
049F   2???               M             call WR_DATA
                      01081     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04A0   01B9               M                 clrf    Table_Counter
04A1   0103               M                 clrw
04A2                      M loop_disp
04A2   0839               M         movf    Table_Counter,W
04A3   2???               M                 call    Seconds
04A4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04A5   1903               M                 btfsc   STATUS,Z
04A6   2???               M                 goto    end_disp
04A7   2???               M                 call    WR_DATA
04A8   0AB9               M                 incf    Table_Counter,F
04A9   2???               M                 goto    loop_disp
04AA                      M end_disp
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04AA   0008           01082     return
                      01083 
                      01084 ; Export subroutine
                      01085 ; Exports data from current run to hyperterminal
                      01086 ; reads start time and num_tot/num_ff/num_lf data
04AB                  01087 export
                      01088     printchar   0x7       ;makes a noise on the PC
04AB   3007               M             movlw   0x7
04AC   2???               M             call    writetoPC
                      01089     printchar   0xD       ;go back to left edge
04AD   300D               M             movlw   0xD
04AE   2???               M             call    writetoPC
                      01090     printchar   "T"
04AF   3054               M             movlw   "T"
04B0   2???               M             call    writetoPC
                      01091     printchar   "e"
04B1   3065               M             movlw   "e"
04B2   2???               M             call    writetoPC
                      01092     printchar   "s"
04B3   3073               M             movlw   "s"
04B4   2???               M             call    writetoPC
                      01093     printchar   "t"
04B5   3074               M             movlw   "t"
04B6   2???               M             call    writetoPC
                      01094     printchar   " "
04B7   3020               M             movlw   " "
04B8   2???               M             call    writetoPC
                      01095     printchar   "a"
04B9   3061               M             movlw   "a"
04BA   2???               M             call    writetoPC
                      01096     printchar   "t"
04BB   3074               M             movlw   "t"
04BC   2???               M             call    writetoPC
                      01097     printchar   ":"
04BD   303A               M             movlw   ":"
04BE   2???               M             call    writetoPC
                      01098     printchar   " "
04BF   3020               M             movlw   " "
04C0   2???               M             call    writetoPC
                      01099     printchar   "2"
04C1   3032               M             movlw   "2"
04C2   2???               M             call    writetoPC
                      01100     printchar   "0"
04C3   3030               M             movlw   "0"
04C4   2???               M             call    writetoPC
                      01101     printASC   start_year10
04C5   1283 1303          M             banksel start_year10
04C7   0829               M             movf    start_year10,W
04C8   2???               M             call    writetoPC
                      01102     printASC   start_year1
04C9   1283 1303          M             banksel start_year1
04CB   082A               M             movf    start_year1,W
04CC   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01103     printchar   "/"
04CD   302F               M             movlw   "/"
04CE   2???               M             call    writetoPC
                      01104     printASC   start_month10
04CF   1283 1303          M             banksel start_month10
04D1   082B               M             movf    start_month10,W
04D2   2???               M             call    writetoPC
                      01105     printASC   start_month1
04D3   1283 1303          M             banksel start_month1
04D5   082C               M             movf    start_month1,W
04D6   2???               M             call    writetoPC
                      01106     printchar   "/"
04D7   302F               M             movlw   "/"
04D8   2???               M             call    writetoPC
                      01107     printASC   start_date10
04D9   1283 1303          M             banksel start_date10
04DB   082D               M             movf    start_date10,W
04DC   2???               M             call    writetoPC
                      01108     printASC   start_date1
04DD   1283 1303          M             banksel start_date1
04DF   082E               M             movf    start_date1,W
04E0   2???               M             call    writetoPC
                      01109     printchar   " "
04E1   3020               M             movlw   " "
04E2   2???               M             call    writetoPC
                      01110     printASC   start_hour10
04E3   1283 1303          M             banksel start_hour10
04E5   082F               M             movf    start_hour10,W
04E6   2???               M             call    writetoPC
                      01111     printASC   start_hour1
04E7   1283 1303          M             banksel start_hour1
04E9   0830               M             movf    start_hour1,W
04EA   2???               M             call    writetoPC
                      01112     printchar   ":"
04EB   303A               M             movlw   ":"
04EC   2???               M             call    writetoPC
                      01113     printASC   start_min10
04ED   1283 1303          M             banksel start_min10
04EF   0831               M             movf    start_min10,W
04F0   2???               M             call    writetoPC
                      01114     printASC   start_min1
04F1   1283 1303          M             banksel start_min1
04F3   0832               M             movf    start_min1,W
04F4   2???               M             call    writetoPC
                      01115     newline
                          M             printchar   0xA ;changes line
04F5   300A               M             movlw   0xA
04F6   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04F7   300D               M             movlw   0xD
04F8   2???               M             call    writetoPC
                      01116     printchar   "T"
04F9   3054               M             movlw   "T"
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04FA   2???               M             call    writetoPC
                      01117     printchar   "i"
04FB   3069               M             movlw   "i"
04FC   2???               M             call    writetoPC
                      01118     printchar   "m"
04FD   306D               M             movlw   "m"
04FE   2???               M             call    writetoPC
                      01119     printchar   "e"
04FF   3065               M             movlw   "e"
0500   2???               M             call    writetoPC
                      01120     printchar   ":"
0501   303A               M             movlw   ":"
0502   2???               M             call    writetoPC
                      01121     printchar   " "
0503   3020               M             movlw   " "
0504   2???               M             call    writetoPC
                      01122     printchar   " "
0505   3020               M             movlw   " "
0506   2???               M             call    writetoPC
                      01123     printchar   " "
0507   3020               M             movlw   " "
0508   2???               M             call    writetoPC
                      01124     printchar   " "
0509   3020               M             movlw   " "
050A   2???               M             call    writetoPC
050B   1283 1303      01125     banksel huns
050D   08C0           01126     movf    huns, F
050E   1903           01127     btfsc   STATUS,Z        ;if huns is zero don't display it
050F   2???           01128     goto    nohuns
                      01129     printBCD   huns
0510   1283 1303          M             banksel huns
0512   0840               M             movf    huns, W
0513   3E30               M             addlw   0x30
0514   2???               M             call    writetoPC
0515                  01130 nohuns
0515   1283 1303      01131     banksel tens
0517   08C1           01132     movf    tens, F
0518   1903           01133     btfsc   STATUS,Z        ;if tens is zero don't display it
0519   2???           01134     goto    notens
                      01135     printBCD   tens
051A   1283 1303          M             banksel tens
051C   0841               M             movf    tens, W
051D   3E30               M             addlw   0x30
051E   2???               M             call    writetoPC
051F                  01136 notens
                      01137     printBCD   ones
051F   1283 1303          M             banksel ones
0521   0842               M             movf    ones, W
0522   3E30               M             addlw   0x30
0523   2???               M             call    writetoPC
                      01138     printchar   " "
0524   3020               M             movlw   " "
0525   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01139     printchar   "s"
0526   3073               M             movlw   "s"
0527   2???               M             call    writetoPC
                      01140     printchar   "e"
0528   3065               M             movlw   "e"
0529   2???               M             call    writetoPC
                      01141     printchar   "c"
052A   3063               M             movlw   "c"
052B   2???               M             call    writetoPC
                      01142     newline
                          M             printchar   0xA ;changes line
052C   300A               M             movlw   0xA
052D   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
052E   300D               M             movlw   0xD
052F   2???               M             call    writetoPC
                      01143     printchar   "C"
0530   3043               M             movlw   "C"
0531   2???               M             call    writetoPC
                      01144     printchar   "a"
0532   3061               M             movlw   "a"
0533   2???               M             call    writetoPC
                      01145     printchar   "n"
0534   306E               M             movlw   "n"
0535   2???               M             call    writetoPC
                      01146     printchar   "d"
0536   3064               M             movlw   "d"
0537   2???               M             call    writetoPC
                      01147     printchar   "l"
0538   306C               M             movlw   "l"
0539   2???               M             call    writetoPC
                      01148     printchar   "e"
053A   3065               M             movlw   "e"
053B   2???               M             call    writetoPC
                      01149     printchar   "s"
053C   3073               M             movlw   "s"
053D   2???               M             call    writetoPC
                      01150     printchar   ":"
053E   303A               M             movlw   ":"
053F   2???               M             call    writetoPC
                      01151     printchar   " "
0540   3020               M             movlw   " "
0541   2???               M             call    writetoPC
                      01152     printchar   " "
0542   3020               M             movlw   " "
0543   2???               M             call    writetoPC
                      01153     printchar   " "
0544   3020               M             movlw   " "
0545   2???               M             call    writetoPC
                      01154     printchar   " "
0546   3020               M             movlw   " "
0547   2???               M             call    writetoPC
                      01155     printchar   " "
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0548   3020               M             movlw   " "
0549   2???               M             call    writetoPC
                      01156     printchar   " "
054A   3020               M             movlw   " "
054B   2???               M             call    writetoPC
                      01157     printBCD    num_tot
054C   1283 1303          M             banksel num_tot
054E   0834               M             movf    num_tot, W
054F   3E30               M             addlw   0x30
0550   2???               M             call    writetoPC
                      01158     newline
                          M             printchar   0xA ;changes line
0551   300A               M             movlw   0xA
0552   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0553   300D               M             movlw   0xD
0554   2???               M             call    writetoPC
                      01159     printchar   "L"
0555   304C               M             movlw   "L"
0556   2???               M             call    writetoPC
                      01160     printchar   "E"
0557   3045               M             movlw   "E"
0558   2???               M             call    writetoPC
                      01161     printchar   "D"
0559   3044               M             movlw   "D"
055A   2???               M             call    writetoPC
                      01162     printchar   " "
055B   3020               M             movlw   " "
055C   2???               M             call    writetoPC
                      01163     printchar   "f"
055D   3066               M             movlw   "f"
055E   2???               M             call    writetoPC
                      01164     printchar   "a"
055F   3061               M             movlw   "a"
0560   2???               M             call    writetoPC
                      01165     printchar   "i"
0561   3069               M             movlw   "i"
0562   2???               M             call    writetoPC
                      01166     printchar   "l"
0563   306C               M             movlw   "l"
0564   2???               M             call    writetoPC
                      01167     printchar   ":"
0565   303A               M             movlw   ":"
0566   2???               M             call    writetoPC
                      01168     printchar   " "
0567   3020               M             movlw   " "
0568   2???               M             call    writetoPC
                      01169     printchar   " "
0569   3020               M             movlw   " "
056A   2???               M             call    writetoPC
                      01170     printchar   " "
056B   3020               M             movlw   " "
056C   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01171     printchar   " "
056D   3020               M             movlw   " "
056E   2???               M             call    writetoPC
                      01172     printchar   " "
056F   3020               M             movlw   " "
0570   2???               M             call    writetoPC
                      01173     printBCD    num_LF
0571   1283 1303          M             banksel num_LF
0573   0835               M             movf    num_LF, W
0574   3E30               M             addlw   0x30
0575   2???               M             call    writetoPC
                      01174     newline
                          M             printchar   0xA ;changes line
0576   300A               M             movlw   0xA
0577   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0578   300D               M             movlw   0xD
0579   2???               M             call    writetoPC
                      01175     printchar   "F"
057A   3046               M             movlw   "F"
057B   2???               M             call    writetoPC
                      01176     printchar   "l"
057C   306C               M             movlw   "l"
057D   2???               M             call    writetoPC
                      01177     printchar   "i"
057E   3069               M             movlw   "i"
057F   2???               M             call    writetoPC
                      01178     printchar   "c"
0580   3063               M             movlw   "c"
0581   2???               M             call    writetoPC
                      01179     printchar   "k"
0582   306B               M             movlw   "k"
0583   2???               M             call    writetoPC
                      01180     printchar   "e"
0584   3065               M             movlw   "e"
0585   2???               M             call    writetoPC
                      01181     printchar   "r"
0586   3072               M             movlw   "r"
0587   2???               M             call    writetoPC
                      01182     printchar   " "
0588   3020               M             movlw   " "
0589   2???               M             call    writetoPC
                      01183     printchar   "f"
058A   3066               M             movlw   "f"
058B   2???               M             call    writetoPC
                      01184     printchar   "a"
058C   3061               M             movlw   "a"
058D   2???               M             call    writetoPC
                      01185     printchar   "i"
058E   3069               M             movlw   "i"
058F   2???               M             call    writetoPC
                      01186     printchar   "l"
0590   306C               M             movlw   "l"
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0591   2???               M             call    writetoPC
                      01187     printchar   ":"
0592   303A               M             movlw   ":"
0593   2???               M             call    writetoPC
                      01188     printchar   " "
0594   3020               M             movlw   " "
0595   2???               M             call    writetoPC
                      01189     printBCD    num_FF
0596   1283 1303          M             banksel num_FF
0598   0836               M             movf    num_FF, W
0599   3E30               M             addlw   0x30
059A   2???               M             call    writetoPC
                      01190     newline
                          M             printchar   0xA ;changes line
059B   300A               M             movlw   0xA
059C   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
059D   300D               M             movlw   0xD
059E   2???               M             call    writetoPC
                      01191     newline
                          M             printchar   0xA ;changes line
059F   300A               M             movlw   0xA
05A0   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05A1   300D               M             movlw   0xD
05A2   2???               M             call    writetoPC
05A3   1283           01192     bcf STATUS,RP0
05A4   1303           01193     bcf STATUS,RP1     ; back to bank 0
05A5   0008           01194     return
                      01195 
                      01196 
                      01197 ;***************************************
                      01198 ; GENERAL PURPOSE SUBROUTINES
                      01199 ;***************************************
                      01200 
                      01201 ; DISPLAY BIG NUMBER SUBROUTINE
                      01202 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01203 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01204 ; Uses "shift and add 3" algorithm
05A6                  01205 big_number
                      01206     movff   op_time, op_time_save         ;save the original op_time
05A6   0833               M         movf    op_time, W
05A7   00BF               M         movwf   op_time_save
                      01207     movlf   8, bignumcount                ;will shift 8 times
05A8   3008               M         movlw   8
05A9   00C3               M         movwf   bignumcount
05AA   01C0           01208     clrf    huns
05AB   01C1           01209     clrf    tens
05AC   01C2           01210     clrf    ones
                      01211 
05AD                  01212 BCDadd3                             ; if any digit > 5, add3
05AD   3005           01213     movlw   0x5
05AE   0240           01214     subwf   huns, W
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05AF   1803           01215     btfsc   STATUS, C
05B0   2???           01216     call    add3huns
                      01217 
05B1   3005           01218     movlw   0x5
05B2   0241           01219     subwf   tens, W
05B3   1803           01220     btfsc   STATUS, C
05B4   2???           01221     call    add3tens
                      01222 
05B5   3005           01223     movlw   0x5
05B6   0242           01224     subwf   ones, W
05B7   1803           01225     btfsc   STATUS, C
05B8   2???           01226     call    add3ones
                      01227 
05B9   03C3           01228     decf    bignumcount, 1
05BA   1003           01229     bcf     STATUS, C
05BB   0DB3           01230     rlf     op_time, 1              ; shift
05BC   0DC2           01231     rlf     ones, 1
05BD   1A42           01232     btfsc   ones,4 ;
05BE   2???           01233     call    carryones               ; carry if too large
05BF   0DC1           01234     rlf     tens, 1
                      01235 
05C0   1A41           01236     btfsc   tens,4 ;
05C1   2???           01237     call    carrytens
05C2   0DC0           01238     rlf     huns,1
05C3   1003           01239     bcf     STATUS, C
                      01240 
05C4   0843           01241     movf    bignumcount, W
05C5   1D03           01242     btfss   STATUS, Z
05C6   2???           01243     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01244 
                      01245     movff    op_time_save, op_time     ;restore the original op_time
05C7   083F               M         movf    op_time_save, W
05C8   00B3               M         movwf   op_time
05C9   0008           01246     return
                      01247 
05CA                  01248 add3huns
05CA   3003           01249     movlw 0x3
05CB   07C0           01250     addwf huns,F
05CC   0008           01251     return
05CD                  01252 add3tens
05CD   3003           01253     movlw 0x3
05CE   07C1           01254     addwf tens,F
05CF   0008           01255     return
05D0                  01256 add3ones
05D0   3003           01257     movlw 0x3
05D1   07C2           01258     addwf ones,F
05D2   0008           01259     return
05D3                  01260 carryones
05D3   1242           01261     bcf ones, 4
05D4   1403           01262     bsf STATUS, C
05D5   0008           01263     return
05D6                  01264 carrytens
05D6   1241           01265     bcf tens, 4
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05D7   1403           01266     bsf STATUS, C
05D8   0008           01267     return
                      01268 
                      01269 
                      01270 ;***************************************
                      01271 ; DELAY SUBROUTINES
                      01272 ;***************************************
                      01273 
                      01274 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01275 ; Delays exactly 0.5sec
05D9                  01276 HalfS
                      01277       movlf 0x8A, delH
05D9   308A               M         movlw   0x8A
05DA   00BC               M         movwf   delH
                      01278       movlf 0xBA, delM
05DB   30BA               M         movlw   0xBA
05DC   00BD               M         movwf   delM
                      01279       movlf 0x03, delL
05DD   3003               M         movlw   0x03
05DE   00BE               M         movwf   delL
05DF                  01280 HalfS_0
05DF   0BBC           01281       decfsz    delH, F
05E0   2???           01282           goto  $+2
05E1   0BBD           01283           decfsz        delM, F
05E2   2???           01284           goto  $+2
05E3   0BBE           01285           decfsz        delL, F
05E4   2???           01286           goto  HalfS_0
                      01287 
05E5   2???           01288           goto  $+1
05E6   0000           01289           nop
05E7   0008           01290           return
                      01291 
                      01292 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01293 ; Useful for LCD because PIC is way faster than it can handle
                      01294 ; Delays exactly 5ms
05E8                  01295 delay5ms
                      01296         movlf   0xC3, delH
05E8   30C3               M         movlw   0xC3
05E9   00BC               M         movwf   delH
                      01297         movlf   0x0A, delL
05EA   300A               M         movlw   0x0A
05EB   00BE               M         movwf   delL
05EC                  01298 Delay_0
05EC   0BBC           01299         decfsz  delH, f
05ED   2???           01300         goto    $+2
05EE   0BBE           01301         decfsz  delL, f
05EF   2???           01302         goto    Delay_0
05F0   0008           01303     return
                      01304 
                      01305 ; MOTOR DELAY SUBROUTINE.
                      01306 ; Delays ~10ms for the motor. Also checks IRDATA and sets PRESENT if there is a candle
05F1                  01307 motor_del
                      01308       movlf 0xF3, delH
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05F1   30F3               M         movlw   0xF3
05F2   00BC               M         movwf   delH
                      01309       movlf 0x2F, delL
05F3   302F               M         movlw   0x2F
05F4   00BE               M         movwf   delL
05F5                  01310 motor_del_0
                      01311       ;btfsc     IRDATA
                      01312       ;bsf       present, 0
05F5   0BBC           01313       decfsz    delH, F
05F6   2???           01314           goto      $+2
05F7   0BBE           01315           decfsz        delL, F
05F8   2???           01316           goto      motor_del_0
05F9   0008           01317           return
                      01318 
                      01319 ;***************************************
                      01320 ; LCD SUBROUTINES (from sample code)
                      01321 ;***************************************
                      01322 
                      01323 ; Initialize the LCD
05FA                  01324 InitLCD
05FA   1283 1303      01325         banksel     PORTD       ;bank0
05FC   1588           01326         bsf     E     ;E default high
                      01327 
                      01328         ;Wait for LCD POR to finish (~15ms)
05FD   2???           01329         call delay5ms
05FE   2???           01330         call delay5ms
05FF   2???           01331         call delay5ms
                      01332 
                      01333         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01334         ; -> Send b'0011' 3 times
0600   3033           01335         movlw   b'00110011'
0601   2???           01336         call    WR_INS
0602   2???           01337         call    delay5ms
0603   2???           01338         call    delay5ms
0604   3032           01339         movlw   b'00110010'
0605   2???           01340         call    WR_INS
0606   2???           01341         call    delay5ms
0607   2???           01342         call    delay5ms
                      01343 
                      01344         ; 4 bits, 2 lines, 5x7 dots
0608   3028           01345         movlw   b'00101000'
0609   2???           01346         call    WR_INS
060A   2???           01347         call    delay5ms
060B   2???           01348         call    delay5ms
                      01349 
                      01350         ; display on/off
060C   300C           01351         movlw   b'00001100'
060D   2???           01352         call    WR_INS
060E   2???           01353         call delay5ms
060F   2???           01354         call delay5ms
                      01355 
                      01356         ; Entry mode
0610   3006           01357         movlw   b'00000110'
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0611   2???           01358         call    WR_INS
0612   2???           01359         call    delay5ms
0613   2???           01360         call    delay5ms
                      01361 
                      01362         ; Clear ram
0614   3001           01363         movlw   b'00000001'
0615   2???           01364         call    WR_INS
0616   2???           01365         call    delay5ms
0617   2???           01366         call    delay5ms
0618   0008           01367         return
                      01368 
                      01369 ; Clear the display
0619                  01370 Clear_Display
0619   3001           01371                 movlw   B'00000001'
061A   2???           01372                 call    WR_INS
061B   0008           01373                 return
                      01374 
                      01375 ;Switch lines
061C                  01376 Switch_Lines
061C   30C0           01377                 movlw   B'11000000'
061D   2???           01378                 call    WR_INS
061E   0008           01379                 return
                      01380 
                      01381 ; Write an instruction to the LCD (see page 7-104)
                      01382 ; The instruction must be in W; must be in bank0
061F                  01383 WR_INS
061F   1108           01384         bcf             RS                              ;clear RS
0620   00BA           01385         movwf   com                             ;W --> com
0621   39F0           01386         andlw   0xF0                    ;mask 4 bits MSB w = X0
0622   0088           01387         movwf   PORTD                   ;Send 4 bits MSB
0623   1588           01388         bsf             E                               ;
0624   2???           01389         call    delay5ms        ;__    __
0625   1188           01390         bcf             E                               ;  |__|
0626   0E3A           01391         swapf   com,w
0627   39F0           01392         andlw   0xF0                    ;1111 0010
0628   0088           01393         movwf   PORTD                   ;send 4 bits LSB
0629   1588           01394         bsf             E                               ;
062A   2???           01395         call    delay5ms        ;__    __
062B   1188           01396         bcf             E                               ;  |__|
062C   2???           01397         call    delay5ms
062D   0008           01398         return
                      01399 
                      01400 ; Write data at current cursor location
                      01401 ; Character code (see page 7-104) must be in W; must be in bank0
062E                  01402 WR_DATA
062E   1508           01403         bsf             RS
062F   00BB           01404         movwf   dat
0630   083B           01405         movf    dat,w   ;what? why?
0631   39F0           01406         andlw   0xF0
0632   3E04           01407         addlw   4
0633   0088           01408         movwf   PORTD
0634   1588           01409         bsf             E                               ;
0635   2???           01410         call    delay5ms        ;__    __
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0636   1188           01411         bcf             E                               ;  |__|
0637   0E3B           01412         swapf   dat,w
0638   39F0           01413         andlw   0xF0
0639   3E04           01414         addlw   4
063A   0088           01415         movwf   PORTD
063B   1588           01416         bsf             E                               ;
063C   2???           01417         call    delay5ms        ;__    __
063D   1188           01418         bcf             E                               ;  |__|
063E   0008           01419         return
                      01420 
                      01421 
                      01422 ;***************************************
                      01423 ; PC INTERFACE SUBROUTINES (from sample code)
                      01424 ;***************************************
063F                  01425 InitUSART
                      01426 ;end up in bank1!
063F   1683 1303      01427         banksel SPBRG            ;  bank 1
0641   300F           01428         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0642   0099           01429         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0643   0198           01430         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01431 
0644   1283 1303      01432         banksel   RCSTA          ; bank 0
0646   1798           01433         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0647   1618           01434         bsf       RCSTA,CREN     ; continuous receive
                      01435 
0648   1683 1303      01436         banksel   TXSTA          ;  bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064A   1698           01437         bsf       TXSTA,TXEN     ; Transmit enable
064B   0008           01438         return
                      01439 
                      01440 
064C                  01441 writetoPC
                      01442 ; Writes the data in W to the PC
                      01443 ; end up in bank1!
064C   1283 1303      01444         banksel   TXREG          ; bank 0
064E   0099           01445         movwf     TXREG          ; Send contents of W to RS232
064F   1683 1303      01446         banksel   TXSTA          ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0651   1C98           01447         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0652   2???           01448         goto      $-1
0653   0008           01449         return
                      01450 
                      01451 
                      01452 ;***************************************
                      01453 ; ISR
                      01454 ; Currently only care about TMR0
                      01455 ; TMR0 overflows at 256*256; each time, decrement count38
                      01456 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01457 ; When this hapens, op_time increments
                      01458 ; Also check photodata every time for 2 sec = total of 76 reads
                      01459 ;***************************************
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0654                  01460 isr
0654   00F9           01461     movwf   w_isr           ;save W and status
0655   0E03           01462     swapf   STATUS, W
0656   0183           01463     clrf    STATUS
0657   00FA           01464     movwf   status_isr
                      01465 ;    movf    PCLATH, W      ;if using pages
                      01466 ;    movwf   pclath_isr
                      01467 ;    clrf    PCLATH
                      01468 
                      01469 ;check_emergstop
                      01470 ;    btfss   INTCON, INTF
                      01471 ;    goto    not_emergstop
                      01472 ;    call    Clear_Display
                      01473 ;    Display None
                      01474 ;suspend
                      01475 ;         btfss         PORTB,1     ;Wait until data is available from the keypad
                      01476 ;         goto          suspend
                      01477 ;         swapf         PORTB,W     ;Read PortB<7:4> into W<3:0>
                      01478 ;         andlw         0x0F
                      01479 ;         xorlw      0xC         ;Will be all zeros if its "START"
                      01480 ;         btfsc      STATUS,Z    ;and Z will be high, so skip if not high
                      01481 ;         goto       resume
                      01482 ;         btfsc         PORTB,1     ;Wait until key is released
                      01483 ;         goto          $-1
                      01484 ;         goto       suspend
                      01485 ;resume
                      01486 ;    call    Clear_Display
                      01487 ;    Display Start_Msg
                      01488 ;    bcf     INTCON, INTF
                      01489 ;    goto    end_isr
                      01490 
0658                  01491 not_emergstop
0658   0BC4           01492     decfsz  count38, F     ;if count38 gets to 38 it's been one second
0659   2???           01493     goto    end_isr
                      01494     movlf   D'38', count38  ;so reset count38
065A   3026               M         movlw   D'38'
065B   00C4               M         movwf   count38
065C   0AB3           01495     incf    op_time, F         ; and increment op_time
065D   1889           01496     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
065E   0AC6           01497     incf    photocount, F       ;if it is 1, light is on so photocount++
065F   110B           01498     bcf     INTCON, T0IF
                      01499 
0660                  01500 end_isr
                      01501 ;    movf    pclath_isr, W  ;if using pages
                      01502 ;    movwf    PCLATH
0660   0E7A           01503     swapf   status_isr, W   ;restore W and status
0661   0083           01504     movwf   STATUS
0662   0EF9           01505     swapf   w_isr, F
0663   0E79           01506     swapf   w_isr, W
                      01507  
                      01508 
0664   0009           01509     retfie
                      01510 
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01511 
3F72                  01512     END
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005AD
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000619
D                                 00000005
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           000005EC
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000005D9
HalfS_0                           000005DF
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           000005FA
InitUSART                         0000063F
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000323
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      0000061C
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           0000062E
WR_INS                            0000061F
Z                                 00000002
_.org_1_0174                      00000174
_.org_1_01C5                      000001C5
_.org_1_01EC                      000001EC
_.org_1_020C                      0000020C
_.org_1_0211                      00000211
_.org_1_022A                      0000022A
_.org_1_0290                      00000290
_.org_1_0300                      00000300
_.org_1_0321                      00000321
_.org_1_05E0                      000005E0
_.org_1_05E2                      000005E2
_.org_1_05E5                      000005E5
_.org_1_05ED                      000005ED
_.org_1_05F6                      000005F6
_.org_1_0652                      00000652
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
add3huns                          000005CA
add3ones                          000005D0
add3tens                          000005CD
badkey                            0000028F
badkeyagain                       00000320
big_number                        000005A6
bignumcount                       00000043
candle_index                      00000045
carryones                         000005D3
carrytens                         000005D6
check_1                           00000342
check_2                           0000034B
check_3                           00000355
check_4                           0000035F
check_5                           00000369
check_6                           00000373
check_7                           0000037D
check_8                           00000387
check_9                           00000391
check_FF                          00000469
check_LED                         000003E8
check_LF                          0000044E
check_defective                   000003A1
check_done                        0000027E
check_export                      000003AD
check_flick                       000003F7
check_for_fail                    0000046C
check_immapeace                   0000030F
check_log1                        0000022E
check_log2                        00000236
check_log3                        0000023F
check_log4                        00000248
check_log5                        00000251
check_log6                        0000025A
check_log7                        00000263
check_log8                        0000026C
check_log9                        00000275
check_next                        00000472
check_none                        000003CB
check_nothx                       0000030A
check_pass                        000003D9
check_standby                     000003B3
check_start                       000003C4
check_summary                     0000039B
check_time                        000003A7
check_wanna                       00000304
com                               0000003A
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

count38                           00000044
dat                               0000003B
default_key                       000003C9
default_state                     00000406
defective                         00000435
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          000005E8
display_log                       00000292
display_state                     000003CA
end_check_fail                    00000482
end_isr                           00000660
end_operation                     000001B0
export                            000004AB
huns                              00000040
i2c_common_setup                  00000000
information                       00000341
init                              000000E7
isr                               00000654
keytemp                           00000037
logs                              00000213
motor_count                       00000048
motor_del                         000005F1
motor_del_0                       000005F5
movff                             
movlf                             
newline                           
no_huns                           00000497
no_log                            000002AA
no_tens                           0000049D
nohuns                            00000515
not_emergstop                     00000658
notens                            0000051F
now_FF                            00000450
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000046
photoval                          00000047
poll                              0000020B
polling                           00000229
printASC                          
printBCD                          
printchar                         
read_EEPROM                       00000295
read_rtc                          00000000
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
MPASM 5.55                          MAIN.ASM   3-19-2014  17:24:57         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

rtc_set                           
shiftlogs                         000001BC
shiftlogs_0                       000001C0
spacebar                          
start                             00000176
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000325
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           00000407
tens                              00000041
threshold1                        D'7'
threshold2                        D'69'
time                              00000483
w_isr                             00000079
waiting                           0000010E
wanna_export                      000002FF
writeASC                          
writeBCD                          
write_log1                        000001E2
write_log1_0                      000001E9
write_rtc                         00000000
writechar                         
writetoPC                         0000064C
yes_log                           000002B6

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

