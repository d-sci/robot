MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; GO-GO-GADGET CANDLELIGHT!
                      00002 ; David Simons 996639124
                      00003 ; AER201 Spring 2014
                      00004 ; Written for PIC16F877 on DevBugger
                      00005 
                      00006 ;***************************************
                      00007 ;               CONTENTS
                      00008 ;
                      00009 ; Configuration                     30
                      00010 ; Definions                         37
                      00011 ; Variables                         48
                      00012 ; Macros                            109
                      00013 ; Vectors                           188
                      00014 ; Tables                            198
                      00015 ; Main program                      256
                      00016 ;   Standby                         288
                      00017 ;   Actual operation                361
                      00018 ;   End of operation                451
                      00019 ;   Data display interface          534
                      00020 ;   Logs interface                  546
                      00021 ; Motor routines                    765
                      00022 ; Data display routines             837
                      00023 ; General purpose subroutines       1254
                      00024 ; Delay subroutines                 1328
                      00025 ; LCD subroutines                   1377
                      00026 ; PC interface subroutines          1480
                      00027 ; ISR                               1509
                      00028 ;***************************************
                      00029 
                      00030    list p=16f877                   ; list directive to define processor
                      00031       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00032       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00033 
                      00034       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063         call    rtc_convert   
                      00064         endm
                      00035 
                      00036 ;***************************************
                      00037 ; DEFINITIONS
                      00038 ;***************************************
                      00039     #define     RS          PORTD,2
                      00040         #define E           PORTD,3
                      00041     #define threshold1  D'2'
                      00042     #define threshold2  D'151'
                      00043     #define IRDATA      PORTE, 0
                      00044     #define PHOTODATA   PORTE, 1
                      00045 
                      00046 
                      00047 ;***************************************
                      00048 ; VARIABLES
                      00049 ;***************************************
                      00050 
                      00051 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00052 
                      00053     cblock      0x20        ;bank0 variables
                      00054     ; Important information (will be displayed)
  00000020            00055         state1     ;where   0 = none      1 = pass
  00000021            00056         state2     ;        2 = led fail  3 = flicker fail
  00000022            00057         state3
  00000023            00058         state4
  00000024            00059         state5
  00000025            00060         state6
  00000026            00061         state7
  00000027            00062         state8
  00000028            00063         state9
  00000029            00064         start_year10    ;starting time (for log)
  0000002A            00065         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00066         start_month10
  0000002C            00067         start_month1
  0000002D            00068         start_date10
  0000002E            00069         start_date1
  0000002F            00070         start_hour10
  00000030            00071         start_hour1
  00000031            00072         start_min10
  00000032            00073         start_min1
  00000033            00074         op_time     ;BCD in seconds
  00000034            00075         num_tot     ;BCD
  00000035            00076         num_LF      ;BCD
  00000036            00077         num_FF      ;BCD
                      00078 ; For general program / interface: temps, counters, etc.
  00000037            00079         keytemp         ; for data display mode
  00000038            00080         statetemp
  00000039            00081                 Table_Counter   ; for LCD stuff
  0000003A            00082                 com
  0000003B            00083                 dat
  0000003C            00084         delH            ;for delay 0.5s routine
  0000003D            00085         delM
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003E            00086         delL
  0000003F            00087         op_time_save    ;for big_number routine
  00000040            00088         huns
  00000041            00089         tens
  00000042            00090         ones
  00000043            00091         bignumcount
  00000044            00092         count76         ;for isr
  00000045            00093         morethansix     ;for displaying defective
                      00094 ; For machine program: temps, counters, etc.
  00000046            00095         candle_index
  00000047            00096         photocount      ;for testing candle
  00000048            00097         photoval
  00000049            00098         motor_count     ;for rotate
  0000004A            00099         startfrom3      ;for rotate troubleshooting
                      00100     endc
                      00101 
                      00102     cblock  0x79        ;stuff that needs to be in all banks (for ISR)
  00000079            00103         w_isr
  0000007A            00104         status_isr
                      00105         endc
                      00106 
                      00107 
                      00108 ;***************************************
                      00109 ; MACROS
                      00110 ;***************************************
                      00111 
                      00112 ; Display a msg on LCD
                      00113 Display macro   Message
                      00114                 local   loop_disp
                      00115                 local   end_disp
                      00116                 clrf    Table_Counter
                      00117                 clrw
                      00118 loop_disp
                      00119         movf    Table_Counter,W
                      00120                 call    Message
                      00121                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00122                 btfsc   STATUS,Z
                      00123                 goto    end_disp
                      00124                 call    WR_DATA
                      00125                 incf    Table_Counter,F
                      00126                 goto    loop_disp
                      00127 end_disp
                      00128                 endm
                      00129 
                      00130 
                      00131 ;Shortcuts for moving literals / registers
                      00132 movlf   macro   l, f
                      00133         movlw   l
                      00134         movwf   f
                      00135         endm
                      00136 
                      00137 movff   macro   source, dest
                      00138         movf    source, W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139         movwf   dest
                      00140         endm
                      00141 
                      00142 ; Write to LCD (all in bank0 please)
                      00143 writeBCD    macro   reg             ;from a register containing BCD
                      00144             movf    reg, W
                      00145             addlw   B'00110000'
                      00146             call WR_DATA
                      00147             endm
                      00148 
                      00149 writechar   macro   asc             ;ASCII code literal (or in "")
                      00150             movlw   asc
                      00151             call    WR_DATA
                      00152             endm
                      00153 
                      00154 writeASC        macro   reg         ;from a register containing ASCII
                      00155             movf    reg, W
                      00156             call WR_DATA
                      00157             endm
                      00158 
                      00159 spacebar    macro                   ; move LCD over 1 space
                      00160             movlw   B'00010100'
                      00161             call    WR_INS
                      00162             endm
                      00163 
                      00164 ;Print to PC (hyperterminal). Any bank OK
                      00165 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00166             movlw   char
                      00167             call    writetoPC
                      00168             endm
                      00169 
                      00170 printASC    macro   reg            ;ASCII code inside a register
                      00171             banksel reg
                      00172             movf    reg,W
                      00173             call    writetoPC
                      00174             endm
                      00175 
                      00176 printBCD    macro   BCD            ;BCD inside a register
                      00177             banksel BCD
                      00178             movf    BCD, W
                      00179             addlw   0x30
                      00180             call    writetoPC
                      00181             endm
                      00182 
                      00183 newline     macro                  ;new line on computer
                      00184             printchar   0xA ;changes line
                      00185             printchar   0xD ;goes back to left margin
                      00186             endm
                      00187 ;***************************************
                      00188 ; VECTORS
                      00189 ;***************************************
                      00190 
                      00191     ORG       0x000
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000   2???           00192          goto      init
                      00193     ORG       0x004
0004   2???           00194         goto    isr
                      00195 
                      00196 
                      00197 ;***************************************
                      00198 ; TABLES (MESSAGES)
                      00199 ;***************************************
0005                  00200 Standby_Msg
0005   0782           00201                 addwf   PCL,F
0006   3453 3454 3441 00202                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00203 Start_Msg
000E   0782           00204         addwf   PCL,F
000F   3449 346E 3473 00205         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00206 End_Msg
0020   0782           00207         addwf   PCL,F
0021   3443 346F 346D 00208         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00209 Time_Msg
002A   0782           00210                 addwf   PCL,F
002B   344F 3470 3465 00211                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00212 Seconds
003B   0782           00213         addwf   PCL,F
003C   3420 3473 3465 00214         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00215 Not_present
0045   0782           00216         addwf   PCL,F
0046   343A 3420 344E 00217         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00218 Pass
0054   0782           00219                 addwf   PCL,F
0055   343A 3420 3450 00220                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00221 LED_fail
005C   0782           00222                 addwf   PCL,F
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005D   343A 3420 344C 00223                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00224 Flick_fail
0068   0782           00225                 addwf   PCL,F
0069   343A 3420 3446 00226                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00227 Total_Msg
0078   0782           00228         addwf   PCL,F
0079   3454 346F 3474 00229         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00230 LF
0089   0782           00231         addwf   PCL,F
008A   344C 3446 343A 00232         dt      "LF: ",0
       3420 3400 
008F                  00233 FF
008F   0782           00234         addwf   PCL,F
0090   3446 3446 343A 00235         dt      "FF: ",0
       3420 3400 
0095                  00236 None
0095   0782           00237         addwf   PCL,F
0096   343C 346E 346F 00238         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00239 Logs_Msg1
009D   0782           00240         addwf   PCL,F
009E   3431 342D 3439 00241         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00242 Logs_Msg2
00AE   0782           00243         addwf   PCL,F
00AF   3453 3454 3441 00244         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00245 Logs_Msg3
00BF   0782           00246         addwf   PCL,F
00C0   3445 3478 3470 00247         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C8                  00248 Logs_Msg4
00C8   0782           00249         addwf   PCL,F
00C9   344C 344F 3447 00250         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00251 Op_at
00D8   0782           00252         addwf   PCL,F
00D9   344F 3470 3465 00253         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00254 
                      00255 ;***************************************
                      00256 ; MAIN PROGRAM
                      00257 ;***************************************
                      00258 
00E7                  00259 init
                      00260         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready 
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00261 
00E9   1683 1303      00262         banksel   TRISA                 ; bank 1
                      00263         movlf     b'11000110', OPTION_REG ; 1:128 prescaler for timer
00EB   30C6               M         movlw   b'11000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00264         clrf      TRISA                 ; PortA[3:0] used for motor
                      00265         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00266         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00267         clrf      TRISD                 ; PortD[2:7] is LCD output
                      00268         movlf     b'011', TRISE         ; PortE is IR and PHOTODATA
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00269         movlf     0x07, ADCON1          ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00270 
00F7   1283           00271         bcf       STATUS,RP0        ; select bank 0
00F8   0185           00272         clrf      PORTA
00F9   0186           00273         clrf      PORTB
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FA   0187           00274         clrf      PORTC
00FB   0188           00275         clrf      PORTD
00FC   0189           00276         clrf      PORTE
                      00277 
00FD   2???           00278         call      i2c_common_setup  ;Set up I2C for communication. End in bank1
00FE   2???           00279         call      InitLCD           ;Initialize the LCD. End in bank0
00FF   2???           00280         call      InitUSART         ;Set up USART for RS232. End in bank1
                      00281 
0100   1283           00282         bcf       STATUS,RP0        ;Back to bank0
                      00283 
                      00284         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0101   01B9               M                 clrf    Table_Counter
0102   0103               M                 clrw
0103                      M loop_disp
0103   0839               M         movf    Table_Counter,W
0104   2???               M                 call    Standby_Msg
0105   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0106   1903               M                 btfsc   STATUS,Z
0107   2???               M                 goto    end_disp
0108   2???               M                 call    WR_DATA
0109   0AB9               M                 incf    Table_Counter,F
010A   2???               M                 goto    loop_disp
010B                      M end_disp
010B   2???           00285         call    Switch_Lines
                      00286 
                      00287  ;--------------------------------------------------
                      00288  ;      STANDBY MODE
                      00289 
010C                  00290 waiting
                      00291         ; Display date and time.
                      00292         ; Also save starting time for log (will stop updating once we start)
                      00293         writechar "2"           ;First line shows 20**/**/**
010C   3032               M             movlw   "2"
010D   2???               M             call    WR_DATA
                      00294         writechar "0"
010E   3030               M             movlw   "0"
010F   2???               M             call    WR_DATA
                      00295         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0110   3006               M         movlw   0x06
0111   1283 1303          M         banksel 0x73
0113   00F3               M         movwf   0x73
0114   2???               M         call    read_rtc
0115   1283 1303          M         banksel 0x75
0117   0875               M         movf    0x75,w
0118   2???               M         call    rtc_convert   
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0119   0877           00296                 movf    0x77,W
011A   00A9           00297         movwf    start_year10   ;Save starting year dig10
011B   2???           00298                 call    WR_DATA
011C   0878           00299                 movf    0x78,W
011D   00AA           00300         movwf    start_year1    ;Save starting year dig1
011E   2???           00301                 call    WR_DATA
                      00302                 writechar "/"
011F   302F               M             movlw   "/"
0120   2???               M             call    WR_DATA
                      00303                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0121   3005               M         movlw   0x05
0122   1283 1303          M         banksel 0x73
0124   00F3               M         movwf   0x73
0125   2???               M         call    read_rtc
0126   1283 1303          M         banksel 0x75
0128   0875               M         movf    0x75,w
0129   2???               M         call    rtc_convert   
012A   0877           00304                 movf    0x77,W
012B   00AB           00305         movwf    start_month10  ;Save starting month dig10
012C   2???           00306                 call    WR_DATA
012D   0878           00307                 movf    0x78,W
012E   00AC           00308         movwf    start_month1   ;Save starting month dig1
012F   2???           00309                 call    WR_DATA
                      00310                 writechar       "/"
0130   302F               M             movlw   "/"
0131   2???               M             call    WR_DATA
                      00311                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0132   3004               M         movlw   0x04
0133   1283 1303          M         banksel 0x73
0135   00F3               M         movwf   0x73
0136   2???               M         call    read_rtc
0137   1283 1303          M         banksel 0x75
0139   0875               M         movf    0x75,w
013A   2???               M         call    rtc_convert   
013B   0877           00312                 movf    0x77,W
013C   00AD           00313         movwf    start_date10   ;Save starting date dig10
013D   2???           00314                 call    WR_DATA
013E   0878           00315                 movf    0x78,W
013F   00AE           00316         movwf    start_date1    ;Save starting date dig1
0140   2???           00317                 call    WR_DATA
                      00318                 spacebar
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0141   3014               M             movlw   B'00010100'
0142   2???               M             call    WR_INS
                      00319                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0143   3002               M         movlw   0x02
0144   1283 1303          M         banksel 0x73
0146   00F3               M         movwf   0x73
0147   2???               M         call    read_rtc
0148   1283 1303          M         banksel 0x75
014A   0875               M         movf    0x75,w
014B   2???               M         call    rtc_convert   
014C   0877           00320                 movf    0x77,W
014D   00AF           00321         movwf    start_hour10   ;Save starting hour dig10
014E   2???           00322                 call    WR_DATA
014F   0878           00323                 movf    0x78,W
0150   00B0           00324         movwf    start_hour1    ;Save starting hour dig1
0151   2???           00325                 call    WR_DATA
                      00326                 writechar ":"
0152   303A               M             movlw   ":"
0153   2???               M             call    WR_DATA
                      00327                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0154   3001               M         movlw   0x01
0155   1283 1303          M         banksel 0x73
0157   00F3               M         movwf   0x73
0158   2???               M         call    read_rtc
0159   1283 1303          M         banksel 0x75
015B   0875               M         movf    0x75,w
015C   2???               M         call    rtc_convert   
015D   0877           00328                 movf    0x77,W
015E   00B1           00329         movwf    start_min10    ;Save starting min dig10
015F   2???           00330                 call    WR_DATA
0160   0878           00331                 movf    0x78,W
0161   00B2           00332         movwf    start_min1     ;Save starting min dig1
0162   2???           00333                 call    WR_DATA
                      00334 
                      00335         ; Move cursor back to start of second line
                      00336         ; We will update displayed time but not the word "STANDBY"
0163   30C0           00337         movlw   B'11000000'
0164   2???           00338         call    WR_INS
                      00339 
                      00340         ;Poll to start (will have to hold key for ~0.5sec)
0165   1C86           00341          btfss          PORTB,1     ;Wait until data is available from the keypad
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0166   2???           00342          goto           waiting
                      00343 
0167   0E06           00344          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0168   390F           00345          andlw          0x0F
0169   00B7           00346          movwf      keytemp
016A   3A0C           00347          xorlw      0xC         ;Will be all zeros if its "START"
016B   1903           00348          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016C   2???           00349          goto       start
                      00350 
016D   0837           00351          movf       keytemp,W   ;Go to log interface
016E   3A0E           00352          xorlw      0xE
016F   1903           00353          btfsc      STATUS,Z
0170   2???           00354          goto       logs
                      00355 
0171   1886           00356          btfsc          PORTB,1     ;Wait until key is released
0172   2???           00357          goto           $-1
0173   2???           00358          goto       waiting
                      00359 
                      00360 ;-----------------------------------------------------------
                      00361 ;       ACTUAL OPERATION
                      00362 
0174                  00363 start
                      00364         ;clear numbers
0174   01B6           00365         clrf    num_FF
0175   01B4           00366         clrf    num_tot
0176   01B5           00367         clrf    num_LF
0177   01CA           00368         clrf    startfrom3
                      00369 
                      00370         ;Start the timer
                      00371         movlf       D'38', count76  ;start with half a second (to round)
0178   3026               M         movlw   D'38'
0179   00C4               M         movwf   count76
017A   01B3           00372         clrf        op_time
017B   0181           00373         clrf        TMR0
017C   178B           00374         bsf         INTCON, GIE     ;enable interrupts
                      00375 
                      00376         ;Display starting message
017D   2???           00377         call        Clear_Display
                      00378         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
017E   01B9               M                 clrf    Table_Counter
017F   0103               M                 clrw
0180                      M loop_disp
0180   0839               M         movf    Table_Counter,W
0181   2???               M                 call    Start_Msg
0182   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0183   1903               M                 btfsc   STATUS,Z
0184   2???               M                 goto    end_disp
0185   2???               M                 call    WR_DATA
0186   0AB9               M                 incf    Table_Counter,F
0187   2???               M                 goto    loop_disp
0188                      M end_disp
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00379 
0188   01C6           00380         clrf    candle_index        ; n = 0
0189   1383           00381         bcf     STATUS, IRP
                      00382         movlf   0x1F, FSR           ;pointing at right before state1
018A   301F               M         movlw   0x1F
018B   0084               M         movwf   FSR
                      00383 
018C                  00384 rotate
018C   3009           00385         movlw   d'9'               ; done inspecting once canlex_index (n) = 9
018D   0246           00386         subwf   candle_index,W     ; n is # already tested before rotating
018E   1903           00387         btfsc   STATUS,Z
018F   2???           00388         goto    end_operation
                      00389         movlf    D'5', motor_count
0190   3005               M         movlw   D'5'
0191   00C9               M         movwf   motor_count
0192   2???           00390         call    ROTATEMOTOR         ; rotate 20 steps (full rotation)
0193   0AC6           00391         incf    candle_index, F     ; n++
0194   0A84           00392         incf    FSR, F
                      00393 
0195                  00394 detect_candle
0195   1809           00395    btfsc   IRDATA
0196   2???           00396    goto    test_candle      ;yes candle, go test it
                      00397 
0197   2???           00398    call     first_two       ; two more steps
0198   1809           00399    btfsc    IRDATA
0199   2???           00400    goto     test_candle     ;yes candle, it just lagged 2 steps
019A   2???           00401    call     last_two        ; two more steps
019B   1809           00402    btfsc    IRDATA
019C   2???           00403    goto     test_candle     ;yes candle, it just lagged 4 steps
019D   2???           00404    call     first_two       ; two more steps
019E   1809           00405    btfsc    IRDATA
019F   2???           00406    goto     test_candle     ;yes candle, it just lagged 6 steps
01A0   2???           00407    call     last_two        ; two more steps
01A1   1809           00408    btfsc    IRDATA
01A2   2???           00409    goto     test_candle     ;yes candle, it just lagged 8 steps
                      00410 
                      00411    movlf   D'0',INDF        ;really no candle, keep rotating 12 more steps
01A3   3000               M         movlw   D'0'
01A4   0080               M         movwf   INDF
01A5   3009           00412    movlw   d'9'               ; done inspecting if n=9
01A6   0246           00413    subwf   candle_index,W     
01A7   1903           00414    btfsc   STATUS,Z
01A8   2???           00415    goto    end_operation
                      00416    movlf   D'3', motor_count
01A9   3003               M         movlw   D'3'
01AA   00C9               M         movwf   motor_count
01AB   2???           00417    call    ROTATEMOTOR
01AC   0AC6           00418    incf    candle_index, F    ; n++
01AD   0A84           00419    incf    FSR, F
01AE   2???           00420    goto    detect_candle      ; detect next candle
                      00421 
01AF                  00422 test_candle
01AF   0AB4           00423    incf    num_tot, F                   ; keeping track of total number of candles
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B0   01C7           00424    clrf    photocount
01B1   2???           00425    call    HalfS                ; test for 2 seconds
01B2   2???           00426    call    HalfS
01B3   2???           00427    call    HalfS
01B4   2???           00428    call    HalfS
                      00429    movff   photocount, photoval        ;to ensure it wont change again
01B5   0847               M         movf    photocount, W
01B6   00C8               M         movwf   photoval
01B7                  00430 check_threshold1
01B7   3002           00431     movlw    threshold1
01B8   0248           00432     subwf   photoval, W
01B9   1803           00433     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01BA   2???           00434     goto check_threshold2
                      00435     movlf   D'2', INDF      ; < threshold 1 means led fail
01BB   3002               M         movlw   D'2'
01BC   0080               M         movwf   INDF
01BD   0AB5           00436         incf    num_LF, F
01BE   2???           00437     goto    rotate
01BF                  00438 check_threshold2
01BF   3097           00439     movlw    threshold2
01C0   0248           00440     subwf   photoval, W
01C1   1803           00441     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01C2   2???           00442     goto aboveboth
                      00443     movlf   D'1', INDF      ; < threshold 2 means pass
01C3   3001               M         movlw   D'1'
01C4   0080               M         movwf   INDF
01C5   2???           00444     goto    rotate
01C6                  00445 aboveboth
                      00446     movlf   D'3', INDF       ;else flicker fail
01C6   3003               M         movlw   D'3'
01C7   0080               M         movwf   INDF
01C8   0AB6           00447     incf    num_FF, F
01C9   2???           00448     goto    rotate
                      00449 
                      00450 
01CA                  00451 end_operation
                      00452 
                      00453         movlf   D'5', motor_count
01CA   3005               M         movlw   D'5'
01CB   00C9               M         movwf   motor_count
01CC   2???           00454         call    ROTATEMOTOR ; rotate once more  back to starting position
01CD   138B           00455         bcf         INTCON, GIE  ;disable interrupts to stop timer
                      00456 
                      00457         ;Display "complete"
01CE   2???           00458         call       Clear_Display
                      00459         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01CF   01B9               M                 clrf    Table_Counter
01D0   0103               M                 clrw
01D1                      M loop_disp
01D1   0839               M         movf    Table_Counter,W
01D2   2???               M                 call    End_Msg
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01D4   1903               M                 btfsc   STATUS,Z
01D5   2???               M                 goto    end_disp
01D6   2???               M                 call    WR_DATA
01D7   0AB9               M                 incf    Table_Counter,F
01D8   2???               M                 goto    loop_disp
01D9                      M end_disp
                      00460 
                      00461         ; Shift logs 1-8 -> 2-9
01D9                  00462 shiftlogs
01D9   1283 1703      00463         banksel     EEADR               ; bank 2
                      00464         movlf       D'111', EEADR        ; start shifting from 111->125
01DB   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DC   008D               M         movwf   EEADR
01DD                  00465 shiftlogs_0
01DD   1683 1703      00466         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DF   138C           00467         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E0   140C           00468         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E1   188C           00469         btfsc       EECON1, WR          ; ensure a write is not in progress
01E2   2???           00470         goto        $-1
01E3   1283 1703      00471         banksel     EEADR               ;bank 2
01E5   300E           00472         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E6   078D           00473         addwf       EEADR, F
01E7   1683 1703      00474         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E9   138C           00475         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EA   150C           00476         bsf         EECON1, WREN
01EB   3055           00477         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EC   008D           00478         movwf       EECON2
01ED   30AA           00479         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EE   008D           00480         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EF   148C           00481         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F0   110C           00482         bcf         EECON1, WREN
01F1   1283 1703      00483         banksel     EEADR               ;bank 2
01F3   300E           00484         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F4   020D           00485         subwf       EEADR, W
01F5   1903           00486         btfsc       STATUS, Z
01F6   2???           00487         goto        write_log1          ; if EEADR = 14 we're done 
01F7   1283 1303      00488         banksel op_time             ; for some reason I need to delay here
01F9   2???           00489         call   delay5ms             ; or else I get an infinite loop
01FA   1283 1703      00490         banksel EEADR
01FC   300F           00491         movlw       D'15'               ;else EEADR -= 15 to shift next byte
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FD   028D           00492         subwf       EEADR, F
01FE   2???           00493         goto        shiftlogs_0
                      00494 
                      00495         ; Then store current run as log 1
01FF                  00496 write_log1
01FF   1283 1703      00497         banksel     EEADR
0201   1383           00498         bcf         STATUS, IRP
                      00499         movlf       0x37, FSR           ;points to 1 after last important data
0202   3037               M         movlw   0x37
0203   0084               M         movwf   FSR
                      00500         movlf       D'14', EEADR        ;points to 1 after last place to write
0204   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0205   008D               M         movwf   EEADR
0206                  00501 write_log1_0
0206   1683 1703      00502         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0208   188C           00503         btfsc       EECON1, WR          ;ensure a write is not in progress
0209   2???           00504         goto        $-1
020A   1283 1703      00505         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
020C   038D           00506         decf        EEADR, F            ;writing backwords
020D   0384           00507         decf        FSR, F
                      00508         movff       INDF, EEDATA
020E   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
020F   008C               M         movwf   EEDATA
0210   1683 1703      00509         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0212   138C           00510         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0213   150C           00511         bsf         EECON1, WREN
0214   3055           00512         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0215   008D           00513         movwf       EECON2
0216   30AA           00514         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0217   008D           00515         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0218   148C           00516         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0219   110C           00517         bcf         EECON1, WREN
021A   1283 1703      00518         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021C   088D           00519         movf        EEADR, F
021D   1D03           00520         btfss       STATUS, Z           ;if EEADR = 0 we're done
021E   2???           00521         goto        write_log1_0
021F   1283           00522         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0220   1303           00523         bcf         STATUS, RP1
                      00524 
                      00525         ; Display info screens
0221   2???           00526         call       time             ; "Operation time: X sec"
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0222   2???           00527         call       HalfS
0223   2???           00528         call       HalfS
0224   2???           00529         call       summary          ; "Total candles: X. Defective: Y"
0225   2???           00530         call       HalfS
0226   2???           00531         call       HalfS
0227   2???           00532         call       defective        ; "FF: a b c. LF: d e f"
                      00533 ;-----------------------------------------------------------------------
                      00534 ; DATA DISPLAY INTERFACE
                      00535 
0228   1C86           00536 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
0229   2???           00537          goto           $-1
022A   0E06           00538          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
022B   390F           00539          andlw          0x0F
022C   2???           00540          call       information ;Do the right thing
022D   1886           00541          btfsc          PORTB,1     ;Wait until key is released
022E   2???           00542          goto           $-1
022F   2???           00543          goto       poll
                      00544 
                      00545 ;-------------------------------------------------------------------------
                      00546 ; LOGS INTERFACE
                      00547 ; Shows runs of last 9 logs
                      00548 ; Access from STANDBY and return to STANDBY
                      00549 
0230                  00550 logs
0230   2???           00551     call    Clear_Display
                      00552     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0231   01B9               M                 clrf    Table_Counter
0232   0103               M                 clrw
0233                      M loop_disp
0233   0839               M         movf    Table_Counter,W
0234   2???               M                 call    Logs_Msg1
0235   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0236   1903               M                 btfsc   STATUS,Z
0237   2???               M                 goto    end_disp
0238   2???               M                 call    WR_DATA
0239   0AB9               M                 incf    Table_Counter,F
023A   2???               M                 goto    loop_disp
023B                      M end_disp
023B   2???           00553     call    Switch_Lines
                      00554     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
023C   01B9               M                 clrf    Table_Counter
023D   0103               M                 clrw
023E                      M loop_disp
023E   0839               M         movf    Table_Counter,W
023F   2???               M                 call    Logs_Msg2
0240   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0241   1903               M                 btfsc   STATUS,Z
0242   2???               M                 goto    end_disp
0243   2???               M                 call    WR_DATA
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0244   0AB9               M                 incf    Table_Counter,F
0245   2???               M                 goto    loop_disp
0246                      M end_disp
                      00555 
0246                  00556 polling
0246   1C86           00557     btfss               PORTB,1     ;Wait until data is available from the keypad
0247   2???           00558     goto                $-1
0248   0E06           00559     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0249   390F           00560     andlw               0x0F
024A   00B7           00561     movwf       keytemp     ; Save which key was pressed
                      00562 
024B                  00563 check_log1
024B   3A00           00564     xorlw   0x0         ;will be all zeros if its 1
024C   1D03           00565     btfss   STATUS,Z    ;and Z will be high, so skip
024D   2???           00566     goto    check_log2
024E   1283 1703      00567     banksel EEADR
                      00568     movlf   d'0', EEADR
0250   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0251   008D               M         movwf   EEADR
0252   2???           00569     goto    display_log
                      00570 
0253                  00571 check_log2
0253   0837           00572     movf    keytemp, W
0254   3A01           00573     xorlw   0x1
0255   1D03           00574     btfss   STATUS,Z
0256   2???           00575     goto    check_log3
0257   1283 1703      00576     banksel EEADR
                      00577     movlf   d'14', EEADR
0259   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025A   008D               M         movwf   EEADR
025B   2???           00578     goto    display_log
                      00579 
025C                  00580 check_log3
025C   0837           00581     movf    keytemp, W
025D   3A02           00582     xorlw   0x2
025E   1D03           00583     btfss   STATUS,Z
025F   2???           00584     goto    check_log4
0260   1283 1703      00585     banksel EEADR
                      00586     movlf   d'28', EEADR
0262   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0263   008D               M         movwf   EEADR
0264   2???           00587     goto    display_log
                      00588 
0265                  00589 check_log4
0265   0837           00590     movf    keytemp, W
0266   3A04           00591     xorlw   0x4
0267   1D03           00592     btfss   STATUS,Z
0268   2???           00593     goto    check_log5
0269   1283 1703      00594     banksel EEADR
                      00595     movlf   d'42', EEADR
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

026B   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026C   008D               M         movwf   EEADR
026D   2???           00596     goto    display_log
                      00597 
026E                  00598 check_log5
026E   0837           00599     movf    keytemp, W
026F   3A05           00600     xorlw   0x5
0270   1D03           00601     btfss   STATUS,Z
0271   2???           00602     goto    check_log6
0272   1283 1703      00603     banksel EEADR
                      00604     movlf   d'56', EEADR
0274   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0275   008D               M         movwf   EEADR
0276   2???           00605     goto    display_log
                      00606 
0277                  00607 check_log6
0277   0837           00608     movf    keytemp, W
0278   3A06           00609     xorlw   0x6
0279   1D03           00610     btfss   STATUS,Z
027A   2???           00611     goto    check_log7
027B   1283 1703      00612     banksel EEADR
                      00613     movlf   d'70', EEADR
027D   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027E   008D               M         movwf   EEADR
027F   2???           00614     goto    display_log
                      00615 
0280                  00616 check_log7
0280   0837           00617     movf    keytemp, W
0281   3A08           00618     xorlw   0x8
0282   1D03           00619     btfss   STATUS,Z
0283   2???           00620     goto    check_log8
0284   1283 1703      00621     banksel EEADR
                      00622     movlf   d'84', EEADR
0286   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0287   008D               M         movwf   EEADR
0288   2???           00623     goto    display_log
                      00624 
0289                  00625 check_log8
0289   0837           00626     movf    keytemp, W
028A   3A09           00627     xorlw   0x9
028B   1D03           00628     btfss   STATUS,Z
028C   2???           00629     goto    check_log9
028D   1283 1703      00630     banksel EEADR
                      00631     movlf   d'98', EEADR
028F   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0290   008D               M         movwf   EEADR
0291   2???           00632     goto    display_log
                      00633 
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0292                  00634 check_log9
0292   0837           00635     movf    keytemp, W
0293   3A0A           00636     xorlw   0xA
0294   1D03           00637     btfss   STATUS,Z
0295   2???           00638     goto    check_done
0296   1283 1703      00639     banksel EEADR
                      00640     movlf   d'112', EEADR
0298   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0299   008D               M         movwf   EEADR
029A   2???           00641     goto    display_log
                      00642 
029B                  00643 check_done
029B   0837           00644     movf    keytemp, W
029C   3A0D           00645     xorlw   0xD
029D   1D03           00646     btfss   STATUS,Z
029E   2???           00647     goto    badkey
029F   2???           00648     call    Clear_Display
                      00649     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02A0   01B9               M                 clrf    Table_Counter
02A1   0103               M                 clrw
02A2                      M loop_disp
02A2   0839               M         movf    Table_Counter,W
02A3   2???               M                 call    Standby_Msg
02A4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02A5   1903               M                 btfsc   STATUS,Z
02A6   2???               M                 goto    end_disp
02A7   2???               M                 call    WR_DATA
02A8   0AB9               M                 incf    Table_Counter,F
02A9   2???               M                 goto    loop_disp
02AA                      M end_disp
02AA   2???           00650     call    Switch_Lines
02AB   2???           00651     goto    waiting
                      00652 
02AC                  00653 badkey
02AC   1886           00654     btfsc               PORTB,1     ;Wait until key is released
02AD   2???           00655     goto                $-1
02AE   2???           00656     goto        polling
                      00657 
                      00658 
02AF                  00659 display_log                 ;start in bank2
                      00660 
                      00661     ; move EEPROM data back to "current" data
02AF   1383           00662     bcf STATUS, IRP
                      00663     movlf   0x29, FSR
02B0   3029               M         movlw   0x29
02B1   0084               M         movwf   FSR
02B2                  00664 read_EEPROM
02B2   1683 1703      00665     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B4   138C           00666     bcf EECON1, EEPGD
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B5   140C           00667     bsf EECON1, RD          ; read EEPROM
02B6   1283 1703      00668     banksel EEDATA          ;bank 2
                      00669     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B8   080C               M         movf    EEDATA, W
02B9   0080               M         movwf   INDF
02BA   0A84           00670     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02BB   0A8D           00671     incf    EEADR, F
02BC   3037           00672     movlw   0x37            ;done if FSR = 0x37
02BD   0204           00673     subwf   FSR, W
02BE   1D03           00674     btfss   STATUS, Z
02BF   2???           00675     goto    read_EEPROM
                      00676 
                      00677     ;display data
02C0   1283 1303      00678     banksel Table_Counter   ; bank0
02C2   2???           00679     call    Clear_Display
                      00680     ;if first data is 0xFF (no log) just display "none"
02C3   30FF           00681     movlw   0xFF
02C4   0229           00682     subwf   start_year10, W
02C5   1D03           00683     btfss   STATUS, Z
02C6   2???           00684     goto yes_log
02C7                  00685 no_log
                      00686     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02C7   01B9               M                 clrf    Table_Counter
02C8   0103               M                 clrw
02C9                      M loop_disp
02C9   0839               M         movf    Table_Counter,W
02CA   2???               M                 call    None
02CB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02CC   1903               M                 btfsc   STATUS,Z
02CD   2???               M                 goto    end_disp
02CE   2???               M                 call    WR_DATA
02CF   0AB9               M                 incf    Table_Counter,F
02D0   2???               M                 goto    loop_disp
02D1                      M end_disp
02D1   2???           00687     call    HalfS
02D2   2???           00688     goto    logs
                      00689     ;else display the log
02D3                  00690 yes_log
                      00691     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02D3   01B9               M                 clrf    Table_Counter
02D4   0103               M                 clrw
02D5                      M loop_disp
02D5   0839               M         movf    Table_Counter,W
02D6   2???               M                 call    Op_at
02D7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02D8   1903               M                 btfsc   STATUS,Z
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D9   2???               M                 goto    end_disp
02DA   2???               M                 call    WR_DATA
02DB   0AB9               M                 incf    Table_Counter,F
02DC   2???               M                 goto    loop_disp
02DD                      M end_disp
02DD   2???           00692     call    Switch_Lines
                      00693     writechar    "2"
02DE   3032               M             movlw   "2"
02DF   2???               M             call    WR_DATA
                      00694     writechar    "0"
02E0   3030               M             movlw   "0"
02E1   2???               M             call    WR_DATA
                      00695     writeASC   start_year10
02E2   0829               M             movf    start_year10, W
02E3   2???               M             call WR_DATA
                      00696     writeASC   start_year1
02E4   082A               M             movf    start_year1, W
02E5   2???               M             call WR_DATA
                      00697     writechar   "/"
02E6   302F               M             movlw   "/"
02E7   2???               M             call    WR_DATA
                      00698     writeASC   start_month10
02E8   082B               M             movf    start_month10, W
02E9   2???               M             call WR_DATA
                      00699     writeASC   start_month1
02EA   082C               M             movf    start_month1, W
02EB   2???               M             call WR_DATA
                      00700     writechar   "/"
02EC   302F               M             movlw   "/"
02ED   2???               M             call    WR_DATA
                      00701     writeASC   start_date10
02EE   082D               M             movf    start_date10, W
02EF   2???               M             call WR_DATA
                      00702     writeASC   start_date1
02F0   082E               M             movf    start_date1, W
02F1   2???               M             call WR_DATA
                      00703     writechar   " "
02F2   3020               M             movlw   " "
02F3   2???               M             call    WR_DATA
                      00704     writeASC   start_hour10
02F4   082F               M             movf    start_hour10, W
02F5   2???               M             call WR_DATA
                      00705     writeASC   start_hour1
02F6   0830               M             movf    start_hour1, W
02F7   2???               M             call WR_DATA
                      00706     writechar   ":"
02F8   303A               M             movlw   ":"
02F9   2???               M             call    WR_DATA
                      00707     writeASC  start_min10
02FA   0831               M             movf    start_min10, W
02FB   2???               M             call WR_DATA
                      00708     writeASC   start_min1
02FC   0832               M             movf    start_min1, W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02FD   2???               M             call WR_DATA
02FE   2???           00709     call    HalfS
02FF   2???           00710     call    HalfS
0300   2???           00711     call    time
0301   2???           00712     call    HalfS
0302   2???           00713     call    HalfS
0303   2???           00714     call    summary
0304   2???           00715     call    HalfS
0305   2???           00716     call    HalfS
                      00717 
                      00718     ;option to Export
0306   2???           00719     call    Clear_Display
                      00720     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0307   01B9               M                 clrf    Table_Counter
0308   0103               M                 clrw
0309                      M loop_disp
0309   0839               M         movf    Table_Counter,W
030A   2???               M                 call    Logs_Msg3
030B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
030C   1903               M                 btfsc   STATUS,Z
030D   2???               M                 goto    end_disp
030E   2???               M                 call    WR_DATA
030F   0AB9               M                 incf    Table_Counter,F
0310   2???               M                 goto    loop_disp
0311                      M end_disp
0311   2???           00721     call    Switch_Lines
                      00722     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0312   01B9               M                 clrf    Table_Counter
0313   0103               M                 clrw
0314                      M loop_disp
0314   0839               M         movf    Table_Counter,W
0315   2???               M                 call    Logs_Msg4
0316   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0317   1903               M                 btfsc   STATUS,Z
0318   2???               M                 goto    end_disp
0319   2???               M                 call    WR_DATA
031A   0AB9               M                 incf    Table_Counter,F
031B   2???               M                 goto    loop_disp
031C                      M end_disp
                      00723 
031C                  00724 wanna_export
031C   1C86           00725     btfss               PORTB,1     ;Wait until data is available from the keypad
031D   2???           00726     goto                $-1
031E   0E06           00727     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
031F   390F           00728     andlw               0x0F
0320   00B7           00729     movwf       keytemp     ; Save which key was pressed
                      00730 
0321                  00731 check_wanna                 ;export
0321   0837           00732     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0322   3A0F           00733     xorlw   0xF
0323   1D03           00734     btfss   STATUS,Z
0324   2???           00735     goto    check_nothx
0325   2???           00736     call    export
0326   2???           00737     goto    logs
                      00738 
0327                  00739 check_nothx                 ;return to logs
0327   0837           00740     movf    keytemp, W
0328   3A0E           00741     xorlw   0xE
0329   1D03           00742     btfss   STATUS,Z
032A   2???           00743     goto    check_immapeace
032B   2???           00744     goto    logs
                      00745 
032C                  00746 check_immapeace             ;return to standby
032C   0837           00747     movf    keytemp, W
032D   3A0D           00748     xorlw   0xD
032E   1D03           00749     btfss   STATUS,Z
032F   2???           00750     goto    badkeyagain
0330   2???           00751     call    Clear_Display
                      00752     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0331   01B9               M                 clrf    Table_Counter
0332   0103               M                 clrw
0333                      M loop_disp
0333   0839               M         movf    Table_Counter,W
0334   2???               M                 call    Standby_Msg
0335   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0336   1903               M                 btfsc   STATUS,Z
0337   2???               M                 goto    end_disp
0338   2???               M                 call    WR_DATA
0339   0AB9               M                 incf    Table_Counter,F
033A   2???               M                 goto    loop_disp
033B                      M end_disp
033B   2???           00753     call    Switch_Lines
033C   2???           00754     goto    waiting
                      00755 
033D                  00756 badkeyagain
033D   1886           00757     btfsc               PORTB,1     ;Wait until key is released
033E   2???           00758     goto                $-1
033F   2???           00759     goto        wanna_export
                      00760 
                      00761 ; END OF MAIN PROGRAM
                      00762 ;------------------------------------------------------------
                      00763 
                      00764 ;***************************************
                      00765 ; ROTATE MOTOR ROUTINE
                      00766 ; Rotates motor by number of steps in motor_count times 4.
                      00767 ; (5 gives 20 steps = 36 deg = one slot)
                      00768 ; pulses ABCD if startfrom3 = 0; else pulses CDAB
                      00769 ; uses half-stepping
                      00770 ;***************************************
                      00771 
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0340                  00772 ROTATEMOTOR
0340   184A           00773     btfsc   startfrom3, 0
0341   2???           00774     goto    halfway
0342                  00775 start_rot
                      00776     movlf   b'1001', PORTA          ; pulse A
0342   3009               M         movlw   b'1001'
0343   0085               M         movwf   PORTA
0344   2???           00777     call    motor_del
                      00778     movlf   b'1000', PORTA
0345   3008               M         movlw   b'1000'
0346   0085               M         movwf   PORTA
0347   2???           00779     call    motor_del
                      00780     movlf   b'1010', PORTA          ; pulse B
0348   300A               M         movlw   b'1010'
0349   0085               M         movwf   PORTA
034A   2???           00781     call    motor_del
                      00782     movlf   b'0010', PORTA
034B   3002               M         movlw   b'0010'
034C   0085               M         movwf   PORTA
034D   2???           00783     call    motor_del
034E   184A           00784     btfsc   startfrom3, 0
034F   2???           00785     goto    decrement
0350                  00786 halfway
                      00787     movlf   b'0110', PORTA          ; pulse C
0350   3006               M         movlw   b'0110'
0351   0085               M         movwf   PORTA
0352   2???           00788     call    motor_del
                      00789     movlf   b'0100', PORTA
0353   3004               M         movlw   b'0100'
0354   0085               M         movwf   PORTA
0355   2???           00790     call    motor_del
                      00791     movlf   b'0101', PORTA          ; pulse D
0356   3005               M         movlw   b'0101'
0357   0085               M         movwf   PORTA
0358   2???           00792     call    motor_del
                      00793     movlf   b'0001', PORTA
0359   3001               M         movlw   b'0001'
035A   0085               M         movwf   PORTA
035B   2???           00794     call    motor_del
035C   184A           00795     btfsc   startfrom3, 0
035D   2???           00796     goto    start_rot
035E                  00797 decrement
Message[305]: Using default destination of 1 (file).
035E   0BC9           00798     decfsz  motor_count
035F   2???           00799     goto    restart_motor
0360   2???           00800     goto    finish_motor
0361                  00801 restart_motor
0361   184A           00802     btfsc   startfrom3, 0
0362   2???           00803     goto    halfway
0363   2???           00804     goto    start_rot
0364                  00805 finish_motor
0364   0185           00806     clrf    PORTA
0365   0008           00807     return
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00808 
0366                  00809 first_two                       ; pulses AB only
                      00810     movlf   b'1001', PORTA
0366   3009               M         movlw   b'1001'
0367   0085               M         movwf   PORTA
0368   2???           00811     call    motor_del
                      00812     movlf   b'1000', PORTA
0369   3008               M         movlw   b'1000'
036A   0085               M         movwf   PORTA
036B   2???           00813     call    motor_del
                      00814     movlf   b'1010', PORTA
036C   300A               M         movlw   b'1010'
036D   0085               M         movwf   PORTA
036E   2???           00815     call    motor_del
                      00816     movlf   b'0010', PORTA
036F   3002               M         movlw   b'0010'
0370   0085               M         movwf   PORTA
0371   2???           00817     call    motor_del
0372   0185           00818     clrf    PORTA
0373   144A           00819     bsf     startfrom3, 0
0374   0008           00820     return
                      00821 
0375                  00822 last_two                        ; pulses CD only
                      00823     movlf   b'0110', PORTA
0375   3006               M         movlw   b'0110'
0376   0085               M         movwf   PORTA
0377   2???           00824     call    motor_del
                      00825     movlf   b'0100', PORTA
0378   3004               M         movlw   b'0100'
0379   0085               M         movwf   PORTA
037A   2???           00826     call    motor_del
                      00827     movlf   b'0101', PORTA
037B   3005               M         movlw   b'0101'
037C   0085               M         movwf   PORTA
037D   2???           00828     call    motor_del
                      00829     movlf   b'0001', PORTA
037E   3001               M         movlw   b'0001'
037F   0085               M         movwf   PORTA
0380   2???           00830     call    motor_del
0381   0185           00831     clrf    PORTA
0382   104A           00832     bcf     startfrom3,0
0383   0008           00833     return
                      00834 
                      00835 
                      00836 ;***************************************
                      00837 ; DATA DISPLAY ROUTINE
                      00838 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00839 ; Determines which key it was and displays appropriate info / branch
                      00840 ;***************************************
                      00841 
0384                  00842 information
0384   00B7           00843     movwf   keytemp             ; Save which key was pressed
                      00844 
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0385                  00845 check_1
0385   3A00           00846     xorlw   0x0         ;will be all zeros if its 1
0386   1D03           00847     btfss   STATUS,Z    ;and Z will be high, so skip
0387   2???           00848     goto    check_2
0388   2???           00849     call    Clear_Display
                      00850     writechar "1"
0389   3031               M             movlw   "1"
038A   2???               M             call    WR_DATA
038B   0820           00851     movf    state1, W
038C   2???           00852     call    display_state
038D   0008           00853     return
                      00854 
038E                  00855 check_2
038E   0837           00856     movf    keytemp, W
038F   3A01           00857     xorlw   0x1
0390   1D03           00858     btfss   STATUS,Z
0391   2???           00859     goto    check_3
0392   2???           00860     call    Clear_Display
                      00861     writechar "2"
0393   3032               M             movlw   "2"
0394   2???               M             call    WR_DATA
0395   0821           00862     movf    state2, W
0396   2???           00863     call    display_state
0397   0008           00864     return
                      00865 
0398                  00866 check_3
0398   0837           00867     movf    keytemp, W
0399   3A02           00868     xorlw   0x2
039A   1D03           00869     btfss   STATUS,Z
039B   2???           00870     goto    check_4
039C   2???           00871     call    Clear_Display
                      00872     writechar "3"
039D   3033               M             movlw   "3"
039E   2???               M             call    WR_DATA
039F   0822           00873     movf    state3, W
03A0   2???           00874     call    display_state
03A1   0008           00875     return
                      00876 
03A2                  00877 check_4
03A2   0837           00878     movf    keytemp, W
03A3   3A04           00879     xorlw   0x4
03A4   1D03           00880     btfss   STATUS,Z
03A5   2???           00881     goto    check_5
03A6   2???           00882     call    Clear_Display
                      00883     writechar "4"
03A7   3034               M             movlw   "4"
03A8   2???               M             call    WR_DATA
03A9   0823           00884     movf    state4, W
03AA   2???           00885     call    display_state
03AB   0008           00886     return
                      00887 
03AC                  00888 check_5
03AC   0837           00889     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AD   3A05           00890     xorlw   0x5
03AE   1D03           00891     btfss   STATUS,Z
03AF   2???           00892     goto    check_6
03B0   2???           00893     call    Clear_Display
                      00894     writechar "5"
03B1   3035               M             movlw   "5"
03B2   2???               M             call    WR_DATA
03B3   0824           00895     movf    state5, W
03B4   2???           00896     call    display_state
03B5   0008           00897     return
                      00898 
03B6                  00899 check_6
03B6   0837           00900     movf    keytemp, W
03B7   3A06           00901     xorlw   0x6
03B8   1D03           00902     btfss   STATUS,Z
03B9   2???           00903     goto    check_7
03BA   2???           00904     call    Clear_Display
                      00905     writechar "6"
03BB   3036               M             movlw   "6"
03BC   2???               M             call    WR_DATA
03BD   0825           00906     movf    state6, W
03BE   2???           00907     call    display_state
03BF   0008           00908     return
                      00909 
03C0                  00910 check_7
03C0   0837           00911     movf    keytemp, W
03C1   3A08           00912     xorlw   0x8
03C2   1D03           00913     btfss   STATUS,Z
03C3   2???           00914     goto    check_8
03C4   2???           00915     call    Clear_Display
                      00916     writechar "7"
03C5   3037               M             movlw   "7"
03C6   2???               M             call    WR_DATA
03C7   0826           00917     movf    state7, W
03C8   2???           00918     call    display_state
03C9   0008           00919     return
                      00920 
03CA                  00921 check_8
03CA   0837           00922     movf    keytemp, W
03CB   3A09           00923     xorlw   0x9
03CC   1D03           00924     btfss   STATUS,Z
03CD   2???           00925     goto    check_9
03CE   2???           00926     call    Clear_Display
                      00927     writechar "8"
03CF   3038               M             movlw   "8"
03D0   2???               M             call    WR_DATA
03D1   0827           00928     movf    state8, W
03D2   2???           00929     call    display_state
03D3   0008           00930     return
                      00931 
03D4                  00932 check_9
03D4   0837           00933     movf    keytemp, W
03D5   3A0A           00934     xorlw   0xA
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D6   1D03           00935     btfss   STATUS,Z
03D7   2???           00936     goto    check_summary
03D8   2???           00937     call    Clear_Display
                      00938     writechar "9"
03D9   3039               M             movlw   "9"
03DA   2???               M             call    WR_DATA
03DB   0828           00939     movf    state9, W
03DC   2???           00940     call    display_state
03DD   0008           00941     return
                      00942 
03DE                  00943 check_summary
03DE   0837           00944     movf    keytemp, W
03DF   3A03           00945     xorlw   0x3
03E0   1D03           00946     btfss   STATUS,Z
03E1   2???           00947     goto    check_defective
03E2   2???           00948     call    summary
03E3   0008           00949     return
                      00950 
03E4                  00951 check_defective
03E4   0837           00952     movf    keytemp, W
03E5   3A07           00953     xorlw   0x7
03E6   1D03           00954     btfss   STATUS,Z
03E7   2???           00955     goto    check_time
03E8   2???           00956     call    defective
03E9   0008           00957     return
                      00958 
03EA                  00959 check_time
03EA   0837           00960     movf    keytemp, W
03EB   3A0B           00961     xorlw   0xB
03EC   1D03           00962     btfss   STATUS,Z
03ED   2???           00963     goto    check_export
03EE   2???           00964     call    time
03EF   0008           00965     return
                      00966 
03F0                  00967 check_export
03F0   0837           00968     movf    keytemp, W
03F1   3A0F           00969     xorlw   0xF
03F2   1D03           00970     btfss   STATUS,Z
03F3   2???           00971     goto    check_standby       
03F4   2???           00972     call    export
03F5   0008           00973     return
                      00974 
03F6                  00975 check_standby
03F6   0837           00976     movf    keytemp, W
03F7   3A0D           00977     xorlw   0xD
03F8   1D03           00978     btfss   STATUS,Z
03F9   2???           00979     goto    check_start
03FA   2???           00980     call    Clear_Display
                      00981     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03FB   01B9               M                 clrf    Table_Counter
03FC   0103               M                 clrw
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FD                      M loop_disp
03FD   0839               M         movf    Table_Counter,W
03FE   2???               M                 call    Standby_Msg
03FF   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0400   1903               M                 btfsc   STATUS,Z
0401   2???               M                 goto    end_disp
0402   2???               M                 call    WR_DATA
0403   0AB9               M                 incf    Table_Counter,F
0404   2???               M                 goto    loop_disp
0405                      M end_disp
0405   2???           00982     call    Switch_Lines
0406   2???           00983     goto    waiting
                      00984 
0407                  00985 check_start
0407   0837           00986     movf    keytemp, W
0408   3A0C           00987     xorlw   0xC
0409   1D03           00988     btfss   STATUS,Z
040A   2???           00989     goto    default_key
040B   2???           00990     goto    start
                      00991 
040C                  00992 default_key         ; will never get here unless you hit "LOGS"
040C   0008           00993     return
                      00994 
                      00995 
                      00996 ;Display state subroutine
                      00997 ;stateN is in W
040D                  00998 display_state
040D   00B8           00999     movwf  statetemp    ; save stateN
                      01000 
040E                  01001 check_none
040E   3A00           01002     xorlw   0x0
040F   1D03           01003     btfss   STATUS,Z
0410   2???           01004     goto    check_pass
                      01005     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0411   01B9               M                 clrf    Table_Counter
0412   0103               M                 clrw
0413                      M loop_disp
0413   0839               M         movf    Table_Counter,W
0414   2???               M                 call    Not_present
0415   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0416   1903               M                 btfsc   STATUS,Z
0417   2???               M                 goto    end_disp
0418   2???               M                 call    WR_DATA
0419   0AB9               M                 incf    Table_Counter,F
041A   2???               M                 goto    loop_disp
041B                      M end_disp
041B   0008           01006     return
                      01007 
041C                  01008 check_pass
041C   0838           01009     movf    statetemp, W
041D   3A01           01010     xorlw   0x1
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

041E   1D03           01011     btfss   STATUS,Z
041F   2???           01012     goto    check_LED
                      01013     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0420   01B9               M                 clrf    Table_Counter
0421   0103               M                 clrw
0422                      M loop_disp
0422   0839               M         movf    Table_Counter,W
0423   2???               M                 call    Pass
0424   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0425   1903               M                 btfsc   STATUS,Z
0426   2???               M                 goto    end_disp
0427   2???               M                 call    WR_DATA
0428   0AB9               M                 incf    Table_Counter,F
0429   2???               M                 goto    loop_disp
042A                      M end_disp
042A   0008           01014     return
                      01015 
042B                  01016 check_LED
042B   0838           01017     movf    statetemp, W
042C   3A02           01018     xorlw   0x2
042D   1D03           01019     btfss   STATUS,Z
042E   2???           01020     goto    check_flick
                      01021     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
042F   01B9               M                 clrf    Table_Counter
0430   0103               M                 clrw
0431                      M loop_disp
0431   0839               M         movf    Table_Counter,W
0432   2???               M                 call    LED_fail
0433   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0434   1903               M                 btfsc   STATUS,Z
0435   2???               M                 goto    end_disp
0436   2???               M                 call    WR_DATA
0437   0AB9               M                 incf    Table_Counter,F
0438   2???               M                 goto    loop_disp
0439                      M end_disp
0439   0008           01022     return
                      01023 
043A                  01024 check_flick
043A   0838           01025     movf    statetemp, W
043B   3A03           01026     xorlw   0x3
043C   1D03           01027     btfss   STATUS,Z
043D   2???           01028     goto    default_state
                      01029     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
043E   01B9               M                 clrf    Table_Counter
043F   0103               M                 clrw
0440                      M loop_disp
0440   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0441   2???               M                 call    Flick_fail
0442   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0443   1903               M                 btfsc   STATUS,Z
0444   2???               M                 goto    end_disp
0445   2???               M                 call    WR_DATA
0446   0AB9               M                 incf    Table_Counter,F
0447   2???               M                 goto    loop_disp
0448                      M end_disp
0448   0008           01030     return
                      01031 
0449                  01032 default_state   ; should never get here
0449   0008           01033     return
                      01034 
                      01035 ; Summary Subroutine
                      01036 ; Displays total number of candles and number of defective candles
                      01037 ; Reads data from num_tot, num_LF, num_FF
044A                  01038 summary
044A   2???           01039     call            Clear_Display
                      01040     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
044B   01B9               M                 clrf    Table_Counter
044C   0103               M                 clrw
044D                      M loop_disp
044D   0839               M         movf    Table_Counter,W
044E   2???               M                 call    Total_Msg
044F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0450   1903               M                 btfsc   STATUS,Z
0451   2???               M                 goto    end_disp
0452   2???               M                 call    WR_DATA
0453   0AB9               M                 incf    Table_Counter,F
0454   2???               M                 goto    loop_disp
0455                      M end_disp
                      01041     writeBCD        num_tot
0455   0834               M             movf    num_tot, W
0456   3E30               M             addlw   B'00110000'
0457   2???               M             call WR_DATA
0458   2???           01042     call            Switch_Lines
                      01043     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0459   01B9               M                 clrf    Table_Counter
045A   0103               M                 clrw
045B                      M loop_disp
045B   0839               M         movf    Table_Counter,W
045C   2???               M                 call    LF
045D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
045E   1903               M                 btfsc   STATUS,Z
045F   2???               M                 goto    end_disp
0460   2???               M                 call    WR_DATA
0461   0AB9               M                 incf    Table_Counter,F
0462   2???               M                 goto    loop_disp
0463                      M end_disp
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01044     writeBCD        num_LF
0463   0835               M             movf    num_LF, W
0464   3E30               M             addlw   B'00110000'
0465   2???               M             call WR_DATA
                      01045     spacebar
0466   3014               M             movlw   B'00010100'
0467   2???               M             call    WR_INS
                      01046     spacebar
0468   3014               M             movlw   B'00010100'
0469   2???               M             call    WR_INS
                      01047     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
046A   01B9               M                 clrf    Table_Counter
046B   0103               M                 clrw
046C                      M loop_disp
046C   0839               M         movf    Table_Counter,W
046D   2???               M                 call    FF
046E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
046F   1903               M                 btfsc   STATUS,Z
0470   2???               M                 goto    end_disp
0471   2???               M                 call    WR_DATA
0472   0AB9               M                 incf    Table_Counter,F
0473   2???               M                 goto    loop_disp
0474                      M end_disp
                      01048     writeBCD        num_FF
0474   0836               M             movf    num_FF, W
0475   3E30               M             addlw   B'00110000'
0476   2???               M             call WR_DATA
0477   0008           01049     return
                      01050 
                      01051 ; Defective candles Subroutine
                      01052 ; Displays index of each defective candle (LF or FF)
                      01053 ; Reads data from state1 - state9
0478                  01054 defective
0478   2???           01055     call            Clear_Display
                      01056 
0479   01C5           01057     clrf    morethansix
047A   3007           01058     movlw   d'7'
047B   0235           01059     subwf   num_LF, W
047C   1803           01060     btfsc   STATUS, C       ;if  num_LF < 7, C = 0
047D   1445           01061     bsf     morethansix,0
047E   3007           01062     movlw   d'7'
047F   0236           01063     subwf   num_FF, W
0480   1803           01064     btfsc   STATUS, C       ;if  num_FF < 7, C = 0
0481   1445           01065     bsf     morethansix,0
                      01066 
                      01067     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0482   01B9               M                 clrf    Table_Counter
0483   0103               M                 clrw
0484                      M loop_disp
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0484   0839               M         movf    Table_Counter,W
0485   2???               M                 call    LF
0486   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0487   1903               M                 btfsc   STATUS,Z
0488   2???               M                 goto    end_disp
0489   2???               M                 call    WR_DATA
048A   0AB9               M                 incf    Table_Counter,F
048B   2???               M                 goto    loop_disp
048C                      M end_disp
048C   08B5           01068     movf            num_LF, F
048D   1D03           01069     btfss           STATUS,Z         ;if none LF, just say "none"
048E   2???           01070     goto            check_LF
                      01071     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
048F   01B9               M                 clrf    Table_Counter
0490   0103               M                 clrw
0491                      M loop_disp
0491   0839               M         movf    Table_Counter,W
0492   2???               M                 call    None
0493   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0494   1903               M                 btfsc   STATUS,Z
0495   2???               M                 goto    end_disp
0496   2???               M                 call    WR_DATA
0497   0AB9               M                 incf    Table_Counter,F
0498   2???               M                 goto    loop_disp
0499                      M end_disp
0499   2???           01072     goto            now_FF
                      01073 
049A                  01074 check_LF                            ; list all LF candles
049A   3002           01075     movlw           B'00000010'
049B   2???           01076     call            check_for_fail
                      01077 
049C                  01078 now_FF                              ; now look at FF
049C   2???           01079     call            Switch_Lines
                      01080     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
049D   01B9               M                 clrf    Table_Counter
049E   0103               M                 clrw
049F                      M loop_disp
049F   0839               M         movf    Table_Counter,W
04A0   2???               M                 call    FF
04A1   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04A2   1903               M                 btfsc   STATUS,Z
04A3   2???               M                 goto    end_disp
04A4   2???               M                 call    WR_DATA
04A5   0AB9               M                 incf    Table_Counter,F
04A6   2???               M                 goto    loop_disp
04A7                      M end_disp
04A7   08B6           01081     movf            num_FF, F
04A8   1D03           01082     btfss           STATUS,Z         ;if none FF, just say "none"
04A9   2???           01083     goto            check_FF
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01084     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04AA   01B9               M                 clrf    Table_Counter
04AB   0103               M                 clrw
04AC                      M loop_disp
04AC   0839               M         movf    Table_Counter,W
04AD   2???               M                 call    None
04AE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04AF   1903               M                 btfsc   STATUS,Z
04B0   2???               M                 goto    end_disp
04B1   2???               M                 call    WR_DATA
04B2   0AB9               M                 incf    Table_Counter,F
04B3   2???               M                 goto    loop_disp
04B4                      M end_disp
04B4   0008           01085     return
                      01086 
04B5                  01087 check_FF                            ; list all FF candles
04B5   3003           01088     movlw           B'00000011'
04B6   2???           01089     call            check_for_fail
04B7   0008           01090     return
                      01091 
04B8                  01092 check_for_fail  ;lists all candles that have status currently in W "stateX"
04B8   00B8           01093     movwf   statetemp
                      01094         movlf   D'0', candle_index
04B9   3000               M         movlw   D'0'
04BA   00C6               M         movwf   candle_index
04BB   1383           01095         bcf     STATUS, IRP
                      01096         movlf   0x1F, FSR           ;index of right before state1
04BC   301F               M         movlw   0x1F
04BD   0084               M         movwf   FSR
04BE                  01097 check_next
04BE   3009           01098         movlw   D'9'                ;exit loop if at 9
04BF   0246           01099         subwf   candle_index, W
04C0   1803           01100         btfsc   STATUS,W
04C1   2???           01101         goto    end_check_fail
04C2   0A84           01102         incf    FSR,F               ; increment
04C3   0AC6           01103         incf    candle_index,F
04C4   0838           01104         movf    statetemp, W            ;see if stateN = stateX
04C5   0200           01105         subwf   INDF, W
04C6   1D03           01106         btfss   STATUS, Z
04C7   2???           01107         goto    check_next          ;if not, go to next
                      01108         writeBCD        candle_index    ;if so, write down the number
04C8   0846               M             movf    candle_index, W
04C9   3E30               M             addlw   B'00110000'
04CA   2???               M             call WR_DATA
04CB   1845           01109     btfsc   morethansix,0       ;don't write space if need more than 6
04CC   2???           01110     goto    more_than_six
                      01111     spacebar
04CD   3014               M             movlw   B'00010100'
04CE   2???               M             call    WR_INS
04CF                  01112 more_than_six
04CF   2???           01113         goto check_next
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04D0                  01114 end_check_fail
04D0   0008           01115         return
                      01116 
                      01117 ; Time subroutine
                      01118 ; Takes the time in seconds as a binary number in op_time
                      01119 ; and puts it into huns,tens,ones to display.
04D1                  01120 time
04D1   2???           01121     call    Clear_Display
                      01122     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04D2   01B9               M                 clrf    Table_Counter
04D3   0103               M                 clrw
04D4                      M loop_disp
04D4   0839               M         movf    Table_Counter,W
04D5   2???               M                 call    Time_Msg
04D6   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04D7   1903               M                 btfsc   STATUS,Z
04D8   2???               M                 goto    end_disp
04D9   2???               M                 call    WR_DATA
04DA   0AB9               M                 incf    Table_Counter,F
04DB   2???               M                 goto    loop_disp
04DC                      M end_disp
04DC   2???           01123     call    Switch_Lines
04DD   0833           01124     movf    op_time, W
04DE   2???           01125     call    big_number
04DF   08C0           01126     movf    huns, F
04E0   1903           01127     btfsc   STATUS,Z        ;if huns is zero don't display it
04E1   2???           01128     goto    no_huns
                      01129     writeBCD    huns
04E2   0840               M             movf    huns, W
04E3   3E30               M             addlw   B'00110000'
04E4   2???               M             call WR_DATA
04E5                  01130 no_huns
04E5   08C1           01131     movf    tens, F
04E6   1903           01132     btfsc   STATUS,Z        ;if tens is zero don't display it
04E7   2???           01133     goto    no_tens
                      01134     writeBCD    tens
04E8   0841               M             movf    tens, W
04E9   3E30               M             addlw   B'00110000'
04EA   2???               M             call WR_DATA
04EB                  01135 no_tens
                      01136     writeBCD    ones
04EB   0842               M             movf    ones, W
04EC   3E30               M             addlw   B'00110000'
04ED   2???               M             call WR_DATA
                      01137     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04EE   01B9               M                 clrf    Table_Counter
04EF   0103               M                 clrw
04F0                      M loop_disp
04F0   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F1   2???               M                 call    Seconds
04F2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04F3   1903               M                 btfsc   STATUS,Z
04F4   2???               M                 goto    end_disp
04F5   2???               M                 call    WR_DATA
04F6   0AB9               M                 incf    Table_Counter,F
04F7   2???               M                 goto    loop_disp
04F8                      M end_disp
04F8   0008           01138     return
                      01139 
                      01140 ; Export subroutine
                      01141 ; Exports data from current run to hyperterminal
                      01142 ; reads start time and num_tot/num_ff/num_lf data
04F9                  01143 export
                      01144     printchar   0x7       ;makes a noise on the PC
04F9   3007               M             movlw   0x7
04FA   2???               M             call    writetoPC
                      01145     printchar   0xD       ;go back to left edge
04FB   300D               M             movlw   0xD
04FC   2???               M             call    writetoPC
                      01146     printchar   "T"
04FD   3054               M             movlw   "T"
04FE   2???               M             call    writetoPC
                      01147     printchar   "e"
04FF   3065               M             movlw   "e"
0500   2???               M             call    writetoPC
                      01148     printchar   "s"
0501   3073               M             movlw   "s"
0502   2???               M             call    writetoPC
                      01149     printchar   "t"
0503   3074               M             movlw   "t"
0504   2???               M             call    writetoPC
                      01150     printchar   " "
0505   3020               M             movlw   " "
0506   2???               M             call    writetoPC
                      01151     printchar   "a"
0507   3061               M             movlw   "a"
0508   2???               M             call    writetoPC
                      01152     printchar   "t"
0509   3074               M             movlw   "t"
050A   2???               M             call    writetoPC
                      01153     printchar   ":"
050B   303A               M             movlw   ":"
050C   2???               M             call    writetoPC
                      01154     printchar   " "
050D   3020               M             movlw   " "
050E   2???               M             call    writetoPC
                      01155     printchar   "2"
050F   3032               M             movlw   "2"
0510   2???               M             call    writetoPC
                      01156     printchar   "0"
0511   3030               M             movlw   "0"
0512   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01157     printASC   start_year10
0513   1283 1303          M             banksel start_year10
0515   0829               M             movf    start_year10,W
0516   2???               M             call    writetoPC
                      01158     printASC   start_year1
0517   1283 1303          M             banksel start_year1
0519   082A               M             movf    start_year1,W
051A   2???               M             call    writetoPC
                      01159     printchar   "/"
051B   302F               M             movlw   "/"
051C   2???               M             call    writetoPC
                      01160     printASC   start_month10
051D   1283 1303          M             banksel start_month10
051F   082B               M             movf    start_month10,W
0520   2???               M             call    writetoPC
                      01161     printASC   start_month1
0521   1283 1303          M             banksel start_month1
0523   082C               M             movf    start_month1,W
0524   2???               M             call    writetoPC
                      01162     printchar   "/"
0525   302F               M             movlw   "/"
0526   2???               M             call    writetoPC
                      01163     printASC   start_date10
0527   1283 1303          M             banksel start_date10
0529   082D               M             movf    start_date10,W
052A   2???               M             call    writetoPC
                      01164     printASC   start_date1
052B   1283 1303          M             banksel start_date1
052D   082E               M             movf    start_date1,W
052E   2???               M             call    writetoPC
                      01165     printchar   " "
052F   3020               M             movlw   " "
0530   2???               M             call    writetoPC
                      01166     printASC   start_hour10
0531   1283 1303          M             banksel start_hour10
0533   082F               M             movf    start_hour10,W
0534   2???               M             call    writetoPC
                      01167     printASC   start_hour1
0535   1283 1303          M             banksel start_hour1
0537   0830               M             movf    start_hour1,W
0538   2???               M             call    writetoPC
                      01168     printchar   ":"
0539   303A               M             movlw   ":"
053A   2???               M             call    writetoPC
                      01169     printASC   start_min10
053B   1283 1303          M             banksel start_min10
053D   0831               M             movf    start_min10,W
053E   2???               M             call    writetoPC
                      01170     printASC   start_min1
053F   1283 1303          M             banksel start_min1
0541   0832               M             movf    start_min1,W
0542   2???               M             call    writetoPC
                      01171     newline
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             printchar   0xA ;changes line
0543   300A               M             movlw   0xA
0544   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
0545   300D               M             movlw   0xD
0546   2???               M             call    writetoPC
                      01172     printchar   "T"
0547   3054               M             movlw   "T"
0548   2???               M             call    writetoPC
                      01173     printchar   "i"
0549   3069               M             movlw   "i"
054A   2???               M             call    writetoPC
                      01174     printchar   "m"
054B   306D               M             movlw   "m"
054C   2???               M             call    writetoPC
                      01175     printchar   "e"
054D   3065               M             movlw   "e"
054E   2???               M             call    writetoPC
                      01176     printchar   ":"
054F   303A               M             movlw   ":"
0550   2???               M             call    writetoPC
                      01177     printchar   " "
0551   3020               M             movlw   " "
0552   2???               M             call    writetoPC
                      01178     printchar   " "
0553   3020               M             movlw   " "
0554   2???               M             call    writetoPC
                      01179     printchar   " "
0555   3020               M             movlw   " "
0556   2???               M             call    writetoPC
                      01180     printchar   " "
0557   3020               M             movlw   " "
0558   2???               M             call    writetoPC
0559   1283 1303      01181     banksel huns
055B   08C0           01182     movf    huns, F
055C   1903           01183     btfsc   STATUS,Z        ;if huns is zero don't display it
055D   2???           01184     goto    nohuns
                      01185     printBCD   huns
055E   1283 1303          M             banksel huns
0560   0840               M             movf    huns, W
0561   3E30               M             addlw   0x30
0562   2???               M             call    writetoPC
0563                  01186 nohuns
0563   1283 1303      01187     banksel tens
0565   08C1           01188     movf    tens, F
0566   1903           01189     btfsc   STATUS,Z        ;if tens is zero don't display it
0567   2???           01190     goto    notens
                      01191     printBCD   tens
0568   1283 1303          M             banksel tens
056A   0841               M             movf    tens, W
056B   3E30               M             addlw   0x30
056C   2???               M             call    writetoPC
056D                  01192 notens
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01193     printBCD   ones
056D   1283 1303          M             banksel ones
056F   0842               M             movf    ones, W
0570   3E30               M             addlw   0x30
0571   2???               M             call    writetoPC
                      01194     printchar   " "
0572   3020               M             movlw   " "
0573   2???               M             call    writetoPC
                      01195     printchar   "s"
0574   3073               M             movlw   "s"
0575   2???               M             call    writetoPC
                      01196     printchar   "e"
0576   3065               M             movlw   "e"
0577   2???               M             call    writetoPC
                      01197     printchar   "c"
0578   3063               M             movlw   "c"
0579   2???               M             call    writetoPC
                      01198     newline
                          M             printchar   0xA ;changes line
057A   300A               M             movlw   0xA
057B   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
057C   300D               M             movlw   0xD
057D   2???               M             call    writetoPC
                      01199     printchar   "C"
057E   3043               M             movlw   "C"
057F   2???               M             call    writetoPC
                      01200     printchar   "a"
0580   3061               M             movlw   "a"
0581   2???               M             call    writetoPC
                      01201     printchar   "n"
0582   306E               M             movlw   "n"
0583   2???               M             call    writetoPC
                      01202     printchar   "d"
0584   3064               M             movlw   "d"
0585   2???               M             call    writetoPC
                      01203     printchar   "l"
0586   306C               M             movlw   "l"
0587   2???               M             call    writetoPC
                      01204     printchar   "e"
0588   3065               M             movlw   "e"
0589   2???               M             call    writetoPC
                      01205     printchar   "s"
058A   3073               M             movlw   "s"
058B   2???               M             call    writetoPC
                      01206     printchar   ":"
058C   303A               M             movlw   ":"
058D   2???               M             call    writetoPC
                      01207     printchar   " "
058E   3020               M             movlw   " "
058F   2???               M             call    writetoPC
                      01208     printchar   " "
0590   3020               M             movlw   " "
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0591   2???               M             call    writetoPC
                      01209     printchar   " "
0592   3020               M             movlw   " "
0593   2???               M             call    writetoPC
                      01210     printchar   " "
0594   3020               M             movlw   " "
0595   2???               M             call    writetoPC
                      01211     printchar   " "
0596   3020               M             movlw   " "
0597   2???               M             call    writetoPC
                      01212     printchar   " "
0598   3020               M             movlw   " "
0599   2???               M             call    writetoPC
                      01213     printBCD    num_tot
059A   1283 1303          M             banksel num_tot
059C   0834               M             movf    num_tot, W
059D   3E30               M             addlw   0x30
059E   2???               M             call    writetoPC
                      01214     newline
                          M             printchar   0xA ;changes line
059F   300A               M             movlw   0xA
05A0   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05A1   300D               M             movlw   0xD
05A2   2???               M             call    writetoPC
                      01215     printchar   "L"
05A3   304C               M             movlw   "L"
05A4   2???               M             call    writetoPC
                      01216     printchar   "E"
05A5   3045               M             movlw   "E"
05A6   2???               M             call    writetoPC
                      01217     printchar   "D"
05A7   3044               M             movlw   "D"
05A8   2???               M             call    writetoPC
                      01218     printchar   " "
05A9   3020               M             movlw   " "
05AA   2???               M             call    writetoPC
                      01219     printchar   "f"
05AB   3066               M             movlw   "f"
05AC   2???               M             call    writetoPC
                      01220     printchar   "a"
05AD   3061               M             movlw   "a"
05AE   2???               M             call    writetoPC
                      01221     printchar   "i"
05AF   3069               M             movlw   "i"
05B0   2???               M             call    writetoPC
                      01222     printchar   "l"
05B1   306C               M             movlw   "l"
05B2   2???               M             call    writetoPC
                      01223     printchar   ":"
05B3   303A               M             movlw   ":"
05B4   2???               M             call    writetoPC
                      01224     printchar   " "
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B5   3020               M             movlw   " "
05B6   2???               M             call    writetoPC
                      01225     printchar   " "
05B7   3020               M             movlw   " "
05B8   2???               M             call    writetoPC
                      01226     printchar   " "
05B9   3020               M             movlw   " "
05BA   2???               M             call    writetoPC
                      01227     printchar   " "
05BB   3020               M             movlw   " "
05BC   2???               M             call    writetoPC
                      01228     printchar   " "
05BD   3020               M             movlw   " "
05BE   2???               M             call    writetoPC
                      01229     printBCD    num_LF
05BF   1283 1303          M             banksel num_LF
05C1   0835               M             movf    num_LF, W
05C2   3E30               M             addlw   0x30
05C3   2???               M             call    writetoPC
                      01230     newline
                          M             printchar   0xA ;changes line
05C4   300A               M             movlw   0xA
05C5   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05C6   300D               M             movlw   0xD
05C7   2???               M             call    writetoPC
                      01231     printchar   "F"
05C8   3046               M             movlw   "F"
05C9   2???               M             call    writetoPC
                      01232     printchar   "l"
05CA   306C               M             movlw   "l"
05CB   2???               M             call    writetoPC
                      01233     printchar   "i"
05CC   3069               M             movlw   "i"
05CD   2???               M             call    writetoPC
                      01234     printchar   "c"
05CE   3063               M             movlw   "c"
05CF   2???               M             call    writetoPC
                      01235     printchar   "k"
05D0   306B               M             movlw   "k"
05D1   2???               M             call    writetoPC
                      01236     printchar   "e"
05D2   3065               M             movlw   "e"
05D3   2???               M             call    writetoPC
                      01237     printchar   "r"
05D4   3072               M             movlw   "r"
05D5   2???               M             call    writetoPC
                      01238     printchar   " "
05D6   3020               M             movlw   " "
05D7   2???               M             call    writetoPC
                      01239     printchar   "f"
05D8   3066               M             movlw   "f"
05D9   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01240     printchar   "a"
05DA   3061               M             movlw   "a"
05DB   2???               M             call    writetoPC
                      01241     printchar   "i"
05DC   3069               M             movlw   "i"
05DD   2???               M             call    writetoPC
                      01242     printchar   "l"
05DE   306C               M             movlw   "l"
05DF   2???               M             call    writetoPC
                      01243     printchar   ":"
05E0   303A               M             movlw   ":"
05E1   2???               M             call    writetoPC
                      01244     printchar   " "
05E2   3020               M             movlw   " "
05E3   2???               M             call    writetoPC
                      01245     printBCD    num_FF
05E4   1283 1303          M             banksel num_FF
05E6   0836               M             movf    num_FF, W
05E7   3E30               M             addlw   0x30
05E8   2???               M             call    writetoPC
                      01246     newline
                          M             printchar   0xA ;changes line
05E9   300A               M             movlw   0xA
05EA   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05EB   300D               M             movlw   0xD
05EC   2???               M             call    writetoPC
                      01247     newline
                          M             printchar   0xA ;changes line
05ED   300A               M             movlw   0xA
05EE   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left margin
05EF   300D               M             movlw   0xD
05F0   2???               M             call    writetoPC
05F1   1283           01248     bcf STATUS,RP0
05F2   1303           01249     bcf STATUS,RP1     ; back to bank 0
05F3   0008           01250     return
                      01251 
                      01252 
                      01253 ;***************************************
                      01254 ; GENERAL PURPOSE SUBROUTINES
                      01255 ;***************************************
                      01256 
                      01257 ; DISPLAY BIG NUMBER SUBROUTINE
                      01258 ; Converts 8-bit binary number op_time to 3 BCDs representing huns, tens, ones
                      01259 ; Uses "shift and add 3" algorithm, modified from:
                      01260 ; http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01261 
05F4                  01262 big_number
                      01263     movff   op_time, op_time_save         ;save the original op_time
05F4   0833               M         movf    op_time, W
05F5   00BF               M         movwf   op_time_save
                      01264     movlf   8, bignumcount                ;will shift 8 times
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05F6   3008               M         movlw   8
05F7   00C3               M         movwf   bignumcount
05F8   01C0           01265     clrf    huns
05F9   01C1           01266     clrf    tens
05FA   01C2           01267     clrf    ones
                      01268 
05FB                  01269 BCDadd3                             ; if any digit > 5, add3
05FB   3005           01270     movlw   0x5
05FC   0240           01271     subwf   huns, W
05FD   1803           01272     btfsc   STATUS, C
05FE   2???           01273     call    add3huns
                      01274 
05FF   3005           01275     movlw   0x5
0600   0241           01276     subwf   tens, W
0601   1803           01277     btfsc   STATUS, C
0602   2???           01278     call    add3tens
                      01279 
0603   3005           01280     movlw   0x5
0604   0242           01281     subwf   ones, W
0605   1803           01282     btfsc   STATUS, C
0606   2???           01283     call    add3ones
                      01284 
0607   03C3           01285     decf    bignumcount, 1
0608   1003           01286     bcf     STATUS, C
0609   0DB3           01287     rlf     op_time, 1              ; shift
060A   0DC2           01288     rlf     ones, 1
060B   1A42           01289     btfsc   ones,4 ;
060C   2???           01290     call    carryones               ; carry if too large
060D   0DC1           01291     rlf     tens, 1
                      01292 
060E   1A41           01293     btfsc   tens,4 ;
060F   2???           01294     call    carrytens
0610   0DC0           01295     rlf     huns,1
0611   1003           01296     bcf     STATUS, C
                      01297 
0612   0843           01298     movf    bignumcount, W
0613   1D03           01299     btfss   STATUS, Z
0614   2???           01300     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01301 
                      01302     movff    op_time_save, op_time     ;restore the original op_time
0615   083F               M         movf    op_time_save, W
0616   00B3               M         movwf   op_time
0617   0008           01303     return
                      01304 
0618                  01305 add3huns
0618   3003           01306     movlw 0x3
0619   07C0           01307     addwf huns,F
061A   0008           01308     return
061B                  01309 add3tens
061B   3003           01310     movlw 0x3
061C   07C1           01311     addwf tens,F
061D   0008           01312     return
061E                  01313 add3ones
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

061E   3003           01314     movlw 0x3
061F   07C2           01315     addwf ones,F
0620   0008           01316     return
0621                  01317 carryones
0621   1242           01318     bcf ones, 4
0622   1403           01319     bsf STATUS, C
0623   0008           01320     return
0624                  01321 carrytens
0624   1241           01322     bcf tens, 4
0625   1403           01323     bsf STATUS, C
0626   0008           01324     return
                      01325 
                      01326 
                      01327 ;***************************************
                      01328 ; DELAY SUBROUTINES
                      01329 ;***************************************
                      01330 
                      01331 ; DELAY 0.5S SUBROUTINE 
                      01332 ; Delays exactly 0.5sec, from generator at:
                      01333 ; http://www.piclist.com/techref/piclist/codegen/delay.htm
0627                  01334 HalfS
                      01335       movlf 0x8A, delH
0627   308A               M         movlw   0x8A
0628   00BC               M         movwf   delH
                      01336       movlf 0xBA, delM
0629   30BA               M         movlw   0xBA
062A   00BD               M         movwf   delM
                      01337       movlf 0x03, delL
062B   3003               M         movlw   0x03
062C   00BE               M         movwf   delL
062D                  01338 HalfS_0
062D   0BBC           01339       decfsz    delH, F
062E   2???           01340           goto  $+2
062F   0BBD           01341           decfsz        delM, F
0630   2???           01342           goto  $+2
0631   0BBE           01343           decfsz        delL, F
0632   2???           01344           goto  HalfS_0
                      01345 
0633   2???           01346           goto  $+1
0634   0000           01347           nop
0635   0008           01348           return
                      01349 
                      01350 ; DELAY 5ms SUBROUTINE
                      01351 ; Useful for LCD because PIC is way faster than it can handle
                      01352 ; Delays exactly 5ms, from generator at:
                      01353 ; http://www.piclist.com/techref/piclist/codegen/delay.htm
0636                  01354 delay5ms
                      01355         movlf   0xC3, delH
0636   30C3               M         movlw   0xC3
0637   00BC               M         movwf   delH
                      01356         movlf   0x0A, delL
0638   300A               M         movlw   0x0A
0639   00BE               M         movwf   delL
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

063A                  01357 Delay_0
063A   0BBC           01358         decfsz  delH, f
063B   2???           01359         goto    $+2
063C   0BBE           01360         decfsz  delL, f
063D   2???           01361         goto    Delay_0
063E   0008           01362     return
                      01363 
                      01364 ; MOTOR DELAY SUBROUTINE.
                      01365 ; Delays ~10ms for the motor. (~1sec per total rotation)
063F                  01366 motor_del
                      01367       movlf 0xF3, delH
063F   30F3               M         movlw   0xF3
0640   00BC               M         movwf   delH
                      01368       movlf 0x2F, delL          
0641   302F               M         movlw   0x2F
0642   00BE               M         movwf   delL
0643                  01369 motor_del_0
0643   0BBC           01370       decfsz    delH, F
0644   2???           01371           goto      $+2
0645   0BBE           01372           decfsz        delL, F
0646   2???           01373           goto      motor_del_0
0647   0008           01374           return
                      01375 
                      01376 ;***************************************
                      01377 ; LCD SUBROUTINES (from sample code)
                      01378 ;***************************************
                      01379 
                      01380 ; Initialize the LCD
0648                  01381 InitLCD
0648   1283           01382         bcf STATUS,RP0          ;bank0
0649   1588           01383         bsf E                   ;E default high
                      01384 
                      01385         ;Wait for LCD POR to finish (~15ms)
064A   2???           01386         call delay5ms
064B   2???           01387         call delay5ms
064C   2???           01388         call delay5ms
                      01389 
                      01390         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01391         ; -> Send b'0011' 3 times
064D   3033           01392         movlw   b'00110011'
064E   2???           01393         call    WR_INS
064F   2???           01394         call delay5ms
0650   2???           01395         call delay5ms
0651   3032           01396         movlw   b'00110010'
0652   2???           01397         call    WR_INS
0653   2???           01398         call delay5ms
0654   2???           01399         call delay5ms
                      01400 
                      01401         ; 4 bits, 2 lines, 5x7 dots
0655   3028           01402         movlw   b'00101000'
0656   2???           01403         call    WR_INS
0657   2???           01404         call delay5ms
0658   2???           01405         call delay5ms
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01406 
                      01407         ; display on/off
0659   300C           01408         movlw   b'00001100'
065A   2???           01409         call    WR_INS
065B   2???           01410         call delay5ms
065C   2???           01411         call delay5ms
                      01412 
                      01413         ; Entry mode
065D   3006           01414         movlw   b'00000110'
065E   2???           01415         call    WR_INS
065F   2???           01416         call delay5ms
0660   2???           01417         call delay5ms
                      01418 
                      01419         ; Clear ram
0661   3001           01420         movlw   b'00000001'
0662   2???           01421         call    WR_INS
0663   2???           01422         call delay5ms
0664   2???           01423         call delay5ms
0665   0008           01424         return
                      01425 
                      01426 ; Clear the display
0666                  01427 Clear_Display
0666   3001           01428                 movlw   B'00000001'
0667   2???           01429                 call    WR_INS
0668   0008           01430                 return
                      01431 
                      01432 ;Switch lines
0669                  01433 Switch_Lines
0669   30C0           01434                 movlw   B'11000000'
066A   2???           01435                 call    WR_INS
066B   0008           01436                 return
                      01437 
                      01438 ; Write an instruction to the LCD (see page 7-104)
                      01439 ; The instruction must be in W
066C                  01440 WR_INS
066C   1108           01441         bcf             RS                              ;clear RS
066D   00BA           01442         movwf   com                             ;W --> com
066E   39F0           01443         andlw   0xF0                    ;mask 4 bits MSB w = X0
066F   0088           01444         movwf   PORTD                   ;Send 4 bits MSB
0670   1588           01445         bsf             E                               ;
0671   2???           01446         call    delay5ms        ;__    __
0672   1188           01447         bcf             E                               ;  |__|
0673   0E3A           01448         swapf   com,w
0674   39F0           01449         andlw   0xF0                    ;1111 0010
0675   0088           01450         movwf   PORTD                   ;send 4 bits LSB
0676   1588           01451         bsf             E                               ;
0677   2???           01452         call    delay5ms        ;__    __
0678   1188           01453         bcf             E                               ;  |__|
0679   2???           01454         call    delay5ms
067A   0008           01455         return
                      01456 
                      01457 ; Write data at current cursor location
                      01458 ; Character code (see page 7-104) must be in W
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

067B                  01459 WR_DATA
067B   1508           01460         bsf             RS
067C   00BB           01461         movwf   dat
067D   083B           01462         movf    dat,w
067E   39F0           01463         andlw   0xF0
067F   3E04           01464         addlw   4
0680   0088           01465         movwf   PORTD
0681   1588           01466         bsf             E                               ;
0682   2???           01467         call    delay5ms        ;__    __
0683   1188           01468         bcf             E                               ;  |__|
0684   0E3B           01469         swapf   dat,w
0685   39F0           01470         andlw   0xF0
0686   3E04           01471         addlw   4
0687   0088           01472         movwf   PORTD
0688   1588           01473         bsf             E                               ;
0689   2???           01474         call    delay5ms        ;__    __
068A   1188           01475         bcf             E                               ;  |__|
068B   0008           01476         return
                      01477 
                      01478 
                      01479 ;***************************************
                      01480 ; PC INTERFACE SUBROUTINES (modified from sample code)
                      01481 ;***************************************
068C                  01482 InitUSART
068C   1683           01483         bsf       STATUS,RP0     ; select bank 1
068D   300F           01484         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
068E   0099           01485         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
068F   0198           01486         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01487 
0690   1283           01488         bcf       STATUS,RP0     ; select bank 0
0691   1798           01489         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0692   1618           01490         bsf       RCSTA,CREN     ; continuous receive
                      01491 
0693   1683           01492         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0694   1698           01493         bsf       TXSTA,TXEN     ; Transmit enable
0695   0008           01494         return
                      01495 
                      01496 
0696                  01497 writetoPC
                      01498 ; Writes the data in W to the PC
                      01499 ; end up in bank1!
0696   1283           01500         bcf       STATUS,RP0     ; Go to bank 0
0697   0099           01501         movwf     TXREG          ; Send contents of W to RS232
0698   1683           01502         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0699   1C98           01503         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
069A   2???           01504         goto      $-1
069B   0008           01505         return
                      01506 
                      01507 
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01508 ;***************************************
                      01509 ; ISR
                      01510 ; Currently only care about TMR0
                      01511 ; TMR0 overflows at 256*128; each time, decrement count76
                      01512 ; count76 thus hits 0 every 256*128*76 cycles = 1sec with 10MHz clock
                      01513 ; When this hapens, op_time increments
                      01514 ; Also check photodata every time for 2 sec = total of 152 reads
                      01515 ;***************************************
069C                  01516 isr
069C   00F9           01517     movwf   w_isr           ;save W and status
069D   0E03           01518     swapf   STATUS, W
069E   0183           01519     clrf    STATUS
069F   00FA           01520     movwf   status_isr
                      01521 
06A0   0BC4           01522     decfsz  count76, F     ;if count76 gets to 76 it's been one second
06A1   2???           01523     goto    end_isr
                      01524     movlf   D'76', count76  ;so reset count76
06A2   304C               M         movlw   D'76'
06A3   00C4               M         movwf   count76
06A4   0AB3           01525     incf    op_time, F         ; and increment op_time
                      01526 
06A5                  01527 end_isr
                      01528 
06A5   1889           01529     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
06A6   0AC7           01530     incf    photocount, F       ;if it is 1, light is on so photocount++
                      01531 
06A7   0E7A           01532     swapf   status_isr, W   ;restore W and status
06A8   0083           01533     movwf   STATUS
06A9   0EF9           01534     swapf   w_isr, F
06AA   0E79           01535     swapf   w_isr, W
06AB   110B           01536     bcf     INTCON, T0IF    ;clear the interrupt flag
06AC   0009           01537     retfie
                      01538 
                      01539 
3F72                  01540     END
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005FB
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000666
D                                 00000005
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           0000063A
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             00000627
HalfS_0                           0000062D
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           00000648
InitUSART                         0000068C
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000340
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      00000669
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           0000067B
WR_INS                            0000066C
Z                                 00000002
_.org_1_0172                      00000172
_.org_1_01E2                      000001E2
_.org_1_0209                      00000209
_.org_1_0229                      00000229
_.org_1_022E                      0000022E
_.org_1_0247                      00000247
_.org_1_02AD                      000002AD
_.org_1_031D                      0000031D
_.org_1_033E                      0000033E
_.org_1_062E                      0000062E
_.org_1_0630                      00000630
_.org_1_0633                      00000633
_.org_1_063B                      0000063B
_.org_1_0644                      00000644
_.org_1_069A                      0000069A
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001C6
add3huns                          00000618
add3ones                          0000061E
add3tens                          0000061B
badkey                            000002AC
badkeyagain                       0000033D
big_number                        000005F4
bignumcount                       00000043
candle_index                      00000046
carryones                         00000621
carrytens                         00000624
check_1                           00000385
check_2                           0000038E
check_3                           00000398
check_4                           000003A2
check_5                           000003AC
check_6                           000003B6
check_7                           000003C0
check_8                           000003CA
check_9                           000003D4
check_FF                          000004B5
check_LED                         0000042B
check_LF                          0000049A
check_defective                   000003E4
check_done                        0000029B
check_export                      000003F0
check_flick                       0000043A
check_for_fail                    000004B8
check_immapeace                   0000032C
check_log1                        0000024B
check_log2                        00000253
check_log3                        0000025C
check_log4                        00000265
check_log5                        0000026E
check_log6                        00000277
check_log7                        00000280
check_log8                        00000289
check_log9                        00000292
check_next                        000004BE
check_none                        0000040E
check_nothx                       00000327
check_pass                        0000041C
check_standby                     000003F6
check_start                       00000407
check_summary                     000003DE
check_threshold1                  000001B7
check_threshold2                  000001BF
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

check_time                        000003EA
check_wanna                       00000321
com                               0000003A
count76                           00000044
dat                               0000003B
decrement                         0000035E
default_key                       0000040C
default_state                     00000449
defective                         00000478
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          00000636
detect_candle                     00000195
display_log                       000002AF
display_state                     0000040D
end_check_fail                    000004D0
end_isr                           000006A5
end_operation                     000001CA
export                            000004F9
finish_motor                      00000364
first_two                         00000366
halfway                           00000350
huns                              00000040
i2c_common_setup                  00000000
information                       00000384
init                              000000E7
isr                               0000069C
keytemp                           00000037
last_two                          00000375
logs                              00000230
more_than_six                     000004CF
morethansix                       00000045
motor_count                       00000049
motor_del                         0000063F
motor_del_0                       00000643
movff                             
movlf                             
newline                           
no_huns                           000004E5
no_log                            000002C7
no_tens                           000004EB
nohuns                            00000563
notens                            0000056D
now_FF                            0000049C
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000047
photoval                          00000048
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

poll                              00000228
polling                           00000246
printASC                          
printBCD                          
printchar                         
read_EEPROM                       000002B2
read_rtc                          00000000
restart_motor                     00000361
rotate                            0000018C
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001D9
shiftlogs_0                       000001DD
spacebar                          
start                             00000174
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000342
start_year1                       0000002A
start_year10                      00000029
startfrom3                        0000004A
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           0000044A
tens                              00000041
test_candle                       000001AF
threshold1                        D'2'
threshold2                        D'151'
time                              000004D1
w_isr                             00000079
waiting                           0000010C
wanna_export                      0000031C
writeASC                          
writeBCD                          
write_log1                        000001FF
write_log1_0                      00000206
MPASM 5.55                          MAIN.ASM   4-1-2014  17:08:12         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

write_rtc                         00000000
writechar                         
writetoPC                         00000696
yes_log                           000002D3

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

