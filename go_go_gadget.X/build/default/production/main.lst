MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'10'
                      00014     #define threshold2  D'142'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017 
                      00018 
                      00019 ;***************************************
                      00020 ; VARIABLES
                      00021 ;***************************************
                      00022 
                      00023 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00024 
                      00025     cblock      0x20
                      00026     ; Important information (will be displayed)
  00000020            00027         state1     ;where   0 = none      1 = pass
  00000021            00028         state2     ;        2 = led fail  3 = flicker fail
  00000022            00029         state3
  00000023            00030         state4
  00000024            00031         state5
  00000025            00032         state6
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000026            00033         state7
  00000027            00034         state8
  00000028            00035         state9
  00000029            00036         start_year10    ;starting time (for log)
  0000002A            00037         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00038         start_month10
  0000002C            00039         start_month1
  0000002D            00040         start_date10
  0000002E            00041         start_date1
  0000002F            00042         start_hour10
  00000030            00043         start_hour1
  00000031            00044         start_min10
  00000032            00045         start_min1
  00000033            00046         op_time     ;BCD in seconds
  00000034            00047         num_tot     ;BCD
  00000035            00048         num_LF      ;BCD
  00000036            00049         num_FF      ;BCD
                      00050 ; For general program / interface: temps, counters, etc.
  00000037            00051         keytemp         ; for data display mode
  00000038            00052         statetemp
  00000039            00053                 Table_Counter   ; for LCD stuff
  0000003A            00054                 com
  0000003B            00055                 dat
  0000003C            00056         delH          ;for delay 0.5s routine
  0000003D            00057         delM
  0000003E            00058         delL
  0000003F            00059         op_time_save    ;for operation time
  00000040            00060         huns
  00000041            00061         tens
  00000042            00062         ones
  00000043            00063         bignumcount
  00000044            00064         count76         ;for isr
  00000045            00065         morethansix     ;for defective
                      00066 ; For machine program: temps, counters, etc.
  00000046            00067         candle_index
  00000047            00068         photocount      ;for testing candle
  00000048            00069         photoval
  00000049            00070         motor_count     ;for rotate
  0000004A            00071         startfrom3      ;for rotate troubleshooting
                      00072     endc
                      00073 
                      00074     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00075         w_isr
  0000007A            00076         status_isr
                      00077         endc
                      00078 
                      00079 
                      00080 ;***************************************
                      00081 ; MACROS
                      00082 ;***************************************
                      00083 
                      00084 ; Display a msg on LCD
                      00085 Display macro   Message
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086                 local   loop_disp
                      00087                 local   end_disp
                      00088                 clrf    Table_Counter
                      00089                 clrw
                      00090 loop_disp
                      00091         movf    Table_Counter,W
                      00092                 call    Message
                      00093                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00094                 btfsc   STATUS,Z
                      00095                 goto    end_disp
                      00096                 call    WR_DATA
                      00097                 incf    Table_Counter,F
                      00098                 goto    loop_disp
                      00099 end_disp
                      00100                 endm
                      00101 
                      00102 
                      00103 ;Shortcuts for moving literals / registers
                      00104 movlf   macro   l, f
                      00105         movlw   l
                      00106         movwf   f
                      00107         endm
                      00108 
                      00109 movff   macro   source, dest
                      00110         movf    source, W
                      00111         movwf   dest
                      00112         endm
                      00113 
                      00114 ; Write to LCD (all in bank0 please)
                      00115 writeBCD    macro   reg         ; from a register containing BCD
                      00116             movf    reg, W
                      00117             addlw   B'00110000'
                      00118             call WR_DATA
                      00119             endm
                      00120 
                      00121 writechar   macro   asc             ;ASCII code literal (or in "")
                      00122             movlw   asc
                      00123             call    WR_DATA
                      00124             endm
                      00125 
                      00126 writeASC        macro   reg         ;from a register containing ASCII
                      00127             movf    reg, W
                      00128             call WR_DATA
                      00129             endm
                      00130 
                      00131 spacebar    macro
                      00132             movlw   B'00010100'
                      00133             call    WR_INS
                      00134             endm
                      00135 
                      00136 ;Print to PC (hyperterminal)
                      00137 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00138             movlw   char
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139             call    writetoPC
                      00140             endm
                      00141 
                      00142 printASC    macro   reg            ;ASCII code inside a register
                      00143             banksel reg
                      00144             movf    reg,W
                      00145             call    writetoPC
                      00146             endm
                      00147 
                      00148 printBCD    macro   BCD            ;BCD inside a register
                      00149             banksel BCD
                      00150             movf    BCD, W
                      00151             addlw   0x30
                      00152             call    writetoPC
                      00153             endm
                      00154 
                      00155 newline     macro
                      00156             printchar   0xA ;changes line
                      00157             printchar   0xD ;goes back to left
                      00158             endm
                      00159 ;***************************************
                      00160 ; VECTORS
                      00161 ;***************************************
                      00162 
                      00163     ORG       0x000
0000   2???           00164          goto      init
                      00165     ORG       0x004
0004   2???           00166         goto    isr
                      00167 
                      00168 
                      00169 ;***************************************
                      00170 ; TABLES (MESSAGES)
                      00171 ;***************************************
0005                  00172 Standby_Msg
0005   0782           00173                 addwf   PCL,F
0006   3453 3454 3441 00174                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00175 Start_Msg
000E   0782           00176         addwf   PCL,F
000F   3449 346E 3473 00177         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00178 End_Msg
0020   0782           00179         addwf   PCL,F
0021   3443 346F 346D 00180         dt      "Complete",0
       3470 346C 3465 
       3474 3465 3400 
002A                  00181 Time_Msg
002A   0782           00182                 addwf   PCL,F
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002B   344F 3470 3465 00183                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00184 Seconds
003B   0782           00185         addwf   PCL,F
003C   3420 3473 3465 00186         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00187 Not_present
0045   0782           00188         addwf   PCL,F
0046   343A 3420 344E 00189         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00190 Pass
0054   0782           00191                 addwf   PCL,F
0055   343A 3420 3450 00192                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00193 LED_fail
005C   0782           00194                 addwf   PCL,F
005D   343A 3420 344C 00195                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00196 Flick_fail
0068   0782           00197                 addwf   PCL,F
0069   343A 3420 3446 00198                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00199 Total_Msg
0078   0782           00200         addwf   PCL,F
0079   3454 346F 3474 00201         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00202 LF
0089   0782           00203         addwf   PCL,F
008A   344C 3446 343A 00204         dt      "LF: ",0
       3420 3400 
008F                  00205 FF
008F   0782           00206         addwf   PCL,F
0090   3446 3446 343A 00207         dt      "FF: ",0
       3420 3400 
0095                  00208 None
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095   0782           00209         addwf   PCL,F
0096   343C 346E 346F 00210         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00211 Logs_Msg1
009D   0782           00212         addwf   PCL,F
009E   3431 342D 3439 00213         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00214 Logs_Msg2
00AE   0782           00215         addwf   PCL,F
00AF   3453 3454 3441 00216         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00217 Logs_Msg3
00BF   0782           00218         addwf   PCL,F
00C0   3445 3478 3470 00219         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00220 Logs_Msg4
00C8   0782           00221         addwf   PCL,F
00C9   344C 344F 3447 00222         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00223 Op_at
00D8   0782           00224         addwf   PCL,F
00D9   344F 3470 3465 00225         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00226 
                      00227 ;***************************************
                      00228 ; MAIN PROGRAM
                      00229 ;***************************************
                      00230 
00E7                  00231 init
                      00232         movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E7   3020               M         movlw   b'00100000'
00E8   008B               M         movwf   INTCON
                      00233 
00E9   1683 1303      00234         banksel   TRISA                 ; bank 1
                      00235         movlf     b'11000110', OPTION_REG ; 1:128 prescaler for timer
00EB   30C6               M         movlw   b'11000110'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00236         clrf      TRISA                 ; PortA[3:0] used for motor
                      00237         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00238         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00239         clrf      TRISD                 ; PortD[2:7] is LCD output
                      00240         movlf     b'011', TRISE         ; PortE is ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00241         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00242 
00F7   1283           00243         bcf       STATUS,RP0        ; select bank 0
00F8   0185           00244         clrf      PORTA
00F9   0186           00245         clrf      PORTB
00FA   0187           00246         clrf      PORTC
00FB   0188           00247         clrf      PORTD
00FC   0189           00248         clrf      PORTE
                      00249 
00FD   2???           00250         call      i2c_common_setup  ;Set up I2C for communication. End in bank 1
00FE   2???           00251         call      InitLCD           ;Initialize the LCD. End in bank0
00FF   2???           00252         call      InitUSART         ;Set up USART for RS232. End in bank1
                      00253 
0100   1283           00254         bcf       STATUS,RP0        ;Back to bank0
                      00255 
                      00256         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0101   01B9               M                 clrf    Table_Counter
0102   0103               M                 clrw
0103                      M loop_disp
0103   0839               M         movf    Table_Counter,W
0104   2???               M                 call    Standby_Msg
0105   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0106   1903               M                 btfsc   STATUS,Z
0107   2???               M                 goto    end_disp
0108   2???               M                 call    WR_DATA
0109   0AB9               M                 incf    Table_Counter,F
010A   2???               M                 goto    loop_disp
010B                      M end_disp
010B   2???           00257         call    Switch_Lines
                      00258 
                      00259  ;--------------------------------------------------
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00260  ;      STANDBY MODE
                      00261 
010C                  00262 waiting
                      00263         ; Display date and time.
                      00264         ; Also save starting time for log (will stop updating once we start)
                      00265         writechar "2"       ;First line shows 20**/**/**
010C   3032               M             movlw   "2"
010D   2???               M             call    WR_DATA
                      00266         writechar "0"
010E   3030               M             movlw   "0"
010F   2???               M             call    WR_DATA
                      00267         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0110   3006               M         movlw   0x06
0111   1283 1303          M         banksel 0x73
0113   00F3               M         movwf   0x73
0114   2???               M         call    read_rtc
0115   1283 1303          M         banksel 0x75
0117   0875               M         movf    0x75,w
0118   2???               M         call    rtc_convert   
0119   0877           00268                 movf    0x77,W
011A   00A9           00269         movwf    start_year10    ;Save starting year dig10
011B   2???           00270                 call    WR_DATA
011C   0878           00271                 movf    0x78,W
011D   00AA           00272         movwf    start_year1    ;Save starting year dig1
011E   2???           00273                 call    WR_DATA
                      00274                 writechar "/"
011F   302F               M             movlw   "/"
0120   2???               M             call    WR_DATA
                      00275                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0121   3005               M         movlw   0x05
0122   1283 1303          M         banksel 0x73
0124   00F3               M         movwf   0x73
0125   2???               M         call    read_rtc
0126   1283 1303          M         banksel 0x75
0128   0875               M         movf    0x75,w
0129   2???               M         call    rtc_convert   
012A   0877           00276                 movf    0x77,W
012B   00AB           00277         movwf    start_month10    ;Save starting month dig10
012C   2???           00278                 call    WR_DATA
012D   0878           00279                 movf    0x78,W
012E   00AC           00280         movwf    start_month1    ;Save starting month dig1
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

012F   2???           00281                 call    WR_DATA
                      00282                 writechar       "/"
0130   302F               M             movlw   "/"
0131   2???               M             call    WR_DATA
                      00283                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0132   3004               M         movlw   0x04
0133   1283 1303          M         banksel 0x73
0135   00F3               M         movwf   0x73
0136   2???               M         call    read_rtc
0137   1283 1303          M         banksel 0x75
0139   0875               M         movf    0x75,w
013A   2???               M         call    rtc_convert   
013B   0877           00284                 movf    0x77,W
013C   00AD           00285         movwf    start_date10    ;Save starting date dig10
013D   2???           00286                 call    WR_DATA
013E   0878           00287                 movf    0x78,W
013F   00AE           00288         movwf    start_date1    ;Save starting date dig1
0140   2???           00289                 call    WR_DATA
                      00290                 spacebar
0141   3014               M             movlw   B'00010100'
0142   2???               M             call    WR_INS
                      00291                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0143   3002               M         movlw   0x02
0144   1283 1303          M         banksel 0x73
0146   00F3               M         movwf   0x73
0147   2???               M         call    read_rtc
0148   1283 1303          M         banksel 0x75
014A   0875               M         movf    0x75,w
014B   2???               M         call    rtc_convert   
014C   0877           00292                 movf    0x77,W
014D   00AF           00293         movwf    start_hour10    ;Save starting hour dig10
014E   2???           00294                 call    WR_DATA
014F   0878           00295                 movf    0x78,W
0150   00B0           00296         movwf    start_hour1    ;Save starting hour dig1
0151   2???           00297                 call    WR_DATA
                      00298                 writechar ":"
0152   303A               M             movlw   ":"
0153   2???               M             call    WR_DATA
                      00299                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0154   3001               M         movlw   0x01
0155   1283 1303          M         banksel 0x73
0157   00F3               M         movwf   0x73
0158   2???               M         call    read_rtc
0159   1283 1303          M         banksel 0x75
015B   0875               M         movf    0x75,w
015C   2???               M         call    rtc_convert   
015D   0877           00300                 movf    0x77,W
015E   00B1           00301         movwf    start_min10    ;Save starting min dig10
015F   2???           00302                 call    WR_DATA
0160   0878           00303                 movf    0x78,W
0161   00B2           00304         movwf    start_min1    ;Save starting min dig1
0162   2???           00305                 call    WR_DATA
                      00306 
                      00307         ; Move cursor back to start of second line
                      00308         ; We will update displayed time but not the word "STANDBY"
0163   30C0           00309         movlw   B'11000000'
0164   2???           00310         call    WR_INS
                      00311 
                      00312         ;Poll to start (will have to hold key for ~0.5sec)
0165   1C86           00313          btfss          PORTB,1     ;Wait until data is available from the keypad
0166   2???           00314          goto           waiting
                      00315 
0167   0E06           00316          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0168   390F           00317          andlw          0x0F
0169   00B7           00318          movwf      keytemp
016A   3A0C           00319          xorlw      0xC         ;Will be all zeros if its "START"
016B   1903           00320          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
016C   2???           00321          goto       start
                      00322 
016D   0837           00323          movf       keytemp,W     ;Go to log interface
016E   3A0E           00324          xorlw      0xE
016F   1903           00325          btfsc      STATUS,Z
0170   2???           00326          goto       logs
                      00327 
0171   1886           00328          btfsc          PORTB,1     ;Wait until key is released
0172   2???           00329          goto           $-1
0173   2???           00330          goto       waiting
                      00331 
                      00332 ;-----------------------------------------------------------
                      00333 ;       ACTUAL OPERATION
                      00334 
0174                  00335 start
                      00336         ;clear numbers
0174   01B6           00337         clrf    num_FF
0175   01B4           00338         clrf    num_tot
0176   01B5           00339         clrf    num_LF
0177   01CA           00340         clrf    startfrom3
                      00341 
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00342         ;Start the timer
                      00343         movlf       D'76', count76
0178   304C               M         movlw   D'76'
0179   00C4               M         movwf   count76
017A   01B3           00344         clrf        op_time
017B   0181           00345         clrf        TMR0
017C   178B           00346         bsf         INTCON, GIE     ;enable interrupts
                      00347 
                      00348         ;Display starting message
017D   2???           00349         call        Clear_Display
                      00350         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
017E   01B9               M                 clrf    Table_Counter
017F   0103               M                 clrw
0180                      M loop_disp
0180   0839               M         movf    Table_Counter,W
0181   2???               M                 call    Start_Msg
0182   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0183   1903               M                 btfsc   STATUS,Z
0184   2???               M                 goto    end_disp
0185   2???               M                 call    WR_DATA
0186   0AB9               M                 incf    Table_Counter,F
0187   2???               M                 goto    loop_disp
0188                      M end_disp
                      00351 
                      00352 
                      00353 ;****FAKE CODE for easy testing **************************
                      00354 ;        ; Just delaying
                      00355 ;        call        HalfS
                      00356 ;        call        HalfS
                      00357 ;
                      00358 ;       ; Putting values in manually.
                      00359 ;        movlf     B'01', state1     ;pass
                      00360 ;        movlf     B'01', state2     ;pass
                      00361 ;        movlf     B'10', state3     ;LED fail
                      00362 ;        movlf     B'01', state4     ;pass
                      00363 ;        movlf     B'01', state5     ;pass
                      00364 ;        movlf     B'01', state6     ;pass
                      00365 ;        movlf     B'01', state7     ;pass
                      00366 ;        movlf     B'11', state8     ;flicker fail
                      00367 ;        movlf     B'01', state9     ;pass
                      00368 ;        movlf     D'1', num_LF
                      00369 ;        movlf     D'1', num_FF
                      00370 ;        movlf     D'9', num_tot
                      00371 ;*******************************************************
                      00372 
                      00373 ; choose fake or real!
                      00374 
                      00375 ;******REAL CODE ******************************************
0188   01C6           00376     clrf    candle_index     ; n = 0
0189   1383           00377     bcf STATUS, IRP
                      00378     movlf   0x1F, FSR        ;pointing at right before state1
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

018A   301F               M         movlw   0x1F
018B   0084               M         movwf   FSR
                      00379 
018C                  00380 rotate
018C   3009           00381    movlw   d'9'               ; done inspecting once n=9
018D   0246           00382    subwf   candle_index,W     ; candle_index (n) is # you've already tested before rotating
018E   1903           00383    btfsc   STATUS,Z
018F   2???           00384    goto    end_operation
                      00385    movlf    D'5', motor_count
0190   3005               M         movlw   D'5'
0191   00C9               M         movwf   motor_count
0192   2???           00386    call    ROTATEMOTOR
0193   0AC6           00387    incf    candle_index, F
0194   0A84           00388    incf    FSR, F
                      00389 
0195                  00390 detect_candle
0195   1809           00391    btfsc   IRDATA
0196   2???           00392    goto    test_candle     ;yes candle, go test it
                      00393 
0197   2???           00394    call     first_two
0198   1809           00395    btfsc    IRDATA
0199   2???           00396    goto     test_candle     ;yes candle, it just lagged 2 steps
019A   2???           00397    call     last_two
019B   1809           00398    btfsc    IRDATA
019C   2???           00399    goto     test_candle     ;yes candle, it just lagged 4 steps
019D   2???           00400    call     first_two
019E   1809           00401    btfsc    IRDATA
019F   2???           00402    goto     test_candle     ;yes candle, it just lagged 6 steps
01A0   2???           00403    call     last_two
01A1   1809           00404    btfsc    IRDATA
01A2   2???           00405    goto     test_candle     ;yes candle, it just lagged 8 steps
                      00406 
                      00407    movlf   D'0',INDF       ;really no candle, keep rotating 12 more steps
01A3   3000               M         movlw   D'0'
01A4   0080               M         movwf   INDF
01A5   3009           00408    movlw   d'9'               ; done inspecting once n=9
01A6   0246           00409    subwf   candle_index,W     ; candle_index (n) is # you've already tested before rotating
01A7   1903           00410    btfsc   STATUS,Z
01A8   2???           00411    goto    end_operation
                      00412    movlf   D'3', motor_count
01A9   3003               M         movlw   D'3'
01AA   00C9               M         movwf   motor_count
01AB   2???           00413    call    ROTATEMOTOR
01AC   0AC6           00414    incf    candle_index, F
01AD   0A84           00415    incf    FSR, F
01AE   2???           00416    goto    detect_candle
                      00417 
                      00418 ;   call     four_steps
                      00419 ;   btfsc    IRDATA
                      00420 ;   goto     test_candle     ;yes candle, it just lagged once
                      00421 ;   call     four_steps
                      00422 ;   btfsc    IRDATA
                      00423 ;   goto     test_candle     ;yes candle, it just lagged twice
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00424 ;   movlf    D'0',INDF       ;really no candle, keep rotating
                      00425 ;   movlw   d'9'               ; done inspecting once n=9
                      00426 ;   subwf   candle_index,W     ; candle_index (n) is # you've already tested before rotating
                      00427 ;   btfsc   STATUS,Z
                      00428 ;   goto    end_operation
                      00429 ;   call    twelve_steps
                      00430 ;   incf    candle_index, F
                      00431 ;   incf    FSR, F
                      00432 ;   goto    detect_candle
                      00433 
                      00434 ;   movlf   D'0', INDF      ;no candle, state = not present
                      00435 ;   goto    rotate                 ;and go try next
                      00436 
01AF                  00437 test_candle
01AF   0AB4           00438    incf    num_tot, F                   ; keeping track of total number of candles
01B0   01C7           00439    clrf    photocount
01B1   2???           00440    call    HalfS                ; delay 2 sec or whatever
01B2   2???           00441    call    HalfS
01B3   2???           00442    call    HalfS
01B4   2???           00443    call    HalfS
                      00444    movff   photocount, photoval        ;to ensure it wont change again
01B5   0847               M         movf    photocount, W
01B6   00C8               M         movwf   photoval
01B7                  00445 check_threshold1
01B7   300A           00446     movlw    threshold1
01B8   0248           00447     subwf   photoval, W
01B9   1803           00448     btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01BA   2???           00449     goto check_threshold2
                      00450     movlf   D'2', INDF      ; < threshold 1 means led fail
01BB   3002               M         movlw   D'2'
01BC   0080               M         movwf   INDF
01BD   0AB5           00451         incf    num_LF, F
01BE   2???           00452     goto    rotate
01BF                  00453 check_threshold2
01BF   308E           00454     movlw    threshold2
01C0   0248           00455     subwf   photoval, W
01C1   1803           00456     btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01C2   2???           00457     goto aboveboth
                      00458     movlf   D'1', INDF      ; < threshold 2 means pass
01C3   3001               M         movlw   D'1'
01C4   0080               M         movwf   INDF
01C5   2???           00459     goto    rotate
01C6                  00460 aboveboth
                      00461     movlf   D'3', INDF       ;else flicker fail
01C6   3003               M         movlw   D'3'
01C7   0080               M         movwf   INDF
01C8   0AB6           00462     incf    num_FF, F
01C9   2???           00463     goto    rotate
                      00464  ;****************************************************
                      00465 
01CA                  00466 end_operation
                      00467 
                      00468         movlf   D'5', motor_count
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01CA   3005               M         movlw   D'5'
01CB   00C9               M         movwf   motor_count
01CC   2???           00469         call    ROTATEMOTOR ; rotate once more  back to starting position
01CD   138B           00470         bcf         INTCON, GIE  ;disable interrupts to stop timer
                      00471 
                      00472         ;Display "complete"
01CE   2???           00473         call       Clear_Display
                      00474         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01CF   01B9               M                 clrf    Table_Counter
01D0   0103               M                 clrw
01D1                      M loop_disp
01D1   0839               M         movf    Table_Counter,W
01D2   2???               M                 call    End_Msg
01D3   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
01D4   1903               M                 btfsc   STATUS,Z
01D5   2???               M                 goto    end_disp
01D6   2???               M                 call    WR_DATA
01D7   0AB9               M                 incf    Table_Counter,F
01D8   2???               M                 goto    loop_disp
01D9                      M end_disp
                      00475 
                      00476         ; Shift logs 1-8 -> 2-9
                      00477         ; Then store current run as log 1
01D9                  00478 shiftlogs
01D9   1283 1703      00479         banksel     EEADR               ; bank 2
                      00480         movlf       D'111', EEADR        ; start shifting from 111->125
01DB   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DC   008D               M         movwf   EEADR
                      00481 
01DD                  00482 shiftlogs_0
01DD   1683 1703      00483         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DF   138C           00484         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E0   140C           00485         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E1   188C           00486         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01E2   2???           00487         goto        $-1
01E3   1283 1703      00488         banksel     EEADR               ;bank 2
01E5   300E           00489         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E6   078D           00490         addwf       EEADR, F
01E7   1683 1703      00491         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E9   138C           00492         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EA   150C           00493         bsf         EECON1, WREN
01EB   3055           00494         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EC   008D           00495         movwf       EECON2
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01ED   30AA           00496         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EE   008D           00497         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EF   148C           00498         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F0   110C           00499         bcf         EECON1, WREN
01F1   1283 1703      00500         banksel     EEADR               ;bank 2
01F3   300E           00501         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F4   020D           00502         subwf       EEADR, W
01F5   1903           00503         btfsc       STATUS, Z
01F6   2???           00504         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00505 
01F7   1283 1303      00506         banksel op_time             ; for some reason I need to delay here
01F9   2???           00507         call   delay5ms             ; or else I get an infinite loop
01FA   1283 1703      00508         banksel EEADR
                      00509 
01FC   300F           00510         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FD   028D           00511         subwf       EEADR, F
01FE   2???           00512         goto        shiftlogs_0
                      00513 
01FF                  00514 write_log1
01FF   1283 1703      00515         banksel     EEADR
0201   1383           00516         bcf         STATUS, IRP
                      00517         movlf       0x37, FSR           ;points to one after last important data
0202   3037               M         movlw   0x37
0203   0084               M         movwf   FSR
                      00518         movlf       D'14', EEADR        ;points to one after last place to write to
0204   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0205   008D               M         movwf   EEADR
0206                  00519 write_log1_0
0206   1683 1703      00520         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0208   188C           00521         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
0209   2???           00522         goto        $-1
020A   1283 1703      00523         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
020C   038D           00524         decf        EEADR, F            ;writing backwords
020D   0384           00525         decf        FSR, F
                      00526         movff       INDF, EEDATA
020E   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
020F   008C               M         movwf   EEDATA
0210   1683 1703      00527         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0212   138C           00528         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0213   150C           00529         bsf         EECON1, WREN
0214   3055           00530         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0215   008D           00531         movwf       EECON2
0216   30AA           00532         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0217   008D           00533         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0218   148C           00534         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0219   110C           00535         bcf         EECON1, WREN
021A   1283 1703      00536         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
021C   088D           00537         movf        EEADR, F
021D   1D03           00538         btfss       STATUS, Z           ;if EEADR = 0 we're done
021E   2???           00539         goto        write_log1_0
021F   1283           00540         bcf         STATUS, RP0         ;so go back to bank 0 and continue
0220   1303           00541         bcf         STATUS, RP1
                      00542 
                      00543         ; Display info screens
0221   2???           00544         call       time             ; "Operation time: X sec"
0222   2???           00545         call       HalfS
0223   2???           00546         call       HalfS
0224   2???           00547         call       summary          ; "Total candles: X. Defective: Y"
0225   2???           00548         call       HalfS
0226   2???           00549         call       HalfS
0227   2???           00550         call       defective        ; "FF: a b c. LF: d e f"
                      00551 ;-----------------------------------------------------------------------
                      00552 ; Data display interface
                      00553 
0228   1C86           00554 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
0229   2???           00555          goto           $-1
                      00556 
022A   0E06           00557          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
022B   390F           00558          andlw          0x0F
022C   2???           00559          call       information ;Do the right thing
                      00560 
022D   1886           00561          btfsc          PORTB,1     ;Wait until key is released
022E   2???           00562          goto           $-1
022F   2???           00563          goto       poll
                      00564 
                      00565 
                      00566 ;-------------------------------------------------------------------------
                      00567 ; LOGS INTERFACE
                      00568 ; Shows last runs of last 9 logs
                      00569 ; Access from STANDBY and return to STANDBY
                      00570 
0230                  00571 logs
0230   2???           00572     call    Clear_Display
                      00573     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0231   01B9               M                 clrf    Table_Counter
0232   0103               M                 clrw
0233                      M loop_disp
0233   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0234   2???               M                 call    Logs_Msg1
0235   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0236   1903               M                 btfsc   STATUS,Z
0237   2???               M                 goto    end_disp
0238   2???               M                 call    WR_DATA
0239   0AB9               M                 incf    Table_Counter,F
023A   2???               M                 goto    loop_disp
023B                      M end_disp
023B   2???           00574     call    Switch_Lines
                      00575     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
023C   01B9               M                 clrf    Table_Counter
023D   0103               M                 clrw
023E                      M loop_disp
023E   0839               M         movf    Table_Counter,W
023F   2???               M                 call    Logs_Msg2
0240   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0241   1903               M                 btfsc   STATUS,Z
0242   2???               M                 goto    end_disp
0243   2???               M                 call    WR_DATA
0244   0AB9               M                 incf    Table_Counter,F
0245   2???               M                 goto    loop_disp
0246                      M end_disp
                      00576 
0246                  00577 polling
0246   1C86           00578     btfss               PORTB,1     ;Wait until data is available from the keypad
0247   2???           00579     goto                $-1
                      00580 
0248   0E06           00581     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0249   390F           00582     andlw               0x0F
024A   00B7           00583     movwf       keytemp     ; Save which key was pressed
                      00584 
024B                  00585 check_log1
024B   3A00           00586     xorlw   0x0         ;will be all zeros if its 1
024C   1D03           00587     btfss   STATUS,Z    ;and Z will be high, so skip
024D   2???           00588     goto    check_log2
024E   1283 1703      00589     banksel EEADR
                      00590     movlf   d'0', EEADR
0250   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0251   008D               M         movwf   EEADR
0252   2???           00591     goto    display_log
                      00592 
0253                  00593 check_log2
0253   0837           00594     movf    keytemp, W
0254   3A01           00595     xorlw   0x1
0255   1D03           00596     btfss   STATUS,Z
0256   2???           00597     goto    check_log3
0257   1283 1703      00598     banksel EEADR
                      00599     movlf   d'14', EEADR
0259   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

025A   008D               M         movwf   EEADR
025B   2???           00600     goto    display_log
                      00601 
025C                  00602 check_log3
025C   0837           00603     movf    keytemp, W
025D   3A02           00604     xorlw   0x2
025E   1D03           00605     btfss   STATUS,Z
025F   2???           00606     goto    check_log4
0260   1283 1703      00607     banksel EEADR
                      00608     movlf   d'28', EEADR
0262   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0263   008D               M         movwf   EEADR
0264   2???           00609     goto    display_log
                      00610 
0265                  00611 check_log4
0265   0837           00612     movf    keytemp, W
0266   3A04           00613     xorlw   0x4
0267   1D03           00614     btfss   STATUS,Z
0268   2???           00615     goto    check_log5
0269   1283 1703      00616     banksel EEADR
                      00617     movlf   d'42', EEADR
026B   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026C   008D               M         movwf   EEADR
026D   2???           00618     goto    display_log
                      00619 
026E                  00620 check_log5
026E   0837           00621     movf    keytemp, W
026F   3A05           00622     xorlw   0x5
0270   1D03           00623     btfss   STATUS,Z
0271   2???           00624     goto    check_log6
0272   1283 1703      00625     banksel EEADR
                      00626     movlf   d'56', EEADR
0274   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0275   008D               M         movwf   EEADR
0276   2???           00627     goto    display_log
                      00628 
0277                  00629 check_log6
0277   0837           00630     movf    keytemp, W
0278   3A06           00631     xorlw   0x6
0279   1D03           00632     btfss   STATUS,Z
027A   2???           00633     goto    check_log7
027B   1283 1703      00634     banksel EEADR
                      00635     movlf   d'70', EEADR
027D   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027E   008D               M         movwf   EEADR
027F   2???           00636     goto    display_log
                      00637 
0280                  00638 check_log7
0280   0837           00639     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0281   3A08           00640     xorlw   0x8
0282   1D03           00641     btfss   STATUS,Z
0283   2???           00642     goto    check_log8
0284   1283 1703      00643     banksel EEADR
                      00644     movlf   d'84', EEADR
0286   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0287   008D               M         movwf   EEADR
0288   2???           00645     goto    display_log
                      00646 
0289                  00647 check_log8
0289   0837           00648     movf    keytemp, W
028A   3A09           00649     xorlw   0x9
028B   1D03           00650     btfss   STATUS,Z
028C   2???           00651     goto    check_log9
028D   1283 1703      00652     banksel EEADR
                      00653     movlf   d'98', EEADR
028F   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0290   008D               M         movwf   EEADR
0291   2???           00654     goto    display_log
                      00655 
0292                  00656 check_log9
0292   0837           00657     movf    keytemp, W
0293   3A0A           00658     xorlw   0xA
0294   1D03           00659     btfss   STATUS,Z
0295   2???           00660     goto    check_done
0296   1283 1703      00661     banksel EEADR
                      00662     movlf   d'112', EEADR
0298   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0299   008D               M         movwf   EEADR
029A   2???           00663     goto    display_log
                      00664 
029B                  00665 check_done
029B   0837           00666     movf    keytemp, W
029C   3A0D           00667     xorlw   0xD
029D   1D03           00668     btfss   STATUS,Z
029E   2???           00669     goto    badkey
029F   2???           00670     call    Clear_Display
                      00671     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02A0   01B9               M                 clrf    Table_Counter
02A1   0103               M                 clrw
02A2                      M loop_disp
02A2   0839               M         movf    Table_Counter,W
02A3   2???               M                 call    Standby_Msg
02A4   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02A5   1903               M                 btfsc   STATUS,Z
02A6   2???               M                 goto    end_disp
02A7   2???               M                 call    WR_DATA
02A8   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A9   2???               M                 goto    loop_disp
02AA                      M end_disp
02AA   2???           00672     call    Switch_Lines
02AB   2???           00673     goto    waiting
                      00674 
02AC                  00675 badkey
02AC   1886           00676     btfsc               PORTB,1     ;Wait until key is released
02AD   2???           00677     goto                $-1
02AE   2???           00678     goto        polling
                      00679 
                      00680 
02AF                  00681 display_log                 ;start in bank2
                      00682     ; move EEPROM data back to "current" data
02AF   1383           00683     bcf STATUS, IRP
                      00684     movlf   0x29, FSR
02B0   3029               M         movlw   0x29
02B1   0084               M         movwf   FSR
02B2                  00685 read_EEPROM
02B2   1683 1703      00686     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B4   138C           00687     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B5   140C           00688     bsf EECON1, RD          ; read EEPROM
02B6   1283 1703      00689     banksel EEDATA          ;bank 2
                      00690     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B8   080C               M         movf    EEDATA, W
02B9   0080               M         movwf   INDF
02BA   0A84           00691     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02BB   0A8D           00692     incf    EEADR, F
02BC   3037           00693     movlw   0x37            ;done if FSR = 0x37
02BD   0204           00694     subwf   FSR, W
02BE   1D03           00695     btfss   STATUS, Z
02BF   2???           00696     goto    read_EEPROM
                      00697 
                      00698     ;display that shit
02C0   1283 1303      00699     banksel Table_Counter   ; bank0
02C2   2???           00700     call    Clear_Display
                      00701     ;if first data is 0xFF (no log) just display "none"
02C3   30FF           00702     movlw   0xFF
02C4   0229           00703     subwf   start_year10, W
02C5   1D03           00704     btfss   STATUS, Z
02C6   2???           00705     goto yes_log
02C7                  00706 no_log
                      00707     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02C7   01B9               M                 clrf    Table_Counter
02C8   0103               M                 clrw
02C9                      M loop_disp
02C9   0839               M         movf    Table_Counter,W
02CA   2???               M                 call    None
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02CB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02CC   1903               M                 btfsc   STATUS,Z
02CD   2???               M                 goto    end_disp
02CE   2???               M                 call    WR_DATA
02CF   0AB9               M                 incf    Table_Counter,F
02D0   2???               M                 goto    loop_disp
02D1                      M end_disp
02D1   2???           00708     call    HalfS
02D2   2???           00709     goto    logs
                      00710     ;else display the log
02D3                  00711 yes_log
                      00712     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02D3   01B9               M                 clrf    Table_Counter
02D4   0103               M                 clrw
02D5                      M loop_disp
02D5   0839               M         movf    Table_Counter,W
02D6   2???               M                 call    Op_at
02D7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02D8   1903               M                 btfsc   STATUS,Z
02D9   2???               M                 goto    end_disp
02DA   2???               M                 call    WR_DATA
02DB   0AB9               M                 incf    Table_Counter,F
02DC   2???               M                 goto    loop_disp
02DD                      M end_disp
02DD   2???           00713     call    Switch_Lines
                      00714     writechar    "2"
02DE   3032               M             movlw   "2"
02DF   2???               M             call    WR_DATA
                      00715     writechar    "0"
02E0   3030               M             movlw   "0"
02E1   2???               M             call    WR_DATA
                      00716     writeASC   start_year10
02E2   0829               M             movf    start_year10, W
02E3   2???               M             call WR_DATA
                      00717     writeASC   start_year1
02E4   082A               M             movf    start_year1, W
02E5   2???               M             call WR_DATA
                      00718     writechar   "/"
02E6   302F               M             movlw   "/"
02E7   2???               M             call    WR_DATA
                      00719     writeASC   start_month10
02E8   082B               M             movf    start_month10, W
02E9   2???               M             call WR_DATA
                      00720     writeASC   start_month1
02EA   082C               M             movf    start_month1, W
02EB   2???               M             call WR_DATA
                      00721     writechar   "/"
02EC   302F               M             movlw   "/"
02ED   2???               M             call    WR_DATA
                      00722     writeASC   start_date10
02EE   082D               M             movf    start_date10, W
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EF   2???               M             call WR_DATA
                      00723     writeASC   start_date1
02F0   082E               M             movf    start_date1, W
02F1   2???               M             call WR_DATA
                      00724     writechar   " "
02F2   3020               M             movlw   " "
02F3   2???               M             call    WR_DATA
                      00725     writeASC   start_hour10
02F4   082F               M             movf    start_hour10, W
02F5   2???               M             call WR_DATA
                      00726     writeASC   start_hour1
02F6   0830               M             movf    start_hour1, W
02F7   2???               M             call WR_DATA
                      00727     writechar   ":"
02F8   303A               M             movlw   ":"
02F9   2???               M             call    WR_DATA
                      00728     writeASC  start_min10
02FA   0831               M             movf    start_min10, W
02FB   2???               M             call WR_DATA
                      00729     writeASC   start_min1
02FC   0832               M             movf    start_min1, W
02FD   2???               M             call WR_DATA
02FE   2???           00730     call    HalfS
02FF   2???           00731     call    HalfS
0300   2???           00732     call    time
0301   2???           00733     call    HalfS
0302   2???           00734     call    HalfS
0303   2???           00735     call    summary
0304   2???           00736     call    HalfS
0305   2???           00737     call    HalfS
                      00738     ;option to Export
0306   2???           00739     call    Clear_Display
                      00740     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0307   01B9               M                 clrf    Table_Counter
0308   0103               M                 clrw
0309                      M loop_disp
0309   0839               M         movf    Table_Counter,W
030A   2???               M                 call    Logs_Msg3
030B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
030C   1903               M                 btfsc   STATUS,Z
030D   2???               M                 goto    end_disp
030E   2???               M                 call    WR_DATA
030F   0AB9               M                 incf    Table_Counter,F
0310   2???               M                 goto    loop_disp
0311                      M end_disp
0311   2???           00741     call    Switch_Lines
                      00742     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0312   01B9               M                 clrf    Table_Counter
0313   0103               M                 clrw
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0314                      M loop_disp
0314   0839               M         movf    Table_Counter,W
0315   2???               M                 call    Logs_Msg4
0316   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0317   1903               M                 btfsc   STATUS,Z
0318   2???               M                 goto    end_disp
0319   2???               M                 call    WR_DATA
031A   0AB9               M                 incf    Table_Counter,F
031B   2???               M                 goto    loop_disp
031C                      M end_disp
                      00743 
031C                  00744 wanna_export
031C   1C86           00745     btfss               PORTB,1     ;Wait until data is available from the keypad
031D   2???           00746     goto                $-1
                      00747 
031E   0E06           00748     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
031F   390F           00749     andlw               0x0F
0320   00B7           00750     movwf       keytemp     ; Save which key was pressed
                      00751 
0321                  00752 check_wanna
0321   0837           00753     movf    keytemp, W
0322   3A0F           00754     xorlw   0xF
0323   1D03           00755     btfss   STATUS,Z
0324   2???           00756     goto    check_nothx
0325   2???           00757     call    export
0326   2???           00758     goto    logs
                      00759 
0327                  00760 check_nothx
0327   0837           00761     movf    keytemp, W
0328   3A0E           00762     xorlw   0xE
0329   1D03           00763     btfss   STATUS,Z
032A   2???           00764     goto    check_immapeace
032B   2???           00765     goto    logs
                      00766 
032C                  00767 check_immapeace
032C   0837           00768     movf    keytemp, W
032D   3A0D           00769     xorlw   0xD
032E   1D03           00770     btfss   STATUS,Z
032F   2???           00771     goto    badkeyagain
0330   2???           00772     call    Clear_Display
                      00773     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0331   01B9               M                 clrf    Table_Counter
0332   0103               M                 clrw
0333                      M loop_disp
0333   0839               M         movf    Table_Counter,W
0334   2???               M                 call    Standby_Msg
0335   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0336   1903               M                 btfsc   STATUS,Z
0337   2???               M                 goto    end_disp
0338   2???               M                 call    WR_DATA
0339   0AB9               M                 incf    Table_Counter,F
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033A   2???               M                 goto    loop_disp
033B                      M end_disp
033B   2???           00774     call    Switch_Lines
033C   2???           00775     goto    waiting
                      00776 
033D                  00777 badkeyagain
033D   1886           00778     btfsc               PORTB,1     ;Wait until key is released
033E   2???           00779     goto                $-1
033F   2???           00780     goto        wanna_export
                      00781 
                      00782 ; END OF MAIN PROGRAM
                      00783 ;------------------------------------------------------------
                      00784 
                      00785 ;***************************************
                      00786 ; ROTATE MOTOR ROUTINE
                      00787 ; Rotates motor by number of steps in motor_count times 4.
                      00788 ; ( 5 gives 20 steps of 36 deg; 3 gives 12 steps)
                      00789 ; starts from beginning if startfrom3 = 0; else starts halfway
                      00790 ;***************************************
                      00791 
0340                  00792 ROTATEMOTOR
0340   184A           00793     btfsc   startfrom3, 0
0341   2???           00794     goto    halfway
0342                  00795 start_rot
                      00796     movlf   b'1001', PORTA
0342   3009               M         movlw   b'1001'
0343   0085               M         movwf   PORTA
0344   2???           00797     call    motor_del
                      00798     movlf   b'1000', PORTA
0345   3008               M         movlw   b'1000'
0346   0085               M         movwf   PORTA
0347   2???           00799     call    motor_del
                      00800     movlf   b'1010', PORTA
0348   300A               M         movlw   b'1010'
0349   0085               M         movwf   PORTA
034A   2???           00801     call    motor_del
                      00802     movlf   b'0010', PORTA
034B   3002               M         movlw   b'0010'
034C   0085               M         movwf   PORTA
034D   2???           00803     call    motor_del
034E                  00804 halfway
                      00805     movlf   b'0110', PORTA
034E   3006               M         movlw   b'0110'
034F   0085               M         movwf   PORTA
0350   2???           00806     call    motor_del
                      00807     movlf   b'0100', PORTA
0351   3004               M         movlw   b'0100'
0352   0085               M         movwf   PORTA
0353   2???           00808     call    motor_del
                      00809     movlf   b'0101', PORTA
0354   3005               M         movlw   b'0101'
0355   0085               M         movwf   PORTA
0356   2???           00810     call    motor_del
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00811     movlf   b'0001', PORTA
0357   3001               M         movlw   b'0001'
0358   0085               M         movwf   PORTA
0359   2???           00812     call    motor_del
                      00813 
Message[305]: Using default destination of 1 (file).
035A   0BC9           00814     decfsz  motor_count
035B   2???           00815     goto    restart_motor
035C   2???           00816     goto    finish_motor
035D                  00817 restart_motor
035D   184A           00818     btfsc   startfrom3, 0
035E   2???           00819     goto    halfway
035F   2???           00820     goto    start_rot
0360                  00821 finish_motor
0360   0185           00822     clrf    PORTA
0361   0008           00823     return
                      00824 
0362                  00825 first_two
                      00826     movlf   b'1001', PORTA
0362   3009               M         movlw   b'1001'
0363   0085               M         movwf   PORTA
0364   2???           00827     call    motor_del
                      00828     movlf   b'1000', PORTA
0365   3008               M         movlw   b'1000'
0366   0085               M         movwf   PORTA
0367   2???           00829     call    motor_del
                      00830     movlf   b'1010', PORTA
0368   300A               M         movlw   b'1010'
0369   0085               M         movwf   PORTA
036A   2???           00831     call    motor_del
                      00832     movlf   b'0010', PORTA
036B   3002               M         movlw   b'0010'
036C   0085               M         movwf   PORTA
036D   2???           00833     call    motor_del
036E   0185           00834     clrf    PORTA
036F   144A           00835     bsf     startfrom3, 0
0370   0008           00836     return
                      00837 
0371                  00838 last_two
                      00839     movlf   b'0110', PORTA
0371   3006               M         movlw   b'0110'
0372   0085               M         movwf   PORTA
0373   2???           00840     call    motor_del
                      00841     movlf   b'0100', PORTA
0374   3004               M         movlw   b'0100'
0375   0085               M         movwf   PORTA
0376   2???           00842     call    motor_del
                      00843     movlf   b'0101', PORTA
0377   3005               M         movlw   b'0101'
0378   0085               M         movwf   PORTA
0379   2???           00844     call    motor_del
                      00845     movlf   b'0001', PORTA
037A   3001               M         movlw   b'0001'
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

037B   0085               M         movwf   PORTA
037C   2???           00846     call    motor_del
037D   0185           00847     clrf    PORTA
037E   104A           00848     bcf     startfrom3,0
037F   0008           00849     return
                      00850 
                      00851 ;four_steps
                      00852 ;    movlf   b'1001', PORTA
                      00853 ;    call    motor_del
                      00854 ;    movlf   b'1000', PORTA
                      00855 ;    call    motor_del
                      00856 ;    movlf   b'1010', PORTA
                      00857 ;    call    motor_del
                      00858 ;    movlf   b'0010', PORTA
                      00859 ;    call    motor_del
                      00860 ;    movlf   b'0110', PORTA
                      00861 ;    call    motor_del
                      00862 ;    movlf   b'0100', PORTA
                      00863 ;    call    motor_del
                      00864 ;    movlf   b'0101', PORTA
                      00865 ;    call    motor_del
                      00866 ;    movlf   b'0001', PORTA
                      00867 ;    call    motor_del
                      00868 ;    clrf    PORTA
                      00869 ;    return
                      00870 
                      00871 ;twelve_steps
                      00872 ;    movlf   d'3', motor_count
                      00873 ;start_rot12
                      00874 ;    movlf   b'1001', PORTA
                      00875 ;    call    motor_del
                      00876 ;    movlf   b'1000', PORTA
                      00877 ;    call    motor_del
                      00878 ;    movlf   b'1010', PORTA
                      00879 ;    call    motor_del
                      00880 ;    movlf   b'0010', PORTA
                      00881 ;    call    motor_del
                      00882 ;    movlf   b'0110', PORTA
                      00883 ;    call    motor_del
                      00884 ;    movlf   b'0100', PORTA
                      00885 ;    call    motor_del
                      00886 ;    movlf   b'0101', PORTA
                      00887 ;    call    motor_del
                      00888 ;    movlf   b'0001', PORTA
                      00889 ;    call    motor_del
                      00890 ;
                      00891 ;    decfsz  motor_count
                      00892 ;    goto    start_rot12
                      00893 ;    clrf    PORTA
                      00894 ;    return
                      00895 
                      00896 ;***************************************
                      00897 ; DATA DISPLAY ROUTINE
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00898 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00899 ; Determines which key it was and displays appropriate info / branch
                      00900 ;***************************************
                      00901 
0380                  00902 information
0380   00B7           00903     movwf   keytemp             ; Save which key was pressed
                      00904 
0381                  00905 check_1
0381   3A00           00906     xorlw   0x0         ;will be all zeros if its 1
0382   1D03           00907     btfss   STATUS,Z    ;and Z will be high, so skip
0383   2???           00908     goto    check_2
0384   2???           00909     call    Clear_Display
                      00910     writechar "1"
0385   3031               M             movlw   "1"
0386   2???               M             call    WR_DATA
0387   0820           00911     movf    state1, W
0388   2???           00912     call    display_state
0389   0008           00913     return
                      00914 
038A                  00915 check_2
038A   0837           00916     movf    keytemp, W
038B   3A01           00917     xorlw   0x1
038C   1D03           00918     btfss   STATUS,Z
038D   2???           00919     goto    check_3
038E   2???           00920     call    Clear_Display
                      00921     writechar "2"
038F   3032               M             movlw   "2"
0390   2???               M             call    WR_DATA
0391   0821           00922     movf    state2, W
0392   2???           00923     call    display_state
0393   0008           00924     return
                      00925 
0394                  00926 check_3
0394   0837           00927     movf    keytemp, W
0395   3A02           00928     xorlw   0x2
0396   1D03           00929     btfss   STATUS,Z
0397   2???           00930     goto    check_4
0398   2???           00931     call    Clear_Display
                      00932     writechar "3"
0399   3033               M             movlw   "3"
039A   2???               M             call    WR_DATA
039B   0822           00933     movf    state3, W
039C   2???           00934     call    display_state
039D   0008           00935     return
                      00936 
039E                  00937 check_4
039E   0837           00938     movf    keytemp, W
039F   3A04           00939     xorlw   0x4
03A0   1D03           00940     btfss   STATUS,Z
03A1   2???           00941     goto    check_5
03A2   2???           00942     call    Clear_Display
                      00943     writechar "4"
03A3   3034               M             movlw   "4"
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03A4   2???               M             call    WR_DATA
03A5   0823           00944     movf    state4, W
03A6   2???           00945     call    display_state
03A7   0008           00946     return
                      00947 
03A8                  00948 check_5
03A8   0837           00949     movf    keytemp, W
03A9   3A05           00950     xorlw   0x5
03AA   1D03           00951     btfss   STATUS,Z
03AB   2???           00952     goto    check_6
03AC   2???           00953     call    Clear_Display
                      00954     writechar "5"
03AD   3035               M             movlw   "5"
03AE   2???               M             call    WR_DATA
03AF   0824           00955     movf    state5, W
03B0   2???           00956     call    display_state
03B1   0008           00957     return
                      00958 
03B2                  00959 check_6
03B2   0837           00960     movf    keytemp, W
03B3   3A06           00961     xorlw   0x6
03B4   1D03           00962     btfss   STATUS,Z
03B5   2???           00963     goto    check_7
03B6   2???           00964     call    Clear_Display
                      00965     writechar "6"
03B7   3036               M             movlw   "6"
03B8   2???               M             call    WR_DATA
03B9   0825           00966     movf    state6, W
03BA   2???           00967     call    display_state
03BB   0008           00968     return
                      00969 
03BC                  00970 check_7
03BC   0837           00971     movf    keytemp, W
03BD   3A08           00972     xorlw   0x8
03BE   1D03           00973     btfss   STATUS,Z
03BF   2???           00974     goto    check_8
03C0   2???           00975     call    Clear_Display
                      00976     writechar "7"
03C1   3037               M             movlw   "7"
03C2   2???               M             call    WR_DATA
03C3   0826           00977     movf    state7, W
03C4   2???           00978     call    display_state
03C5   0008           00979     return
                      00980 
03C6                  00981 check_8
03C6   0837           00982     movf    keytemp, W
03C7   3A09           00983     xorlw   0x9
03C8   1D03           00984     btfss   STATUS,Z
03C9   2???           00985     goto    check_9
03CA   2???           00986     call    Clear_Display
                      00987     writechar "8"
03CB   3038               M             movlw   "8"
03CC   2???               M             call    WR_DATA
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03CD   0827           00988     movf    state8, W
03CE   2???           00989     call    display_state
03CF   0008           00990     return
                      00991 
03D0                  00992 check_9
03D0   0837           00993     movf    keytemp, W
03D1   3A0A           00994     xorlw   0xA
03D2   1D03           00995     btfss   STATUS,Z
03D3   2???           00996     goto    check_summary
03D4   2???           00997     call    Clear_Display
                      00998     writechar "9"
03D5   3039               M             movlw   "9"
03D6   2???               M             call    WR_DATA
03D7   0828           00999     movf    state9, W
03D8   2???           01000     call    display_state
03D9   0008           01001     return
                      01002 
03DA                  01003 check_summary
03DA   0837           01004     movf    keytemp, W
03DB   3A03           01005     xorlw   0x3
03DC   1D03           01006     btfss   STATUS,Z
03DD   2???           01007     goto    check_defective
03DE   2???           01008     call    summary
03DF   0008           01009     return
                      01010 
03E0                  01011 check_defective
03E0   0837           01012     movf    keytemp, W
03E1   3A07           01013     xorlw   0x7
03E2   1D03           01014     btfss   STATUS,Z
03E3   2???           01015     goto    check_time
03E4   2???           01016     call    defective
03E5   0008           01017     return
                      01018 
03E6                  01019 check_time
03E6   0837           01020     movf    keytemp, W
03E7   3A0B           01021     xorlw   0xB
03E8   1D03           01022     btfss   STATUS,Z
03E9   2???           01023     goto    check_export
03EA   2???           01024     call    time
03EB   0008           01025     return
                      01026 
03EC                  01027 check_export
03EC   0837           01028     movf    keytemp, W
03ED   3A0F           01029     xorlw   0xF
03EE   1D03           01030     btfss   STATUS,Z
03EF   2???           01031     goto    check_standby       ;or do you wanna allow to check logs?
03F0   2???           01032     call    export
03F1   0008           01033     return
                      01034 
                      01035 ;check_logs
                      01036 ;    movf    keytemp, W
                      01037 ;    xorlw   0xE
                      01038 ;    btfss   STATUS,Z
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01039 ;    goto    check_standby
                      01040 ;    goto    logs
                      01041 
03F2                  01042 check_standby
03F2   0837           01043     movf    keytemp, W
03F3   3A0D           01044     xorlw   0xD
03F4   1D03           01045     btfss   STATUS,Z
03F5   2???           01046     goto    check_start
03F6   2???           01047     call    Clear_Display
                      01048     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03F7   01B9               M                 clrf    Table_Counter
03F8   0103               M                 clrw
03F9                      M loop_disp
03F9   0839               M         movf    Table_Counter,W
03FA   2???               M                 call    Standby_Msg
03FB   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03FC   1903               M                 btfsc   STATUS,Z
03FD   2???               M                 goto    end_disp
03FE   2???               M                 call    WR_DATA
03FF   0AB9               M                 incf    Table_Counter,F
0400   2???               M                 goto    loop_disp
0401                      M end_disp
0401   2???           01049     call    Switch_Lines
0402   2???           01050     goto    waiting
                      01051 
0403                  01052 check_start
0403   0837           01053     movf    keytemp, W
0404   3A0C           01054     xorlw   0xC
0405   1D03           01055     btfss   STATUS,Z
0406   2???           01056     goto    default_key
0407   2???           01057     goto    start
                      01058 
0408                  01059 default_key         ; will never get here (unless you hit "LOGS")
0408   0008           01060     return
                      01061 
                      01062 
                      01063 ;Display state subroutine
                      01064 ;stateN is in W
0409                  01065 display_state
0409   00B8           01066     movwf  statetemp    ; save stateN
                      01067 
040A                  01068 check_none
040A   3A00           01069     xorlw   0x0
040B   1D03           01070     btfss   STATUS,Z
040C   2???           01071     goto    check_pass
                      01072     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
040D   01B9               M                 clrf    Table_Counter
040E   0103               M                 clrw
040F                      M loop_disp
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040F   0839               M         movf    Table_Counter,W
0410   2???               M                 call    Not_present
0411   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0412   1903               M                 btfsc   STATUS,Z
0413   2???               M                 goto    end_disp
0414   2???               M                 call    WR_DATA
0415   0AB9               M                 incf    Table_Counter,F
0416   2???               M                 goto    loop_disp
0417                      M end_disp
0417   0008           01073     return
                      01074 
0418                  01075 check_pass
0418   0838           01076     movf    statetemp, W
0419   3A01           01077     xorlw   0x1
041A   1D03           01078     btfss   STATUS,Z
041B   2???           01079     goto    check_LED
                      01080     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
041C   01B9               M                 clrf    Table_Counter
041D   0103               M                 clrw
041E                      M loop_disp
041E   0839               M         movf    Table_Counter,W
041F   2???               M                 call    Pass
0420   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0421   1903               M                 btfsc   STATUS,Z
0422   2???               M                 goto    end_disp
0423   2???               M                 call    WR_DATA
0424   0AB9               M                 incf    Table_Counter,F
0425   2???               M                 goto    loop_disp
0426                      M end_disp
0426   0008           01081     return
                      01082 
0427                  01083 check_LED
0427   0838           01084     movf    statetemp, W
0428   3A02           01085     xorlw   0x2
0429   1D03           01086     btfss   STATUS,Z
042A   2???           01087     goto    check_flick
                      01088     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
042B   01B9               M                 clrf    Table_Counter
042C   0103               M                 clrw
042D                      M loop_disp
042D   0839               M         movf    Table_Counter,W
042E   2???               M                 call    LED_fail
042F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0430   1903               M                 btfsc   STATUS,Z
0431   2???               M                 goto    end_disp
0432   2???               M                 call    WR_DATA
0433   0AB9               M                 incf    Table_Counter,F
0434   2???               M                 goto    loop_disp
0435                      M end_disp
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0435   0008           01089     return
                      01090 
0436                  01091 check_flick
0436   0838           01092     movf    statetemp, W
0437   3A03           01093     xorlw   0x3
0438   1D03           01094     btfss   STATUS,Z
0439   2???           01095     goto    default_state
                      01096     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
043A   01B9               M                 clrf    Table_Counter
043B   0103               M                 clrw
043C                      M loop_disp
043C   0839               M         movf    Table_Counter,W
043D   2???               M                 call    Flick_fail
043E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
043F   1903               M                 btfsc   STATUS,Z
0440   2???               M                 goto    end_disp
0441   2???               M                 call    WR_DATA
0442   0AB9               M                 incf    Table_Counter,F
0443   2???               M                 goto    loop_disp
0444                      M end_disp
0444   0008           01097     return
                      01098 
0445                  01099 default_state   ; should never get here
0445   0008           01100     return
                      01101 
                      01102 ; Summary Subroutine
                      01103 ; Displays total number of candles and number of defective candles
                      01104 ; Reads data from num_tot, num_LF, num_FF
0446                  01105 summary
0446   2???           01106     call            Clear_Display
                      01107     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0447   01B9               M                 clrf    Table_Counter
0448   0103               M                 clrw
0449                      M loop_disp
0449   0839               M         movf    Table_Counter,W
044A   2???               M                 call    Total_Msg
044B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
044C   1903               M                 btfsc   STATUS,Z
044D   2???               M                 goto    end_disp
044E   2???               M                 call    WR_DATA
044F   0AB9               M                 incf    Table_Counter,F
0450   2???               M                 goto    loop_disp
0451                      M end_disp
                      01108     writeBCD        num_tot
0451   0834               M             movf    num_tot, W
0452   3E30               M             addlw   B'00110000'
0453   2???               M             call WR_DATA
0454   2???           01109     call            Switch_Lines
                      01110     Display         LF
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0455   01B9               M                 clrf    Table_Counter
0456   0103               M                 clrw
0457                      M loop_disp
0457   0839               M         movf    Table_Counter,W
0458   2???               M                 call    LF
0459   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
045A   1903               M                 btfsc   STATUS,Z
045B   2???               M                 goto    end_disp
045C   2???               M                 call    WR_DATA
045D   0AB9               M                 incf    Table_Counter,F
045E   2???               M                 goto    loop_disp
045F                      M end_disp
                      01111     writeBCD        num_LF
045F   0835               M             movf    num_LF, W
0460   3E30               M             addlw   B'00110000'
0461   2???               M             call WR_DATA
                      01112     spacebar
0462   3014               M             movlw   B'00010100'
0463   2???               M             call    WR_INS
                      01113     spacebar
0464   3014               M             movlw   B'00010100'
0465   2???               M             call    WR_INS
                      01114     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0466   01B9               M                 clrf    Table_Counter
0467   0103               M                 clrw
0468                      M loop_disp
0468   0839               M         movf    Table_Counter,W
0469   2???               M                 call    FF
046A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
046B   1903               M                 btfsc   STATUS,Z
046C   2???               M                 goto    end_disp
046D   2???               M                 call    WR_DATA
046E   0AB9               M                 incf    Table_Counter,F
046F   2???               M                 goto    loop_disp
0470                      M end_disp
                      01115     writeBCD        num_FF
0470   0836               M             movf    num_FF, W
0471   3E30               M             addlw   B'00110000'
0472   2???               M             call WR_DATA
0473   0008           01116     return
                      01117 
                      01118 ; Defective candles Subroutine
                      01119 ; Displays index of each defective candle (LF or FF)
                      01120 ; Reads data from state1 - state9
0474                  01121 defective
0474   2???           01122     call            Clear_Display
                      01123 
0475   01C5           01124     clrf    morethansix
0476   3007           01125     movlw   d'7'
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0477   0235           01126     subwf   num_LF, W
0478   1803           01127     btfsc   STATUS, C       ;if  num_LF < 7, C = 0
0479   1445           01128     bsf     morethansix,0
047A   3007           01129     movlw   d'7'
047B   0236           01130     subwf   num_FF, W
047C   1803           01131     btfsc   STATUS, C       ;if  num_FF < 7, C = 0
047D   1445           01132     bsf     morethansix,0
                      01133 
                      01134     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
047E   01B9               M                 clrf    Table_Counter
047F   0103               M                 clrw
0480                      M loop_disp
0480   0839               M         movf    Table_Counter,W
0481   2???               M                 call    LF
0482   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0483   1903               M                 btfsc   STATUS,Z
0484   2???               M                 goto    end_disp
0485   2???               M                 call    WR_DATA
0486   0AB9               M                 incf    Table_Counter,F
0487   2???               M                 goto    loop_disp
0488                      M end_disp
0488   08B5           01135     movf            num_LF, F
0489   1D03           01136     btfss           STATUS,Z         ;if none LF, just say "none"
048A   2???           01137     goto            check_LF
                      01138     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
048B   01B9               M                 clrf    Table_Counter
048C   0103               M                 clrw
048D                      M loop_disp
048D   0839               M         movf    Table_Counter,W
048E   2???               M                 call    None
048F   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0490   1903               M                 btfsc   STATUS,Z
0491   2???               M                 goto    end_disp
0492   2???               M                 call    WR_DATA
0493   0AB9               M                 incf    Table_Counter,F
0494   2???               M                 goto    loop_disp
0495                      M end_disp
0495   2???           01139     goto            now_FF
                      01140 
0496                  01141 check_LF                            ; list all LF candles
0496   3002           01142     movlw           B'00000010'
0497   2???           01143     call            check_for_fail
                      01144 
0498                  01145 now_FF                              ; now look at FF
0498   2???           01146     call            Switch_Lines
                      01147     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0499   01B9               M                 clrf    Table_Counter
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

049A   0103               M                 clrw
049B                      M loop_disp
049B   0839               M         movf    Table_Counter,W
049C   2???               M                 call    FF
049D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
049E   1903               M                 btfsc   STATUS,Z
049F   2???               M                 goto    end_disp
04A0   2???               M                 call    WR_DATA
04A1   0AB9               M                 incf    Table_Counter,F
04A2   2???               M                 goto    loop_disp
04A3                      M end_disp
04A3   08B6           01148     movf            num_FF, F
04A4   1D03           01149     btfss           STATUS,Z         ;if none FF, just say "none"
04A5   2???           01150     goto            check_FF
                      01151     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04A6   01B9               M                 clrf    Table_Counter
04A7   0103               M                 clrw
04A8                      M loop_disp
04A8   0839               M         movf    Table_Counter,W
04A9   2???               M                 call    None
04AA   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04AB   1903               M                 btfsc   STATUS,Z
04AC   2???               M                 goto    end_disp
04AD   2???               M                 call    WR_DATA
04AE   0AB9               M                 incf    Table_Counter,F
04AF   2???               M                 goto    loop_disp
04B0                      M end_disp
04B0   0008           01152     return
                      01153 
04B1                  01154 check_FF                            ; list all FF candles
04B1   3003           01155     movlw           B'00000011'
04B2   2???           01156     call            check_for_fail
04B3   0008           01157     return
                      01158 
04B4                  01159 check_for_fail  ;lists all candles that have status currently in W "stateX"
04B4   00B8           01160     movwf   statetemp
                      01161         movlf   D'0', candle_index
04B5   3000               M         movlw   D'0'
04B6   00C6               M         movwf   candle_index
04B7   1383           01162         bcf     STATUS, IRP
                      01163         movlf   0x1F, FSR           ;index of right before state1
04B8   301F               M         movlw   0x1F
04B9   0084               M         movwf   FSR
04BA                  01164 check_next
04BA   3009           01165         movlw   D'9'                ;exit loop if at 9
04BB   0246           01166         subwf   candle_index, W
04BC   1803           01167         btfsc   STATUS,W
04BD   2???           01168         goto    end_check_fail
04BE   0A84           01169         incf    FSR,F               ; increment
04BF   0AC6           01170         incf    candle_index,F
04C0   0838           01171         movf    statetemp, W            ;see if stateN = stateX
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C1   0200           01172         subwf   INDF, W
04C2   1D03           01173         btfss   STATUS, Z
04C3   2???           01174         goto    check_next              ;if not, go to next
                      01175         writeBCD        candle_index    ;if so, write down the number
04C4   0846               M             movf    candle_index, W
04C5   3E30               M             addlw   B'00110000'
04C6   2???               M             call WR_DATA
04C7   1845           01176     btfsc   morethansix,0       ;don't write a space if need more than six numbers
04C8   2???           01177     goto    more_than_six
                      01178     spacebar
04C9   3014               M             movlw   B'00010100'
04CA   2???               M             call    WR_INS
04CB                  01179 more_than_six
04CB   2???           01180         goto check_next
04CC                  01181 end_check_fail
04CC   0008           01182         return
                      01183 
                      01184 ; Time subroutine
                      01185 ; Takes the time in seconds as a binary number in op_time
                      01186 ; and puts it into huns,tens,ones to display.
04CD                  01187 time
04CD   2???           01188     call    Clear_Display
                      01189     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04CE   01B9               M                 clrf    Table_Counter
04CF   0103               M                 clrw
04D0                      M loop_disp
04D0   0839               M         movf    Table_Counter,W
04D1   2???               M                 call    Time_Msg
04D2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04D3   1903               M                 btfsc   STATUS,Z
04D4   2???               M                 goto    end_disp
04D5   2???               M                 call    WR_DATA
04D6   0AB9               M                 incf    Table_Counter,F
04D7   2???               M                 goto    loop_disp
04D8                      M end_disp
04D8   2???           01190     call    Switch_Lines
04D9   0833           01191     movf    op_time, W
04DA   2???           01192     call    big_number
04DB   08C0           01193     movf    huns, F
04DC   1903           01194     btfsc   STATUS,Z        ;if huns is zero don't display it
04DD   2???           01195     goto    no_huns
                      01196     writeBCD    huns
04DE   0840               M             movf    huns, W
04DF   3E30               M             addlw   B'00110000'
04E0   2???               M             call WR_DATA
04E1                  01197 no_huns
04E1   08C1           01198     movf    tens, F
04E2   1903           01199     btfsc   STATUS,Z        ;if tens is zero don't display it
04E3   2???           01200     goto    no_tens
                      01201     writeBCD    tens
04E4   0841               M             movf    tens, W
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04E5   3E30               M             addlw   B'00110000'
04E6   2???               M             call WR_DATA
04E7                  01202 no_tens
                      01203     writeBCD    ones
04E7   0842               M             movf    ones, W
04E8   3E30               M             addlw   B'00110000'
04E9   2???               M             call WR_DATA
                      01204     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
04EA   01B9               M                 clrf    Table_Counter
04EB   0103               M                 clrw
04EC                      M loop_disp
04EC   0839               M         movf    Table_Counter,W
04ED   2???               M                 call    Seconds
04EE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
04EF   1903               M                 btfsc   STATUS,Z
04F0   2???               M                 goto    end_disp
04F1   2???               M                 call    WR_DATA
04F2   0AB9               M                 incf    Table_Counter,F
04F3   2???               M                 goto    loop_disp
04F4                      M end_disp
04F4   0008           01205     return
                      01206 
                      01207 ; Export subroutine
                      01208 ; Exports data from current run to hyperterminal
                      01209 ; reads start time and num_tot/num_ff/num_lf data
04F5                  01210 export
                      01211     printchar   0x7       ;makes a noise on the PC
04F5   3007               M             movlw   0x7
04F6   2???               M             call    writetoPC
                      01212     printchar   0xD       ;go back to left edge
04F7   300D               M             movlw   0xD
04F8   2???               M             call    writetoPC
                      01213     printchar   "T"
04F9   3054               M             movlw   "T"
04FA   2???               M             call    writetoPC
                      01214     printchar   "e"
04FB   3065               M             movlw   "e"
04FC   2???               M             call    writetoPC
                      01215     printchar   "s"
04FD   3073               M             movlw   "s"
04FE   2???               M             call    writetoPC
                      01216     printchar   "t"
04FF   3074               M             movlw   "t"
0500   2???               M             call    writetoPC
                      01217     printchar   " "
0501   3020               M             movlw   " "
0502   2???               M             call    writetoPC
                      01218     printchar   "a"
0503   3061               M             movlw   "a"
0504   2???               M             call    writetoPC
                      01219     printchar   "t"
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0505   3074               M             movlw   "t"
0506   2???               M             call    writetoPC
                      01220     printchar   ":"
0507   303A               M             movlw   ":"
0508   2???               M             call    writetoPC
                      01221     printchar   " "
0509   3020               M             movlw   " "
050A   2???               M             call    writetoPC
                      01222     printchar   "2"
050B   3032               M             movlw   "2"
050C   2???               M             call    writetoPC
                      01223     printchar   "0"
050D   3030               M             movlw   "0"
050E   2???               M             call    writetoPC
                      01224     printASC   start_year10
050F   1283 1303          M             banksel start_year10
0511   0829               M             movf    start_year10,W
0512   2???               M             call    writetoPC
                      01225     printASC   start_year1
0513   1283 1303          M             banksel start_year1
0515   082A               M             movf    start_year1,W
0516   2???               M             call    writetoPC
                      01226     printchar   "/"
0517   302F               M             movlw   "/"
0518   2???               M             call    writetoPC
                      01227     printASC   start_month10
0519   1283 1303          M             banksel start_month10
051B   082B               M             movf    start_month10,W
051C   2???               M             call    writetoPC
                      01228     printASC   start_month1
051D   1283 1303          M             banksel start_month1
051F   082C               M             movf    start_month1,W
0520   2???               M             call    writetoPC
                      01229     printchar   "/"
0521   302F               M             movlw   "/"
0522   2???               M             call    writetoPC
                      01230     printASC   start_date10
0523   1283 1303          M             banksel start_date10
0525   082D               M             movf    start_date10,W
0526   2???               M             call    writetoPC
                      01231     printASC   start_date1
0527   1283 1303          M             banksel start_date1
0529   082E               M             movf    start_date1,W
052A   2???               M             call    writetoPC
                      01232     printchar   " "
052B   3020               M             movlw   " "
052C   2???               M             call    writetoPC
                      01233     printASC   start_hour10
052D   1283 1303          M             banksel start_hour10
052F   082F               M             movf    start_hour10,W
0530   2???               M             call    writetoPC
                      01234     printASC   start_hour1
0531   1283 1303          M             banksel start_hour1
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0533   0830               M             movf    start_hour1,W
0534   2???               M             call    writetoPC
                      01235     printchar   ":"
0535   303A               M             movlw   ":"
0536   2???               M             call    writetoPC
                      01236     printASC   start_min10
0537   1283 1303          M             banksel start_min10
0539   0831               M             movf    start_min10,W
053A   2???               M             call    writetoPC
                      01237     printASC   start_min1
053B   1283 1303          M             banksel start_min1
053D   0832               M             movf    start_min1,W
053E   2???               M             call    writetoPC
                      01238     newline
                          M             printchar   0xA ;changes line
053F   300A               M             movlw   0xA
0540   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0541   300D               M             movlw   0xD
0542   2???               M             call    writetoPC
                      01239     printchar   "T"
0543   3054               M             movlw   "T"
0544   2???               M             call    writetoPC
                      01240     printchar   "i"
0545   3069               M             movlw   "i"
0546   2???               M             call    writetoPC
                      01241     printchar   "m"
0547   306D               M             movlw   "m"
0548   2???               M             call    writetoPC
                      01242     printchar   "e"
0549   3065               M             movlw   "e"
054A   2???               M             call    writetoPC
                      01243     printchar   ":"
054B   303A               M             movlw   ":"
054C   2???               M             call    writetoPC
                      01244     printchar   " "
054D   3020               M             movlw   " "
054E   2???               M             call    writetoPC
                      01245     printchar   " "
054F   3020               M             movlw   " "
0550   2???               M             call    writetoPC
                      01246     printchar   " "
0551   3020               M             movlw   " "
0552   2???               M             call    writetoPC
                      01247     printchar   " "
0553   3020               M             movlw   " "
0554   2???               M             call    writetoPC
0555   1283 1303      01248     banksel huns
0557   08C0           01249     movf    huns, F
0558   1903           01250     btfsc   STATUS,Z        ;if huns is zero don't display it
0559   2???           01251     goto    nohuns
                      01252     printBCD   huns
055A   1283 1303          M             banksel huns
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

055C   0840               M             movf    huns, W
055D   3E30               M             addlw   0x30
055E   2???               M             call    writetoPC
055F                  01253 nohuns
055F   1283 1303      01254     banksel tens
0561   08C1           01255     movf    tens, F
0562   1903           01256     btfsc   STATUS,Z        ;if tens is zero don't display it
0563   2???           01257     goto    notens
                      01258     printBCD   tens
0564   1283 1303          M             banksel tens
0566   0841               M             movf    tens, W
0567   3E30               M             addlw   0x30
0568   2???               M             call    writetoPC
0569                  01259 notens
                      01260     printBCD   ones
0569   1283 1303          M             banksel ones
056B   0842               M             movf    ones, W
056C   3E30               M             addlw   0x30
056D   2???               M             call    writetoPC
                      01261     printchar   " "
056E   3020               M             movlw   " "
056F   2???               M             call    writetoPC
                      01262     printchar   "s"
0570   3073               M             movlw   "s"
0571   2???               M             call    writetoPC
                      01263     printchar   "e"
0572   3065               M             movlw   "e"
0573   2???               M             call    writetoPC
                      01264     printchar   "c"
0574   3063               M             movlw   "c"
0575   2???               M             call    writetoPC
                      01265     newline
                          M             printchar   0xA ;changes line
0576   300A               M             movlw   0xA
0577   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0578   300D               M             movlw   0xD
0579   2???               M             call    writetoPC
                      01266     printchar   "C"
057A   3043               M             movlw   "C"
057B   2???               M             call    writetoPC
                      01267     printchar   "a"
057C   3061               M             movlw   "a"
057D   2???               M             call    writetoPC
                      01268     printchar   "n"
057E   306E               M             movlw   "n"
057F   2???               M             call    writetoPC
                      01269     printchar   "d"
0580   3064               M             movlw   "d"
0581   2???               M             call    writetoPC
                      01270     printchar   "l"
0582   306C               M             movlw   "l"
0583   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01271     printchar   "e"
0584   3065               M             movlw   "e"
0585   2???               M             call    writetoPC
                      01272     printchar   "s"
0586   3073               M             movlw   "s"
0587   2???               M             call    writetoPC
                      01273     printchar   ":"
0588   303A               M             movlw   ":"
0589   2???               M             call    writetoPC
                      01274     printchar   " "
058A   3020               M             movlw   " "
058B   2???               M             call    writetoPC
                      01275     printchar   " "
058C   3020               M             movlw   " "
058D   2???               M             call    writetoPC
                      01276     printchar   " "
058E   3020               M             movlw   " "
058F   2???               M             call    writetoPC
                      01277     printchar   " "
0590   3020               M             movlw   " "
0591   2???               M             call    writetoPC
                      01278     printchar   " "
0592   3020               M             movlw   " "
0593   2???               M             call    writetoPC
                      01279     printchar   " "
0594   3020               M             movlw   " "
0595   2???               M             call    writetoPC
                      01280     printBCD    num_tot
0596   1283 1303          M             banksel num_tot
0598   0834               M             movf    num_tot, W
0599   3E30               M             addlw   0x30
059A   2???               M             call    writetoPC
                      01281     newline
                          M             printchar   0xA ;changes line
059B   300A               M             movlw   0xA
059C   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
059D   300D               M             movlw   0xD
059E   2???               M             call    writetoPC
                      01282     printchar   "L"
059F   304C               M             movlw   "L"
05A0   2???               M             call    writetoPC
                      01283     printchar   "E"
05A1   3045               M             movlw   "E"
05A2   2???               M             call    writetoPC
                      01284     printchar   "D"
05A3   3044               M             movlw   "D"
05A4   2???               M             call    writetoPC
                      01285     printchar   " "
05A5   3020               M             movlw   " "
05A6   2???               M             call    writetoPC
                      01286     printchar   "f"
05A7   3066               M             movlw   "f"
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A8   2???               M             call    writetoPC
                      01287     printchar   "a"
05A9   3061               M             movlw   "a"
05AA   2???               M             call    writetoPC
                      01288     printchar   "i"
05AB   3069               M             movlw   "i"
05AC   2???               M             call    writetoPC
                      01289     printchar   "l"
05AD   306C               M             movlw   "l"
05AE   2???               M             call    writetoPC
                      01290     printchar   ":"
05AF   303A               M             movlw   ":"
05B0   2???               M             call    writetoPC
                      01291     printchar   " "
05B1   3020               M             movlw   " "
05B2   2???               M             call    writetoPC
                      01292     printchar   " "
05B3   3020               M             movlw   " "
05B4   2???               M             call    writetoPC
                      01293     printchar   " "
05B5   3020               M             movlw   " "
05B6   2???               M             call    writetoPC
                      01294     printchar   " "
05B7   3020               M             movlw   " "
05B8   2???               M             call    writetoPC
                      01295     printchar   " "
05B9   3020               M             movlw   " "
05BA   2???               M             call    writetoPC
                      01296     printBCD    num_LF
05BB   1283 1303          M             banksel num_LF
05BD   0835               M             movf    num_LF, W
05BE   3E30               M             addlw   0x30
05BF   2???               M             call    writetoPC
                      01297     newline
                          M             printchar   0xA ;changes line
05C0   300A               M             movlw   0xA
05C1   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05C2   300D               M             movlw   0xD
05C3   2???               M             call    writetoPC
                      01298     printchar   "F"
05C4   3046               M             movlw   "F"
05C5   2???               M             call    writetoPC
                      01299     printchar   "l"
05C6   306C               M             movlw   "l"
05C7   2???               M             call    writetoPC
                      01300     printchar   "i"
05C8   3069               M             movlw   "i"
05C9   2???               M             call    writetoPC
                      01301     printchar   "c"
05CA   3063               M             movlw   "c"
05CB   2???               M             call    writetoPC
                      01302     printchar   "k"
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05CC   306B               M             movlw   "k"
05CD   2???               M             call    writetoPC
                      01303     printchar   "e"
05CE   3065               M             movlw   "e"
05CF   2???               M             call    writetoPC
                      01304     printchar   "r"
05D0   3072               M             movlw   "r"
05D1   2???               M             call    writetoPC
                      01305     printchar   " "
05D2   3020               M             movlw   " "
05D3   2???               M             call    writetoPC
                      01306     printchar   "f"
05D4   3066               M             movlw   "f"
05D5   2???               M             call    writetoPC
                      01307     printchar   "a"
05D6   3061               M             movlw   "a"
05D7   2???               M             call    writetoPC
                      01308     printchar   "i"
05D8   3069               M             movlw   "i"
05D9   2???               M             call    writetoPC
                      01309     printchar   "l"
05DA   306C               M             movlw   "l"
05DB   2???               M             call    writetoPC
                      01310     printchar   ":"
05DC   303A               M             movlw   ":"
05DD   2???               M             call    writetoPC
                      01311     printchar   " "
05DE   3020               M             movlw   " "
05DF   2???               M             call    writetoPC
                      01312     printBCD    num_FF
05E0   1283 1303          M             banksel num_FF
05E2   0836               M             movf    num_FF, W
05E3   3E30               M             addlw   0x30
05E4   2???               M             call    writetoPC
                      01313     newline
                          M             printchar   0xA ;changes line
05E5   300A               M             movlw   0xA
05E6   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05E7   300D               M             movlw   0xD
05E8   2???               M             call    writetoPC
                      01314     newline
                          M             printchar   0xA ;changes line
05E9   300A               M             movlw   0xA
05EA   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
05EB   300D               M             movlw   0xD
05EC   2???               M             call    writetoPC
05ED   1283           01315     bcf STATUS,RP0
05EE   1303           01316     bcf STATUS,RP1     ; back to bank 0
05EF   0008           01317     return
                      01318 
                      01319 
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01320 ;***************************************
                      01321 ; GENERAL PURPOSE SUBROUTINES
                      01322 ;***************************************
                      01323 
                      01324 ; DISPLAY BIG NUMBER SUBROUTINE
                      01325 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01326 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01327 ; Uses "shift and add 3" algorithm
05F0                  01328 big_number
                      01329     movff   op_time, op_time_save         ;save the original op_time
05F0   0833               M         movf    op_time, W
05F1   00BF               M         movwf   op_time_save
                      01330     movlf   8, bignumcount                ;will shift 8 times
05F2   3008               M         movlw   8
05F3   00C3               M         movwf   bignumcount
05F4   01C0           01331     clrf    huns
05F5   01C1           01332     clrf    tens
05F6   01C2           01333     clrf    ones
                      01334 
05F7                  01335 BCDadd3                             ; if any digit > 5, add3
05F7   3005           01336     movlw   0x5
05F8   0240           01337     subwf   huns, W
05F9   1803           01338     btfsc   STATUS, C
05FA   2???           01339     call    add3huns
                      01340 
05FB   3005           01341     movlw   0x5
05FC   0241           01342     subwf   tens, W
05FD   1803           01343     btfsc   STATUS, C
05FE   2???           01344     call    add3tens
                      01345 
05FF   3005           01346     movlw   0x5
0600   0242           01347     subwf   ones, W
0601   1803           01348     btfsc   STATUS, C
0602   2???           01349     call    add3ones
                      01350 
0603   03C3           01351     decf    bignumcount, 1
0604   1003           01352     bcf     STATUS, C
0605   0DB3           01353     rlf     op_time, 1              ; shift
0606   0DC2           01354     rlf     ones, 1
0607   1A42           01355     btfsc   ones,4 ;
0608   2???           01356     call    carryones               ; carry if too large
0609   0DC1           01357     rlf     tens, 1
                      01358 
060A   1A41           01359     btfsc   tens,4 ;
060B   2???           01360     call    carrytens
060C   0DC0           01361     rlf     huns,1
060D   1003           01362     bcf     STATUS, C
                      01363 
060E   0843           01364     movf    bignumcount, W
060F   1D03           01365     btfss   STATUS, Z
0610   2???           01366     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01367 
                      01368     movff    op_time_save, op_time     ;restore the original op_time
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0611   083F               M         movf    op_time_save, W
0612   00B3               M         movwf   op_time
0613   0008           01369     return
                      01370 
0614                  01371 add3huns
0614   3003           01372     movlw 0x3
0615   07C0           01373     addwf huns,F
0616   0008           01374     return
0617                  01375 add3tens
0617   3003           01376     movlw 0x3
0618   07C1           01377     addwf tens,F
0619   0008           01378     return
061A                  01379 add3ones
061A   3003           01380     movlw 0x3
061B   07C2           01381     addwf ones,F
061C   0008           01382     return
061D                  01383 carryones
061D   1242           01384     bcf ones, 4
061E   1403           01385     bsf STATUS, C
061F   0008           01386     return
0620                  01387 carrytens
0620   1241           01388     bcf tens, 4
0621   1403           01389     bsf STATUS, C
0622   0008           01390     return
                      01391 
                      01392 
                      01393 ;***************************************
                      01394 ; DELAY SUBROUTINES
                      01395 ;***************************************
                      01396 
                      01397 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01398 ; Delays exactly 0.5sec
0623                  01399 HalfS
                      01400       movlf 0x8A, delH
0623   308A               M         movlw   0x8A
0624   00BC               M         movwf   delH
                      01401       movlf 0xBA, delM
0625   30BA               M         movlw   0xBA
0626   00BD               M         movwf   delM
                      01402       movlf 0x03, delL
0627   3003               M         movlw   0x03
0628   00BE               M         movwf   delL
0629                  01403 HalfS_0
0629   0BBC           01404       decfsz    delH, F
062A   2???           01405           goto  $+2
062B   0BBD           01406           decfsz        delM, F
062C   2???           01407           goto  $+2
062D   0BBE           01408           decfsz        delL, F
062E   2???           01409           goto  HalfS_0
                      01410 
062F   2???           01411           goto  $+1
0630   0000           01412           nop
0631   0008           01413           return
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01414 
                      01415 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01416 ; Useful for LCD because PIC is way faster than it can handle
                      01417 ; Delays exactly 5ms
0632                  01418 delay5ms
                      01419         movlf   0xC3, delH
0632   30C3               M         movlw   0xC3
0633   00BC               M         movwf   delH
                      01420         movlf   0x0A, delL
0634   300A               M         movlw   0x0A
0635   00BE               M         movwf   delL
0636                  01421 Delay_0
0636   0BBC           01422         decfsz  delH, f
0637   2???           01423         goto    $+2
0638   0BBE           01424         decfsz  delL, f
0639   2???           01425         goto    Delay_0
063A   0008           01426     return
                      01427 
                      01428 ; MOTOR DELAY SUBROUTINE.
                      01429 ; Delays ~10ms for the motor.
063B                  01430 motor_del
                      01431       movlf 0xF3, delH
063B   30F3               M         movlw   0xF3
063C   00BC               M         movwf   delH
                      01432       movlf 0x2F, delL          ;2F is approx 1 sec
063D   302F               M         movlw   0x2F
063E   00BE               M         movwf   delL
063F                  01433 motor_del_0
063F   0BBC           01434       decfsz    delH, F
0640   2???           01435           goto      $+2
0641   0BBE           01436           decfsz        delL, F
0642   2???           01437           goto      motor_del_0
0643   0008           01438           return
                      01439 
                      01440 ;***************************************
                      01441 ; LCD SUBROUTINES (from sample code)
                      01442 ;***************************************
                      01443 
                      01444 ; Initialize the LCD
0644                  01445 InitLCD
0644   1283           01446         bcf STATUS,RP0          ;bank0
0645   1588           01447         bsf E     ;E default high
                      01448 
                      01449         ;Wait for LCD POR to finish (~15ms)
0646   2???           01450         call delay5ms
0647   2???           01451         call delay5ms
0648   2???           01452         call delay5ms
                      01453 
                      01454         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01455         ; -> Send b'0011' 3 times
0649   3033           01456         movlw   b'00110011'
064A   2???           01457         call    WR_INS
064B   2???           01458         call delay5ms
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064C   2???           01459         call delay5ms
064D   3032           01460         movlw   b'00110010'
064E   2???           01461         call    WR_INS
064F   2???           01462         call delay5ms
0650   2???           01463         call delay5ms
                      01464 
                      01465         ; 4 bits, 2 lines, 5x7 dots
0651   3028           01466         movlw   b'00101000'
0652   2???           01467         call    WR_INS
0653   2???           01468         call delay5ms
0654   2???           01469         call delay5ms
                      01470 
                      01471         ; display on/off
0655   300C           01472         movlw   b'00001100'
0656   2???           01473         call    WR_INS
0657   2???           01474         call delay5ms
0658   2???           01475         call delay5ms
                      01476 
                      01477         ; Entry mode
0659   3006           01478         movlw   b'00000110'
065A   2???           01479         call    WR_INS
065B   2???           01480         call delay5ms
065C   2???           01481         call delay5ms
                      01482 
                      01483         ; Clear ram
065D   3001           01484         movlw   b'00000001'
065E   2???           01485         call    WR_INS
065F   2???           01486         call delay5ms
0660   2???           01487         call delay5ms
0661   0008           01488         return
                      01489 
                      01490 ; Clear the display
0662                  01491 Clear_Display
0662   3001           01492                 movlw   B'00000001'
0663   2???           01493                 call    WR_INS
0664   0008           01494                 return
                      01495 
                      01496 ;Switch lines
0665                  01497 Switch_Lines
0665   30C0           01498                 movlw   B'11000000'
0666   2???           01499                 call    WR_INS
0667   0008           01500                 return
                      01501 
                      01502 ; Write an instruction to the LCD (see page 7-104)
                      01503 ; The instruction must be in W
0668                  01504 WR_INS
0668   1108           01505         bcf             RS                              ;clear RS
0669   00BA           01506         movwf   com                             ;W --> com
066A   39F0           01507         andlw   0xF0                    ;mask 4 bits MSB w = X0
066B   0088           01508         movwf   PORTD                   ;Send 4 bits MSB
066C   1588           01509         bsf             E                               ;
066D   2???           01510         call    delay5ms        ;__    __
066E   1188           01511         bcf             E                               ;  |__|
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

066F   0E3A           01512         swapf   com,w
0670   39F0           01513         andlw   0xF0                    ;1111 0010
0671   0088           01514         movwf   PORTD                   ;send 4 bits LSB
0672   1588           01515         bsf             E                               ;
0673   2???           01516         call    delay5ms        ;__    __
0674   1188           01517         bcf             E                               ;  |__|
0675   2???           01518         call    delay5ms
0676   0008           01519         return
                      01520 
                      01521 ; Write data at current cursor location
                      01522 ; Character code (see page 7-104) must be in W
0677                  01523 WR_DATA
0677   1508           01524         bsf             RS
0678   00BB           01525         movwf   dat
0679   083B           01526         movf    dat,w
067A   39F0           01527         andlw   0xF0
067B   3E04           01528         addlw   4
067C   0088           01529         movwf   PORTD
067D   1588           01530         bsf             E                               ;
067E   2???           01531         call    delay5ms        ;__    __
067F   1188           01532         bcf             E                               ;  |__|
0680   0E3B           01533         swapf   dat,w
0681   39F0           01534         andlw   0xF0
0682   3E04           01535         addlw   4
0683   0088           01536         movwf   PORTD
0684   1588           01537         bsf             E                               ;
0685   2???           01538         call    delay5ms        ;__    __
0686   1188           01539         bcf             E                               ;  |__|
0687   0008           01540         return
                      01541 
                      01542 
                      01543 ;***************************************
                      01544 ; PC INTERFACE SUBROUTINES (from sample code)
                      01545 ;***************************************
0688                  01546 InitUSART
0688   1683           01547         bsf       STATUS,RP0     ; select bank 1
0689   300F           01548         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
068A   0099           01549         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
068B   0198           01550         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01551 
068C   1283           01552         bcf       STATUS,RP0     ; select bank 0
068D   1798           01553         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
068E   1618           01554         bsf       RCSTA,CREN     ; continuous receive
                      01555 
068F   1683           01556         bsf       STATUS,RP0     ; select bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0690   1698           01557         bsf       TXSTA,TXEN     ; Transmit enable
0691   0008           01558         return
                      01559 
                      01560 
0692                  01561 writetoPC
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01562 ; Writes the data in W to the PC
                      01563 ; end up in bank1!
0692   1283           01564         bcf       STATUS,RP0     ; Go to bank 0
0693   0099           01565         movwf     TXREG          ; Send contents of W to RS232
0694   1683           01566         bsf       STATUS,RP0     ; Go to bank with TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0695   1C98           01567         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0696   2???           01568         goto      $-1
0697   0008           01569         return
                      01570 
                      01571 
                      01572 ;***************************************
                      01573 ; ISR
                      01574 ; Currently only care about TMR0
                      01575 ; TMR0 overflows at 256*128; each time, decrement count76
                      01576 ; count76 thus hits 0 every 256*128*76 cycles = 1sec with 10MHz clock
                      01577 ; When this hapens, op_time increments
                      01578 ; Also check photodata every time for 2 sec = total of 152 reads
                      01579 ;***************************************
0698                  01580 isr
0698   00F9           01581     movwf   w_isr           ;save W and status
0699   0E03           01582     swapf   STATUS, W
069A   0183           01583     clrf    STATUS
069B   00FA           01584     movwf   status_isr
                      01585 
069C   0BC4           01586     decfsz  count76, F     ;if count76 gets to 76 it's been one second
069D   2???           01587     goto    end_isr
                      01588     movlf   D'76', count76  ;so reset count76
069E   304C               M         movlw   D'76'
069F   00C4               M         movwf   count76
06A0   0AB3           01589     incf    op_time, F         ; and increment op_time
                      01590 
06A1                  01591 end_isr
                      01592 
06A1   1889           01593     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
06A2   0AC7           01594     incf    photocount, F       ;if it is 1, light is on so photocount++
                      01595 
06A3   0E7A           01596     swapf   status_isr, W   ;restore W and status
06A4   0083           01597     movwf   STATUS
06A5   0EF9           01598     swapf   w_isr, F
06A6   0E79           01599     swapf   w_isr, W
06A7   110B           01600     bcf     INTCON, T0IF    ;clear the interrupt flag
06A8   0009           01601     retfie
                      01602 
                      01603 
3F72                  01604     END
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           000005F7
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     00000662
D                                 00000005
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           00000636
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             00000623
HalfS_0                           00000629
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           00000644
InitUSART                         00000688
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
ROTATEMOTOR                       00000340
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      00000665
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

WREN                              00000002
WRERR                             00000003
WR_DATA                           00000677
WR_INS                            00000668
Z                                 00000002
_.org_1_0172                      00000172
_.org_1_01E2                      000001E2
_.org_1_0209                      00000209
_.org_1_0229                      00000229
_.org_1_022E                      0000022E
_.org_1_0247                      00000247
_.org_1_02AD                      000002AD
_.org_1_031D                      0000031D
_.org_1_033E                      0000033E
_.org_1_062A                      0000062A
_.org_1_062C                      0000062C
_.org_1_062F                      0000062F
_.org_1_0637                      00000637
_.org_1_0640                      00000640
_.org_1_0696                      00000696
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
aboveboth                         000001C6
add3huns                          00000614
add3ones                          0000061A
add3tens                          00000617
badkey                            000002AC
badkeyagain                       0000033D
big_number                        000005F0
bignumcount                       00000043
candle_index                      00000046
carryones                         0000061D
carrytens                         00000620
check_1                           00000381
check_2                           0000038A
check_3                           00000394
check_4                           0000039E
check_5                           000003A8
check_6                           000003B2
check_7                           000003BC
check_8                           000003C6
check_9                           000003D0
check_FF                          000004B1
check_LED                         00000427
check_LF                          00000496
check_defective                   000003E0
check_done                        0000029B
check_export                      000003EC
check_flick                       00000436
check_for_fail                    000004B4
check_immapeace                   0000032C
check_log1                        0000024B
check_log2                        00000253
check_log3                        0000025C
check_log4                        00000265
check_log5                        0000026E
check_log6                        00000277
check_log7                        00000280
check_log8                        00000289
check_log9                        00000292
check_next                        000004BA
check_none                        0000040A
check_nothx                       00000327
check_pass                        00000418
check_standby                     000003F2
check_start                       00000403
check_summary                     000003DA
check_threshold1                  000001B7
check_threshold2                  000001BF
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

check_time                        000003E6
check_wanna                       00000321
com                               0000003A
count76                           00000044
dat                               0000003B
default_key                       00000408
default_state                     00000445
defective                         00000474
delH                              0000003C
delL                              0000003E
delM                              0000003D
delay5ms                          00000632
detect_candle                     00000195
display_log                       000002AF
display_state                     00000409
end_check_fail                    000004CC
end_isr                           000006A1
end_operation                     000001CA
export                            000004F5
finish_motor                      00000360
first_two                         00000362
halfway                           0000034E
huns                              00000040
i2c_common_setup                  00000000
information                       00000380
init                              000000E7
isr                               00000698
keytemp                           00000037
last_two                          00000371
logs                              00000230
more_than_six                     000004CB
morethansix                       00000045
motor_count                       00000049
motor_del                         0000063B
motor_del_0                       0000063F
movff                             
movlf                             
newline                           
no_huns                           000004E1
no_log                            000002C7
no_tens                           000004E7
nohuns                            0000055F
notens                            00000569
now_FF                            00000498
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000042
op_time                           00000033
op_time_save                      0000003F
photocount                        00000047
photoval                          00000048
poll                              00000228
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

polling                           00000246
printASC                          
printBCD                          
printchar                         
read_EEPROM                       000002B2
read_rtc                          00000000
restart_motor                     0000035D
rotate                            0000018C
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
rtc_set                           
shiftlogs                         000001D9
shiftlogs_0                       000001DD
spacebar                          
start                             00000174
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_rot                         00000342
start_year1                       0000002A
start_year10                      00000029
startfrom3                        0000004A
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
summary                           00000446
tens                              00000041
test_candle                       000001AF
threshold1                        D'10'
threshold2                        D'142'
time                              000004CD
w_isr                             00000079
waiting                           0000010C
wanna_export                      0000031C
writeASC                          
writeBCD                          
write_log1                        000001FF
write_log1_0                      00000206
write_rtc                         00000000
MPASM 5.55                          MAIN.ASM   3-26-2014  17:44:09         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

writechar                         
writetoPC                         00000692
yes_log                           000002D3

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    49 reported,     0 suppressed

