MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001     list p=16f877                 ; list directive to define processor
                      00002       #include <p16f877.inc>        ; processor specific variable definitions
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2014 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00540         LIST
2007   3F72           00003       __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_O
                            FF
                      00004 
                      00005       #include <rtc_macros.inc>
                      00001         ;External labels
  0000                00002         extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup
                      00003 
                      00004 ;RTC Macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00005 
                      00006 rtc_resetAll    macro
                      00007 ;input:         none
                      00008 ;output:        none
                      00009 ;desc:          Resets all the time keeping registers on the RTC to zero
                      00010         banksel         0x74
                      00011         clrf            0x74
                      00012         banksel         0x73
                      00013         clrf            0x73
                      00014     call        write_rtc               ;Write 0 to Seconds
                      00015         banksel         0x73
                      00016     incf        0x73                    ;Set register address to 1
                      00017         call            write_rtc
                      00018         banksel         0x73
                      00019     incf        0x73                    ;Set register address to 2
                      00020         call            write_rtc
                      00021         banksel         0x73
                      00022     incf        0x73                    ;Set register address to 3
                      00023         call            write_rtc
                      00024         banksel         0x73
                      00025     incf        0x73                    ;Set register address to 4
                      00026         call            write_rtc
                      00027         banksel         0x73
                      00028     incf        0x73                    ;Set register address to 5
                      00029         call            write_rtc
                      00030         banksel         0x73
                      00031     incf        0x73                    ;Set register address to 6
                      00032         call            write_rtc
                      00033         endm
                      00034 
                      00035 rtc_set         macro   addliteral,datliteral
                      00036 ;input:         addliteral: value of address
                      00037 ;                       datliteral: value of data
                      00038 ;output:        none
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 ;desc:          loads the data in datliteral into the 
                      00040 ;                       address specified by addliteral in the RTC
                      00041         banksel 0x73
                      00042         movlw   addliteral
                      00043         movwf   0x73
                      00044         banksel 0x74
                      00045         movlw   datliteral
                      00046         movwf   0x74    
                      00047         call    write_rtc
                      00048         endm
                      00049 
                      00050 rtc_read        macro   addliteral
                      00051 ;input:         addliteral
                      00052 ;output:        0x75, 0x77, 0x78
                      00053 ;desc:          From the selected register in the RTC, read the data
                      00054 ;                       and load it into 0x75. 0x75 is also converted into 
                      00055 ;                       ASCII characters and the tens digit is placed into
                      00056 ;                       0x77 and the ones digit is placed in 0x78
                      00057         movlw   addliteral
                      00058         banksel 0x73
                      00059         movwf   0x73
                      00060         call    read_rtc
                      00061         banksel 0x75
                      00062         movf    0x75,w
                      00063         call    rtc_convert   
                      00064         endm
                      00006 
                      00007 
                      00008 ;***************************************
                      00009 ; DEFINITIONS
                      00010 ;***************************************
                      00011     #define     RS      PORTD,2
                      00012         #define E       PORTD,3
                      00013     #define threshold1  D'7'
                      00014     #define threshold2  D'69'
                      00015     #define IRDATA     PORTE, 0
                      00016     #define PHOTODATA  PORTE, 1
                      00017    ; note: check analog vs digital!
                      00018 
                      00019 
                      00020 ;***************************************
                      00021 ; VARIABLES
                      00022 ;***************************************
                      00023 
                      00024 ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                      00025 
                      00026     cblock      0x20            ;bank0 variables
                      00027     ; Important information (will be displayed)
  00000020            00028         state1     ;where   0 = none      1 = pass
  00000021            00029         state2     ;        2 = led fail  3 = flicker fail
  00000022            00030         state3
  00000023            00031         state4
  00000024            00032         state5
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            00033         state6
  00000026            00034         state7
  00000027            00035         state8
  00000028            00036         state9
  00000029            00037         start_year10    ;starting time (for log)
  0000002A            00038         start_year1     ; note: these are all ALREADY ASCII!
  0000002B            00039         start_month10
  0000002C            00040         start_month1
  0000002D            00041         start_date10
  0000002E            00042         start_date1
  0000002F            00043         start_hour10
  00000030            00044         start_hour1
  00000031            00045         start_min10
  00000032            00046         start_min1
  00000033            00047         op_time     ;BCD in seconds
  00000034            00048         num_tot     ;BCD
  00000035            00049         num_LF      ;BCD
  00000036            00050         num_FF      ;BCD
                      00051 ; For general program / interface: temps, counters, etc.
  00000037            00052         keytemp         ; for data display mode
  00000038            00053         statetemp
  00000039            00054                 Table_Counter   ; for LCD stuff
  0000003A            00055                 com
  0000003B            00056                 dat
  0000003C            00057         del1            ; for delay 5ms delay routine
  0000003D            00058         del2
  0000003E            00059         hdelH          ;for delay 0.5s routine
  0000003F            00060         hdelM
  00000040            00061         hdelL
  00000041            00062         op_time_save    ;for operation time
  00000042            00063         huns
  00000043            00064         tens
  00000044            00065         ones
  00000045            00066         bignumcount
  00000046            00067         count38         ;for isr
                      00068 ; For machine program: temps, counters, etc.
  00000047            00069         candle_index
  00000048            00070         photocount      ;for detecting candle
  00000049            00071         photoval
  0000004A            00072         start_step      ;for motor
  0000004B            00073         step_count
  0000004C            00074         step_max
                      00075     endc
                      00076 
                      00077     cblock  0x79        ;stuff that needs to be in all registers
  00000079            00078         w_isr
  0000007A            00079         status_isr
                      00080         endc
                      00081 
                      00082 
                      00083 ;***************************************
                      00084 ; MACROS
                      00085 ;***************************************
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086 
                      00087 ; Display a msg on LCD. Bank0 please!
                      00088 Display macro   Message
                      00089                 local   loop_disp
                      00090                 local   end_disp
                      00091                 clrf    Table_Counter
                      00092                 clrw
                      00093 loop_disp
                      00094         movf    Table_Counter,W
                      00095                 call    Message
                      00096                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
                      00097                 btfsc   STATUS,Z
                      00098                 goto    end_disp
                      00099                 call    WR_DATA
                      00100                 incf    Table_Counter,F
                      00101                 goto    loop_disp
                      00102 end_disp
                      00103                 endm
                      00104 
                      00105 
                      00106 ;Shortcuts for moving literals / registers
                      00107 movlf   macro   l, f
                      00108         movlw   l
                      00109         movwf   f
                      00110         endm
                      00111 
                      00112 movff   macro   source, dest
                      00113         movf    source, W
                      00114         movwf   dest
                      00115         endm
                      00116 
                      00117 ; Write to LCD. In bank0 please!
                      00118 writeBCD    macro   reg         ; from a register containing BCD
                      00119             movf    reg, W
                      00120             addlw   B'00110000'
                      00121             call WR_DATA
                      00122             endm
                      00123 
                      00124 writechar   macro   asc             ;ASCII code literal (or in "")
                      00125             movlw   asc
                      00126             call    WR_DATA
                      00127             endm
                      00128 
                      00129 writeASC        macro   reg         ;from a register containing ASCII
                      00130             movf    reg, W
                      00131             call WR_DATA
                      00132             endm
                      00133 
                      00134 spacebar    macro
                      00135             movlw   B'00010100'
                      00136             call    WR_INS
                      00137             endm
                      00138 
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139 ;Print to PC (hyperterminal). Any bank fine
                      00140 printchar   macro   char            ;direct ASCII code literal (or in "")
                      00141             movlw   char
                      00142             call    writetoPC
                      00143             endm
                      00144 
                      00145 printASC    macro   reg            ;ASCII code inside a register
                      00146             banksel reg
                      00147             movf    reg,W
                      00148             call    writetoPC
                      00149             endm
                      00150 
                      00151 printBCD    macro   BCD            ;BCD inside a register
                      00152             banksel BCD
                      00153             movf    BCD, W
                      00154             addlw   0x30
                      00155             call    writetoPC
                      00156             endm
                      00157 
                      00158 newline     macro
                      00159             printchar   0xA ;changes line
                      00160             printchar   0xD ;goes back to left
                      00161             endm
                      00162 ;***************************************
                      00163 ; VECTORS
                      00164 ;***************************************
                      00165 
                      00166     ORG       0x000
0000   2???           00167          goto      init
                      00168     ORG       0x004
0004   2???           00169         goto    isr
                      00170 
                      00171 
                      00172 ;***************************************
                      00173 ; TABLES (MESSAGES)
                      00174 ;***************************************
0005                  00175 Standby_Msg
0005   0782           00176                 addwf   PCL,F
0006   3453 3454 3441 00177                 dt              "STANDBY", 0
       344E 3444 3442 
       3459 3400 
000E                  00178 Start_Msg
000E   0782           00179         addwf   PCL,F
000F   3449 346E 3473 00180         dt      "Inspecting . . .",0
       3470 3465 3463 
       3474 3469 346E 
       3467 3420 342E 
       3420 342E 3420 
       342E 3400 
0020                  00181 End_Msg
0020   0782           00182         addwf   PCL,F
0021   3443 346F 346D 00183         dt      "Complete",0
       3470 346C 3465 
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3474 3465 3400 
002A                  00184 Time_Msg
002A   0782           00185                 addwf   PCL,F
002B   344F 3470 3465 00186                 dt              "Operation time:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3474 3469 
       346D 3465 343A 
       3400 
003B                  00187 Seconds
003B   0782           00188         addwf   PCL,F
003C   3420 3473 3465 00189         dt      " seconds", 0
       3463 346F 346E 
       3464 3473 3400 
0045                  00190 Not_present
0045   0782           00191         addwf   PCL,F
0046   343A 3420 344E 00192         dt      ": Not present",0
       346F 3474 3420 
       3470 3472 3465 
       3473 3465 346E 
       3474 3400 
0054                  00193 Pass
0054   0782           00194                 addwf   PCL,F
0055   343A 3420 3450 00195                 dt              ": Pass",0
       3461 3473 3473 
       3400 
005C                  00196 LED_fail
005C   0782           00197                 addwf   PCL,F
005D   343A 3420 344C 00198                 dt              ": LED fail",0
       3445 3444 3420 
       3466 3461 3469 
       346C 3400 
0068                  00199 Flick_fail
0068   0782           00200                 addwf   PCL,F
0069   343A 3420 3446 00201                 dt              ": Flicker fail",0
       346C 3469 3463 
       346B 3465 3472 
       3420 3466 3461 
       3469 346C 3400 
0078                  00202 Total_Msg
0078   0782           00203         addwf   PCL,F
0079   3454 346F 3474 00204         dt      "Total candles: ",0
       3461 346C 3420 
       3463 3461 346E 
       3464 346C 3465 
       3473 343A 3420 
       3400 
0089                  00205 LF
0089   0782           00206         addwf   PCL,F
008A   344C 3446 343A 00207         dt      "LF: ",0
       3420 3400 
008F                  00208 FF
008F   0782           00209         addwf   PCL,F
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0090   3446 3446 343A 00210         dt      "FF: ",0
       3420 3400 
0095                  00211 None
0095   0782           00212         addwf   PCL,F
0096   343C 346E 346F 00213         dt      "<none>", 0
       346E 3465 343E 
       3400 
009D                  00214 Logs_Msg1
009D   0782           00215         addwf   PCL,F
009E   3431 342D 3439 00216         dt      "1-9 to see logs",0
       3420 3474 346F 
       3420 3473 3465 
       3465 3420 346C 
       346F 3467 3473 
       3400 
00AE                  00217 Logs_Msg2
00AE   0782           00218         addwf   PCL,F
00AF   3453 3454 3441 00219         dt      "STANDBY to exit",0
       344E 3444 3442 
       3459 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3400 
00BF                  00220 Logs_Msg3
00BF   0782           00221         addwf   PCL,F
00C0   3445 3478 3470 00222         dt      "Export?",0
       346F 3472 3474 
       343F 3400 
00C8                  00223 Logs_Msg4
00C8   0782           00224         addwf   PCL,F
00C9   344C 344F 3447 00225         dt      "LOGS to return",0
       3453 3420 3474 
       346F 3420 3472 
       3465 3474 3475 
       3472 346E 3400 
00D8                  00226 Op_at
00D8   0782           00227         addwf   PCL,F
00D9   344F 3470 3465 00228         dt      "Operation at:",0
       3472 3461 3474 
       3469 346F 346E 
       3420 3461 3474 
       343A 3400 
                      00229 
                      00230 ;***************************************
                      00231 ; MAIN PROGRAM
                      00232 ;***************************************
                      00233 
00E7                  00234 init
                      00235         movlf     b'00110000', INTCON   ;no interrupts yet, but Timer0 and RB0 ready once GIE enabled
00E7   3030               M         movlw   b'00110000'
00E8   008B               M         movwf   INTCON
                      00236 
00E9   1683 1303      00237         banksel   TRISA                 ; bank 1
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238         movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EB   30C7               M         movlw   b'11000111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   0081               M         movwf   OPTION_REG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   0185           00239         clrf      TRISA                 ; PortA *may* be used for motor
                      00240         movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be 
                            external interrupt)
00EE   30F2               M         movlw   b'11110010'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   0086               M         movwf   TRISB
                      00241                                         ; note can disable keypad to free up these ports during operatio
                            n if necessary.
                      00242         movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; [2:1] *may* be solenoid
00F0   3018               M         movlw   b'00011000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0087               M         movwf   TRISC
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   0188           00243         clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
                      00244         movlf     b'011', TRISE         ; PortE *may* be used for ir and photodata
00F3   3003               M         movlw   b'011'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   0089               M         movwf   TRISE
                      00245         movlf   0x07, ADCON1            ; digital input
00F5   3007               M         movlw   0x07
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F6   009F               M         movwf   ADCON1
                      00246 
00F7   1283 1303      00247         banksel   PORTA                 ; bank 0
00F9   0185           00248         clrf      PORTA
00FA   0186           00249         clrf      PORTB
00FB   0187           00250         clrf      PORTC
00FC   0188           00251         clrf      PORTD
00FD   0189           00252         clrf      PORTE
                      00253 
00FE   2???           00254         call      i2c_common_setup      ;Set up I2C for communication. End in bank1
00FF   2???           00255         call      InitLCD               ;Initialize the LCD. End in bank0
0100   2???           00256         call      InitUSART             ;Set up USART for RS232. End in bank1
                      00257 
0101   1283 1303      00258         banksel     start_step          ; back to bank0
                      00259         movlf       d'1', start_step    ; set-up for motor
0103   3001               M         movlw   d'1'
0104   00CA               M         movwf   start_step
                      00260         movlf       d'15', step_max
0105   300F               M         movlw   d'15'
0106   00CC               M         movwf   step_max
                      00261 
                      00262         Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0107   01B9               M                 clrf    Table_Counter
0108   0103               M                 clrw
0109                      M loop_disp
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0109   0839               M         movf    Table_Counter,W
010A   2???               M                 call    Standby_Msg
010B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
010C   1903               M                 btfsc   STATUS,Z
010D   2???               M                 goto    end_disp
010E   2???               M                 call    WR_DATA
010F   0AB9               M                 incf    Table_Counter,F
0110   2???               M                 goto    loop_disp
0111                      M end_disp
0111   2???           00263         call    Switch_Lines
                      00264 
                      00265  ;--------------------------------------------------
                      00266  ;      STANDBY MODE
                      00267 
0112                  00268 waiting
                      00269         ; Display date and time.
                      00270         ; Also save starting time for log (will stop updating once we start)
                      00271         writechar "2"       ;First line shows 20**/**/**
0112   3032               M             movlw   "2"
0113   2???               M             call    WR_DATA
                      00272         writechar "0"
0114   3030               M             movlw   "0"
0115   2???               M             call    WR_DATA
                      00273         rtc_read        0x06            ;Read Address 0x06 from DS1307---year
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0116   3006               M         movlw   0x06
0117   1283 1303          M         banksel 0x73
0119   00F3               M         movwf   0x73
011A   2???               M         call    read_rtc
011B   1283 1303          M         banksel 0x75
011D   0875               M         movf    0x75,w
011E   2???               M         call    rtc_convert   
011F   0877           00274                 movf    0x77,W
0120   00A9           00275         movwf    start_year10    ;Save starting year dig10
0121   2???           00276                 call    WR_DATA
0122   0878           00277                 movf    0x78,W
0123   00AA           00278         movwf    start_year1    ;Save starting year dig1
0124   2???           00279                 call    WR_DATA
                      00280                 writechar "/"
0125   302F               M             movlw   "/"
0126   2???               M             call    WR_DATA
                      00281                 rtc_read        0x05            ;Read Address 0x05 from DS1307---month
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0127   3005               M         movlw   0x05
0128   1283 1303          M         banksel 0x73
012A   00F3               M         movwf   0x73
012B   2???               M         call    read_rtc
012C   1283 1303          M         banksel 0x75
012E   0875               M         movf    0x75,w
012F   2???               M         call    rtc_convert   
0130   0877           00282                 movf    0x77,W
0131   00AB           00283         movwf    start_month10    ;Save starting month dig10
0132   2???           00284                 call    WR_DATA
0133   0878           00285                 movf    0x78,W
0134   00AC           00286         movwf    start_month1    ;Save starting month dig1
0135   2???           00287                 call    WR_DATA
                      00288                 writechar       "/"
0136   302F               M             movlw   "/"
0137   2???               M             call    WR_DATA
                      00289                 rtc_read        0x04            ;Read Address 0x04 from DS1307---date
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0138   3004               M         movlw   0x04
0139   1283 1303          M         banksel 0x73
013B   00F3               M         movwf   0x73
013C   2???               M         call    read_rtc
013D   1283 1303          M         banksel 0x75
013F   0875               M         movf    0x75,w
0140   2???               M         call    rtc_convert   
0141   0877           00290                 movf    0x77,W
0142   00AD           00291         movwf    start_date10    ;Save starting date dig10
0143   2???           00292                 call    WR_DATA
0144   0878           00293                 movf    0x78,W
0145   00AE           00294         movwf    start_date1    ;Save starting date dig1
0146   2???           00295                 call    WR_DATA
                      00296                 spacebar
0147   3014               M             movlw   B'00010100'
0148   2???               M             call    WR_INS
                      00297                 rtc_read        0x02            ;Read Address 0x02 from DS1307---hour
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
0149   3002               M         movlw   0x02
014A   1283 1303          M         banksel 0x73
014C   00F3               M         movwf   0x73
014D   2???               M         call    read_rtc
014E   1283 1303          M         banksel 0x75
0150   0875               M         movf    0x75,w
0151   2???               M         call    rtc_convert   
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0152   0877           00298                 movf    0x77,W
0153   00AF           00299         movwf    start_hour10    ;Save starting hour dig10
0154   2???           00300                 call    WR_DATA
0155   0878           00301                 movf    0x78,W
0156   00B0           00302         movwf    start_hour1    ;Save starting hour dig1
0157   2???           00303                 call    WR_DATA
                      00304                 writechar ":"
0158   303A               M             movlw   ":"
0159   2???               M             call    WR_DATA
                      00305                 rtc_read        0x01            ;Read Address 0x01 from DS1307---min
                          M ;input:         addliteral
                          M ;output:        0x75, 0x77, 0x78
                          M ;desc:          From the selected register in the RTC, read the data
                          M ;                       and load it into 0x75. 0x75 is also converted into 
                          M ;                       ASCII characters and the tens digit is placed into
                          M ;                       0x77 and the ones digit is placed in 0x78
015A   3001               M         movlw   0x01
015B   1283 1303          M         banksel 0x73
015D   00F3               M         movwf   0x73
015E   2???               M         call    read_rtc
015F   1283 1303          M         banksel 0x75
0161   0875               M         movf    0x75,w
0162   2???               M         call    rtc_convert   
0163   0877           00306                 movf    0x77,W
0164   00B1           00307         movwf    start_min10    ;Save starting min dig10
0165   2???           00308                 call    WR_DATA
0166   0878           00309                 movf    0x78,W
0167   00B2           00310         movwf    start_min1    ;Save starting min dig1
0168   2???           00311                 call    WR_DATA
                      00312 
                      00313         ; Move cursor back to start of second line
                      00314         ; We will update displayed time but not the word "STANDBY"
0169   30C0           00315         movlw   B'11000000'
016A   2???           00316         call    WR_INS
                      00317 
                      00318         ;Poll to start (will have to hold key for ~0.5sec)
016B   1C86           00319          btfss          PORTB,1     ;Wait until data is available from the keypad
016C   2???           00320          goto           waiting
                      00321 
016D   0E06           00322          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
016E   390F           00323          andlw          0x0F
016F   00B7           00324          movwf      keytemp
0170   3A0C           00325          xorlw      0xC         ;Will be all zeros if its "START"
0171   1903           00326          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
0172   2???           00327          goto       start
                      00328 
0173   0837           00329          movf       keytemp,W     ;Go to log interface
0174   3A0E           00330          xorlw      0xE
0175   1903           00331          btfsc      STATUS,Z
0176   2???           00332          goto       logs
                      00333 
0177   1886           00334          btfsc          PORTB,1     ;Wait until key is released
0178   2???           00335          goto           $-1
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0179   2???           00336          goto       waiting
                      00337 
                      00338 ;-----------------------------------------------------------
                      00339 ;       ACTUAL OPERATION (I'm just adding values manually now)
                      00340 
017A                  00341 start
                      00342         ;Start the timer
                      00343         movlf       D'38', count38
017A   3026               M         movlw   D'38'
017B   00C6               M         movwf   count38
017C   01B3           00344         clrf        op_time
017D   0181           00345         clrf        TMR0
017E   178B           00346         bsf         INTCON, GIE     ;enable interrupts
                      00347 
                      00348         ;Display starting message
017F   2???           00349         call        Clear_Display
                      00350         Display     Start_Msg       ;"Inspecting. . ."
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0180   01B9               M                 clrf    Table_Counter
0181   0103               M                 clrw
0182                      M loop_disp
0182   0839               M         movf    Table_Counter,W
0183   2???               M                 call    Start_Msg
0184   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0185   1903               M                 btfsc   STATUS,Z
0186   2???               M                 goto    end_disp
0187   2???               M                 call    WR_DATA
0188   0AB9               M                 incf    Table_Counter,F
0189   2???               M                 goto    loop_disp
018A                      M end_disp
                      00351 
                      00352 
                      00353 ;****FAKE CODE ******************************************
                      00354         ; Just delaying
018A   2???           00355         call        HalfS
018B   2???           00356         call        HalfS
018C   2???           00357         call        HalfS
018D   2???           00358         call        HalfS
018E   2???           00359         call        HalfS
018F   2???           00360         call        HalfS
0190   2???           00361         call        HalfS
0191   2???           00362         call        HalfS
0192   2???           00363         call        HalfS
0193   2???           00364         call        HalfS
0194   2???           00365         call        HalfS
0195   2???           00366         call        HalfS
0196   2???           00367         call        HalfS
0197   2???           00368         call        HalfS
0198   2???           00369         call        HalfS
0199   2???           00370         call        HalfS
019A   2???           00371         call        HalfS
019B   2???           00372         call        HalfS
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00373 
                      00374        ; Putting values in manually.
                      00375         movlf     B'01', state1     ;pass
019C   3001               M         movlw   B'01'
019D   00A0               M         movwf   state1
                      00376         movlf     B'01', state2     ;pass
019E   3001               M         movlw   B'01'
019F   00A1               M         movwf   state2
                      00377         movlf     B'10', state3     ;LED fail
01A0   3002               M         movlw   B'10'
01A1   00A2               M         movwf   state3
                      00378         movlf     B'01', state4     ;pass
01A2   3001               M         movlw   B'01'
01A3   00A3               M         movwf   state4
                      00379         movlf     B'01', state5     ;pass
01A4   3001               M         movlw   B'01'
01A5   00A4               M         movwf   state5
                      00380         movlf     B'01', state6     ;pass
01A6   3001               M         movlw   B'01'
01A7   00A5               M         movwf   state6
                      00381         movlf     B'01', state7     ;pass
01A8   3001               M         movlw   B'01'
01A9   00A6               M         movwf   state7
                      00382         movlf     B'11', state8     ;flicker fail
01AA   3003               M         movlw   B'11'
01AB   00A7               M         movwf   state8
                      00383         movlf     B'01', state9     ;pass
01AC   3001               M         movlw   B'01'
01AD   00A8               M         movwf   state9
                      00384         movlf     D'1', num_LF
01AE   3001               M         movlw   D'1'
01AF   00B5               M         movwf   num_LF
                      00385         movlf     D'1', num_FF
01B0   3001               M         movlw   D'1'
01B1   00B6               M         movwf   num_FF
                      00386         movlf     D'9', num_tot
01B2   3009               M         movlw   D'9'
01B3   00B4               M         movwf   num_tot
                      00387 ;*******************************************************
                      00388 
                      00389 ; choose fake or real!
                      00390 
                      00391 ;;******REAL CODE ******************************************
                      00392 ;    clrf    candle_index
                      00393 ;    bcf        STATUS, IRP
                      00394 ;    movlf   0x1F, FSR       ;pointing at right before state1
                      00395 ;
                      00396 ;rotate
                      00397 ;       movlw   d'10'                 ; stop operation after 10 rotations
                      00398 ;    subwf   candle_index,W      ; candle_index is # you've already tested before rotating
                      00399 ;    btfsc   STATUS,Z
                      00400 ;       goto    end_operation
                      00401 ;       call    ROTATEMOTOR          ; else rotate motor and n++
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402 ;       incf    candle_index, F
                      00403 ;    incf    FSR, F
                      00404 ;
                      00405 ;detect_candle
                      00406 ;       btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
                      00407 ;       goto    test_candle     ;yes candle, go test it
                      00408 ;   movlf   D'0', INDF      ;no candle, state = not present
                      00409 ;       goto rotate                 ;and go try next
                      00410 ;
                      00411 ;test_candle
                      00412 ;       incf    num_tot, F                      ; keeping track of total number of candles
                      00413 ;       clrf    photocount
                      00414 ;       call    HalfS       ; delay 2 sec or whatever
                      00415 ;   call    HalfS
                      00416 ;   call    HalfS
                      00417 ;   call    HalfS
                      00418 ;       movff   photocount, photoval        ;to ensure it wont change again
                      00419 ;check_threshold1
                      00420 ;    movlw    threshold1
                      00421 ;    subwf   photoval, W
                      00422 ;    btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
                      00423 ;    goto check_threshold2
                      00424 ;    movlf   D'2', INDF      ; < threshold 1 means led fail
                      00425 ;        incf    num_LF, F
                      00426 ;    goto    rotate
                      00427 ;check_threshold2
                      00428 ;    movlw    threshold2
                      00429 ;    subwf   photoval, W
                      00430 ;    btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
                      00431 ;    goto aboveboth
                      00432 ;    movlf   D'1', INDF      ; < threshold 2 means pass
                      00433 ;    goto    rotate
                      00434 ;aboveboth
                      00435 ;   movlf   D'3', INDF       ;else flicker fail
                      00436 ;   incf    num_FF, F
                      00437 ;   goto    rotate
                      00438 ; ;****************************************************
                      00439 
01B4                  00440 end_operation
                      00441         ; Stop the timer
01B4   138B           00442          bcf         INTCON, GIE  ;disable interrupts
                      00443 
                      00444         ;Display "complete"
01B5   2???           00445         call       Clear_Display
                      00446         Display    End_Msg          ; "Complete"
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
01B6   01B9               M                 clrf    Table_Counter
01B7   0103               M                 clrw
01B8                      M loop_disp
01B8   0839               M         movf    Table_Counter,W
01B9   2???               M                 call    End_Msg
01BA   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BB   1903               M                 btfsc   STATUS,Z
01BC   2???               M                 goto    end_disp
01BD   2???               M                 call    WR_DATA
01BE   0AB9               M                 incf    Table_Counter,F
01BF   2???               M                 goto    loop_disp
01C0                      M end_disp
                      00447 
                      00448         ; Shift logs 1-8 -> 2-9
                      00449         ; Then store current run as log 1
01C0                  00450 shiftlogs
01C0   1283 1703      00451         banksel     EEADR               ; bank 2
                      00452         movlf       D'111', EEADR       ; start shifting from 111->125
01C2   306F               M         movlw   D'111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C3   008D               M         movwf   EEADR
                      00453 
01C4                  00454 shiftlogs_0
01C4   1683 1703      00455         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C6   138C           00456         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C7   140C           00457         bsf         EECON1, RD          ;read (EEADR) to EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01C8   188C           00458         btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01C9   2???           00459         goto        $-1
01CA   1283 1703      00460         banksel     EEADR               ;bank 2
01CC   300E           00461         movlw       D'14'               ;add 14 to EEADR to shift 14 places
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01CD   078D           00462         addwf       EEADR, F
01CE   1683 1703      00463         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D0   138C           00464         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D1   150C           00465         bsf         EECON1, WREN
01D2   3055           00466         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D3   008D           00467         movwf       EECON2
01D4   30AA           00468         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D5   008D           00469         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D6   148C           00470         bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01D7   110C           00471         bcf         EECON1, WREN
01D8   1283 1703      00472         banksel     EEADR               ;bank 2
01DA   300E           00473         movlw       D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01DB   020D           00474         subwf       EEADR, W
01DC   1903           00475         btfsc       STATUS, Z
01DD   2???           00476         goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                      00477 
01DE   1283 1303      00478         banksel op_time             ; for some reason I need to delay here
01E0   2???           00479         call   delay5ms             ; or else I get an infinite loop
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E1   1283 1703      00480         banksel EEADR
                      00481 
01E3   300F           00482         movlw       D'15'               ;else EEADR -= 15 to shift next byte
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E4   028D           00483         subwf       EEADR, F
01E5   2???           00484         goto        shiftlogs_0
                      00485 
01E6                  00486 write_log1
01E6   1283 1703      00487         banksel     EEADR
01E8   1383           00488         bcf         STATUS, IRP
                      00489         movlf       0x37, FSR           ;points to one after last important data
01E9   3037               M         movlw   0x37
01EA   0084               M         movwf   FSR
                      00490         movlf       D'14', EEADR        ;points to one after last place to write to
01EB   300E               M         movlw   D'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EC   008D               M         movwf   EEADR
01ED                  00491 write_log1_0
01ED   1683 1703      00492         banksel     EECON1              ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01EF   188C           00493         btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01F0   2???           00494         goto        $-1
01F1   1283 1703      00495         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F3   038D           00496         decf        EEADR, F            ;writing backwords
01F4   0384           00497         decf        FSR, F
                      00498         movff       INDF, EEDATA
01F5   0800               M         movf    INDF,   W
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F6   008C               M         movwf   EEDATA
01F7   1683 1703      00499         banksel     EECON1              ;bank 3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01F9   138C           00500         bcf         EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FA   150C           00501         bsf         EECON1, WREN
01FB   3055           00502         movlw       0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FC   008D           00503         movwf       EECON2
01FD   30AA           00504         movlw       0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FE   008D           00505         movwf       EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01FF   148C           00506         bsf         EECON1, WR          ; write (INDF) to EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0200   110C           00507         bcf         EECON1, WREN
0201   1283 1703      00508         banksel     EEADR               ;bank 2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0203   088D           00509         movf        EEADR, F
0204   1D03           00510         btfss       STATUS, Z           ;if EEADR = 0 we're done
0205   2???           00511         goto        write_log1_0
                      00512 
                      00513         ; Display info screens
0206   ???? ????      00514         banksel    time            ; back to bank0
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0208   2???           00515         call       time             ; "Operation time: X sec"
0209   2???           00516         call       HalfS
020A   2???           00517         call       HalfS
020B   2???           00518         call       summary          ; "Total candles: X. Defective: Y"
020C   2???           00519         call       HalfS
020D   2???           00520         call       HalfS
020E   2???           00521         call       defective        ; "FF: a b c. LF: d e f"
                      00522 ;-----------------------------------------------------------------------
                      00523 ; Data display interface
                      00524 
020F   1C86           00525 poll     btfss          PORTB,1     ;Wait until data is available from the keypad
0210   2???           00526          goto           $-1
                      00527 
0211   0E06           00528          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0212   390F           00529          andlw          0x0F
0213   2???           00530          call       information ;Do the right thing
                      00531 
0214   1886           00532          btfsc          PORTB,1     ;Wait until key is released
0215   2???           00533          goto           $-1
0216   2???           00534          goto       poll
                      00535 
                      00536 
                      00537 ;-------------------------------------------------------------------------
                      00538 ; LOGS INTERFACE
                      00539 ; Shows last runs of last 9 logs
                      00540 ; Access from STANDBY and return to STANDBY
                      00541 
0217                  00542 logs
0217   2???           00543     call    Clear_Display
                      00544     Display Logs_Msg1
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0218   01B9               M                 clrf    Table_Counter
0219   0103               M                 clrw
021A                      M loop_disp
021A   0839               M         movf    Table_Counter,W
021B   2???               M                 call    Logs_Msg1
021C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
021D   1903               M                 btfsc   STATUS,Z
021E   2???               M                 goto    end_disp
021F   2???               M                 call    WR_DATA
0220   0AB9               M                 incf    Table_Counter,F
0221   2???               M                 goto    loop_disp
0222                      M end_disp
0222   2???           00545     call    Switch_Lines
                      00546     Display Logs_Msg2
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0223   01B9               M                 clrf    Table_Counter
0224   0103               M                 clrw
0225                      M loop_disp
0225   0839               M         movf    Table_Counter,W
0226   2???               M                 call    Logs_Msg2
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0227   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0228   1903               M                 btfsc   STATUS,Z
0229   2???               M                 goto    end_disp
022A   2???               M                 call    WR_DATA
022B   0AB9               M                 incf    Table_Counter,F
022C   2???               M                 goto    loop_disp
022D                      M end_disp
                      00547 
022D                  00548 polling
022D   1C86           00549     btfss               PORTB,1     ;Wait until data is available from the keypad
022E   2???           00550     goto                $-1
                      00551 
022F   0E06           00552     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0230   390F           00553     andlw               0x0F
0231   00B7           00554     movwf       keytemp     ; Save which key was pressed
                      00555 
0232                  00556 check_log1
0232   3A00           00557     xorlw   0x0         ;will be all zeros if its 1
0233   1D03           00558     btfss   STATUS,Z    ;and Z will be high, so skip
0234   2???           00559     goto    check_log2
0235   1283 1703      00560     banksel EEADR           ;(bank2)
                      00561     movlf   d'0', EEADR
0237   3000               M         movlw   d'0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0238   008D               M         movwf   EEADR
0239   2???           00562     goto    display_log
                      00563 
023A                  00564 check_log2
023A   0837           00565     movf    keytemp, W
023B   3A01           00566     xorlw   0x1
023C   1D03           00567     btfss   STATUS,Z
023D   2???           00568     goto    check_log3
023E   1283 1703      00569     banksel EEADR
                      00570     movlf   d'14', EEADR
0240   300E               M         movlw   d'14'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0241   008D               M         movwf   EEADR
0242   2???           00571     goto    display_log
                      00572 
0243                  00573 check_log3
0243   0837           00574     movf    keytemp, W
0244   3A02           00575     xorlw   0x2
0245   1D03           00576     btfss   STATUS,Z
0246   2???           00577     goto    check_log4
0247   1283 1703      00578     banksel EEADR
                      00579     movlf   d'28', EEADR
0249   301C               M         movlw   d'28'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
024A   008D               M         movwf   EEADR
024B   2???           00580     goto    display_log
                      00581 
024C                  00582 check_log4
024C   0837           00583     movf    keytemp, W
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024D   3A04           00584     xorlw   0x4
024E   1D03           00585     btfss   STATUS,Z
024F   2???           00586     goto    check_log5
0250   1283 1703      00587     banksel EEADR
                      00588     movlf   d'42', EEADR
0252   302A               M         movlw   d'42'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0253   008D               M         movwf   EEADR
0254   2???           00589     goto    display_log
                      00590 
0255                  00591 check_log5
0255   0837           00592     movf    keytemp, W
0256   3A05           00593     xorlw   0x5
0257   1D03           00594     btfss   STATUS,Z
0258   2???           00595     goto    check_log6
0259   1283 1703      00596     banksel EEADR
                      00597     movlf   d'56', EEADR
025B   3038               M         movlw   d'56'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
025C   008D               M         movwf   EEADR
025D   2???           00598     goto    display_log
                      00599 
025E                  00600 check_log6
025E   0837           00601     movf    keytemp, W
025F   3A06           00602     xorlw   0x6
0260   1D03           00603     btfss   STATUS,Z
0261   2???           00604     goto    check_log7
0262   1283 1703      00605     banksel EEADR
                      00606     movlf   d'70', EEADR
0264   3046               M         movlw   d'70'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0265   008D               M         movwf   EEADR
0266   2???           00607     goto    display_log
                      00608 
0267                  00609 check_log7
0267   0837           00610     movf    keytemp, W
0268   3A08           00611     xorlw   0x8
0269   1D03           00612     btfss   STATUS,Z
026A   2???           00613     goto    check_log8
026B   1283 1703      00614     banksel EEADR
                      00615     movlf   d'84', EEADR
026D   3054               M         movlw   d'84'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026E   008D               M         movwf   EEADR
026F   2???           00616     goto    display_log
                      00617 
0270                  00618 check_log8
0270   0837           00619     movf    keytemp, W
0271   3A09           00620     xorlw   0x9
0272   1D03           00621     btfss   STATUS,Z
0273   2???           00622     goto    check_log9
0274   1283 1703      00623     banksel EEADR
                      00624     movlf   d'98', EEADR
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0276   3062               M         movlw   d'98'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0277   008D               M         movwf   EEADR
0278   2???           00625     goto    display_log
                      00626 
0279                  00627 check_log9
0279   0837           00628     movf    keytemp, W
027A   3A0A           00629     xorlw   0xA
027B   1D03           00630     btfss   STATUS,Z
027C   2???           00631     goto    check_done
027D   1283 1703      00632     banksel EEADR
                      00633     movlf   d'112', EEADR
027F   3070               M         movlw   d'112'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0280   008D               M         movwf   EEADR
0281   2???           00634     goto    display_log
                      00635 
0282                  00636 check_done
0282   0837           00637     movf    keytemp, W
0283   3A0D           00638     xorlw   0xD
0284   1D03           00639     btfss   STATUS,Z
0285   2???           00640     goto    badkey
0286   2???           00641     call    Clear_Display
                      00642     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0287   01B9               M                 clrf    Table_Counter
0288   0103               M                 clrw
0289                      M loop_disp
0289   0839               M         movf    Table_Counter,W
028A   2???               M                 call    Standby_Msg
028B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
028C   1903               M                 btfsc   STATUS,Z
028D   2???               M                 goto    end_disp
028E   2???               M                 call    WR_DATA
028F   0AB9               M                 incf    Table_Counter,F
0290   2???               M                 goto    loop_disp
0291                      M end_disp
0291   2???           00643     call    Switch_Lines
0292   2???           00644     goto    waiting
                      00645 
0293                  00646 badkey
0293   1886           00647     btfsc               PORTB,1     ;Wait until key is released
0294   2???           00648     goto                $-1
0295   2???           00649     goto        polling
                      00650 
                      00651 
0296                  00652 display_log                 ;start in bank2
                      00653     ; move EEPROM data back to "current" data
0296   1383           00654     bcf STATUS, IRP
                      00655     movlf   0x29, FSR
0297   3029               M         movlw   0x29
0298   0084               M         movwf   FSR
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0299                  00656 read_EEPROM
0299   1683 1703      00657     banksel EECON1          ;bank3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029B   138C           00658     bcf EECON1, EEPGD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029C   140C           00659     bsf EECON1, RD          ; read EEPROM
029D   1283 1703      00660     banksel EEDATA          ;bank 2
                      00661     movff   EEDATA, INDF    ; move EEDATA to "current" data
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
029F   080C               M         movf    EEDATA, W
02A0   0080               M         movwf   INDF
02A1   0A84           00662     incf    FSR, F
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A2   0A8D           00663     incf    EEADR, F
02A3   3037           00664     movlw   0x37            ;done if FSR = 0x37
02A4   0204           00665     subwf   FSR, W
02A5   1D03           00666     btfss   STATUS, Z
02A6   2???           00667     goto    read_EEPROM
                      00668 
                      00669     ;display that shit
02A7   1283 1303      00670     banksel Table_Counter   ; back to bank0
02A9   2???           00671     call    Clear_Display
                      00672     ;if first data is 0xFF (no log) just display "none"
02AA   30FF           00673     movlw   0xFF
02AB   0229           00674     subwf   start_year10, W
02AC   1D03           00675     btfss   STATUS, Z
02AD   2???           00676     goto yes_log
02AE                  00677 no_log
                      00678     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02AE   01B9               M                 clrf    Table_Counter
02AF   0103               M                 clrw
02B0                      M loop_disp
02B0   0839               M         movf    Table_Counter,W
02B1   2???               M                 call    None
02B2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02B3   1903               M                 btfsc   STATUS,Z
02B4   2???               M                 goto    end_disp
02B5   2???               M                 call    WR_DATA
02B6   0AB9               M                 incf    Table_Counter,F
02B7   2???               M                 goto    loop_disp
02B8                      M end_disp
02B8   2???           00679     call    HalfS
02B9   2???           00680     goto    logs
                      00681     ;else display the log
02BA                  00682 yes_log
                      00683     Display Op_at
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02BA   01B9               M                 clrf    Table_Counter
02BB   0103               M                 clrw
02BC                      M loop_disp
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02BC   0839               M         movf    Table_Counter,W
02BD   2???               M                 call    Op_at
02BE   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02BF   1903               M                 btfsc   STATUS,Z
02C0   2???               M                 goto    end_disp
02C1   2???               M                 call    WR_DATA
02C2   0AB9               M                 incf    Table_Counter,F
02C3   2???               M                 goto    loop_disp
02C4                      M end_disp
02C4   2???           00684     call    Switch_Lines
                      00685     writechar    "2"
02C5   3032               M             movlw   "2"
02C6   2???               M             call    WR_DATA
                      00686     writechar    "0"
02C7   3030               M             movlw   "0"
02C8   2???               M             call    WR_DATA
                      00687     writeASC   start_year10
02C9   0829               M             movf    start_year10, W
02CA   2???               M             call WR_DATA
                      00688     writeASC   start_year1
02CB   082A               M             movf    start_year1, W
02CC   2???               M             call WR_DATA
                      00689     writechar   "/"
02CD   302F               M             movlw   "/"
02CE   2???               M             call    WR_DATA
                      00690     writeASC   start_month10
02CF   082B               M             movf    start_month10, W
02D0   2???               M             call WR_DATA
                      00691     writeASC   start_month1
02D1   082C               M             movf    start_month1, W
02D2   2???               M             call WR_DATA
                      00692     writechar   "/"
02D3   302F               M             movlw   "/"
02D4   2???               M             call    WR_DATA
                      00693     writeASC   start_date10
02D5   082D               M             movf    start_date10, W
02D6   2???               M             call WR_DATA
                      00694     writeASC   start_date1
02D7   082E               M             movf    start_date1, W
02D8   2???               M             call WR_DATA
                      00695     writechar   " "
02D9   3020               M             movlw   " "
02DA   2???               M             call    WR_DATA
                      00696     writeASC   start_hour10
02DB   082F               M             movf    start_hour10, W
02DC   2???               M             call WR_DATA
                      00697     writeASC   start_hour1
02DD   0830               M             movf    start_hour1, W
02DE   2???               M             call WR_DATA
                      00698     writechar   ":"
02DF   303A               M             movlw   ":"
02E0   2???               M             call    WR_DATA
                      00699     writeASC  start_min10
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E1   0831               M             movf    start_min10, W
02E2   2???               M             call WR_DATA
                      00700     writeASC   start_min1
02E3   0832               M             movf    start_min1, W
02E4   2???               M             call WR_DATA
02E5   2???           00701     call    HalfS
02E6   2???           00702     call    HalfS
02E7   2???           00703     call    time
02E8   2???           00704     call    HalfS
02E9   2???           00705     call    HalfS
02EA   2???           00706     call    summary
02EB   2???           00707     call    HalfS
02EC   2???           00708     call    HalfS
                      00709     ;option to Export
02ED   2???           00710     call    Clear_Display
                      00711     Display Logs_Msg3
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02EE   01B9               M                 clrf    Table_Counter
02EF   0103               M                 clrw
02F0                      M loop_disp
02F0   0839               M         movf    Table_Counter,W
02F1   2???               M                 call    Logs_Msg3
02F2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02F3   1903               M                 btfsc   STATUS,Z
02F4   2???               M                 goto    end_disp
02F5   2???               M                 call    WR_DATA
02F6   0AB9               M                 incf    Table_Counter,F
02F7   2???               M                 goto    loop_disp
02F8                      M end_disp
02F8   2???           00712     call    Switch_Lines
                      00713     Display Logs_Msg4
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
02F9   01B9               M                 clrf    Table_Counter
02FA   0103               M                 clrw
02FB                      M loop_disp
02FB   0839               M         movf    Table_Counter,W
02FC   2???               M                 call    Logs_Msg4
02FD   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
02FE   1903               M                 btfsc   STATUS,Z
02FF   2???               M                 goto    end_disp
0300   2???               M                 call    WR_DATA
0301   0AB9               M                 incf    Table_Counter,F
0302   2???               M                 goto    loop_disp
0303                      M end_disp
                      00714 
0303                  00715 wanna_export
0303   1C86           00716     btfss               PORTB,1     ;Wait until data is available from the keypad
0304   2???           00717     goto                $-1
                      00718 
0305   0E06           00719     swapf               PORTB,W     ;Read PortB<7:4> into W<3:0>
0306   390F           00720     andlw               0x0F
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0307   00B7           00721     movwf       keytemp     ; Save which key was pressed
                      00722 
0308                  00723 check_wanna
0308   0837           00724     movf    keytemp, W
0309   3A0F           00725     xorlw   0xF
030A   1D03           00726     btfss   STATUS,Z
030B   2???           00727     goto    check_nothx
030C   2???           00728     call    export
030D   2???           00729     goto    logs
                      00730 
030E                  00731 check_nothx
030E   0837           00732     movf    keytemp, W
030F   3A0E           00733     xorlw   0xE
0310   1D03           00734     btfss   STATUS,Z
0311   2???           00735     goto    check_immapeace
0312   2???           00736     goto    logs
                      00737 
0313                  00738 check_immapeace
0313   0837           00739     movf    keytemp, W
0314   3A0D           00740     xorlw   0xD
0315   1D03           00741     btfss   STATUS,Z
0316   2???           00742     goto    badkeyagain
0317   2???           00743     call    Clear_Display
                      00744     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0318   01B9               M                 clrf    Table_Counter
0319   0103               M                 clrw
031A                      M loop_disp
031A   0839               M         movf    Table_Counter,W
031B   2???               M                 call    Standby_Msg
031C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
031D   1903               M                 btfsc   STATUS,Z
031E   2???               M                 goto    end_disp
031F   2???               M                 call    WR_DATA
0320   0AB9               M                 incf    Table_Counter,F
0321   2???               M                 goto    loop_disp
0322                      M end_disp
0322   2???           00745     call    Switch_Lines
0323   2???           00746     goto    waiting
                      00747 
0324                  00748 badkeyagain
0324   1886           00749     btfsc               PORTB,1     ;Wait until key is released
0325   2???           00750     goto                $-1
0326   2???           00751     goto        wanna_export
                      00752 
                      00753 ; END OF MAIN PROGRAM
                      00754 ;------------------------------------------------------------
                      00755 
                      00756 ;***************************************
                      00757 ; ROTATE MOTOR ROUTINE
                      00758 ; Rotates motor approx 36deg. Alternates between 15 and 16 steps
                      00759 ; for average of 116.25deg per turn = 36.1 deg on actual thing
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00760 ;***************************************
                      00761 
                      00762 ;ROTATEMOTOR
                      00763 ;    clrf    step_count
                      00764 ;
                      00765 ;    ;go to the right starting step
                      00766 ;    movlw   d'1'
                      00767 ;    subwf   start_step, W
                      00768 ;    btfsc   STATUS,Z
                      00769 ;    goto    firststep
                      00770 ;
                      00771 ;    movlw   d'2'
                      00772 ;    subwf   start_step, W
                      00773 ;    btfsc   STATUS,Z
                      00774 ;    goto    secondstep
                      00775 ;
                      00776 ;    movlw   d'3'
                      00777 ;    subwf   start_step, W
                      00778 ;    btfsc   STATUS,Z
                      00779 ;    goto    thirdstep
                      00780 ;
                      00781 ;    movlw   d'4'
                      00782 ;    subwf   start_step, W
                      00783 ;    btfsc   STATUS,Z
                      00784 ;    goto    fourthstep
                      00785 ;
                      00786 ;four_steps
                      00787 ;
                      00788 ;firststep
                      00789 ;    movf    step_max, W
                      00790 ;    subwf   step_count, W
                      00791 ;    btfss   STATUS, Z
                      00792 ;    goto    pulse1
                      00793 ;    movlf   d'1', start_step
                      00794 ;    goto    end_rotate
                      00795 ;pulse1
                      00796 ;    movlf   B'1001', PORTA
                      00797 ;    call    delay5ms
                      00798 ;    call    delay5ms
                      00799 ;    call    HalfS
                      00800 ;    incf    step_count, F
                      00801 ;
                      00802 ;secondstep
                      00803 ;    movf    step_max, W
                      00804 ;    subwf   step_count, W
                      00805 ;    btfss   STATUS, Z
                      00806 ;    goto    pulse2
                      00807 ;    movlf   d'2', start_step
                      00808 ;    goto    end_rotate
                      00809 ;pulse2
                      00810 ;    movlf   B'1010', PORTA
                      00811 ;    call    delay5ms
                      00812 ;    call    delay5ms
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00813 ;    call    HalfS
                      00814 ;    incf    step_count, F
                      00815 ;
                      00816 ;thirdstep
                      00817 ;    movf    step_max, W
                      00818 ;    subwf   step_count, W
                      00819 ;    btfss   STATUS, Z
                      00820 ;    goto    pulse3
                      00821 ;    movlf   d'3', start_step
                      00822 ;    goto    end_rotate
                      00823 ;pulse3
                      00824 ;    movlf   B'0110', PORTA
                      00825 ;    call    delay5ms
                      00826 ;    call    delay5ms
                      00827 ;    call    HalfS
                      00828 ;    incf    step_count, F
                      00829 ;
                      00830 ;fourthstep
                      00831 ;    movf    step_max, W
                      00832 ;    subwf   step_count, W
                      00833 ;    btfss   STATUS, Z
                      00834 ;    goto    pulse4
                      00835 ;    movlf   d'4', start_step
                      00836 ;    goto    end_rotate
                      00837 ;pulse4
                      00838 ;    movlf   B'0101', PORTA
                      00839 ;    call    delay5ms
                      00840 ;    call    delay5ms
                      00841 ;    call    HalfS
                      00842 ;    incf    step_count, F
                      00843 ;
                      00844 ;    goto    four_steps
                      00845 ;
                      00846 ;end_rotate
                      00847 ;   ;if step_max is 15 incr, 16 dec
                      00848 ;    movlw    d'16'
                      00849 ;    subwf   step_max, W
                      00850 ;    btfss   STATUS,Z
                      00851 ;    goto    must_inc
                      00852 ;must_dec
                      00853 ;    decf    step_max, F
                      00854 ;    return
                      00855 ;must_inc
                      00856 ;    incf     step_max, F
                      00857 ;    return
                      00858 
                      00859 
                      00860 ;***************************************
                      00861 ; DATA DISPLAY ROUTINE
                      00862 ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                      00863 ; Determines which key it was and displays appropriate info / branch
                      00864 ;***************************************
                      00865 
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0327                  00866 information
0327   00B7           00867     movwf   keytemp             ; Save which key was pressed
                      00868 
0328                  00869 check_1
0328   3A00           00870     xorlw   0x0         ;will be all zeros if its 1
0329   1D03           00871     btfss   STATUS,Z    ;and Z will be high, so skip
032A   2???           00872     goto    check_2
032B   2???           00873     call    Clear_Display
                      00874     writechar "1"
032C   3031               M             movlw   "1"
032D   2???               M             call    WR_DATA
032E   0820           00875     movf    state1, W
032F   2???           00876     call    display_state
0330   0008           00877     return
                      00878 
0331                  00879 check_2
0331   0837           00880     movf    keytemp, W
0332   3A01           00881     xorlw   0x1
0333   1D03           00882     btfss   STATUS,Z
0334   2???           00883     goto    check_3
0335   2???           00884     call    Clear_Display
                      00885     writechar "2"
0336   3032               M             movlw   "2"
0337   2???               M             call    WR_DATA
0338   0821           00886     movf    state2, W
0339   2???           00887     call    display_state
033A   0008           00888     return
                      00889 
033B                  00890 check_3
033B   0837           00891     movf    keytemp, W
033C   3A02           00892     xorlw   0x2
033D   1D03           00893     btfss   STATUS,Z
033E   2???           00894     goto    check_4
033F   2???           00895     call    Clear_Display
                      00896     writechar "3"
0340   3033               M             movlw   "3"
0341   2???               M             call    WR_DATA
0342   0822           00897     movf    state3, W
0343   2???           00898     call    display_state
0344   0008           00899     return
                      00900 
0345                  00901 check_4
0345   0837           00902     movf    keytemp, W
0346   3A04           00903     xorlw   0x4
0347   1D03           00904     btfss   STATUS,Z
0348   2???           00905     goto    check_5
0349   2???           00906     call    Clear_Display
                      00907     writechar "4"
034A   3034               M             movlw   "4"
034B   2???               M             call    WR_DATA
034C   0823           00908     movf    state4, W
034D   2???           00909     call    display_state
034E   0008           00910     return
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00911 
034F                  00912 check_5
034F   0837           00913     movf    keytemp, W
0350   3A05           00914     xorlw   0x5
0351   1D03           00915     btfss   STATUS,Z
0352   2???           00916     goto    check_6
0353   2???           00917     call    Clear_Display
                      00918     writechar "5"
0354   3035               M             movlw   "5"
0355   2???               M             call    WR_DATA
0356   0824           00919     movf    state5, W
0357   2???           00920     call    display_state
0358   0008           00921     return
                      00922 
0359                  00923 check_6
0359   0837           00924     movf    keytemp, W
035A   3A06           00925     xorlw   0x6
035B   1D03           00926     btfss   STATUS,Z
035C   2???           00927     goto    check_7
035D   2???           00928     call    Clear_Display
                      00929     writechar "6"
035E   3036               M             movlw   "6"
035F   2???               M             call    WR_DATA
0360   0825           00930     movf    state6, W
0361   2???           00931     call    display_state
0362   0008           00932     return
                      00933 
0363                  00934 check_7
0363   0837           00935     movf    keytemp, W
0364   3A08           00936     xorlw   0x8
0365   1D03           00937     btfss   STATUS,Z
0366   2???           00938     goto    check_8
0367   2???           00939     call    Clear_Display
                      00940     writechar "7"
0368   3037               M             movlw   "7"
0369   2???               M             call    WR_DATA
036A   0826           00941     movf    state7, W
036B   2???           00942     call    display_state
036C   0008           00943     return
                      00944 
036D                  00945 check_8
036D   0837           00946     movf    keytemp, W
036E   3A09           00947     xorlw   0x9
036F   1D03           00948     btfss   STATUS,Z
0370   2???           00949     goto    check_9
0371   2???           00950     call    Clear_Display
                      00951     writechar "8"
0372   3038               M             movlw   "8"
0373   2???               M             call    WR_DATA
0374   0827           00952     movf    state8, W
0375   2???           00953     call    display_state
0376   0008           00954     return
                      00955 
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0377                  00956 check_9
0377   0837           00957     movf    keytemp, W
0378   3A0A           00958     xorlw   0xA
0379   1D03           00959     btfss   STATUS,Z
037A   2???           00960     goto    check_summary
037B   2???           00961     call    Clear_Display
                      00962     writechar "9"
037C   3039               M             movlw   "9"
037D   2???               M             call    WR_DATA
037E   0828           00963     movf    state9, W
037F   2???           00964     call    display_state
0380   0008           00965     return
                      00966 
0381                  00967 check_summary
0381   0837           00968     movf    keytemp, W
0382   3A03           00969     xorlw   0x3
0383   1D03           00970     btfss   STATUS,Z
0384   2???           00971     goto    check_defective
0385   2???           00972     call    summary
0386   0008           00973     return
                      00974 
0387                  00975 check_defective
0387   0837           00976     movf    keytemp, W
0388   3A07           00977     xorlw   0x7
0389   1D03           00978     btfss   STATUS,Z
038A   2???           00979     goto    check_time
038B   2???           00980     call    defective
038C   0008           00981     return
                      00982 
038D                  00983 check_time
038D   0837           00984     movf    keytemp, W
038E   3A0B           00985     xorlw   0xB
038F   1D03           00986     btfss   STATUS,Z
0390   2???           00987     goto    check_export
0391   2???           00988     call    time
0392   0008           00989     return
                      00990 
0393                  00991 check_export
0393   0837           00992     movf    keytemp, W
0394   3A0F           00993     xorlw   0xF
0395   1D03           00994     btfss   STATUS,Z
0396   2???           00995     goto    check_standby       ;or do you wanna allow to check logs?
0397   2???           00996     call    export
0398   0008           00997     return
                      00998 
                      00999 ;check_logs
                      01000 ;    movf    keytemp, W
                      01001 ;    xorlw   0xE
                      01002 ;    btfss   STATUS,Z
                      01003 ;    goto    check_standby
                      01004 ;    goto    logs
                      01005 
0399                  01006 check_standby
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0399   0837           01007     movf    keytemp, W
039A   3A0D           01008     xorlw   0xD
039B   1D03           01009     btfss   STATUS,Z
039C   2???           01010     goto    check_start
039D   2???           01011     call    Clear_Display
                      01012     Display Standby_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
039E   01B9               M                 clrf    Table_Counter
039F   0103               M                 clrw
03A0                      M loop_disp
03A0   0839               M         movf    Table_Counter,W
03A1   2???               M                 call    Standby_Msg
03A2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03A3   1903               M                 btfsc   STATUS,Z
03A4   2???               M                 goto    end_disp
03A5   2???               M                 call    WR_DATA
03A6   0AB9               M                 incf    Table_Counter,F
03A7   2???               M                 goto    loop_disp
03A8                      M end_disp
03A8   2???           01013     call    Switch_Lines
03A9   2???           01014     goto    waiting
                      01015 
03AA                  01016 check_start
03AA   0837           01017     movf    keytemp, W
03AB   3A0C           01018     xorlw   0xC
03AC   1D03           01019     btfss   STATUS,Z
03AD   2???           01020     goto    default_key
03AE   2???           01021     goto    start
                      01022 
03AF                  01023 default_key         ; may never get here
03AF   0008           01024     return
                      01025 
                      01026 ;Display state subroutine
                      01027 ;stateN is in W
03B0                  01028 display_state
03B0   00B8           01029     movwf  statetemp    ; save stateN
                      01030 
03B1                  01031 check_none
03B1   3A00           01032     xorlw   0x0
03B2   1D03           01033     btfss   STATUS,Z
03B3   2???           01034     goto    check_pass
                      01035     Display Not_present
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03B4   01B9               M                 clrf    Table_Counter
03B5   0103               M                 clrw
03B6                      M loop_disp
03B6   0839               M         movf    Table_Counter,W
03B7   2???               M                 call    Not_present
03B8   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03B9   1903               M                 btfsc   STATUS,Z
03BA   2???               M                 goto    end_disp
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03BB   2???               M                 call    WR_DATA
03BC   0AB9               M                 incf    Table_Counter,F
03BD   2???               M                 goto    loop_disp
03BE                      M end_disp
03BE   0008           01036     return
                      01037 
03BF                  01038 check_pass
03BF   0838           01039     movf    statetemp, W
03C0   3A01           01040     xorlw   0x1
03C1   1D03           01041     btfss   STATUS,Z
03C2   2???           01042     goto    check_LED
                      01043     Display Pass
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03C3   01B9               M                 clrf    Table_Counter
03C4   0103               M                 clrw
03C5                      M loop_disp
03C5   0839               M         movf    Table_Counter,W
03C6   2???               M                 call    Pass
03C7   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03C8   1903               M                 btfsc   STATUS,Z
03C9   2???               M                 goto    end_disp
03CA   2???               M                 call    WR_DATA
03CB   0AB9               M                 incf    Table_Counter,F
03CC   2???               M                 goto    loop_disp
03CD                      M end_disp
03CD   0008           01044     return
                      01045 
03CE                  01046 check_LED
03CE   0838           01047     movf    statetemp, W
03CF   3A02           01048     xorlw   0x2
03D0   1D03           01049     btfss   STATUS,Z
03D1   2???           01050     goto    check_flick
                      01051     Display LED_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03D2   01B9               M                 clrf    Table_Counter
03D3   0103               M                 clrw
03D4                      M loop_disp
03D4   0839               M         movf    Table_Counter,W
03D5   2???               M                 call    LED_fail
03D6   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03D7   1903               M                 btfsc   STATUS,Z
03D8   2???               M                 goto    end_disp
03D9   2???               M                 call    WR_DATA
03DA   0AB9               M                 incf    Table_Counter,F
03DB   2???               M                 goto    loop_disp
03DC                      M end_disp
03DC   0008           01052     return
                      01053 
03DD                  01054 check_flick
03DD   0838           01055     movf    statetemp, W
03DE   3A03           01056     xorlw   0x3
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03DF   1D03           01057     btfss   STATUS,Z
03E0   2???           01058     goto    default_state
                      01059     Display Flick_fail
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03E1   01B9               M                 clrf    Table_Counter
03E2   0103               M                 clrw
03E3                      M loop_disp
03E3   0839               M         movf    Table_Counter,W
03E4   2???               M                 call    Flick_fail
03E5   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03E6   1903               M                 btfsc   STATUS,Z
03E7   2???               M                 goto    end_disp
03E8   2???               M                 call    WR_DATA
03E9   0AB9               M                 incf    Table_Counter,F
03EA   2???               M                 goto    loop_disp
03EB                      M end_disp
03EB   0008           01060     return
                      01061 
03EC                  01062 default_state   ; should never get here
03EC   0008           01063     return
                      01064 
                      01065 ; Summary Subroutine
                      01066 ; Displays total number of candles and number of defective candles
                      01067 ; Reads data from num_tot, num_LF, num_FF
03ED                  01068 summary
03ED   2???           01069     call            Clear_Display
                      01070     Display         Total_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03EE   01B9               M                 clrf    Table_Counter
03EF   0103               M                 clrw
03F0                      M loop_disp
03F0   0839               M         movf    Table_Counter,W
03F1   2???               M                 call    Total_Msg
03F2   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
03F3   1903               M                 btfsc   STATUS,Z
03F4   2???               M                 goto    end_disp
03F5   2???               M                 call    WR_DATA
03F6   0AB9               M                 incf    Table_Counter,F
03F7   2???               M                 goto    loop_disp
03F8                      M end_disp
                      01071     writeBCD        num_tot
03F8   0834               M             movf    num_tot, W
03F9   3E30               M             addlw   B'00110000'
03FA   2???               M             call WR_DATA
03FB   2???           01072     call            Switch_Lines
                      01073     Display         LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
03FC   01B9               M                 clrf    Table_Counter
03FD   0103               M                 clrw
03FE                      M loop_disp
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03FE   0839               M         movf    Table_Counter,W
03FF   2???               M                 call    LF
0400   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0401   1903               M                 btfsc   STATUS,Z
0402   2???               M                 goto    end_disp
0403   2???               M                 call    WR_DATA
0404   0AB9               M                 incf    Table_Counter,F
0405   2???               M                 goto    loop_disp
0406                      M end_disp
                      01074     writeBCD        num_LF
0406   0835               M             movf    num_LF, W
0407   3E30               M             addlw   B'00110000'
0408   2???               M             call WR_DATA
                      01075     spacebar
0409   3014               M             movlw   B'00010100'
040A   2???               M             call    WR_INS
                      01076     spacebar
040B   3014               M             movlw   B'00010100'
040C   2???               M             call    WR_INS
                      01077     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
040D   01B9               M                 clrf    Table_Counter
040E   0103               M                 clrw
040F                      M loop_disp
040F   0839               M         movf    Table_Counter,W
0410   2???               M                 call    FF
0411   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0412   1903               M                 btfsc   STATUS,Z
0413   2???               M                 goto    end_disp
0414   2???               M                 call    WR_DATA
0415   0AB9               M                 incf    Table_Counter,F
0416   2???               M                 goto    loop_disp
0417                      M end_disp
                      01078     writeBCD        num_FF
0417   0836               M             movf    num_FF, W
0418   3E30               M             addlw   B'00110000'
0419   2???               M             call WR_DATA
041A   0008           01079     return
                      01080 
                      01081 ; Defective candles Subroutine
                      01082 ; Displays index of each defective candle (LF or FF)
                      01083 ; Reads data from state1 - state9
041B                  01084 defective
041B   2???           01085     call            Clear_Display
                      01086 
                      01087     Display         LF              ; first look at LF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
041C   01B9               M                 clrf    Table_Counter
041D   0103               M                 clrw
041E                      M loop_disp
041E   0839               M         movf    Table_Counter,W
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

041F   2???               M                 call    LF
0420   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0421   1903               M                 btfsc   STATUS,Z
0422   2???               M                 goto    end_disp
0423   2???               M                 call    WR_DATA
0424   0AB9               M                 incf    Table_Counter,F
0425   2???               M                 goto    loop_disp
0426                      M end_disp
0426   08B5           01088     movf            num_LF, F
0427   1D03           01089     btfss           STATUS,Z         ;if none LF, just say "none"
0428   2???           01090     goto            check_LF
                      01091     Display         None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0429   01B9               M                 clrf    Table_Counter
042A   0103               M                 clrw
042B                      M loop_disp
042B   0839               M         movf    Table_Counter,W
042C   2???               M                 call    None
042D   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
042E   1903               M                 btfsc   STATUS,Z
042F   2???               M                 goto    end_disp
0430   2???               M                 call    WR_DATA
0431   0AB9               M                 incf    Table_Counter,F
0432   2???               M                 goto    loop_disp
0433                      M end_disp
0433   2???           01092     goto            now_FF
                      01093 
0434                  01094 check_LF                            ; list all LF candles
0434   3002           01095     movlw           B'00000010'
0435   2???           01096     call            check_for_fail
                      01097 
0436                  01098 now_FF                              ; now look at FF
0436   2???           01099     call            Switch_Lines
                      01100     Display         FF
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0437   01B9               M                 clrf    Table_Counter
0438   0103               M                 clrw
0439                      M loop_disp
0439   0839               M         movf    Table_Counter,W
043A   2???               M                 call    FF
043B   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
043C   1903               M                 btfsc   STATUS,Z
043D   2???               M                 goto    end_disp
043E   2???               M                 call    WR_DATA
043F   0AB9               M                 incf    Table_Counter,F
0440   2???               M                 goto    loop_disp
0441                      M end_disp
0441   08B6           01101     movf            num_FF, F
0442   1D03           01102     btfss           STATUS,Z         ;if none FF, just say "none"
0443   2???           01103     goto            check_FF
                      01104     Display         None
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0444   01B9               M                 clrf    Table_Counter
0445   0103               M                 clrw
0446                      M loop_disp
0446   0839               M         movf    Table_Counter,W
0447   2???               M                 call    None
0448   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0449   1903               M                 btfsc   STATUS,Z
044A   2???               M                 goto    end_disp
044B   2???               M                 call    WR_DATA
044C   0AB9               M                 incf    Table_Counter,F
044D   2???               M                 goto    loop_disp
044E                      M end_disp
044E   0008           01105     return
                      01106 
044F                  01107 check_FF                            ; list all FF candles
044F   3003           01108     movlw           B'00000011'
0450   2???           01109     call            check_for_fail
0451   0008           01110     return
                      01111 
0452                  01112 check_for_fail  ;lists all candles that have status currently in W "stateX"
0452   00B8           01113     movwf   statetemp
                      01114         movlf   D'0', candle_index
0453   3000               M         movlw   D'0'
0454   00C7               M         movwf   candle_index
0455   1383           01115         bcf     STATUS, IRP
                      01116         movlf   0x1F, FSR           ;index of right before state1
0456   301F               M         movlw   0x1F
0457   0084               M         movwf   FSR
0458                  01117 check_next
0458   3009           01118         movlw   D'9'                ;exit loop if at 9
0459   0247           01119         subwf   candle_index, W
045A   1803           01120         btfsc   STATUS,W
045B   2???           01121         goto    end_check_fail
045C   0A84           01122         incf    FSR,F               ; increment
045D   0AC7           01123         incf    candle_index,F
045E   0838           01124         movf    statetemp, W            ;see if stateN = stateX
045F   0200           01125         subwf   INDF, W
0460   1D03           01126         btfss   STATUS, Z
0461   2???           01127         goto    check_next              ;if not, go to next
                      01128         writeBCD        candle_index    ;if so, write down the number
0462   0847               M             movf    candle_index, W
0463   3E30               M             addlw   B'00110000'
0464   2???               M             call WR_DATA
                      01129         spacebar
0465   3014               M             movlw   B'00010100'
0466   2???               M             call    WR_INS
0467   2???           01130         goto check_next
0468                  01131 end_check_fail
0468   0008           01132         return
                      01133 
                      01134 ; Time subroutine
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01135 ; Right now this takes the time in seconds as a binary number in op_time
                      01136 ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                      01137 ; incremented every second. However I may just take the stop time - start time
                      01138 ; from the RTC data so this might change a lot.
0469                  01139 time
0469   2???           01140     call    Clear_Display
                      01141     Display Time_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
046A   01B9               M                 clrf    Table_Counter
046B   0103               M                 clrw
046C                      M loop_disp
046C   0839               M         movf    Table_Counter,W
046D   2???               M                 call    Time_Msg
046E   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
046F   1903               M                 btfsc   STATUS,Z
0470   2???               M                 goto    end_disp
0471   2???               M                 call    WR_DATA
0472   0AB9               M                 incf    Table_Counter,F
0473   2???               M                 goto    loop_disp
0474                      M end_disp
0474   2???           01142     call    Switch_Lines
0475   0833           01143     movf    op_time, W
0476   2???           01144     call    big_number
0477   08C2           01145     movf    huns, F
0478   1903           01146     btfsc   STATUS,Z        ;if huns is zero don't display it
0479   2???           01147     goto    no_huns
                      01148     writeBCD    huns
047A   0842               M             movf    huns, W
047B   3E30               M             addlw   B'00110000'
047C   2???               M             call WR_DATA
047D                  01149 no_huns
047D   08C3           01150     movf    tens, F
047E   1903           01151     btfsc   STATUS,Z        ;if tens is zero don't display it
047F   2???           01152     goto    no_tens
                      01153     writeBCD    tens
0480   0843               M             movf    tens, W
0481   3E30               M             addlw   B'00110000'
0482   2???               M             call WR_DATA
0483                  01154 no_tens
                      01155     writeBCD    ones
0483   0844               M             movf    ones, W
0484   3E30               M             addlw   B'00110000'
0485   2???               M             call WR_DATA
                      01156     Display Seconds
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
0486   01B9               M                 clrf    Table_Counter
0487   0103               M                 clrw
0488                      M loop_disp
0488   0839               M         movf    Table_Counter,W
0489   2???               M                 call    Seconds
048A   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

048B   1903               M                 btfsc   STATUS,Z
048C   2???               M                 goto    end_disp
048D   2???               M                 call    WR_DATA
048E   0AB9               M                 incf    Table_Counter,F
048F   2???               M                 goto    loop_disp
0490                      M end_disp
0490   0008           01157     return
                      01158 
                      01159 ; Export subroutine
                      01160 ; Exports data from current run to hyperterminal
                      01161 ; reads start time and num_tot/num_ff/num_lf data
0491                  01162 export
                      01163     printchar   0x7       ;makes a noise on the PC
0491   3007               M             movlw   0x7
0492   2???               M             call    writetoPC
                      01164     printchar   0xD       ;go back to left edge
0493   300D               M             movlw   0xD
0494   2???               M             call    writetoPC
                      01165     printchar   "T"
0495   3054               M             movlw   "T"
0496   2???               M             call    writetoPC
                      01166     printchar   "e"
0497   3065               M             movlw   "e"
0498   2???               M             call    writetoPC
                      01167     printchar   "s"
0499   3073               M             movlw   "s"
049A   2???               M             call    writetoPC
                      01168     printchar   "t"
049B   3074               M             movlw   "t"
049C   2???               M             call    writetoPC
                      01169     printchar   " "
049D   3020               M             movlw   " "
049E   2???               M             call    writetoPC
                      01170     printchar   "a"
049F   3061               M             movlw   "a"
04A0   2???               M             call    writetoPC
                      01171     printchar   "t"
04A1   3074               M             movlw   "t"
04A2   2???               M             call    writetoPC
                      01172     printchar   ":"
04A3   303A               M             movlw   ":"
04A4   2???               M             call    writetoPC
                      01173     printchar   " "
04A5   3020               M             movlw   " "
04A6   2???               M             call    writetoPC
                      01174     printchar   "2"
04A7   3032               M             movlw   "2"
04A8   2???               M             call    writetoPC
                      01175     printchar   "0"
04A9   3030               M             movlw   "0"
04AA   2???               M             call    writetoPC
                      01176     printASC   start_year10
04AB   1283 1303          M             banksel start_year10
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04AD   0829               M             movf    start_year10,W
04AE   2???               M             call    writetoPC
                      01177     printASC   start_year1
04AF   1283 1303          M             banksel start_year1
04B1   082A               M             movf    start_year1,W
04B2   2???               M             call    writetoPC
                      01178     printchar   "/"
04B3   302F               M             movlw   "/"
04B4   2???               M             call    writetoPC
                      01179     printASC   start_month10
04B5   1283 1303          M             banksel start_month10
04B7   082B               M             movf    start_month10,W
04B8   2???               M             call    writetoPC
                      01180     printASC   start_month1
04B9   1283 1303          M             banksel start_month1
04BB   082C               M             movf    start_month1,W
04BC   2???               M             call    writetoPC
                      01181     printchar   "/"
04BD   302F               M             movlw   "/"
04BE   2???               M             call    writetoPC
                      01182     printASC   start_date10
04BF   1283 1303          M             banksel start_date10
04C1   082D               M             movf    start_date10,W
04C2   2???               M             call    writetoPC
                      01183     printASC   start_date1
04C3   1283 1303          M             banksel start_date1
04C5   082E               M             movf    start_date1,W
04C6   2???               M             call    writetoPC
                      01184     printchar   " "
04C7   3020               M             movlw   " "
04C8   2???               M             call    writetoPC
                      01185     printASC   start_hour10
04C9   1283 1303          M             banksel start_hour10
04CB   082F               M             movf    start_hour10,W
04CC   2???               M             call    writetoPC
                      01186     printASC   start_hour1
04CD   1283 1303          M             banksel start_hour1
04CF   0830               M             movf    start_hour1,W
04D0   2???               M             call    writetoPC
                      01187     printchar   ":"
04D1   303A               M             movlw   ":"
04D2   2???               M             call    writetoPC
                      01188     printASC   start_min10
04D3   1283 1303          M             banksel start_min10
04D5   0831               M             movf    start_min10,W
04D6   2???               M             call    writetoPC
                      01189     printASC   start_min1
04D7   1283 1303          M             banksel start_min1
04D9   0832               M             movf    start_min1,W
04DA   2???               M             call    writetoPC
                      01190     newline
                          M             printchar   0xA ;changes line
04DB   300A               M             movlw   0xA
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04DC   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
04DD   300D               M             movlw   0xD
04DE   2???               M             call    writetoPC
                      01191     printchar   "T"
04DF   3054               M             movlw   "T"
04E0   2???               M             call    writetoPC
                      01192     printchar   "i"
04E1   3069               M             movlw   "i"
04E2   2???               M             call    writetoPC
                      01193     printchar   "m"
04E3   306D               M             movlw   "m"
04E4   2???               M             call    writetoPC
                      01194     printchar   "e"
04E5   3065               M             movlw   "e"
04E6   2???               M             call    writetoPC
                      01195     printchar   ":"
04E7   303A               M             movlw   ":"
04E8   2???               M             call    writetoPC
                      01196     printchar   " "
04E9   3020               M             movlw   " "
04EA   2???               M             call    writetoPC
                      01197     printchar   " "
04EB   3020               M             movlw   " "
04EC   2???               M             call    writetoPC
                      01198     printchar   " "
04ED   3020               M             movlw   " "
04EE   2???               M             call    writetoPC
                      01199     printchar   " "
04EF   3020               M             movlw   " "
04F0   2???               M             call    writetoPC
04F1   1283 1303      01200     banksel huns
04F3   08C2           01201     movf    huns, F
04F4   1903           01202     btfsc   STATUS,Z        ;if huns is zero don't display it
04F5   2???           01203     goto    nohuns
                      01204     printBCD   huns
04F6   1283 1303          M             banksel huns
04F8   0842               M             movf    huns, W
04F9   3E30               M             addlw   0x30
04FA   2???               M             call    writetoPC
04FB                  01205 nohuns
04FB   1283 1303      01206     banksel tens
04FD   08C3           01207     movf    tens, F
04FE   1903           01208     btfsc   STATUS,Z        ;if tens is zero don't display it
04FF   2???           01209     goto    notens
                      01210     printBCD   tens
0500   1283 1303          M             banksel tens
0502   0843               M             movf    tens, W
0503   3E30               M             addlw   0x30
0504   2???               M             call    writetoPC
0505                  01211 notens
                      01212     printBCD   ones
0505   1283 1303          M             banksel ones
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0507   0844               M             movf    ones, W
0508   3E30               M             addlw   0x30
0509   2???               M             call    writetoPC
                      01213     printchar   " "
050A   3020               M             movlw   " "
050B   2???               M             call    writetoPC
                      01214     printchar   "s"
050C   3073               M             movlw   "s"
050D   2???               M             call    writetoPC
                      01215     printchar   "e"
050E   3065               M             movlw   "e"
050F   2???               M             call    writetoPC
                      01216     printchar   "c"
0510   3063               M             movlw   "c"
0511   2???               M             call    writetoPC
                      01217     newline
                          M             printchar   0xA ;changes line
0512   300A               M             movlw   0xA
0513   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0514   300D               M             movlw   0xD
0515   2???               M             call    writetoPC
                      01218     printchar   "C"
0516   3043               M             movlw   "C"
0517   2???               M             call    writetoPC
                      01219     printchar   "a"
0518   3061               M             movlw   "a"
0519   2???               M             call    writetoPC
                      01220     printchar   "n"
051A   306E               M             movlw   "n"
051B   2???               M             call    writetoPC
                      01221     printchar   "d"
051C   3064               M             movlw   "d"
051D   2???               M             call    writetoPC
                      01222     printchar   "l"
051E   306C               M             movlw   "l"
051F   2???               M             call    writetoPC
                      01223     printchar   "e"
0520   3065               M             movlw   "e"
0521   2???               M             call    writetoPC
                      01224     printchar   "s"
0522   3073               M             movlw   "s"
0523   2???               M             call    writetoPC
                      01225     printchar   ":"
0524   303A               M             movlw   ":"
0525   2???               M             call    writetoPC
                      01226     printchar   " "
0526   3020               M             movlw   " "
0527   2???               M             call    writetoPC
                      01227     printchar   " "
0528   3020               M             movlw   " "
0529   2???               M             call    writetoPC
                      01228     printchar   " "
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

052A   3020               M             movlw   " "
052B   2???               M             call    writetoPC
                      01229     printchar   " "
052C   3020               M             movlw   " "
052D   2???               M             call    writetoPC
                      01230     printchar   " "
052E   3020               M             movlw   " "
052F   2???               M             call    writetoPC
                      01231     printchar   " "
0530   3020               M             movlw   " "
0531   2???               M             call    writetoPC
                      01232     printBCD    num_tot
0532   1283 1303          M             banksel num_tot
0534   0834               M             movf    num_tot, W
0535   3E30               M             addlw   0x30
0536   2???               M             call    writetoPC
                      01233     newline
                          M             printchar   0xA ;changes line
0537   300A               M             movlw   0xA
0538   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0539   300D               M             movlw   0xD
053A   2???               M             call    writetoPC
                      01234     printchar   "L"
053B   304C               M             movlw   "L"
053C   2???               M             call    writetoPC
                      01235     printchar   "E"
053D   3045               M             movlw   "E"
053E   2???               M             call    writetoPC
                      01236     printchar   "D"
053F   3044               M             movlw   "D"
0540   2???               M             call    writetoPC
                      01237     printchar   " "
0541   3020               M             movlw   " "
0542   2???               M             call    writetoPC
                      01238     printchar   "f"
0543   3066               M             movlw   "f"
0544   2???               M             call    writetoPC
                      01239     printchar   "a"
0545   3061               M             movlw   "a"
0546   2???               M             call    writetoPC
                      01240     printchar   "i"
0547   3069               M             movlw   "i"
0548   2???               M             call    writetoPC
                      01241     printchar   "l"
0549   306C               M             movlw   "l"
054A   2???               M             call    writetoPC
                      01242     printchar   ":"
054B   303A               M             movlw   ":"
054C   2???               M             call    writetoPC
                      01243     printchar   " "
054D   3020               M             movlw   " "
054E   2???               M             call    writetoPC
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01244     printchar   " "
054F   3020               M             movlw   " "
0550   2???               M             call    writetoPC
                      01245     printchar   " "
0551   3020               M             movlw   " "
0552   2???               M             call    writetoPC
                      01246     printchar   " "
0553   3020               M             movlw   " "
0554   2???               M             call    writetoPC
                      01247     printchar   " "
0555   3020               M             movlw   " "
0556   2???               M             call    writetoPC
                      01248     printBCD    num_LF
0557   1283 1303          M             banksel num_LF
0559   0835               M             movf    num_LF, W
055A   3E30               M             addlw   0x30
055B   2???               M             call    writetoPC
                      01249     newline
                          M             printchar   0xA ;changes line
055C   300A               M             movlw   0xA
055D   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
055E   300D               M             movlw   0xD
055F   2???               M             call    writetoPC
                      01250     printchar   "F"
0560   3046               M             movlw   "F"
0561   2???               M             call    writetoPC
                      01251     printchar   "l"
0562   306C               M             movlw   "l"
0563   2???               M             call    writetoPC
                      01252     printchar   "i"
0564   3069               M             movlw   "i"
0565   2???               M             call    writetoPC
                      01253     printchar   "c"
0566   3063               M             movlw   "c"
0567   2???               M             call    writetoPC
                      01254     printchar   "k"
0568   306B               M             movlw   "k"
0569   2???               M             call    writetoPC
                      01255     printchar   "e"
056A   3065               M             movlw   "e"
056B   2???               M             call    writetoPC
                      01256     printchar   "r"
056C   3072               M             movlw   "r"
056D   2???               M             call    writetoPC
                      01257     printchar   " "
056E   3020               M             movlw   " "
056F   2???               M             call    writetoPC
                      01258     printchar   "f"
0570   3066               M             movlw   "f"
0571   2???               M             call    writetoPC
                      01259     printchar   "a"
0572   3061               M             movlw   "a"
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0573   2???               M             call    writetoPC
                      01260     printchar   "i"
0574   3069               M             movlw   "i"
0575   2???               M             call    writetoPC
                      01261     printchar   "l"
0576   306C               M             movlw   "l"
0577   2???               M             call    writetoPC
                      01262     printchar   ":"
0578   303A               M             movlw   ":"
0579   2???               M             call    writetoPC
                      01263     printchar   " "
057A   3020               M             movlw   " "
057B   2???               M             call    writetoPC
                      01264     printBCD    num_FF
057C   1283 1303          M             banksel num_FF
057E   0836               M             movf    num_FF, W
057F   3E30               M             addlw   0x30
0580   2???               M             call    writetoPC
                      01265     newline
                          M             printchar   0xA ;changes line
0581   300A               M             movlw   0xA
0582   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0583   300D               M             movlw   0xD
0584   2???               M             call    writetoPC
                      01266     newline
                          M             printchar   0xA ;changes line
0585   300A               M             movlw   0xA
0586   2???               M             call    writetoPC
                          M             printchar   0xD ;goes back to left
0587   300D               M             movlw   0xD
0588   2???               M             call    writetoPC
0589   1283           01267     bcf STATUS,RP0
058A   1303           01268     bcf STATUS,RP1     ; back to bank 0
058B   0008           01269     return
                      01270 
                      01271 
                      01272 ;***************************************
                      01273 ; GENERAL PURPOSE SUBROUTINES
                      01274 ;***************************************
                      01275 
                      01276 ; DISPLAY BIG NUMBER SUBROUTINE
                      01277 ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                      01278 ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                      01279 ; Uses "shift and add 3" algorithm
058C                  01280 big_number
                      01281     movff   op_time, op_time_save         ;save the original op_time
058C   0833               M         movf    op_time, W
058D   00C1               M         movwf   op_time_save
                      01282     movlf   8, bignumcount                ;will shift 8 times
058E   3008               M         movlw   8
058F   00C5               M         movwf   bignumcount
0590   01C2           01283     clrf    huns
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0591   01C3           01284     clrf    tens
0592   01C4           01285     clrf    ones
                      01286 
0593                  01287 BCDadd3                             ; if any digit > 5, add3
0593   3005           01288     movlw   0x5
0594   0242           01289     subwf   huns, W
0595   1803           01290     btfsc   STATUS, C
0596   2???           01291     call    add3huns
                      01292 
0597   3005           01293     movlw   0x5
0598   0243           01294     subwf   tens, W
0599   1803           01295     btfsc   STATUS, C
059A   2???           01296     call    add3tens
                      01297 
059B   3005           01298     movlw   0x5
059C   0244           01299     subwf   ones, W
059D   1803           01300     btfsc   STATUS, C
059E   2???           01301     call    add3ones
                      01302 
059F   03C5           01303     decf    bignumcount, 1
05A0   1003           01304     bcf     STATUS, C
05A1   0DB3           01305     rlf     op_time, 1              ; shift
05A2   0DC4           01306     rlf     ones, 1
05A3   1A44           01307     btfsc   ones,4 ;
05A4   2???           01308     call    carryones               ; carry if too large
05A5   0DC3           01309     rlf     tens, 1
                      01310 
05A6   1A43           01311     btfsc   tens,4 ;
05A7   2???           01312     call    carrytens
05A8   0DC2           01313     rlf     huns,1
05A9   1003           01314     bcf     STATUS, C
                      01315 
05AA   0845           01316     movf    bignumcount, W
05AB   1D03           01317     btfss   STATUS, Z
05AC   2???           01318     goto    BCDadd3                 ; repeat until you've shifted it 8 times
                      01319 
                      01320     movff    op_time_save, op_time     ;restore the original op_time
05AD   0841               M         movf    op_time_save, W
05AE   00B3               M         movwf   op_time
05AF   0008           01321     return
                      01322 
05B0                  01323 add3huns
05B0   3003           01324     movlw 0x3
05B1   07C2           01325     addwf huns,F
05B2   0008           01326     return
05B3                  01327 add3tens
05B3   3003           01328     movlw 0x3
05B4   07C3           01329     addwf tens,F
05B5   0008           01330     return
05B6                  01331 add3ones
05B6   3003           01332     movlw 0x3
05B7   07C4           01333     addwf ones,F
05B8   0008           01334     return
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B9                  01335 carryones
05B9   1244           01336     bcf ones, 4
05BA   1403           01337     bsf STATUS, C
05BB   0008           01338     return
05BC                  01339 carrytens
05BC   1243           01340     bcf tens, 4
05BD   1403           01341     bsf STATUS, C
05BE   0008           01342     return
                      01343 
                      01344 
                      01345 ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01346 ; Delays exactly 0.5sec
05BF                  01347 HalfS
                      01348       movlf 0x8A, hdelH
05BF   308A               M         movlw   0x8A
05C0   00BE               M         movwf   hdelH
                      01349       movlf 0xBA, hdelM
05C1   30BA               M         movlw   0xBA
05C2   00BF               M         movwf   hdelM
                      01350       movlf 0x03, hdelL
05C3   3003               M         movlw   0x03
05C4   00C0               M         movwf   hdelL
05C5                  01351 HalfS_0
05C5   0BBE           01352       decfsz    hdelH, F
05C6   2???           01353           goto  $+2
05C7   0BBF           01354           decfsz        hdelM, F
05C8   2???           01355           goto  $+2
05C9   0BC0           01356           decfsz        hdelL, F
05CA   2???           01357           goto  HalfS_0
                      01358 
05CB   2???           01359           goto  $+1
05CC   0000           01360           nop
05CD   0008           01361           return
                      01362 
                      01363 ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                      01364 ; Useful for LCD because PIC is way faster than it can handle
                      01365 ; Delays exactly 5ms
05CE                  01366 delay5ms
                      01367         movlf   0xC3, del1
05CE   30C3               M         movlw   0xC3
05CF   00BC               M         movwf   del1
                      01368         movlf   0x0A, del2
05D0   300A               M         movlw   0x0A
05D1   00BD               M         movwf   del2
05D2                  01369 Delay_0
05D2   0BBC           01370         decfsz  del1, f
05D3   2???           01371         goto    $+2
05D4   0BBD           01372         decfsz  del2, f
05D5   2???           01373         goto    Delay_0
05D6   0008           01374     return
                      01375 
                      01376 ;***************************************
                      01377 ; LCD SUBROUTINES (from sample code)
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01378 ;***************************************
                      01379 
                      01380 ; Initialize the LCD
05D7                  01381 InitLCD
05D7   1283 1303      01382         banksel     PORTD       ;bank0
05D9   1588           01383         bsf     E     ;E default high
                      01384 
                      01385         ;Wait for LCD POR to finish (~15ms)
05DA   2???           01386         call delay5ms
05DB   2???           01387         call delay5ms
05DC   2???           01388         call delay5ms
                      01389 
                      01390         ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                      01391         ; -> Send b'0011' 3 times
05DD   3033           01392         movlw   b'00110011'
05DE   2???           01393         call    WR_INS
05DF   2???           01394         call    delay5ms
05E0   2???           01395         call    delay5ms
05E1   3032           01396         movlw   b'00110010'
05E2   2???           01397         call    WR_INS
05E3   2???           01398         call    delay5ms
05E4   2???           01399         call    delay5ms
                      01400 
                      01401         ; 4 bits, 2 lines, 5x7 dots
05E5   3028           01402         movlw   b'00101000'
05E6   2???           01403         call    WR_INS
05E7   2???           01404         call    delay5ms
05E8   2???           01405         call    delay5ms
                      01406 
                      01407         ; display on/off
05E9   300C           01408         movlw   b'00001100'
05EA   2???           01409         call    WR_INS
05EB   2???           01410         call delay5ms
05EC   2???           01411         call delay5ms
                      01412 
                      01413         ; Entry mode
05ED   3006           01414         movlw   b'00000110'
05EE   2???           01415         call    WR_INS
05EF   2???           01416         call    delay5ms
05F0   2???           01417         call    delay5ms
                      01418 
                      01419         ; Clear ram
05F1   3001           01420         movlw   b'00000001'
05F2   2???           01421         call    WR_INS
05F3   2???           01422         call    delay5ms
05F4   2???           01423         call    delay5ms
05F5   0008           01424         return
                      01425 
                      01426 ; Clear the display
05F6                  01427 Clear_Display
05F6   3001           01428                 movlw   B'00000001'
05F7   2???           01429                 call    WR_INS
05F8   0008           01430                 return
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01431 
                      01432 ;Switch lines
05F9                  01433 Switch_Lines
05F9   30C0           01434                 movlw   B'11000000'
05FA   2???           01435                 call    WR_INS
05FB   0008           01436                 return
                      01437 
                      01438 ; Write an instruction to the LCD (see page 7-104)
                      01439 ; The instruction must be in W; must be in bank0
05FC                  01440 WR_INS
05FC   1108           01441         bcf             RS                              ;clear RS
05FD   00BA           01442         movwf   com                             ;W --> com
05FE   39F0           01443         andlw   0xF0                    ;mask 4 bits MSB w = X0
05FF   0088           01444         movwf   PORTD                   ;Send 4 bits MSB
0600   1588           01445         bsf             E                               ;
0601   2???           01446         call    delay5ms        ;__    __
0602   1188           01447         bcf             E                               ;  |__|
0603   0E3A           01448         swapf   com,w
0604   39F0           01449         andlw   0xF0                    ;1111 0010
0605   0088           01450         movwf   PORTD                   ;send 4 bits LSB
0606   1588           01451         bsf             E                               ;
0607   2???           01452         call    delay5ms        ;__    __
0608   1188           01453         bcf             E                               ;  |__|
0609   2???           01454         call    delay5ms
060A   0008           01455         return
                      01456 
                      01457 ; Write data at current cursor location
                      01458 ; Character code (see page 7-104) must be in W; must be in bank0
060B                  01459 WR_DATA
060B   1508           01460         bsf             RS
060C   00BB           01461         movwf   dat
060D   083B           01462         movf    dat,w   ;what? why?
060E   39F0           01463         andlw   0xF0
060F   3E04           01464         addlw   4
0610   0088           01465         movwf   PORTD
0611   1588           01466         bsf             E                               ;
0612   2???           01467         call    delay5ms        ;__    __
0613   1188           01468         bcf             E                               ;  |__|
0614   0E3B           01469         swapf   dat,w
0615   39F0           01470         andlw   0xF0
0616   3E04           01471         addlw   4
0617   0088           01472         movwf   PORTD
0618   1588           01473         bsf             E                               ;
0619   2???           01474         call    delay5ms        ;__    __
061A   1188           01475         bcf             E                               ;  |__|
061B   0008           01476         return
                      01477 
                      01478 
                      01479 ;***************************************
                      01480 ; PC INTERFACE SUBROUTINES (from sample code)
                      01481 ;***************************************
061C                  01482 InitUSART
                      01483 ;end up in bank1!
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

061C   1683 1303      01484         banksel SPBRG            ;  bank 1
061E   300F           01485         movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
061F   0099           01486         movwf     SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0620   0198           01487         clrf      TXSTA          ; 8 bits data ,no,1 stop
                      01488 
0621   1283 1303      01489         banksel   RCSTA          ; bank 0
0623   1798           01490         bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0624   1618           01491         bsf       RCSTA,CREN     ; continuous receive
                      01492 
0625   1683 1303      01493         banksel   TXSTA          ;  bank 1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0627   1698           01494         bsf       TXSTA,TXEN     ; Transmit enable
0628   0008           01495         return
                      01496 
                      01497 
0629                  01498 writetoPC
                      01499 ; Writes the data in W to the PC
                      01500 ; end up in bank1!
0629   1283 1303      01501         banksel   TXREG          ; bank 0
062B   0099           01502         movwf     TXREG          ; Send contents of W to RS232
062C   1683 1303      01503         banksel   TXSTA          ; bank1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
062E   1C98           01504         btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
062F   2???           01505         goto      $-1
0630   0008           01506         return
                      01507 
                      01508 
                      01509 ;***************************************
                      01510 ; ISR
                      01511 ; Currently only care about TMR0
                      01512 ; TMR0 overflows at 256*256; each time, decrement count38
                      01513 ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                      01514 ; When this hapens, op_time increments
                      01515 ; Also check photodata every time for 2 sec = total of 76 reads
                      01516 ;***************************************
0631                  01517 isr
0631   00F9           01518     movwf   w_isr           ;save W and status
0632   0E03           01519     swapf   STATUS, W
0633   0183           01520     clrf    STATUS
0634   00FA           01521     movwf   status_isr
                      01522 ;    movf    PCLATH, W      ;if using pages
                      01523 ;    movwf   pclath_isr
                      01524 ;    clrf    PCLATH
                      01525 
0635                  01526 check_emergstop
0635   1C8B           01527     btfss   INTCON, INTF
0636   2???           01528     goto    not_emergstop
0637   2???           01529     call    Clear_Display
                      01530     Display None
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0638   01B9               M                 clrf    Table_Counter
0639   0103               M                 clrw
063A                      M loop_disp
063A   0839               M         movf    Table_Counter,W
063B   2???               M                 call    None
063C   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
063D   1903               M                 btfsc   STATUS,Z
063E   2???               M                 goto    end_disp
063F   2???               M                 call    WR_DATA
0640   0AB9               M                 incf    Table_Counter,F
0641   2???               M                 goto    loop_disp
0642                      M end_disp
0642                  01531 suspend
0642   1C86           01532          btfss          PORTB,1     ;Wait until data is available from the keypad
0643   2???           01533          goto           suspend
0644   0E06           01534          swapf          PORTB,W     ;Read PortB<7:4> into W<3:0>
0645   390F           01535          andlw          0x0F
0646   3A0C           01536          xorlw      0xC         ;Will be all zeros if its "START"
0647   1903           01537          btfsc      STATUS,Z    ;and Z will be high, so skip if not high
0648   2???           01538          goto       resume
0649   1886           01539          btfsc          PORTB,1     ;Wait until key is released
064A   2???           01540          goto           $-1
064B   2???           01541          goto       suspend
064C                  01542 resume
064C   2???           01543     call    Clear_Display
                      01544     Display Start_Msg
  0000                    M                 local   loop_disp
  0000                    M                 local   end_disp
064D   01B9               M                 clrf    Table_Counter
064E   0103               M                 clrw
064F                      M loop_disp
064F   0839               M         movf    Table_Counter,W
0650   2???               M                 call    Start_Msg
0651   3A00               M                 xorlw   B'00000000' ;check WORK reg to see if 0 is returned
0652   1903               M                 btfsc   STATUS,Z
0653   2???               M                 goto    end_disp
0654   2???               M                 call    WR_DATA
0655   0AB9               M                 incf    Table_Counter,F
0656   2???               M                 goto    loop_disp
0657                      M end_disp
0657   108B           01545     bcf     INTCON, INTF
0658   2???           01546     goto    end_isr
                      01547 
0659                  01548 not_emergstop
0659   0BC6           01549     decfsz  count38, F     ;if count38 gets to 38 it's been one second
065A   2???           01550     goto    end_isr
                      01551     movlf   D'38', count38  ;so reset count38
065B   3026               M         movlw   D'38'
065C   00C6               M         movwf   count38
065D   0AB3           01552     incf    op_time, F         ; and increment op_time
065E   1889           01553     btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
065F   0AC8           01554     incf    photocount, F       ;if it is 1, light is on so photocount++
0660   110B           01555     bcf     INTCON, T0IF
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01556 
0661                  01557 end_isr
                      01558 ;    movf    pclath_isr, W  ;if using pages
                      01559 ;    movwf    PCLATH
0661   0E7A           01560     swapf   status_isr, W   ;restore W and status
0662   0083           01561     movwf   STATUS
0663   0EF9           01562     swapf   w_isr, F
0664   0E79           01563     swapf   w_isr, W
                      01564  
                      01565 
0665   0009           01566     retfie
                      01567 
                      01568 
3F72                  01569     END
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCDadd3                           00000593
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Clear_Display                     000005F6
D                                 00000005
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Delay_0                           000005D2
Display                           
E                                 PORTD,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
End_Msg                           00000020
F                                 00000001
FERR                              00000002
FF                                0000008F
FSR                               00000004
Flick_fail                        00000068
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
HalfS                             000005BF
HalfS_0                           000005C5
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRDATA                            PORTE, 0
IRP                               00000007
InitLCD                           000005D7
InitUSART                         0000061C
LED_fail                          0000005C
LF                                00000089
Logs_Msg1                         0000009D
Logs_Msg2                         000000AE
Logs_Msg3                         000000BF
Logs_Msg4                         000000C8
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
None                              00000095
Not_present                       00000045
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
Op_at                             000000D8
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHOTODATA                         PORTE, 1
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pass                              00000054
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTD,2
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Seconds                           0000003B
Standby_Msg                       00000005
Start_Msg                         0000000E
Switch_Lines                      000005F9
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Table_Counter                     00000039
Time_Msg                          0000002A
Total_Msg                         00000078
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

WRERR                             00000003
WR_DATA                           0000060B
WR_INS                            000005FC
Z                                 00000002
_.org_1_0178                      00000178
_.org_1_01C9                      000001C9
_.org_1_01F0                      000001F0
_.org_1_0210                      00000210
_.org_1_0215                      00000215
_.org_1_022E                      0000022E
_.org_1_0294                      00000294
_.org_1_0304                      00000304
_.org_1_0325                      00000325
_.org_1_05C6                      000005C6
_.org_1_05C8                      000005C8
_.org_1_05CB                      000005CB
_.org_1_05D3                      000005D3
_.org_1_062F                      0000062F
_.org_1_064A                      0000064A
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
add3huns                          000005B0
add3ones                          000005B6
add3tens                          000005B3
badkey                            00000293
badkeyagain                       00000324
big_number                        0000058C
bignumcount                       00000045
candle_index                      00000047
carryones                         000005B9
carrytens                         000005BC
check_1                           00000328
check_2                           00000331
check_3                           0000033B
check_4                           00000345
check_5                           0000034F
check_6                           00000359
check_7                           00000363
check_8                           0000036D
check_9                           00000377
check_FF                          0000044F
check_LED                         000003CE
check_LF                          00000434
check_defective                   00000387
check_done                        00000282
check_emergstop                   00000635
check_export                      00000393
check_flick                       000003DD
check_for_fail                    00000452
check_immapeace                   00000313
check_log1                        00000232
check_log2                        0000023A
check_log3                        00000243
check_log4                        0000024C
check_log5                        00000255
check_log6                        0000025E
check_log7                        00000267
check_log8                        00000270
check_log9                        00000279
check_next                        00000458
check_none                        000003B1
check_nothx                       0000030E
check_pass                        000003BF
check_standby                     00000399
check_start                       000003AA
check_summary                     00000381
check_time                        0000038D
check_wanna                       00000308
com                               0000003A
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

count38                           00000046
dat                               0000003B
default_key                       000003AF
default_state                     000003EC
defective                         0000041B
del1                              0000003C
del2                              0000003D
delay5ms                          000005CE
display_log                       00000296
display_state                     000003B0
end_check_fail                    00000468
end_isr                           00000661
end_operation                     000001B4
export                            00000491
hdelH                             0000003E
hdelL                             00000040
hdelM                             0000003F
huns                              00000042
i2c_common_setup                  00000000
information                       00000327
init                              000000E7
isr                               00000631
keytemp                           00000037
logs                              00000217
movff                             
movlf                             
newline                           
no_huns                           0000047D
no_log                            000002AE
no_tens                           00000483
nohuns                            000004FB
not_emergstop                     00000659
notens                            00000505
now_FF                            00000436
num_FF                            00000036
num_LF                            00000035
num_tot                           00000034
ones                              00000044
op_time                           00000033
op_time_save                      00000041
photocount                        00000048
photoval                          00000049
poll                              0000020F
polling                           0000022D
printASC                          
printBCD                          
printchar                         
read_EEPROM                       00000299
read_rtc                          00000000
resume                            0000064C
rtc_convert                       00000000
rtc_read                          
rtc_resetAll                      
MPASM 5.55                          MAIN.ASM   3-4-2014  14:50:08         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

rtc_set                           
shiftlogs                         000001C0
shiftlogs_0                       000001C4
spacebar                          
start                             0000017A
start_date1                       0000002E
start_date10                      0000002D
start_hour1                       00000030
start_hour10                      0000002F
start_min1                        00000032
start_min10                       00000031
start_month1                      0000002C
start_month10                     0000002B
start_step                        0000004A
start_year1                       0000002A
start_year10                      00000029
state1                            00000020
state2                            00000021
state3                            00000022
state4                            00000023
state5                            00000024
state6                            00000025
state7                            00000026
state8                            00000027
state9                            00000028
statetemp                         00000038
status_isr                        0000007A
step_count                        0000004B
step_max                          0000004C
summary                           000003ED
suspend                           00000642
tens                              00000043
threshold1                        D'7'
threshold2                        D'69'
time                              00000469
w_isr                             00000079
waiting                           00000112
wanna_export                      00000303
writeASC                          
writeBCD                          
write_log1                        000001E6
write_log1_0                      000001ED
write_rtc                         00000000
writechar                         
writetoPC                         00000629
yes_log                           000002BA

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    48 reported,     0 suppressed

