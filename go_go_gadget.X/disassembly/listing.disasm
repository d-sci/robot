Disassembly Listing for go_go_gadget
Generated From:
C:/Users/David/Documents/GitHub/robot/go_go_gadget.X/dist/default/production/go_go_gadget.X.production.cof
Feb 26, 2014 6:17:35 PM

---  C:/Users/David/Documents/GitHub/robot/go_go_gadget.X/main.asm  -------------------------------------
                                                  1:         list p=16f877                 ; list directive to define processor
                                                  2:           #include <p16f877.inc>        ; processor specific variable definitions
                                                  3:           __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF
                                                  4:     
                                                  5:           #include <rtc_macros.inc>
                                                  6:     
                                                  7:     
                                                  8:     ;***************************************
                                                  9:     ; DEFINITIONS
                                                  10:    ;***************************************
                                                  11:        #define	RS 	PORTD,2
                                                  12:    	#define	E 	PORTD,3
                                                  13:        #define threshold1  D'7'
                                                  14:        #define threshold2  D'69'
                                                  15:        #define IRDATA     PORTE, 0
                                                  16:        #define PHOTODATA  PORTE, 1
                                                  17:       ; note: check analog vs digital!
                                                  18:    
                                                  19:    
                                                  20:    ;***************************************
                                                  21:    ; VARIABLES
                                                  22:    ;***************************************
                                                  23:    
                                                  24:    ; Also see i2c_commmon.asm -> has stuff at 0x71-0x78 on for RTC!
                                                  25:    
                                                  26:        cblock	0x20
                                                  27:        ; Important information (will be displayed)
                                                  28:            state1     ;where   0 = none      1 = pass
                                                  29:            state2     ;        2 = led fail  3 = flicker fail
                                                  30:            state3
                                                  31:            state4
                                                  32:            state5
                                                  33:            state6
                                                  34:            state7
                                                  35:            state8
                                                  36:            state9
                                                  37:            start_year10    ;starting time (for log)
                                                  38:            start_year1     ; note: these are all ALREADY ASCII!
                                                  39:            start_month10
                                                  40:            start_month1
                                                  41:            start_date10
                                                  42:            start_date1
                                                  43:            start_hour10
                                                  44:            start_hour1
                                                  45:            start_min10
                                                  46:            start_min1
                                                  47:            op_time     ;BCD in seconds
                                                  48:            num_tot     ;BCD
                                                  49:            num_LF      ;BCD
                                                  50:            num_FF      ;BCD
                                                  51:    ; For general program / interface: temps, counters, etc.
                                                  52:            keytemp         ; for data display mode
                                                  53:            statetemp
                                                  54:    		Table_Counter   ; for LCD stuff
                                                  55:    		com
                                                  56:    		dat
                                                  57:            del1            ; for delay 5ms delay routine
                                                  58:            del2
                                                  59:            hdelH          ;for delay 0.5s routine
                                                  60:            hdelM
                                                  61:            hdelL
                                                  62:            op_time_save    ;for operation time
                                                  63:            huns
                                                  64:            tens
                                                  65:            ones
                                                  66:            bignumcount
                                                  67:            count38         ;for isr
                                                  68:    ; For machine program: temps, counters, etc.
                                                  69:            candle_index
                                                  70:            photocount      ;for detecting candle
                                                  71:            photoval
                                                  72:            start_step      ;for motor
                                                  73:            step_count
                                                  74:            step_max
                                                  75:        endc
                                                  76:    
                                                  77:        cblock  0x79        ;stuff that needs to be in all registers
                                                  78:            w_isr
                                                  79:            status_isr
                                                  80:    	endc
                                                  81:    
                                                  82:    
                                                  83:    ;***************************************
                                                  84:    ; MACROS
                                                  85:    ;***************************************
                                                  86:    
                                                  87:    ; Display a msg on LCD
                                                  88:    Display macro	Message
                                                  89:    		local	loop_disp
                                                  90:    		local 	end_disp
                                                  91:    		clrf	Table_Counter
                                                  92:    		clrw
                                                  93:    loop_disp
                                                  94:        	movf	Table_Counter,W
                                                  95:    		call 	Message
                                                  96:    		xorlw	B'00000000' ;check WORK reg to see if 0 is returned
                                                  97:    		btfsc	STATUS,Z
                                                  98:    		goto	end_disp
                                                  99:    		call	WR_DATA
                                                  100:   		incf	Table_Counter,F
                                                  101:   		goto	loop_disp
                                                  102:   end_disp
                                                  103:   		endm
                                                  104:   
                                                  105:   
                                                  106:   ;Shortcuts for moving literals / registers
                                                  107:   movlf   macro   l, f
                                                  108:           movlw   l
                                                  109:           movwf   f
                                                  110:           endm
                                                  111:   
                                                  112:   movff   macro   source, dest
                                                  113:           movf    source, W
                                                  114:           movwf   dest
                                                  115:           endm
                                                  116:   
                                                  117:   ; Write to LCD (all in bank0 please)
                                                  118:   writeBCD    macro   reg         ; from a register containing BCD
                                                  119:               movf    reg, W
                                                  120:               addlw   B'00110000'
                                                  121:               call WR_DATA
                                                  122:               endm
                                                  123:   
                                                  124:   writechar   macro   asc             ;ASCII code literal (or in "")
                                                  125:               movlw   asc
                                                  126:               call    WR_DATA
                                                  127:               endm
                                                  128:   
                                                  129:   writeASC        macro   reg         ;from a register containing ASCII
                                                  130:               movf    reg, W
                                                  131:               call WR_DATA
                                                  132:               endm
                                                  133:   
                                                  134:   spacebar    macro
                                                  135:               movlw   B'00010100'
                                                  136:               call    WR_INS
                                                  137:               endm
                                                  138:   
                                                  139:   ;Print to PC (hyperterminal)
                                                  140:   printchar   macro   char            ;direct ASCII code literal (or in "")
                                                  141:               movlw   char
                                                  142:               call    writetoPC
                                                  143:               endm
                                                  144:   
                                                  145:   printASC    macro   reg            ;ASCII code inside a register
                                                  146:               banksel reg
                                                  147:               movf    reg,W
                                                  148:               call    writetoPC
                                                  149:               endm
                                                  150:   
                                                  151:   printBCD    macro   BCD            ;BCD inside a register
                                                  152:               banksel BCD
                                                  153:               movf    BCD, W
                                                  154:               addlw   0x30
                                                  155:               call    writetoPC
                                                  156:               endm
                                                  157:   
                                                  158:   newline     macro
                                                  159:               printchar   0xA ;changes line
                                                  160:               printchar   0xD ;goes back to left
                                                  161:               endm
                                                  162:   ;***************************************
                                                  163:   ; VECTORS
                                                  164:   ;***************************************
                                                  165:   
                                                  166:       ORG       0x000
0000  28E7     GOTO 0xE7                          167:            goto      init
                                                  168:       ORG       0x004
0004  2E7A     GOTO 0x67A                         169:           goto    isr
                                                  170:   
                                                  171:   
                                                  172:   ;***************************************
                                                  173:   ; TABLES (MESSAGES)
                                                  174:   ;***************************************
                                                  175:   Standby_Msg
0005  0782     ADDWF PCL, F                       176:   		addwf	PCL,F
0006  3453     RETLW 0x53                         177:   		dt		"STANDBY", 0
0007  3454     RETLW 0x54
0008  3441     RETLW 0x41
0009  344E     RETLW 0x4E
000A  3444     RETLW 0x44
000B  3442     RETLW 0x42
000C  3459     RETLW 0x59
000D  3400     RETLW 0x0
                                                  178:   Start_Msg
000E  0782     ADDWF PCL, F                       179:           addwf   PCL,F
000F  3449     RETLW 0x49                         180:           dt      "Inspecting . . .",0
0010  346E     RETLW 0x6E
0011  3473     RETLW 0x73
0012  3470     RETLW 0x70
0013  3465     RETLW 0x65
0014  3463     RETLW 0x63
0015  3474     RETLW 0x74
0016  3469     RETLW 0x69
0017  346E     RETLW 0x6E
0018  3467     RETLW 0x67
0019  3420     RETLW 0x20
001A  342E     RETLW 0x2E
001B  3420     RETLW 0x20
001C  342E     RETLW 0x2E
001D  3420     RETLW 0x20
001E  342E     RETLW 0x2E
001F  3400     RETLW 0x0
                                                  181:   End_Msg
0020  0782     ADDWF PCL, F                       182:           addwf   PCL,F
0021  3443     RETLW 0x43                         183:           dt      "Complete",0
0022  346F     RETLW 0x6F
0023  346D     RETLW 0x6D
0024  3470     RETLW 0x70
0025  346C     RETLW 0x6C
0026  3465     RETLW 0x65
0027  3474     RETLW 0x74
0028  3465     RETLW 0x65
0029  3400     RETLW 0x0
                                                  184:   Time_Msg
002A  0782     ADDWF PCL, F                       185:   		addwf	PCL,F
002B  344F     RETLW 0x4F                         186:   		dt		"Operation time:",0
002C  3470     RETLW 0x70
002D  3465     RETLW 0x65
002E  3472     RETLW 0x72
002F  3461     RETLW 0x61
0030  3474     RETLW 0x74
0031  3469     RETLW 0x69
0032  346F     RETLW 0x6F
0033  346E     RETLW 0x6E
0034  3420     RETLW 0x20
0035  3474     RETLW 0x74
0036  3469     RETLW 0x69
0037  346D     RETLW 0x6D
0038  3465     RETLW 0x65
0039  343A     RETLW 0x3A
003A  3400     RETLW 0x0
                                                  187:   Seconds
003B  0782     ADDWF PCL, F                       188:           addwf   PCL,F
003C  3420     RETLW 0x20                         189:           dt      " seconds", 0
003D  3473     RETLW 0x73
003E  3465     RETLW 0x65
003F  3463     RETLW 0x63
0040  346F     RETLW 0x6F
0041  346E     RETLW 0x6E
0042  3464     RETLW 0x64
0043  3473     RETLW 0x73
0044  3400     RETLW 0x0
                                                  190:   Not_present
0045  0782     ADDWF PCL, F                       191:           addwf   PCL,F
0046  343A     RETLW 0x3A                         192:           dt      ": Not present",0
0047  3420     RETLW 0x20
0048  344E     RETLW 0x4E
0049  346F     RETLW 0x6F
004A  3474     RETLW 0x74
004B  3420     RETLW 0x20
004C  3470     RETLW 0x70
004D  3472     RETLW 0x72
004E  3465     RETLW 0x65
004F  3473     RETLW 0x73
0050  3465     RETLW 0x65
0051  346E     RETLW 0x6E
0052  3474     RETLW 0x74
0053  3400     RETLW 0x0
                                                  193:   Pass
0054  0782     ADDWF PCL, F                       194:   		addwf	PCL,F
0055  343A     RETLW 0x3A                         195:   		dt		": Pass",0
0056  3420     RETLW 0x20
0057  3450     RETLW 0x50
0058  3461     RETLW 0x61
0059  3473     RETLW 0x73
005A  3473     RETLW 0x73
005B  3400     RETLW 0x0
                                                  196:   LED_fail
005C  0782     ADDWF PCL, F                       197:   		addwf	PCL,F
005D  343A     RETLW 0x3A                         198:   		dt		": LED fail",0
005E  3420     RETLW 0x20
005F  344C     RETLW 0x4C
0060  3445     RETLW 0x45
0061  3444     RETLW 0x44
0062  3420     RETLW 0x20
0063  3466     RETLW 0x66
0064  3461     RETLW 0x61
0065  3469     RETLW 0x69
0066  346C     RETLW 0x6C
0067  3400     RETLW 0x0
                                                  199:   Flick_fail
0068  0782     ADDWF PCL, F                       200:   		addwf	PCL,F
0069  343A     RETLW 0x3A                         201:   		dt		": Flicker fail",0
006A  3420     RETLW 0x20
006B  3446     RETLW 0x46
006C  346C     RETLW 0x6C
006D  3469     RETLW 0x69
006E  3463     RETLW 0x63
006F  346B     RETLW 0x6B
0070  3465     RETLW 0x65
0071  3472     RETLW 0x72
0072  3420     RETLW 0x20
0073  3466     RETLW 0x66
0074  3461     RETLW 0x61
0075  3469     RETLW 0x69
0076  346C     RETLW 0x6C
0077  3400     RETLW 0x0
                                                  202:   Total_Msg
0078  0782     ADDWF PCL, F                       203:           addwf   PCL,F
0079  3454     RETLW 0x54                         204:           dt      "Total candles: ",0
007A  346F     RETLW 0x6F
007B  3474     RETLW 0x74
007C  3461     RETLW 0x61
007D  346C     RETLW 0x6C
007E  3420     RETLW 0x20
007F  3463     RETLW 0x63
0080  3461     RETLW 0x61
0081  346E     RETLW 0x6E
0082  3464     RETLW 0x64
0083  346C     RETLW 0x6C
0084  3465     RETLW 0x65
0085  3473     RETLW 0x73
0086  343A     RETLW 0x3A
0087  3420     RETLW 0x20
0088  3400     RETLW 0x0
                                                  205:   LF
0089  0782     ADDWF PCL, F                       206:           addwf   PCL,F
008A  344C     RETLW 0x4C                         207:           dt      "LF: ",0
008B  3446     RETLW 0x46
008C  343A     RETLW 0x3A
008D  3420     RETLW 0x20
008E  3400     RETLW 0x0
                                                  208:   FF
008F  0782     ADDWF PCL, F                       209:           addwf   PCL,F
0090  3446     RETLW 0x46                         210:           dt      "FF: ",0
0091  3446     RETLW 0x46
0092  343A     RETLW 0x3A
0093  3420     RETLW 0x20
0094  3400     RETLW 0x0
                                                  211:   None
0095  0782     ADDWF PCL, F                       212:           addwf   PCL,F
0096  343C     RETLW 0x3C                         213:           dt      "<none>", 0
0097  346E     RETLW 0x6E
0098  346F     RETLW 0x6F
0099  346E     RETLW 0x6E
009A  3465     RETLW 0x65
009B  343E     RETLW 0x3E
009C  3400     RETLW 0x0
                                                  214:   Logs_Msg1
009D  0782     ADDWF PCL, F                       215:           addwf   PCL,F
009E  3431     RETLW 0x31                         216:           dt      "1-9 to see logs",0
009F  342D     RETLW 0x2D
00A0  3439     RETLW 0x39
00A1  3420     RETLW 0x20
00A2  3474     RETLW 0x74
00A3  346F     RETLW 0x6F
00A4  3420     RETLW 0x20
00A5  3473     RETLW 0x73
00A6  3465     RETLW 0x65
00A7  3465     RETLW 0x65
00A8  3420     RETLW 0x20
00A9  346C     RETLW 0x6C
00AA  346F     RETLW 0x6F
00AB  3467     RETLW 0x67
00AC  3473     RETLW 0x73
00AD  3400     RETLW 0x0
                                                  217:   Logs_Msg2
00AE  0782     ADDWF PCL, F                       218:           addwf   PCL,F
00AF  3453     RETLW 0x53                         219:           dt      "STANDBY to exit",0
00B0  3454     RETLW 0x54
00B1  3441     RETLW 0x41
00B2  344E     RETLW 0x4E
00B3  3444     RETLW 0x44
00B4  3442     RETLW 0x42
00B5  3459     RETLW 0x59
00B6  3420     RETLW 0x20
00B7  3474     RETLW 0x74
00B8  346F     RETLW 0x6F
00B9  3420     RETLW 0x20
00BA  3465     RETLW 0x65
00BB  3478     RETLW 0x78
00BC  3469     RETLW 0x69
00BD  3474     RETLW 0x74
00BE  3400     RETLW 0x0
                                                  220:   Logs_Msg3
00BF  0782     ADDWF PCL, F                       221:           addwf   PCL,F
00C0  3445     RETLW 0x45                         222:           dt      "Export?",0
00C1  3478     RETLW 0x78
00C2  3470     RETLW 0x70
00C3  346F     RETLW 0x6F
00C4  3472     RETLW 0x72
00C5  3474     RETLW 0x74
00C6  343F     RETLW 0x3F
00C7  3400     RETLW 0x0
                                                  223:   Logs_Msg4
00C8  0782     ADDWF PCL, F                       224:           addwf   PCL,F
00C9  344C     RETLW 0x4C                         225:           dt      "LOGS to return",0
00CA  344F     RETLW 0x4F
00CB  3447     RETLW 0x47
00CC  3453     RETLW 0x53
00CD  3420     RETLW 0x20
00CE  3474     RETLW 0x74
00CF  346F     RETLW 0x6F
00D0  3420     RETLW 0x20
00D1  3472     RETLW 0x72
00D2  3465     RETLW 0x65
00D3  3474     RETLW 0x74
00D4  3475     RETLW 0x75
00D5  3472     RETLW 0x72
00D6  346E     RETLW 0x6E
00D7  3400     RETLW 0x0
                                                  226:   Op_at
00D8  0782     ADDWF PCL, F                       227:           addwf   PCL,F
00D9  344F     RETLW 0x4F                         228:           dt      "Operation at:",0
00DA  3470     RETLW 0x70
00DB  3465     RETLW 0x65
00DC  3472     RETLW 0x72
00DD  3461     RETLW 0x61
00DE  3474     RETLW 0x74
00DF  3469     RETLW 0x69
00E0  346F     RETLW 0x6F
00E1  346E     RETLW 0x6E
00E2  3420     RETLW 0x20
00E3  3461     RETLW 0x61
00E4  3474     RETLW 0x74
00E5  343A     RETLW 0x3A
00E6  3400     RETLW 0x0
                                                  229:   
                                                  230:   ;***************************************
                                                  231:   ; MAIN PROGRAM
                                                  232:   ;***************************************
                                                  233:   
                                                  234:   init
00E7  3020     MOVLW 0x20                         235:           movlf     b'00100000', INTCON   ;no interrupts yet, but Timer0 ready one GIE enabled
00E8  008B     MOVWF INTCON
                                                  236:   
00E9  1683     BSF STATUS, 0x5                    237:           banksel   TRISA                 ; bank 1
00EA  1303     BCF STATUS, 0x6
00EB  30C7     MOVLW 0xC7                         238:           movlf     b'11000111', OPTION_REG ; 1:256 prescaler for timer
00EC  0081     MOVWF TMR0
00ED  0185     CLRF PORTA                         239:           clrf      TRISA                 ; PortA *may* be used for motor
00EE  30F2     MOVLW 0xF2                         240:           movlf     b'11110010', TRISB    ; PortB[7:4] and [1] are keypad inputs (rest unused; RB0 may be external interrupt)
00EF  0086     MOVWF PORTB
                                                  241:                                           ; note can disable keypad to free up these ports during operation if necessary.
00F0  3018     MOVLW 0x18                         242:           movlf     b'00011000', TRISC    ; PortC[4:3] is RTC; [7:6] is RS-232; [2:1] *may* be solenoid
00F1  0087     MOVWF PORTC
00F2  0188     CLRF PORTD                         243:           clrf      TRISD                 ; PortD[2:7] is LCD output (rest unused)
00F3  3003     MOVLW 0x3                          244:           movlf     b'011', TRISE         ; PortE *may* be used for ir and photodata
00F4  0089     MOVWF PORTE
00F5  3007     MOVLW 0x7                          245:           movlf   0x07, ADCON1            ; digital input
00F6  009F     MOVWF ADCON0
                                                  246:   
00F7  1283     BCF STATUS, 0x5                    247:           banksel   PORTA                 ; bank 0
00F8  1303     BCF STATUS, 0x6
00F9  0185     CLRF PORTA                         248:           clrf      PORTA
00FA  0186     CLRF PORTB                         249:           clrf      PORTB
00FB  0187     CLRF PORTC                         250:           clrf      PORTC
00FC  0188     CLRF PORTD                         251:           clrf      PORTD
00FD  0189     CLRF PORTE                         252:           clrf      PORTE
                                                  253:   
00FE  268B     CALL 0x68B                         254:           call 	  i2c_common_setup      ;Set up I2C for communication
00FF  2626     CALL 0x626                         255:           call      InitLCD               ;Initialize the LCD
0100  266A     CALL 0x66A                         256:           call      InitUSART          ;Set up USART for RS232
                                                  257:   
0101  1283     BCF STATUS, 0x5                    258:           banksel     start_step          ; back to bank0
0102  1303     BCF STATUS, 0x6
0103  3001     MOVLW 0x1                          259:           movlf       d'1', start_step    ; set-up for motor
0104  00CA     MOVWF 0x4A
0105  300F     MOVLW 0xF                          260:           movlf       d'15', step_max
0106  00CC     MOVWF 0x4C
                                                  261:   
0107  01B9     CLRF 0x39                          262:           Display Standby_Msg
0108  0103     CLRW
0109  0839     MOVF 0x39, W
010A  2005     CALL 0x5
010B  3A00     XORLW 0x0
010C  1903     BTFSC STATUS, 0x2
010D  2911     GOTO 0x111
010E  2659     CALL 0x659
010F  0AB9     INCF 0x39, F
0110  2909     GOTO 0x109
0111  2647     CALL 0x647                         263:           call    Switch_Lines
                                                  264:   
                                                  265:    ;--------------------------------------------------
                                                  266:    ;      STANDBY MODE
                                                  267:   
                                                  268:   waiting
                                                  269:           ; Display date and time.
                                                  270:           ; Also save starting time for log (will stop updating once we start)
0112  3032     MOVLW 0x32                         271:           writechar "2"       ;First line shows 20**/**/**
0113  2659     CALL 0x659
0114  3030     MOVLW 0x30                         272:           writechar "0"
0115  2659     CALL 0x659
0116  3006     MOVLW 0x6                          273:           rtc_read	0x06		;Read Address 0x06 from DS1307---year
0117  1283     BCF STATUS, 0x5
0118  1303     BCF STATUS, 0x6
0119  00F3     MOVWF 0x73
011A  26D8     CALL 0x6D8
011B  1283     BCF STATUS, 0x5
011C  1303     BCF STATUS, 0x6
011D  0875     MOVF 0x75, W
011E  2727     CALL 0x727
011F  0877     MOVF 0x77, W                       274:   		movf	0x77,W
0120  00A9     MOVWF 0x29                         275:           movwf    start_year10    ;Save starting year dig10
0121  2659     CALL 0x659                         276:   		call	WR_DATA
0122  0878     MOVF 0x78, W                       277:   		movf	0x78,W
0123  00AA     MOVWF 0x2A                         278:           movwf    start_year1    ;Save starting year dig1
0124  2659     CALL 0x659                         279:   		call	WR_DATA
0125  302F     MOVLW 0x2F                         280:   		writechar "/"
0126  2659     CALL 0x659
0127  3005     MOVLW 0x5                          281:   		rtc_read	0x05		;Read Address 0x05 from DS1307---month
0128  1283     BCF STATUS, 0x5
0129  1303     BCF STATUS, 0x6
012A  00F3     MOVWF 0x73
012B  26D8     CALL 0x6D8
012C  1283     BCF STATUS, 0x5
012D  1303     BCF STATUS, 0x6
012E  0875     MOVF 0x75, W
012F  2727     CALL 0x727
0130  0877     MOVF 0x77, W                       282:   		movf	0x77,W
0131  00AB     MOVWF 0x2B                         283:           movwf    start_month10    ;Save starting month dig10
0132  2659     CALL 0x659                         284:   		call	WR_DATA
0133  0878     MOVF 0x78, W                       285:   		movf	0x78,W
0134  00AC     MOVWF 0x2C                         286:           movwf    start_month1    ;Save starting month dig1
0135  2659     CALL 0x659                         287:   		call	WR_DATA
0136  302F     MOVLW 0x2F                         288:   		writechar	"/"
0137  2659     CALL 0x659
0138  3004     MOVLW 0x4                          289:   		rtc_read	0x04		;Read Address 0x04 from DS1307---date
0139  1283     BCF STATUS, 0x5
013A  1303     BCF STATUS, 0x6
013B  00F3     MOVWF 0x73
013C  26D8     CALL 0x6D8
013D  1283     BCF STATUS, 0x5
013E  1303     BCF STATUS, 0x6
013F  0875     MOVF 0x75, W
0140  2727     CALL 0x727
0141  0877     MOVF 0x77, W                       290:   		movf	0x77,W
0142  00AD     MOVWF 0x2D                         291:           movwf    start_date10    ;Save starting date dig10
0143  2659     CALL 0x659                         292:   		call	WR_DATA
0144  0878     MOVF 0x78, W                       293:   		movf	0x78,W
0145  00AE     MOVWF 0x2E                         294:           movwf    start_date1    ;Save starting date dig1
0146  2659     CALL 0x659                         295:   		call	WR_DATA
0147  3014     MOVLW 0x14                         296:   		spacebar
0148  264A     CALL 0x64A
0149  3002     MOVLW 0x2                          297:   		rtc_read	0x02		;Read Address 0x02 from DS1307---hour
014A  1283     BCF STATUS, 0x5
014B  1303     BCF STATUS, 0x6
014C  00F3     MOVWF 0x73
014D  26D8     CALL 0x6D8
014E  1283     BCF STATUS, 0x5
014F  1303     BCF STATUS, 0x6
0150  0875     MOVF 0x75, W
0151  2727     CALL 0x727
0152  0877     MOVF 0x77, W                       298:   		movf	0x77,W
0153  00AF     MOVWF 0x2F                         299:           movwf    start_hour10    ;Save starting hour dig10
0154  2659     CALL 0x659                         300:   		call	WR_DATA
0155  0878     MOVF 0x78, W                       301:   		movf	0x78,W
0156  00B0     MOVWF 0x30                         302:           movwf    start_hour1    ;Save starting hour dig1
0157  2659     CALL 0x659                         303:   		call	WR_DATA
0158  303A     MOVLW 0x3A                         304:   		writechar ":"
0159  2659     CALL 0x659
015A  3001     MOVLW 0x1                          305:   		rtc_read	0x01		;Read Address 0x01 from DS1307---min
015B  1283     BCF STATUS, 0x5
015C  1303     BCF STATUS, 0x6
015D  00F3     MOVWF 0x73
015E  26D8     CALL 0x6D8
015F  1283     BCF STATUS, 0x5
0160  1303     BCF STATUS, 0x6
0161  0875     MOVF 0x75, W
0162  2727     CALL 0x727
0163  0877     MOVF 0x77, W                       306:   		movf	0x77,W
0164  00B1     MOVWF 0x31                         307:           movwf    start_min10    ;Save starting min dig10
0165  2659     CALL 0x659                         308:   		call	WR_DATA
0166  0878     MOVF 0x78, W                       309:   		movf	0x78,W
0167  00B2     MOVWF 0x32                         310:           movwf    start_min1    ;Save starting min dig1
0168  2659     CALL 0x659                         311:   		call	WR_DATA
                                                  312:   
                                                  313:           ; Move cursor back to start of second line
                                                  314:           ; We will update displayed time but not the word "STANDBY"
0169  30C0     MOVLW 0xC0                         315:           movlw   B'11000000'
016A  264A     CALL 0x64A                         316:           call    WR_INS
                                                  317:   
                                                  318:           ;Poll to start (will have to hold key for ~0.5sec)
016B  1C86     BTFSS PORTB, 0x1                   319:            btfss		PORTB,1     ;Wait until data is available from the keypad
016C  2912     GOTO 0x112                         320:            goto		waiting
                                                  321:   
016D  0E06     SWAPF PORTB, W                     322:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
016E  390F     ANDLW 0xF                          323:            andlw		0x0F
016F  00B7     MOVWF 0x37                         324:            movwf      keytemp
0170  3A0C     XORLW 0xC                          325:            xorlw      0xC         ;Will be all zeros if its "START"
0171  1903     BTFSC STATUS, 0x2                  326:            btfsc      STATUS,Z    ;and Z will be high, so skip if not high
0172  297A     GOTO 0x17A                         327:            goto       start
                                                  328:   
0173  0837     MOVF 0x37, W                       329:            movf       keytemp,W     ;Go to log interface
0174  3A0E     XORLW 0xE                          330:            xorlw      0xE
0175  1903     BTFSC STATUS, 0x2                  331:            btfsc      STATUS,Z
0176  2A18     GOTO 0x218                         332:            goto       logs
                                                  333:   
0177  1886     BTFSC PORTB, 0x1                   334:            btfsc		PORTB,1     ;Wait until key is released
0178  2977     GOTO 0x177                         335:            goto		$-1
0179  2912     GOTO 0x112                         336:            goto       waiting
                                                  337:   
                                                  338:   ;-----------------------------------------------------------
                                                  339:   ;       ACTUAL OPERATION (I'm just adding values manually now)
                                                  340:   
                                                  341:   start
                                                  342:           ;Start the timer
017A  3026     MOVLW 0x26                         343:           movlf       D'38', count38
017B  00C6     MOVWF 0x46
017C  01B3     CLRF 0x33                          344:           clrf        op_time
017D  0181     CLRF TMR0                          345:           clrf        TMR0
017E  178B     BSF INTCON, 0x7                    346:           bsf         INTCON, GIE     ;enable interrupts
                                                  347:   
                                                  348:           ;Display starting message
017F  2644     CALL 0x644                         349:           call        Clear_Display
0180  01B9     CLRF 0x39                          350:           Display     Start_Msg       ;"Inspecting. . ."
0181  0103     CLRW
0182  0839     MOVF 0x39, W
0183  200E     CALL 0xE
0184  3A00     XORLW 0x0
0185  1903     BTFSC STATUS, 0x2
0186  298A     GOTO 0x18A
0187  2659     CALL 0x659
0188  0AB9     INCF 0x39, F
0189  2982     GOTO 0x182
                                                  351:   
                                                  352:   
                                                  353:   ;****FAKE CODE ******************************************
                                                  354:   ;        ; Just delaying
                                                  355:   ;        call        HalfS
                                                  356:   ;        call        HalfS
                                                  357:   ;
                                                  358:   ;       ; Putting values in manually.
                                                  359:   ;        movlf     B'01', state1     ;pass
                                                  360:   ;        movlf     B'01', state2     ;pass
                                                  361:   ;        movlf     B'10', state3     ;LED fail
                                                  362:   ;        movlf     B'01', state4     ;pass
                                                  363:   ;        movlf     B'01', state5     ;pass
                                                  364:   ;        movlf     B'01', state6     ;pass
                                                  365:   ;        movlf     B'01', state7     ;pass
                                                  366:   ;        movlf     B'11', state8     ;flicker fail
                                                  367:   ;        movlf     B'01', state9     ;pass
                                                  368:   ;        movlf     D'1', num_LF
                                                  369:   ;        movlf     D'1', num_FF
                                                  370:   ;        movlf     D'9', num_tot
                                                  371:   ;*******************************************************
                                                  372:   
                                                  373:   ; choose fake or real!
                                                  374:   
                                                  375:   ;******REAL CODE ******************************************
018A  01C7     CLRF 0x47                          376:       clrf    candle_index
018B  1383     BCF STATUS, 0x7                    377:       bcf	STATUS, IRP
018C  301F     MOVLW 0x1F                         378:       movlf   0x1F, FSR       ;pointing at right before state1
018D  0084     MOVWF FSR
                                                  379:   
                                                  380:   rotate
018E  300A     MOVLW 0xA                          381:   	movlw   d'10'                 ; stop operation after 10 rotations
018F  0247     SUBWF 0x47, W                      382:       subwf   candle_index,W      ; candle_index is # you've already tested before rotating
0190  1903     BTFSC STATUS, 0x2                  383:       btfsc   STATUS,Z
0191  29B5     GOTO 0x1B5                         384:   	goto    end_operation
0192  2328     CALL 0x328                         385:   	call    ROTATEMOTOR          ; else rotate motor and n++
0193  0AC7     INCF 0x47, F                       386:   	incf    candle_index, F
0194  0A84     INCF FSR, F                        387:       incf    FSR, F
                                                  388:   
                                                  389:   detect_candle
0195  1C09     BTFSS PORTE, 0x0                   390:   	btfss   IRDATA      ;IRDATA is 1 if there's no light, 0 if there's a light
0196  299A     GOTO 0x19A                         391:   	goto    test_candle     ;yes candle, go test it
0197  3000     MOVLW 0x0                          392:      movlf   D'0', INDF      ;no candle, state = not present
0198  0080     MOVWF INDF
0199  298E     GOTO 0x18E                         393:   	goto rotate                 ;and go try next
                                                  394:   
                                                  395:   test_candle
019A  0AB4     INCF 0x34, F                       396:   	incf    num_tot, F			; keeping track of total number of candles
019B  01C8     CLRF 0x48                          397:   	clrf    photocount
019C  260E     CALL 0x60E                         398:   	call    HalfS       ; delay 2 sec or whatever
019D  260E     CALL 0x60E                         399:      call    HalfS
019E  260E     CALL 0x60E                         400:      call    HalfS
019F  260E     CALL 0x60E                         401:      call    HalfS
01A0  0848     MOVF 0x48, W                       402:   	movff   photocount, photoval        ;to ensure it wont change again
01A1  00C9     MOVWF 0x49
                                                  403:   check_threshold1
01A2  3007     MOVLW 0x7                          404:       movlw    threshold1
01A3  0249     SUBWF 0x49, W                      405:       subwf   photoval, W
01A4  1803     BTFSC STATUS, 0x0                  406:       btfsc   STATUS, C       ;if  photoval < threshold 1, C = 0
01A5  29AA     GOTO 0x1AA                         407:       goto check_threshold2
01A6  3002     MOVLW 0x2                          408:       movlf   D'2', INDF      ; < threshold 1 means led fail
01A7  0080     MOVWF INDF
01A8  0AB5     INCF 0x35, F                       409:   	 incf    num_LF, F
01A9  298E     GOTO 0x18E                         410:       goto    rotate
                                                  411:   check_threshold2
01AA  3045     MOVLW 0x45                         412:       movlw    threshold2
01AB  0249     SUBWF 0x49, W                      413:       subwf   photoval, W
01AC  1803     BTFSC STATUS, 0x0                  414:       btfsc   STATUS, C       ;if  photoval < threshold 2, C = 0
01AD  29B1     GOTO 0x1B1                         415:       goto aboveboth
01AE  3001     MOVLW 0x1                          416:       movlf   D'1', INDF      ; < threshold 2 means pass
01AF  0080     MOVWF INDF
01B0  298E     GOTO 0x18E                         417:       goto    rotate
                                                  418:   aboveboth
01B1  3003     MOVLW 0x3                          419:      movlf   D'3', INDF       ;else flicker fail
01B2  0080     MOVWF INDF
01B3  0AB6     INCF 0x36, F                       420:      incf    num_FF, F
01B4  298E     GOTO 0x18E                         421:      goto    rotate
                                                  422:   
                                                  423:   ; ;****************************************************
                                                  424:   
                                                  425:   end_operation
                                                  426:           ; Stop the timer
01B5  138B     BCF INTCON, 0x7                    427:            bcf         INTCON, GIE  ;disable interrupts
                                                  428:   
                                                  429:           ;Display "complete"
01B6  2644     CALL 0x644                         430:           call       Clear_Display
01B7  01B9     CLRF 0x39                          431:           Display    End_Msg          ; "Complete"
01B8  0103     CLRW
01B9  0839     MOVF 0x39, W
01BA  2020     CALL 0x20
01BB  3A00     XORLW 0x0
01BC  1903     BTFSC STATUS, 0x2
01BD  29C1     GOTO 0x1C1
01BE  2659     CALL 0x659
01BF  0AB9     INCF 0x39, F
01C0  29B9     GOTO 0x1B9
                                                  432:   
                                                  433:           ; Shift logs 1-8 -> 2-9
                                                  434:           ; Then store current run as log 1
                                                  435:   shiftlogs
01C1  1283     BCF STATUS, 0x5                    436:           banksel     EEADR               ; bank 2
01C2  1703     BSF STATUS, 0x6
01C3  306F     MOVLW 0x6F                         437:           movlf       D'111', EEADR        ; start shifting from 111->125
01C4  008D     MOVWF PIR2
                                                  438:   
                                                  439:   shiftlogs_0
01C5  1683     BSF STATUS, 0x5                    440:           banksel     EECON1              ;bank 3
01C6  1703     BSF STATUS, 0x6
01C7  138C     BCF PIR1, 0x7                      441:           bcf         EECON1, EEPGD
01C8  140C     BSF PIR1, 0x0                      442:           bsf         EECON1, RD          ;read (EEADR) to EEDATA
01C9  188C     BTFSC PIR1, 0x1                    443:           btfsc       EECON1, WR          ; ensure a write is not in progress (??)
01CA  29C9     GOTO 0x1C9                         444:           goto        $-1
01CB  1283     BCF STATUS, 0x5                    445:           banksel     EEADR               ;bank 2
01CC  1703     BSF STATUS, 0x6
01CD  300E     MOVLW 0xE                          446:           movlw       D'14'               ;add 14 to EEADR to shift 14 places
01CE  078D     ADDWF PIR2, F                      447:           addwf       EEADR, F
01CF  1683     BSF STATUS, 0x5                    448:           banksel     EECON1              ;bank 3
01D0  1703     BSF STATUS, 0x6
01D1  138C     BCF PIR1, 0x7                      449:           bcf         EECON1, EEPGD
01D2  150C     BSF PIR1, 0x2                      450:           bsf         EECON1, WREN
01D3  3055     MOVLW 0x55                         451:           movlw       0x55
01D4  008D     MOVWF PIR2                         452:           movwf       EECON2
01D5  30AA     MOVLW 0xAA                         453:           movlw       0xAA
01D6  008D     MOVWF PIR2                         454:           movwf       EECON2
01D7  148C     BSF PIR1, 0x1                      455:           bsf         EECON1, WR          ; write EEDATA to (EEADR+14)
01D8  110C     BCF PIR1, 0x2                      456:           bcf         EECON1, WREN
01D9  1283     BCF STATUS, 0x5                    457:           banksel     EEADR               ;bank 2
01DA  1703     BSF STATUS, 0x6
01DB  300E     MOVLW 0xE                          458:           movlw       D'14'
01DC  020D     SUBWF PIR2, W                      459:           subwf       EEADR, W
01DD  1903     BTFSC STATUS, 0x2                  460:           btfsc       STATUS, Z
01DE  29E7     GOTO 0x1E7                         461:           goto        write_log1          ; if EEADR = 14 we're done (just shifted 0->14)
                                                  462:   
01DF  1283     BCF STATUS, 0x5                    463:           banksel op_time             ; for some reason I need to delay here
01E0  1303     BCF STATUS, 0x6
01E1  261D     CALL 0x61D                         464:           call   delay5ms             ; or else I get an infinite loop
01E2  1283     BCF STATUS, 0x5                    465:           banksel EEADR
01E3  1703     BSF STATUS, 0x6
                                                  466:   
01E4  300F     MOVLW 0xF                          467:           movlw       D'15'               ;else EEADR -= 15 to shift next byte
01E5  028D     SUBWF PIR2, F                      468:           subwf       EEADR, F
01E6  29C5     GOTO 0x1C5                         469:           goto        shiftlogs_0
                                                  470:   
                                                  471:   write_log1
01E7  1283     BCF STATUS, 0x5                    472:           banksel     EEADR
01E8  1703     BSF STATUS, 0x6
01E9  1383     BCF STATUS, 0x7                    473:           bcf         STATUS, IRP
01EA  3037     MOVLW 0x37                         474:           movlf       0x37, FSR           ;points to one after last important data
01EB  0084     MOVWF FSR
01EC  300E     MOVLW 0xE                          475:           movlf       D'14', EEADR        ;points to one after last place to write to
01ED  008D     MOVWF PIR2
                                                  476:   write_log1_0
01EE  1683     BSF STATUS, 0x5                    477:           banksel     EECON1              ;bank3
01EF  1703     BSF STATUS, 0x6
01F0  188C     BTFSC PIR1, 0x1                    478:           btfsc       EECON1, WR          ;ensure a write is not in progress (??)
01F1  29F0     GOTO 0x1F0                         479:           goto        $-1
01F2  1283     BCF STATUS, 0x5                    480:           banksel     EEADR               ;bank 2
01F3  1703     BSF STATUS, 0x6
01F4  038D     DECF PIR2, F                       481:           decf        EEADR, F            ;writing backwords
01F5  0384     DECF FSR, F                        482:           decf        FSR, F
01F6  0800     MOVF INDF, W                       483:           movff       INDF, EEDATA
01F7  008C     MOVWF PIR1
01F8  1683     BSF STATUS, 0x5                    484:           banksel     EECON1              ;bank 3
01F9  1703     BSF STATUS, 0x6
01FA  138C     BCF PIR1, 0x7                      485:           bcf         EECON1, EEPGD
01FB  150C     BSF PIR1, 0x2                      486:           bsf         EECON1, WREN
01FC  3055     MOVLW 0x55                         487:           movlw       0x55
01FD  008D     MOVWF PIR2                         488:           movwf       EECON2
01FE  30AA     MOVLW 0xAA                         489:           movlw       0xAA
01FF  008D     MOVWF PIR2                         490:           movwf       EECON2
0200  148C     BSF PIR1, 0x1                      491:           bsf         EECON1, WR          ; write (INDF) to EEADR
0201  110C     BCF PIR1, 0x2                      492:           bcf         EECON1, WREN
0202  1283     BCF STATUS, 0x5                    493:           banksel     EEADR               ;bank 2
0203  1703     BSF STATUS, 0x6
0204  088D     MOVF PIR2, F                       494:           movf        EEADR, F
0205  1D03     BTFSS STATUS, 0x2                  495:           btfss       STATUS, Z           ;if EEADR = 0 we're done
0206  29EE     GOTO 0x1EE                         496:           goto        write_log1_0
0207  1283     BCF STATUS, 0x5                    497:           bcf         STATUS, RP0         ;so go back to bank 0 and continue
0208  1303     BCF STATUS, 0x6                    498:           bcf         STATUS, RP1
                                                  499:   
                                                  500:           ; Display info screens
0209  24B8     CALL 0x4B8                         501:           call       time             ; "Operation time: X sec"
020A  260E     CALL 0x60E                         502:           call       HalfS
020B  260E     CALL 0x60E                         503:           call       HalfS
020C  243C     CALL 0x43C                         504:           call       summary          ; "Total candles: X. Defective: Y"
020D  260E     CALL 0x60E                         505:           call       HalfS
020E  260E     CALL 0x60E                         506:           call       HalfS
020F  246A     CALL 0x46A                         507:           call       defective        ; "FF: a b c. LF: d e f"
                                                  508:   ;-----------------------------------------------------------------------
                                                  509:   ; Data display interface
                                                  510:   
0210  1C86     BTFSS PORTB, 0x1                   511:   poll     btfss		PORTB,1     ;Wait until data is available from the keypad
0211  2A10     GOTO 0x210                         512:            goto		$-1
                                                  513:   
0212  0E06     SWAPF PORTB, W                     514:            swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0213  390F     ANDLW 0xF                          515:            andlw		0x0F
0214  2376     CALL 0x376                         516:            call       information ;Do the right thing
                                                  517:   
0215  1886     BTFSC PORTB, 0x1                   518:            btfsc		PORTB,1     ;Wait until key is released
0216  2A15     GOTO 0x215                         519:            goto		$-1
0217  2A10     GOTO 0x210                         520:            goto       poll
                                                  521:   
                                                  522:   
                                                  523:   ;-------------------------------------------------------------------------
                                                  524:   ; LOGS INTERFACE
                                                  525:   ; Shows last runs of last 9 logs
                                                  526:   ; Access from STANDBY and return to STANDBY
                                                  527:   
                                                  528:   logs
0218  2644     CALL 0x644                         529:       call    Clear_Display
0219  01B9     CLRF 0x39                          530:       Display Logs_Msg1
021A  0103     CLRW
021B  0839     MOVF 0x39, W
021C  209D     CALL 0x9D
021D  3A00     XORLW 0x0
021E  1903     BTFSC STATUS, 0x2
021F  2A23     GOTO 0x223
0220  2659     CALL 0x659
0221  0AB9     INCF 0x39, F
0222  2A1B     GOTO 0x21B
0223  2647     CALL 0x647                         531:       call    Switch_Lines
0224  01B9     CLRF 0x39                          532:       Display Logs_Msg2
0225  0103     CLRW
0226  0839     MOVF 0x39, W
0227  20AE     CALL 0xAE
0228  3A00     XORLW 0x0
0229  1903     BTFSC STATUS, 0x2
022A  2A2E     GOTO 0x22E
022B  2659     CALL 0x659
022C  0AB9     INCF 0x39, F
022D  2A26     GOTO 0x226
                                                  533:   
                                                  534:   polling
022E  1C86     BTFSS PORTB, 0x1                   535:       btfss		PORTB,1     ;Wait until data is available from the keypad
022F  2A2E     GOTO 0x22E                         536:       goto		$-1
                                                  537:   
0230  0E06     SWAPF PORTB, W                     538:       swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0231  390F     ANDLW 0xF                          539:       andlw		0x0F
0232  00B7     MOVWF 0x37                         540:       movwf       keytemp     ; Save which key was pressed
                                                  541:   
                                                  542:   check_log1
0233  3A00     XORLW 0x0                          543:       xorlw   0x0         ;will be all zeros if its 1
0234  1D03     BTFSS STATUS, 0x2                  544:       btfss   STATUS,Z    ;and Z will be high, so skip
0235  2A3B     GOTO 0x23B                         545:       goto    check_log2
0236  1283     BCF STATUS, 0x5                    546:       banksel EEADR
0237  1703     BSF STATUS, 0x6
0238  3000     MOVLW 0x0                          547:       movlf   d'0', EEADR
0239  008D     MOVWF PIR2
023A  2A97     GOTO 0x297                         548:       goto    display_log
                                                  549:   
                                                  550:   check_log2
023B  0837     MOVF 0x37, W                       551:       movf    keytemp, W
023C  3A01     XORLW 0x1                          552:       xorlw   0x1
023D  1D03     BTFSS STATUS, 0x2                  553:       btfss   STATUS,Z
023E  2A44     GOTO 0x244                         554:       goto    check_log3
023F  1283     BCF STATUS, 0x5                    555:       banksel EEADR
0240  1703     BSF STATUS, 0x6
0241  300E     MOVLW 0xE                          556:       movlf   d'14', EEADR
0242  008D     MOVWF PIR2
0243  2A97     GOTO 0x297                         557:       goto    display_log
                                                  558:   
                                                  559:   check_log3
0244  0837     MOVF 0x37, W                       560:       movf    keytemp, W
0245  3A02     XORLW 0x2                          561:       xorlw   0x2
0246  1D03     BTFSS STATUS, 0x2                  562:       btfss   STATUS,Z
0247  2A4D     GOTO 0x24D                         563:       goto    check_log4
0248  1283     BCF STATUS, 0x5                    564:       banksel EEADR
0249  1703     BSF STATUS, 0x6
024A  301C     MOVLW 0x1C                         565:       movlf   d'28', EEADR
024B  008D     MOVWF PIR2
024C  2A97     GOTO 0x297                         566:       goto    display_log
                                                  567:   
                                                  568:   check_log4
024D  0837     MOVF 0x37, W                       569:       movf    keytemp, W
024E  3A04     XORLW 0x4                          570:       xorlw   0x4
024F  1D03     BTFSS STATUS, 0x2                  571:       btfss   STATUS,Z
0250  2A56     GOTO 0x256                         572:       goto    check_log5
0251  1283     BCF STATUS, 0x5                    573:       banksel EEADR
0252  1703     BSF STATUS, 0x6
0253  302A     MOVLW 0x2A                         574:       movlf   d'42', EEADR
0254  008D     MOVWF PIR2
0255  2A97     GOTO 0x297                         575:       goto    display_log
                                                  576:   
                                                  577:   check_log5
0256  0837     MOVF 0x37, W                       578:       movf    keytemp, W
0257  3A05     XORLW 0x5                          579:       xorlw   0x5
0258  1D03     BTFSS STATUS, 0x2                  580:       btfss   STATUS,Z
0259  2A5F     GOTO 0x25F                         581:       goto    check_log6
025A  1283     BCF STATUS, 0x5                    582:       banksel EEADR
025B  1703     BSF STATUS, 0x6
025C  3038     MOVLW 0x38                         583:       movlf   d'56', EEADR
025D  008D     MOVWF PIR2
025E  2A97     GOTO 0x297                         584:       goto    display_log
                                                  585:   
                                                  586:   check_log6
025F  0837     MOVF 0x37, W                       587:       movf    keytemp, W
0260  3A06     XORLW 0x6                          588:       xorlw   0x6
0261  1D03     BTFSS STATUS, 0x2                  589:       btfss   STATUS,Z
0262  2A68     GOTO 0x268                         590:       goto    check_log7
0263  1283     BCF STATUS, 0x5                    591:       banksel EEADR
0264  1703     BSF STATUS, 0x6
0265  3046     MOVLW 0x46                         592:       movlf   d'70', EEADR
0266  008D     MOVWF PIR2
0267  2A97     GOTO 0x297                         593:       goto    display_log
                                                  594:   
                                                  595:   check_log7
0268  0837     MOVF 0x37, W                       596:       movf    keytemp, W
0269  3A08     XORLW 0x8                          597:       xorlw   0x8
026A  1D03     BTFSS STATUS, 0x2                  598:       btfss   STATUS,Z
026B  2A71     GOTO 0x271                         599:       goto    check_log8
026C  1283     BCF STATUS, 0x5                    600:       banksel EEADR
026D  1703     BSF STATUS, 0x6
026E  3054     MOVLW 0x54                         601:       movlf   d'84', EEADR
026F  008D     MOVWF PIR2
0270  2A97     GOTO 0x297                         602:       goto    display_log
                                                  603:   
                                                  604:   check_log8
0271  0837     MOVF 0x37, W                       605:       movf    keytemp, W
0272  3A09     XORLW 0x9                          606:       xorlw   0x9
0273  1D03     BTFSS STATUS, 0x2                  607:       btfss   STATUS,Z
0274  2A7A     GOTO 0x27A                         608:       goto    check_log9
0275  1283     BCF STATUS, 0x5                    609:       banksel EEADR
0276  1703     BSF STATUS, 0x6
0277  3062     MOVLW 0x62                         610:       movlf   d'98', EEADR
0278  008D     MOVWF PIR2
0279  2A97     GOTO 0x297                         611:       goto    display_log
                                                  612:   
                                                  613:   check_log9
027A  0837     MOVF 0x37, W                       614:       movf    keytemp, W
027B  3A0A     XORLW 0xA                          615:       xorlw   0xA
027C  1D03     BTFSS STATUS, 0x2                  616:       btfss   STATUS,Z
027D  2A83     GOTO 0x283                         617:       goto    check_done
027E  1283     BCF STATUS, 0x5                    618:       banksel EEADR
027F  1703     BSF STATUS, 0x6
0280  3070     MOVLW 0x70                         619:       movlf   d'112', EEADR
0281  008D     MOVWF PIR2
0282  2A97     GOTO 0x297                         620:       goto    display_log
                                                  621:   
                                                  622:   check_done
0283  0837     MOVF 0x37, W                       623:       movf    keytemp, W
0284  3A0D     XORLW 0xD                          624:       xorlw   0xD
0285  1D03     BTFSS STATUS, 0x2                  625:       btfss   STATUS,Z
0286  2A94     GOTO 0x294                         626:       goto    badkey
0287  2644     CALL 0x644                         627:       call    Clear_Display
0288  01B9     CLRF 0x39                          628:       Display Standby_Msg
0289  0103     CLRW
028A  0839     MOVF 0x39, W
028B  2005     CALL 0x5
028C  3A00     XORLW 0x0
028D  1903     BTFSC STATUS, 0x2
028E  2A92     GOTO 0x292
028F  2659     CALL 0x659
0290  0AB9     INCF 0x39, F
0291  2A8A     GOTO 0x28A
0292  2647     CALL 0x647                         629:       call    Switch_Lines
0293  2912     GOTO 0x112                         630:       goto    waiting
                                                  631:   
                                                  632:   badkey
0294  1886     BTFSC PORTB, 0x1                   633:       btfsc		PORTB,1     ;Wait until key is released
0295  2A94     GOTO 0x294                         634:       goto		$-1
0296  2A2E     GOTO 0x22E                         635:       goto        polling
                                                  636:   
                                                  637:   
                                                  638:   display_log                 ;start in bank2
                                                  639:       ; move EEPROM data back to "current" data
0297  1383     BCF STATUS, 0x7                    640:       bcf	STATUS, IRP
0298  3029     MOVLW 0x29                         641:       movlf   0x29, FSR
0299  0084     MOVWF FSR
                                                  642:   read_EEPROM
029A  1683     BSF STATUS, 0x5                    643:       banksel EECON1          ;bank3
029B  1703     BSF STATUS, 0x6
029C  138C     BCF PIR1, 0x7                      644:       bcf EECON1, EEPGD
029D  140C     BSF PIR1, 0x0                      645:       bsf EECON1, RD          ; read EEPROM
029E  1283     BCF STATUS, 0x5                    646:       banksel EEDATA          ;bank 2
029F  1703     BSF STATUS, 0x6
02A0  080C     MOVF PIR1, W                       647:       movff   EEDATA, INDF    ; move EEDATA to "current" data
02A1  0080     MOVWF INDF
02A2  0A84     INCF FSR, F                        648:       incf    FSR, F
02A3  0A8D     INCF PIR2, F                       649:       incf    EEADR, F
02A4  3037     MOVLW 0x37                         650:       movlw   0x37            ;done if FSR = 0x37
02A5  0204     SUBWF FSR, W                       651:       subwf   FSR, W
02A6  1D03     BTFSS STATUS, 0x2                  652:       btfss   STATUS, Z
02A7  2A9A     GOTO 0x29A                         653:       goto    read_EEPROM
                                                  654:   
                                                  655:       ;display that shit
02A8  1283     BCF STATUS, 0x5                    656:       banksel Table_Counter   ; bank0
02A9  1303     BCF STATUS, 0x6
02AA  2644     CALL 0x644                         657:       call    Clear_Display
                                                  658:       ;if first data is 0xFF (no log) just display "none"
02AB  30FF     MOVLW 0xFF                         659:       movlw   0xFF
02AC  0229     SUBWF 0x29, W                      660:       subwf   start_year10, W
02AD  1D03     BTFSS STATUS, 0x2                  661:       btfss   STATUS, Z
02AE  2ABB     GOTO 0x2BB                         662:       goto yes_log
                                                  663:   no_log
02AF  01B9     CLRF 0x39                          664:       Display None
02B0  0103     CLRW
02B1  0839     MOVF 0x39, W
02B2  2095     CALL 0x95
02B3  3A00     XORLW 0x0
02B4  1903     BTFSC STATUS, 0x2
02B5  2AB9     GOTO 0x2B9
02B6  2659     CALL 0x659
02B7  0AB9     INCF 0x39, F
02B8  2AB1     GOTO 0x2B1
02B9  260E     CALL 0x60E                         665:       call    HalfS
02BA  2A18     GOTO 0x218                         666:       goto    logs
                                                  667:       ;else display the log
                                                  668:   yes_log
02BB  01B9     CLRF 0x39                          669:       Display Op_at
02BC  0103     CLRW
02BD  0839     MOVF 0x39, W
02BE  20D8     CALL 0xD8
02BF  3A00     XORLW 0x0
02C0  1903     BTFSC STATUS, 0x2
02C1  2AC5     GOTO 0x2C5
02C2  2659     CALL 0x659
02C3  0AB9     INCF 0x39, F
02C4  2ABD     GOTO 0x2BD
02C5  2647     CALL 0x647                         670:       call    Switch_Lines
02C6  3032     MOVLW 0x32                         671:       writechar    "2"
02C7  2659     CALL 0x659
02C8  3030     MOVLW 0x30                         672:       writechar    "0"
02C9  2659     CALL 0x659
02CA  0829     MOVF 0x29, W                       673:       writeASC   start_year10
02CB  2659     CALL 0x659
02CC  082A     MOVF 0x2A, W                       674:       writeASC   start_year1
02CD  2659     CALL 0x659
02CE  302F     MOVLW 0x2F                         675:       writechar   "/"
02CF  2659     CALL 0x659
02D0  082B     MOVF 0x2B, W                       676:       writeASC   start_month10
02D1  2659     CALL 0x659
02D2  082C     MOVF 0x2C, W                       677:       writeASC   start_month1
02D3  2659     CALL 0x659
02D4  302F     MOVLW 0x2F                         678:       writechar   "/"
02D5  2659     CALL 0x659
02D6  082D     MOVF 0x2D, W                       679:       writeASC   start_date10
02D7  2659     CALL 0x659
02D8  082E     MOVF 0x2E, W                       680:       writeASC   start_date1
02D9  2659     CALL 0x659
02DA  3020     MOVLW 0x20                         681:       writechar   " "
02DB  2659     CALL 0x659
02DC  082F     MOVF 0x2F, W                       682:       writeASC   start_hour10
02DD  2659     CALL 0x659
02DE  0830     MOVF 0x30, W                       683:       writeASC   start_hour1
02DF  2659     CALL 0x659
02E0  303A     MOVLW 0x3A                         684:       writechar   ":"
02E1  2659     CALL 0x659
02E2  0831     MOVF 0x31, W                       685:       writeASC  start_min10
02E3  2659     CALL 0x659
02E4  0832     MOVF 0x32, W                       686:       writeASC   start_min1
02E5  2659     CALL 0x659
02E6  260E     CALL 0x60E                         687:       call    HalfS
02E7  260E     CALL 0x60E                         688:       call    HalfS
02E8  24B8     CALL 0x4B8                         689:       call    time
02E9  260E     CALL 0x60E                         690:       call    HalfS
02EA  260E     CALL 0x60E                         691:       call    HalfS
02EB  243C     CALL 0x43C                         692:       call    summary
02EC  260E     CALL 0x60E                         693:       call    HalfS
02ED  260E     CALL 0x60E                         694:       call    HalfS
                                                  695:       ;option to Export
02EE  2644     CALL 0x644                         696:       call    Clear_Display
02EF  01B9     CLRF 0x39                          697:       Display Logs_Msg3
02F0  0103     CLRW
02F1  0839     MOVF 0x39, W
02F2  20BF     CALL 0xBF
02F3  3A00     XORLW 0x0
02F4  1903     BTFSC STATUS, 0x2
02F5  2AF9     GOTO 0x2F9
02F6  2659     CALL 0x659
02F7  0AB9     INCF 0x39, F
02F8  2AF1     GOTO 0x2F1
02F9  2647     CALL 0x647                         698:       call    Switch_Lines
02FA  01B9     CLRF 0x39                          699:       Display Logs_Msg4
02FB  0103     CLRW
02FC  0839     MOVF 0x39, W
02FD  20C8     CALL 0xC8
02FE  3A00     XORLW 0x0
02FF  1903     BTFSC STATUS, 0x2
0300  2B04     GOTO 0x304
0301  2659     CALL 0x659
0302  0AB9     INCF 0x39, F
0303  2AFC     GOTO 0x2FC
                                                  700:   
                                                  701:   wanna_export
0304  1C86     BTFSS PORTB, 0x1                   702:       btfss		PORTB,1     ;Wait until data is available from the keypad
0305  2B04     GOTO 0x304                         703:       goto		$-1
                                                  704:   
0306  0E06     SWAPF PORTB, W                     705:       swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
0307  390F     ANDLW 0xF                          706:       andlw		0x0F
0308  00B7     MOVWF 0x37                         707:       movwf       keytemp     ; Save which key was pressed
                                                  708:   
                                                  709:   check_wanna
0309  0837     MOVF 0x37, W                       710:       movf    keytemp, W
030A  3A0F     XORLW 0xF                          711:       xorlw   0xF
030B  1D03     BTFSS STATUS, 0x2                  712:       btfss   STATUS,Z
030C  2B0F     GOTO 0x30F                         713:       goto    check_nothx
030D  24E0     CALL 0x4E0                         714:       call    export
030E  2A18     GOTO 0x218                         715:       goto    logs
                                                  716:   
                                                  717:   check_nothx
030F  0837     MOVF 0x37, W                       718:       movf    keytemp, W
0310  3A0E     XORLW 0xE                          719:       xorlw   0xE
0311  1D03     BTFSS STATUS, 0x2                  720:       btfss   STATUS,Z
0312  2B14     GOTO 0x314                         721:       goto    check_immapeace
0313  2A18     GOTO 0x218                         722:       goto    logs
                                                  723:   
                                                  724:   check_immapeace
0314  0837     MOVF 0x37, W                       725:       movf    keytemp, W
0315  3A0D     XORLW 0xD                          726:       xorlw   0xD
0316  1D03     BTFSS STATUS, 0x2                  727:       btfss   STATUS,Z
0317  2B25     GOTO 0x325                         728:       goto    badkeyagain
0318  2644     CALL 0x644                         729:       call    Clear_Display
0319  01B9     CLRF 0x39                          730:       Display Standby_Msg
031A  0103     CLRW
031B  0839     MOVF 0x39, W
031C  2005     CALL 0x5
031D  3A00     XORLW 0x0
031E  1903     BTFSC STATUS, 0x2
031F  2B23     GOTO 0x323
0320  2659     CALL 0x659
0321  0AB9     INCF 0x39, F
0322  2B1B     GOTO 0x31B
0323  2647     CALL 0x647                         731:       call    Switch_Lines
0324  2912     GOTO 0x112                         732:       goto    waiting
                                                  733:   
                                                  734:   badkeyagain
0325  1886     BTFSC PORTB, 0x1                   735:       btfsc		PORTB,1     ;Wait until key is released
0326  2B25     GOTO 0x325                         736:       goto		$-1
0327  2B04     GOTO 0x304                         737:       goto        wanna_export
                                                  738:   
                                                  739:   ; END OF MAIN PROGRAM
                                                  740:   ;------------------------------------------------------------
                                                  741:   
                                                  742:   ;***************************************
                                                  743:   ; ROTATE MOTOR ROUTINE
                                                  744:   ; Rotates motor approx 36deg. Alternates between 15 and 16 steps
                                                  745:   ; for average of 116.25deg per turn = 36.1 deg on actual thing
                                                  746:   ;***************************************
                                                  747:   
                                                  748:   ROTATEMOTOR        
0328  01CB     CLRF 0x4B                          749:       clrf    step_count
                                                  750:   
                                                  751:       ;go to the right starting step
0329  3001     MOVLW 0x1                          752:       movlw   d'1'
032A  024A     SUBWF 0x4A, W                      753:       subwf   start_step, W
032B  1903     BTFSC STATUS, 0x2                  754:       btfsc   STATUS,Z
032C  2B39     GOTO 0x339                         755:       goto    firststep
                                                  756:   
032D  3002     MOVLW 0x2                          757:       movlw   d'2'
032E  024A     SUBWF 0x4A, W                      758:       subwf   start_step, W
032F  1903     BTFSC STATUS, 0x2                  759:       btfsc   STATUS,Z
0330  2B46     GOTO 0x346                         760:       goto    secondstep
                                                  761:   
0331  3003     MOVLW 0x3                          762:       movlw   d'3'
0332  024A     SUBWF 0x4A, W                      763:       subwf   start_step, W
0333  1903     BTFSC STATUS, 0x2                  764:       btfsc   STATUS,Z
0334  2B53     GOTO 0x353                         765:       goto    thirdstep
                                                  766:   
0335  3004     MOVLW 0x4                          767:       movlw   d'4'
0336  024A     SUBWF 0x4A, W                      768:       subwf   start_step, W
0337  1903     BTFSC STATUS, 0x2                  769:       btfsc   STATUS,Z
0338  2B60     GOTO 0x360                         770:       goto    fourthstep
                                                  771:   
                                                  772:   four_steps
                                                  773:   
                                                  774:   firststep
0339  084C     MOVF 0x4C, W                       775:       movf    step_max, W
033A  024B     SUBWF 0x4B, W                      776:       subwf   step_count, W
033B  1D03     BTFSS STATUS, 0x2                  777:       btfss   STATUS, Z
033C  2B40     GOTO 0x340                         778:       goto    pulse1
033D  3001     MOVLW 0x1                          779:       movlf   d'1', start_step
033E  00CA     MOVWF 0x4A
033F  2B6E     GOTO 0x36E                         780:       goto    end_rotate
                                                  781:   pulse1
0340  3009     MOVLW 0x9                          782:       movlf   B'1001', PORTA
0341  0085     MOVWF PORTA
0342  261D     CALL 0x61D                         783:       call    delay5ms
0343  261D     CALL 0x61D                         784:       call    delay5ms
0344  260E     CALL 0x60E                         785:       call    HalfS
0345  0ACB     INCF 0x4B, F                       786:       incf    step_count, F
                                                  787:   
                                                  788:   secondstep
0346  084C     MOVF 0x4C, W                       789:       movf    step_max, W
0347  024B     SUBWF 0x4B, W                      790:       subwf   step_count, W
0348  1D03     BTFSS STATUS, 0x2                  791:       btfss   STATUS, Z
0349  2B4D     GOTO 0x34D                         792:       goto    pulse2
034A  3002     MOVLW 0x2                          793:       movlf   d'2', start_step
034B  00CA     MOVWF 0x4A
034C  2B6E     GOTO 0x36E                         794:       goto    end_rotate
                                                  795:   pulse2
034D  300A     MOVLW 0xA                          796:       movlf   B'1010', PORTA
034E  0085     MOVWF PORTA
034F  261D     CALL 0x61D                         797:       call    delay5ms
0350  261D     CALL 0x61D                         798:       call    delay5ms
0351  260E     CALL 0x60E                         799:       call    HalfS
0352  0ACB     INCF 0x4B, F                       800:       incf    step_count, F
                                                  801:   
                                                  802:   thirdstep
0353  084C     MOVF 0x4C, W                       803:       movf    step_max, W
0354  024B     SUBWF 0x4B, W                      804:       subwf   step_count, W
0355  1D03     BTFSS STATUS, 0x2                  805:       btfss   STATUS, Z
0356  2B5A     GOTO 0x35A                         806:       goto    pulse3
0357  3003     MOVLW 0x3                          807:       movlf   d'3', start_step
0358  00CA     MOVWF 0x4A
0359  2B6E     GOTO 0x36E                         808:       goto    end_rotate
                                                  809:   pulse3
035A  3006     MOVLW 0x6                          810:       movlf   B'0110', PORTA
035B  0085     MOVWF PORTA
035C  261D     CALL 0x61D                         811:       call    delay5ms
035D  261D     CALL 0x61D                         812:       call    delay5ms
035E  260E     CALL 0x60E                         813:       call    HalfS
035F  0ACB     INCF 0x4B, F                       814:       incf    step_count, F
                                                  815:   
                                                  816:   fourthstep
0360  084C     MOVF 0x4C, W                       817:       movf    step_max, W
0361  024B     SUBWF 0x4B, W                      818:       subwf   step_count, W
0362  1D03     BTFSS STATUS, 0x2                  819:       btfss   STATUS, Z
0363  2B67     GOTO 0x367                         820:       goto    pulse4
0364  3004     MOVLW 0x4                          821:       movlf   d'4', start_step
0365  00CA     MOVWF 0x4A
0366  2B6E     GOTO 0x36E                         822:       goto    end_rotate
                                                  823:   pulse4
0367  3005     MOVLW 0x5                          824:       movlf   B'0101', PORTA
0368  0085     MOVWF PORTA
0369  261D     CALL 0x61D                         825:       call    delay5ms
036A  261D     CALL 0x61D                         826:       call    delay5ms
036B  260E     CALL 0x60E                         827:       call    HalfS
036C  0ACB     INCF 0x4B, F                       828:       incf    step_count, F
                                                  829:   
036D  2B39     GOTO 0x339                         830:       goto    four_steps
                                                  831:   
                                                  832:   end_rotate
                                                  833:      ;if step_max is 15 incr, 16 dec
036E  3010     MOVLW 0x10                         834:       movlw    d'16'
036F  024C     SUBWF 0x4C, W                      835:       subwf   step_max, W
0370  1D03     BTFSS STATUS, 0x2                  836:       btfss   STATUS,Z
0371  2B74     GOTO 0x374                         837:       goto    must_inc
                                                  838:   must_dec
0372  03CC     DECF 0x4C, F                       839:       decf    step_max, F
0373  0008     RETURN                             840:       return
                                                  841:   must_inc
0374  0ACC     INCF 0x4C, F                       842:       incf     step_max, F
0375  0008     RETURN                             843:       return
                                                  844:   
                                                  845:   
                                                  846:   ;***************************************
                                                  847:   ; DATA DISPLAY ROUTINE
                                                  848:   ; Which key was pressed is stored in W (0000 for "1" to 1111 for "D")
                                                  849:   ; Determines which key it was and displays appropriate info / branch
                                                  850:   ;***************************************
                                                  851:   
                                                  852:   information
0376  00B7     MOVWF 0x37                         853:       movwf   keytemp             ; Save which key was pressed
                                                  854:   
                                                  855:   check_1
0377  3A00     XORLW 0x0                          856:       xorlw   0x0         ;will be all zeros if its 1
0378  1D03     BTFSS STATUS, 0x2                  857:       btfss   STATUS,Z    ;and Z will be high, so skip
0379  2B80     GOTO 0x380                         858:       goto    check_2
037A  2644     CALL 0x644                         859:       call    Clear_Display
037B  3031     MOVLW 0x31                         860:       writechar "1"
037C  2659     CALL 0x659
037D  0820     MOVF 0x20, W                       861:       movf    state1, W
037E  23FF     CALL 0x3FF                         862:       call    display_state
037F  0008     RETURN                             863:       return
                                                  864:   
                                                  865:   check_2
0380  0837     MOVF 0x37, W                       866:       movf    keytemp, W
0381  3A01     XORLW 0x1                          867:       xorlw   0x1
0382  1D03     BTFSS STATUS, 0x2                  868:       btfss   STATUS,Z
0383  2B8A     GOTO 0x38A                         869:       goto    check_3
0384  2644     CALL 0x644                         870:       call    Clear_Display
0385  3032     MOVLW 0x32                         871:       writechar "2"
0386  2659     CALL 0x659
0387  0821     MOVF 0x21, W                       872:       movf    state2, W
0388  23FF     CALL 0x3FF                         873:       call    display_state
0389  0008     RETURN                             874:       return
                                                  875:   
                                                  876:   check_3
038A  0837     MOVF 0x37, W                       877:       movf    keytemp, W
038B  3A02     XORLW 0x2                          878:       xorlw   0x2
038C  1D03     BTFSS STATUS, 0x2                  879:       btfss   STATUS,Z
038D  2B94     GOTO 0x394                         880:       goto    check_4
038E  2644     CALL 0x644                         881:       call    Clear_Display
038F  3033     MOVLW 0x33                         882:       writechar "3"
0390  2659     CALL 0x659
0391  0822     MOVF 0x22, W                       883:       movf    state3, W
0392  23FF     CALL 0x3FF                         884:       call    display_state
0393  0008     RETURN                             885:       return
                                                  886:   
                                                  887:   check_4
0394  0837     MOVF 0x37, W                       888:       movf    keytemp, W
0395  3A04     XORLW 0x4                          889:       xorlw   0x4
0396  1D03     BTFSS STATUS, 0x2                  890:       btfss   STATUS,Z
0397  2B9E     GOTO 0x39E                         891:       goto    check_5
0398  2644     CALL 0x644                         892:       call    Clear_Display
0399  3034     MOVLW 0x34                         893:       writechar "4"
039A  2659     CALL 0x659
039B  0823     MOVF 0x23, W                       894:       movf    state4, W
039C  23FF     CALL 0x3FF                         895:       call    display_state
039D  0008     RETURN                             896:       return
                                                  897:   
                                                  898:   check_5
039E  0837     MOVF 0x37, W                       899:       movf    keytemp, W
039F  3A05     XORLW 0x5                          900:       xorlw   0x5
03A0  1D03     BTFSS STATUS, 0x2                  901:       btfss   STATUS,Z
03A1  2BA8     GOTO 0x3A8                         902:       goto    check_6
03A2  2644     CALL 0x644                         903:       call    Clear_Display
03A3  3035     MOVLW 0x35                         904:       writechar "5"
03A4  2659     CALL 0x659
03A5  0824     MOVF 0x24, W                       905:       movf    state5, W
03A6  23FF     CALL 0x3FF                         906:       call    display_state
03A7  0008     RETURN                             907:       return
                                                  908:   
                                                  909:   check_6
03A8  0837     MOVF 0x37, W                       910:       movf    keytemp, W
03A9  3A06     XORLW 0x6                          911:       xorlw   0x6
03AA  1D03     BTFSS STATUS, 0x2                  912:       btfss   STATUS,Z
03AB  2BB2     GOTO 0x3B2                         913:       goto    check_7
03AC  2644     CALL 0x644                         914:       call    Clear_Display
03AD  3036     MOVLW 0x36                         915:       writechar "6"
03AE  2659     CALL 0x659
03AF  0825     MOVF 0x25, W                       916:       movf    state6, W
03B0  23FF     CALL 0x3FF                         917:       call    display_state
03B1  0008     RETURN                             918:       return
                                                  919:   
                                                  920:   check_7
03B2  0837     MOVF 0x37, W                       921:       movf    keytemp, W
03B3  3A08     XORLW 0x8                          922:       xorlw   0x8
03B4  1D03     BTFSS STATUS, 0x2                  923:       btfss   STATUS,Z
03B5  2BBC     GOTO 0x3BC                         924:       goto    check_8
03B6  2644     CALL 0x644                         925:       call    Clear_Display
03B7  3037     MOVLW 0x37                         926:       writechar "7"
03B8  2659     CALL 0x659
03B9  0826     MOVF 0x26, W                       927:       movf    state7, W
03BA  23FF     CALL 0x3FF                         928:       call    display_state
03BB  0008     RETURN                             929:       return
                                                  930:   
                                                  931:   check_8
03BC  0837     MOVF 0x37, W                       932:       movf    keytemp, W
03BD  3A09     XORLW 0x9                          933:       xorlw   0x9
03BE  1D03     BTFSS STATUS, 0x2                  934:       btfss   STATUS,Z
03BF  2BC6     GOTO 0x3C6                         935:       goto    check_9
03C0  2644     CALL 0x644                         936:       call    Clear_Display
03C1  3038     MOVLW 0x38                         937:       writechar "8"
03C2  2659     CALL 0x659
03C3  0827     MOVF 0x27, W                       938:       movf    state8, W
03C4  23FF     CALL 0x3FF                         939:       call    display_state
03C5  0008     RETURN                             940:       return
                                                  941:   
                                                  942:   check_9
03C6  0837     MOVF 0x37, W                       943:       movf    keytemp, W
03C7  3A0A     XORLW 0xA                          944:       xorlw   0xA
03C8  1D03     BTFSS STATUS, 0x2                  945:       btfss   STATUS,Z
03C9  2BD0     GOTO 0x3D0                         946:       goto    check_summary
03CA  2644     CALL 0x644                         947:       call    Clear_Display
03CB  3039     MOVLW 0x39                         948:       writechar "9"
03CC  2659     CALL 0x659
03CD  0828     MOVF 0x28, W                       949:       movf    state9, W
03CE  23FF     CALL 0x3FF                         950:       call    display_state
03CF  0008     RETURN                             951:       return
                                                  952:   
                                                  953:   check_summary
03D0  0837     MOVF 0x37, W                       954:       movf    keytemp, W
03D1  3A03     XORLW 0x3                          955:       xorlw   0x3
03D2  1D03     BTFSS STATUS, 0x2                  956:       btfss   STATUS,Z
03D3  2BD6     GOTO 0x3D6                         957:       goto    check_defective
03D4  243C     CALL 0x43C                         958:       call    summary
03D5  0008     RETURN                             959:       return
                                                  960:   
                                                  961:   check_defective
03D6  0837     MOVF 0x37, W                       962:       movf    keytemp, W
03D7  3A07     XORLW 0x7                          963:       xorlw   0x7
03D8  1D03     BTFSS STATUS, 0x2                  964:       btfss   STATUS,Z
03D9  2BDC     GOTO 0x3DC                         965:       goto    check_time
03DA  246A     CALL 0x46A                         966:       call    defective
03DB  0008     RETURN                             967:       return
                                                  968:   
                                                  969:   check_time
03DC  0837     MOVF 0x37, W                       970:       movf    keytemp, W
03DD  3A0B     XORLW 0xB                          971:       xorlw   0xB
03DE  1D03     BTFSS STATUS, 0x2                  972:       btfss   STATUS,Z
03DF  2BE2     GOTO 0x3E2                         973:       goto    check_export
03E0  24B8     CALL 0x4B8                         974:       call    time
03E1  0008     RETURN                             975:       return
                                                  976:   
                                                  977:   check_export
03E2  0837     MOVF 0x37, W                       978:       movf    keytemp, W
03E3  3A0F     XORLW 0xF                          979:       xorlw   0xF
03E4  1D03     BTFSS STATUS, 0x2                  980:       btfss   STATUS,Z
03E5  2BE8     GOTO 0x3E8                         981:       goto    check_standby       ;or do you wanna allow to check logs?
03E6  24E0     CALL 0x4E0                         982:       call    export
03E7  0008     RETURN                             983:       return
                                                  984:   
                                                  985:   ;check_logs
                                                  986:   ;    movf    keytemp, W
                                                  987:   ;    xorlw   0xE
                                                  988:   ;    btfss   STATUS,Z
                                                  989:   ;    goto    check_standby
                                                  990:   ;    goto    logs
                                                  991:   
                                                  992:   check_standby
03E8  0837     MOVF 0x37, W                       993:       movf    keytemp, W
03E9  3A0D     XORLW 0xD                          994:       xorlw   0xD
03EA  1D03     BTFSS STATUS, 0x2                  995:       btfss   STATUS,Z
03EB  2BF9     GOTO 0x3F9                         996:       goto    check_start
03EC  2644     CALL 0x644                         997:       call    Clear_Display
03ED  01B9     CLRF 0x39                          998:       Display Standby_Msg
03EE  0103     CLRW
03EF  0839     MOVF 0x39, W
03F0  2005     CALL 0x5
03F1  3A00     XORLW 0x0
03F2  1903     BTFSC STATUS, 0x2
03F3  2BF7     GOTO 0x3F7
03F4  2659     CALL 0x659
03F5  0AB9     INCF 0x39, F
03F6  2BEF     GOTO 0x3EF
03F7  2647     CALL 0x647                         999:       call    Switch_Lines
03F8  2912     GOTO 0x112                         1000:      goto    waiting
                                                  1001:  
                                                  1002:  check_start
03F9  0837     MOVF 0x37, W                       1003:      movf    keytemp, W
03FA  3A0C     XORLW 0xC                          1004:      xorlw   0xC
03FB  1D03     BTFSS STATUS, 0x2                  1005:      btfss   STATUS,Z
03FC  2BFE     GOTO 0x3FE                         1006:      goto    default_key
03FD  297A     GOTO 0x17A                         1007:      goto    start
                                                  1008:  
                                                  1009:  default_key         ; may never get here
03FE  0008     RETURN                             1010:      return
                                                  1011:  
                                                  1012:  ;Display state subroutine
                                                  1013:  ;stateN is in W
                                                  1014:  display_state
03FF  00B8     MOVWF 0x38                         1015:      movwf  statetemp    ; save stateN
                                                  1016:  
                                                  1017:  check_none
0400  3A00     XORLW 0x0                          1018:      xorlw   0x0
0401  1D03     BTFSS STATUS, 0x2                  1019:      btfss   STATUS,Z
0402  2C0E     GOTO 0x40E                         1020:      goto    check_pass
0403  01B9     CLRF 0x39                          1021:      Display Not_present
0404  0103     CLRW
0405  0839     MOVF 0x39, W
0406  2045     CALL 0x45
0407  3A00     XORLW 0x0
0408  1903     BTFSC STATUS, 0x2
0409  2C0D     GOTO 0x40D
040A  2659     CALL 0x659
040B  0AB9     INCF 0x39, F
040C  2C05     GOTO 0x405
040D  0008     RETURN                             1022:      return
                                                  1023:  
                                                  1024:  check_pass
040E  0838     MOVF 0x38, W                       1025:      movf    statetemp, W
040F  3A01     XORLW 0x1                          1026:      xorlw   0x1
0410  1D03     BTFSS STATUS, 0x2                  1027:      btfss   STATUS,Z
0411  2C1D     GOTO 0x41D                         1028:      goto    check_LED
0412  01B9     CLRF 0x39                          1029:      Display Pass
0413  0103     CLRW
0414  0839     MOVF 0x39, W
0415  2054     CALL 0x54
0416  3A00     XORLW 0x0
0417  1903     BTFSC STATUS, 0x2
0418  2C1C     GOTO 0x41C
0419  2659     CALL 0x659
041A  0AB9     INCF 0x39, F
041B  2C14     GOTO 0x414
041C  0008     RETURN                             1030:      return
                                                  1031:  
                                                  1032:  check_LED
041D  0838     MOVF 0x38, W                       1033:      movf    statetemp, W
041E  3A02     XORLW 0x2                          1034:      xorlw   0x2
041F  1D03     BTFSS STATUS, 0x2                  1035:      btfss   STATUS,Z
0420  2C2C     GOTO 0x42C                         1036:      goto    check_flick
0421  01B9     CLRF 0x39                          1037:      Display LED_fail
0422  0103     CLRW
0423  0839     MOVF 0x39, W
0424  205C     CALL 0x5C
0425  3A00     XORLW 0x0
0426  1903     BTFSC STATUS, 0x2
0427  2C2B     GOTO 0x42B
0428  2659     CALL 0x659
0429  0AB9     INCF 0x39, F
042A  2C23     GOTO 0x423
042B  0008     RETURN                             1038:      return
                                                  1039:  
                                                  1040:  check_flick
042C  0838     MOVF 0x38, W                       1041:      movf    statetemp, W
042D  3A03     XORLW 0x3                          1042:      xorlw   0x3
042E  1D03     BTFSS STATUS, 0x2                  1043:      btfss   STATUS,Z
042F  2C3B     GOTO 0x43B                         1044:      goto    default_state
0430  01B9     CLRF 0x39                          1045:      Display Flick_fail
0431  0103     CLRW
0432  0839     MOVF 0x39, W
0433  2068     CALL 0x68
0434  3A00     XORLW 0x0
0435  1903     BTFSC STATUS, 0x2
0436  2C3A     GOTO 0x43A
0437  2659     CALL 0x659
0438  0AB9     INCF 0x39, F
0439  2C32     GOTO 0x432
043A  0008     RETURN                             1046:      return
                                                  1047:  
                                                  1048:  default_state   ; should never get here
043B  0008     RETURN                             1049:      return
                                                  1050:  
                                                  1051:  ; Summary Subroutine
                                                  1052:  ; Displays total number of candles and number of defective candles
                                                  1053:  ; Reads data from num_tot, num_LF, num_FF
                                                  1054:  summary
043C  2644     CALL 0x644                         1055:      call            Clear_Display
043D  01B9     CLRF 0x39                          1056:      Display         Total_Msg
043E  0103     CLRW
043F  0839     MOVF 0x39, W
0440  2078     CALL 0x78
0441  3A00     XORLW 0x0
0442  1903     BTFSC STATUS, 0x2
0443  2C47     GOTO 0x447
0444  2659     CALL 0x659
0445  0AB9     INCF 0x39, F
0446  2C3F     GOTO 0x43F
0447  0834     MOVF 0x34, W                       1057:      writeBCD        num_tot
0448  3E30     ADDLW 0x30
0449  2659     CALL 0x659
044A  2647     CALL 0x647                         1058:      call            Switch_Lines
044B  01B9     CLRF 0x39                          1059:      Display         LF
044C  0103     CLRW
044D  0839     MOVF 0x39, W
044E  2089     CALL 0x89
044F  3A00     XORLW 0x0
0450  1903     BTFSC STATUS, 0x2
0451  2C55     GOTO 0x455
0452  2659     CALL 0x659
0453  0AB9     INCF 0x39, F
0454  2C4D     GOTO 0x44D
0455  0835     MOVF 0x35, W                       1060:      writeBCD        num_LF
0456  3E30     ADDLW 0x30
0457  2659     CALL 0x659
0458  3014     MOVLW 0x14                         1061:      spacebar
0459  264A     CALL 0x64A
045A  3014     MOVLW 0x14                         1062:      spacebar
045B  264A     CALL 0x64A
045C  01B9     CLRF 0x39                          1063:      Display         FF
045D  0103     CLRW
045E  0839     MOVF 0x39, W
045F  208F     CALL 0x8F
0460  3A00     XORLW 0x0
0461  1903     BTFSC STATUS, 0x2
0462  2C66     GOTO 0x466
0463  2659     CALL 0x659
0464  0AB9     INCF 0x39, F
0465  2C5E     GOTO 0x45E
0466  0836     MOVF 0x36, W                       1064:      writeBCD        num_FF
0467  3E30     ADDLW 0x30
0468  2659     CALL 0x659
0469  0008     RETURN                             1065:      return
                                                  1066:  
                                                  1067:  ; Defective candles Subroutine
                                                  1068:  ; Displays index of each defective candle (LF or FF)
                                                  1069:  ; Reads data from state1 - state9
                                                  1070:  defective
046A  2644     CALL 0x644                         1071:      call            Clear_Display
                                                  1072:  
046B  01B9     CLRF 0x39                          1073:      Display         LF              ; first look at LF
046C  0103     CLRW
046D  0839     MOVF 0x39, W
046E  2089     CALL 0x89
046F  3A00     XORLW 0x0
0470  1903     BTFSC STATUS, 0x2
0471  2C75     GOTO 0x475
0472  2659     CALL 0x659
0473  0AB9     INCF 0x39, F
0474  2C6D     GOTO 0x46D
0475  08B5     MOVF 0x35, F                       1074:      movf            num_LF, F
0476  1D03     BTFSS STATUS, 0x2                  1075:      btfss           STATUS,Z         ;if none LF, just say "none"
0477  2C83     GOTO 0x483                         1076:      goto            check_LF
0478  01B9     CLRF 0x39                          1077:      Display         None
0479  0103     CLRW
047A  0839     MOVF 0x39, W
047B  2095     CALL 0x95
047C  3A00     XORLW 0x0
047D  1903     BTFSC STATUS, 0x2
047E  2C82     GOTO 0x482
047F  2659     CALL 0x659
0480  0AB9     INCF 0x39, F
0481  2C7A     GOTO 0x47A
0482  2C85     GOTO 0x485                         1078:      goto            now_FF
                                                  1079:  
                                                  1080:  check_LF                            ; list all LF candles
0483  3002     MOVLW 0x2                          1081:      movlw           B'00000010'
0484  24A1     CALL 0x4A1                         1082:      call            check_for_fail
                                                  1083:  
                                                  1084:  now_FF                              ; now look at FF
0485  2647     CALL 0x647                         1085:      call            Switch_Lines
0486  01B9     CLRF 0x39                          1086:      Display         FF
0487  0103     CLRW
0488  0839     MOVF 0x39, W
0489  208F     CALL 0x8F
048A  3A00     XORLW 0x0
048B  1903     BTFSC STATUS, 0x2
048C  2C90     GOTO 0x490
048D  2659     CALL 0x659
048E  0AB9     INCF 0x39, F
048F  2C88     GOTO 0x488
0490  08B6     MOVF 0x36, F                       1087:      movf            num_FF, F
0491  1D03     BTFSS STATUS, 0x2                  1088:      btfss           STATUS,Z         ;if none FF, just say "none"
0492  2C9E     GOTO 0x49E                         1089:      goto            check_FF
0493  01B9     CLRF 0x39                          1090:      Display         None
0494  0103     CLRW
0495  0839     MOVF 0x39, W
0496  2095     CALL 0x95
0497  3A00     XORLW 0x0
0498  1903     BTFSC STATUS, 0x2
0499  2C9D     GOTO 0x49D
049A  2659     CALL 0x659
049B  0AB9     INCF 0x39, F
049C  2C95     GOTO 0x495
049D  0008     RETURN                             1091:      return
                                                  1092:  
                                                  1093:  check_FF                            ; list all FF candles
049E  3003     MOVLW 0x3                          1094:      movlw           B'00000011'
049F  24A1     CALL 0x4A1                         1095:      call            check_for_fail
04A0  0008     RETURN                             1096:      return
                                                  1097:  
                                                  1098:  check_for_fail  ;lists all candles that have status currently in W "stateX"
04A1  00B8     MOVWF 0x38                         1099:      movwf   statetemp
04A2  3000     MOVLW 0x0                          1100:  	movlf	D'0', candle_index
04A3  00C7     MOVWF 0x47
04A4  1383     BCF STATUS, 0x7                    1101:  	bcf	STATUS, IRP
04A5  301F     MOVLW 0x1F                         1102:  	movlf	0x1F, FSR           ;index of right before state1
04A6  0084     MOVWF FSR
                                                  1103:  check_next
04A7  3009     MOVLW 0x9                          1104:  	movlw	D'9'                ;exit loop if at 9
04A8  0247     SUBWF 0x47, W                      1105:  	subwf	candle_index, W
04A9  1803     BTFSC STATUS, 0x0                  1106:  	btfsc	STATUS,W
04AA  2CB7     GOTO 0x4B7                         1107:  	goto	end_check_fail
04AB  0A84     INCF FSR, F                        1108:  	incf	FSR,F               ; increment
04AC  0AC7     INCF 0x47, F                       1109:  	incf	candle_index,F
04AD  0838     MOVF 0x38, W                       1110:  	movf	statetemp, W		;see if stateN = stateX
04AE  0200     SUBWF INDF, W                      1111:  	subwf	INDF, W
04AF  1D03     BTFSS STATUS, 0x2                  1112:  	btfss	STATUS, Z
04B0  2CA7     GOTO 0x4A7                         1113:  	goto	check_next		;if not, go to next
04B1  0847     MOVF 0x47, W                       1114:  	writeBCD	candle_index	;if so, write down the number
04B2  3E30     ADDLW 0x30
04B3  2659     CALL 0x659
04B4  3014     MOVLW 0x14                         1115:  	spacebar
04B5  264A     CALL 0x64A
04B6  2CA7     GOTO 0x4A7                         1116:  	goto check_next
                                                  1117:  end_check_fail
04B7  0008     RETURN                             1118:  	return
                                                  1119:  
                                                  1120:  ; Time subroutine
                                                  1121:  ; Right now this takes the time in seconds as a binary number in op_time
                                                  1122:  ; and puts it into huns,tens,ones to display. It assumes op_time was getting
                                                  1123:  ; incremented every second. However I may just take the stop time - start time
                                                  1124:  ; from the RTC data so this might change a lot.
                                                  1125:  time
04B8  2644     CALL 0x644                         1126:      call    Clear_Display
04B9  01B9     CLRF 0x39                          1127:      Display Time_Msg
04BA  0103     CLRW
04BB  0839     MOVF 0x39, W
04BC  202A     CALL 0x2A
04BD  3A00     XORLW 0x0
04BE  1903     BTFSC STATUS, 0x2
04BF  2CC3     GOTO 0x4C3
04C0  2659     CALL 0x659
04C1  0AB9     INCF 0x39, F
04C2  2CBB     GOTO 0x4BB
04C3  2647     CALL 0x647                         1128:      call    Switch_Lines
04C4  0833     MOVF 0x33, W                       1129:      movf    op_time, W
04C5  25DB     CALL 0x5DB                         1130:      call    big_number
04C6  08C2     MOVF 0x42, F                       1131:      movf    huns, F
04C7  1903     BTFSC STATUS, 0x2                  1132:      btfsc   STATUS,Z        ;if huns is zero don't display it
04C8  2CCC     GOTO 0x4CC                         1133:      goto    no_huns
04C9  0842     MOVF 0x42, W                       1134:      writeBCD    huns
04CA  3E30     ADDLW 0x30
04CB  2659     CALL 0x659
                                                  1135:  no_huns
04CC  08C3     MOVF 0x43, F                       1136:      movf    tens, F
04CD  1903     BTFSC STATUS, 0x2                  1137:      btfsc   STATUS,Z        ;if tens is zero don't display it
04CE  2CD2     GOTO 0x4D2                         1138:      goto    no_tens
04CF  0843     MOVF 0x43, W                       1139:      writeBCD    tens
04D0  3E30     ADDLW 0x30
04D1  2659     CALL 0x659
                                                  1140:  no_tens
04D2  0844     MOVF 0x44, W                       1141:      writeBCD    ones
04D3  3E30     ADDLW 0x30
04D4  2659     CALL 0x659
04D5  01B9     CLRF 0x39                          1142:      Display Seconds
04D6  0103     CLRW
04D7  0839     MOVF 0x39, W
04D8  203B     CALL 0x3B
04D9  3A00     XORLW 0x0
04DA  1903     BTFSC STATUS, 0x2
04DB  2CDF     GOTO 0x4DF
04DC  2659     CALL 0x659
04DD  0AB9     INCF 0x39, F
04DE  2CD7     GOTO 0x4D7
04DF  0008     RETURN                             1143:      return
                                                  1144:  
                                                  1145:  ; Export subroutine
                                                  1146:  ; Exports data from current run to hyperterminal
                                                  1147:  ; reads start time and num_tot/num_ff/num_lf data
                                                  1148:  export
04E0  3007     MOVLW 0x7                          1149:      printchar   0x7       ;makes a noise on the PC
04E1  2674     CALL 0x674
04E2  300D     MOVLW 0xD                          1150:      printchar   0xD       ;go back to left edge
04E3  2674     CALL 0x674
04E4  3054     MOVLW 0x54                         1151:      printchar   "T"
04E5  2674     CALL 0x674
04E6  3065     MOVLW 0x65                         1152:      printchar   "e"
04E7  2674     CALL 0x674
04E8  3073     MOVLW 0x73                         1153:      printchar   "s"
04E9  2674     CALL 0x674
04EA  3074     MOVLW 0x74                         1154:      printchar   "t"
04EB  2674     CALL 0x674
04EC  3020     MOVLW 0x20                         1155:      printchar   " "
04ED  2674     CALL 0x674
04EE  3061     MOVLW 0x61                         1156:      printchar   "a"
04EF  2674     CALL 0x674
04F0  3074     MOVLW 0x74                         1157:      printchar   "t"
04F1  2674     CALL 0x674
04F2  303A     MOVLW 0x3A                         1158:      printchar   ":"
04F3  2674     CALL 0x674
04F4  3020     MOVLW 0x20                         1159:      printchar   " "
04F5  2674     CALL 0x674
04F6  3032     MOVLW 0x32                         1160:      printchar   "2"
04F7  2674     CALL 0x674
04F8  3030     MOVLW 0x30                         1161:      printchar   "0"
04F9  2674     CALL 0x674
04FA  1283     BCF STATUS, 0x5                    1162:      printASC   start_year10
04FB  1303     BCF STATUS, 0x6
04FC  0829     MOVF 0x29, W
04FD  2674     CALL 0x674
04FE  1283     BCF STATUS, 0x5                    1163:      printASC   start_year1
04FF  1303     BCF STATUS, 0x6
0500  082A     MOVF 0x2A, W
0501  2674     CALL 0x674
0502  302F     MOVLW 0x2F                         1164:      printchar   "/"
0503  2674     CALL 0x674
0504  1283     BCF STATUS, 0x5                    1165:      printASC   start_month10
0505  1303     BCF STATUS, 0x6
0506  082B     MOVF 0x2B, W
0507  2674     CALL 0x674
0508  1283     BCF STATUS, 0x5                    1166:      printASC   start_month1
0509  1303     BCF STATUS, 0x6
050A  082C     MOVF 0x2C, W
050B  2674     CALL 0x674
050C  302F     MOVLW 0x2F                         1167:      printchar   "/"
050D  2674     CALL 0x674
050E  1283     BCF STATUS, 0x5                    1168:      printASC   start_date10
050F  1303     BCF STATUS, 0x6
0510  082D     MOVF 0x2D, W
0511  2674     CALL 0x674
0512  1283     BCF STATUS, 0x5                    1169:      printASC   start_date1
0513  1303     BCF STATUS, 0x6
0514  082E     MOVF 0x2E, W
0515  2674     CALL 0x674
0516  3020     MOVLW 0x20                         1170:      printchar   " "
0517  2674     CALL 0x674
0518  1283     BCF STATUS, 0x5                    1171:      printASC   start_hour10
0519  1303     BCF STATUS, 0x6
051A  082F     MOVF 0x2F, W
051B  2674     CALL 0x674
051C  1283     BCF STATUS, 0x5                    1172:      printASC   start_hour1
051D  1303     BCF STATUS, 0x6
051E  0830     MOVF 0x30, W
051F  2674     CALL 0x674
0520  303A     MOVLW 0x3A                         1173:      printchar   ":"
0521  2674     CALL 0x674
0522  1283     BCF STATUS, 0x5                    1174:      printASC   start_min10
0523  1303     BCF STATUS, 0x6
0524  0831     MOVF 0x31, W
0525  2674     CALL 0x674
0526  1283     BCF STATUS, 0x5                    1175:      printASC   start_min1
0527  1303     BCF STATUS, 0x6
0528  0832     MOVF 0x32, W
0529  2674     CALL 0x674
052A  300A     MOVLW 0xA                          1176:      newline
052B  2674     CALL 0x674
052C  300D     MOVLW 0xD
052D  2674     CALL 0x674
052E  3054     MOVLW 0x54                         1177:      printchar   "T"
052F  2674     CALL 0x674
0530  3069     MOVLW 0x69                         1178:      printchar   "i"
0531  2674     CALL 0x674
0532  306D     MOVLW 0x6D                         1179:      printchar   "m"
0533  2674     CALL 0x674
0534  3065     MOVLW 0x65                         1180:      printchar   "e"
0535  2674     CALL 0x674
0536  303A     MOVLW 0x3A                         1181:      printchar   ":"
0537  2674     CALL 0x674
0538  3020     MOVLW 0x20                         1182:      printchar   " "
0539  2674     CALL 0x674
053A  3020     MOVLW 0x20                         1183:      printchar   " "
053B  2674     CALL 0x674
053C  3020     MOVLW 0x20                         1184:      printchar   " "
053D  2674     CALL 0x674
053E  3020     MOVLW 0x20                         1185:      printchar   " "
053F  2674     CALL 0x674
0540  1283     BCF STATUS, 0x5                    1186:      banksel huns
0541  1303     BCF STATUS, 0x6
0542  08C2     MOVF 0x42, F                       1187:      movf    huns, F
0543  1903     BTFSC STATUS, 0x2                  1188:      btfsc   STATUS,Z        ;if huns is zero don't display it
0544  2D4A     GOTO 0x54A                         1189:      goto    nohuns
0545  1283     BCF STATUS, 0x5                    1190:      printBCD   huns
0546  1303     BCF STATUS, 0x6
0547  0842     MOVF 0x42, W
0548  3E30     ADDLW 0x30
0549  2674     CALL 0x674
                                                  1191:  nohuns
054A  1283     BCF STATUS, 0x5                    1192:      banksel tens
054B  1303     BCF STATUS, 0x6
054C  08C3     MOVF 0x43, F                       1193:      movf    tens, F
054D  1903     BTFSC STATUS, 0x2                  1194:      btfsc   STATUS,Z        ;if tens is zero don't display it
054E  2D54     GOTO 0x554                         1195:      goto    notens
054F  1283     BCF STATUS, 0x5                    1196:      printBCD   tens
0550  1303     BCF STATUS, 0x6
0551  0843     MOVF 0x43, W
0552  3E30     ADDLW 0x30
0553  2674     CALL 0x674
                                                  1197:  notens
0554  1283     BCF STATUS, 0x5                    1198:      printBCD   ones
0555  1303     BCF STATUS, 0x6
0556  0844     MOVF 0x44, W
0557  3E30     ADDLW 0x30
0558  2674     CALL 0x674
0559  3020     MOVLW 0x20                         1199:      printchar   " "
055A  2674     CALL 0x674
055B  3073     MOVLW 0x73                         1200:      printchar   "s"
055C  2674     CALL 0x674
055D  3065     MOVLW 0x65                         1201:      printchar   "e"
055E  2674     CALL 0x674
055F  3063     MOVLW 0x63                         1202:      printchar   "c"
0560  2674     CALL 0x674
0561  300A     MOVLW 0xA                          1203:      newline
0562  2674     CALL 0x674
0563  300D     MOVLW 0xD
0564  2674     CALL 0x674
0565  3043     MOVLW 0x43                         1204:      printchar   "C"
0566  2674     CALL 0x674
0567  3061     MOVLW 0x61                         1205:      printchar   "a"
0568  2674     CALL 0x674
0569  306E     MOVLW 0x6E                         1206:      printchar   "n"
056A  2674     CALL 0x674
056B  3064     MOVLW 0x64                         1207:      printchar   "d"
056C  2674     CALL 0x674
056D  306C     MOVLW 0x6C                         1208:      printchar   "l"
056E  2674     CALL 0x674
056F  3065     MOVLW 0x65                         1209:      printchar   "e"
0570  2674     CALL 0x674
0571  3073     MOVLW 0x73                         1210:      printchar   "s"
0572  2674     CALL 0x674
0573  303A     MOVLW 0x3A                         1211:      printchar   ":"
0574  2674     CALL 0x674
0575  3020     MOVLW 0x20                         1212:      printchar   " "
0576  2674     CALL 0x674
0577  3020     MOVLW 0x20                         1213:      printchar   " "
0578  2674     CALL 0x674
0579  3020     MOVLW 0x20                         1214:      printchar   " "
057A  2674     CALL 0x674
057B  3020     MOVLW 0x20                         1215:      printchar   " "
057C  2674     CALL 0x674
057D  3020     MOVLW 0x20                         1216:      printchar   " "
057E  2674     CALL 0x674
057F  3020     MOVLW 0x20                         1217:      printchar   " "
0580  2674     CALL 0x674
0581  1283     BCF STATUS, 0x5                    1218:      printBCD    num_tot
0582  1303     BCF STATUS, 0x6
0583  0834     MOVF 0x34, W
0584  3E30     ADDLW 0x30
0585  2674     CALL 0x674
0586  300A     MOVLW 0xA                          1219:      newline
0587  2674     CALL 0x674
0588  300D     MOVLW 0xD
0589  2674     CALL 0x674
058A  304C     MOVLW 0x4C                         1220:      printchar   "L"
058B  2674     CALL 0x674
058C  3045     MOVLW 0x45                         1221:      printchar   "E"
058D  2674     CALL 0x674
058E  3044     MOVLW 0x44                         1222:      printchar   "D"
058F  2674     CALL 0x674
0590  3020     MOVLW 0x20                         1223:      printchar   " "
0591  2674     CALL 0x674
0592  3066     MOVLW 0x66                         1224:      printchar   "f"
0593  2674     CALL 0x674
0594  3061     MOVLW 0x61                         1225:      printchar   "a"
0595  2674     CALL 0x674
0596  3069     MOVLW 0x69                         1226:      printchar   "i"
0597  2674     CALL 0x674
0598  306C     MOVLW 0x6C                         1227:      printchar   "l"
0599  2674     CALL 0x674
059A  303A     MOVLW 0x3A                         1228:      printchar   ":"
059B  2674     CALL 0x674
059C  3020     MOVLW 0x20                         1229:      printchar   " "
059D  2674     CALL 0x674
059E  3020     MOVLW 0x20                         1230:      printchar   " "
059F  2674     CALL 0x674
05A0  3020     MOVLW 0x20                         1231:      printchar   " "
05A1  2674     CALL 0x674
05A2  3020     MOVLW 0x20                         1232:      printchar   " "
05A3  2674     CALL 0x674
05A4  3020     MOVLW 0x20                         1233:      printchar   " "
05A5  2674     CALL 0x674
05A6  1283     BCF STATUS, 0x5                    1234:      printBCD    num_LF
05A7  1303     BCF STATUS, 0x6
05A8  0835     MOVF 0x35, W
05A9  3E30     ADDLW 0x30
05AA  2674     CALL 0x674
05AB  300A     MOVLW 0xA                          1235:      newline
05AC  2674     CALL 0x674
05AD  300D     MOVLW 0xD
05AE  2674     CALL 0x674
05AF  3046     MOVLW 0x46                         1236:      printchar   "F"
05B0  2674     CALL 0x674
05B1  306C     MOVLW 0x6C                         1237:      printchar   "l"
05B2  2674     CALL 0x674
05B3  3069     MOVLW 0x69                         1238:      printchar   "i"
05B4  2674     CALL 0x674
05B5  3063     MOVLW 0x63                         1239:      printchar   "c"
05B6  2674     CALL 0x674
05B7  306B     MOVLW 0x6B                         1240:      printchar   "k"
05B8  2674     CALL 0x674
05B9  3065     MOVLW 0x65                         1241:      printchar   "e"
05BA  2674     CALL 0x674
05BB  3072     MOVLW 0x72                         1242:      printchar   "r"
05BC  2674     CALL 0x674
05BD  3020     MOVLW 0x20                         1243:      printchar   " "
05BE  2674     CALL 0x674
05BF  3066     MOVLW 0x66                         1244:      printchar   "f"
05C0  2674     CALL 0x674
05C1  3061     MOVLW 0x61                         1245:      printchar   "a"
05C2  2674     CALL 0x674
05C3  3069     MOVLW 0x69                         1246:      printchar   "i"
05C4  2674     CALL 0x674
05C5  306C     MOVLW 0x6C                         1247:      printchar   "l"
05C6  2674     CALL 0x674
05C7  303A     MOVLW 0x3A                         1248:      printchar   ":"
05C8  2674     CALL 0x674
05C9  3020     MOVLW 0x20                         1249:      printchar   " "
05CA  2674     CALL 0x674
05CB  1283     BCF STATUS, 0x5                    1250:      printBCD    num_FF
05CC  1303     BCF STATUS, 0x6
05CD  0836     MOVF 0x36, W
05CE  3E30     ADDLW 0x30
05CF  2674     CALL 0x674
05D0  300A     MOVLW 0xA                          1251:      newline
05D1  2674     CALL 0x674
05D2  300D     MOVLW 0xD
05D3  2674     CALL 0x674
05D4  300A     MOVLW 0xA                          1252:      newline
05D5  2674     CALL 0x674
05D6  300D     MOVLW 0xD
05D7  2674     CALL 0x674
05D8  1283     BCF STATUS, 0x5                    1253:      bcf STATUS,RP0
05D9  1303     BCF STATUS, 0x6                    1254:      bcf STATUS,RP1     ; back to bank 0
05DA  0008     RETURN                             1255:      return
                                                  1256:  
                                                  1257:  
                                                  1258:  ;***************************************
                                                  1259:  ; GENERAL PURPOSE SUBROUTINES
                                                  1260:  ;***************************************
                                                  1261:  
                                                  1262:  ; DISPLAY BIG NUMBER SUBROUTINE
                                                  1263:  ; Modified from http://www.piclist.com/techref/microchip/math/radix/b2a-8b3d-ab.htm
                                                  1264:  ; Converts 8-bit binary number op_time to three BCDs representing huns, tens, ones
                                                  1265:  ; Uses "shift and add 3" algorithm
                                                  1266:  big_number
05DB  0833     MOVF 0x33, W                       1267:      movff   op_time, op_time_save         ;save the original op_time
05DC  00C1     MOVWF 0x41
05DD  3008     MOVLW 0x8                          1268:      movlf   8, bignumcount                ;will shift 8 times
05DE  00C5     MOVWF 0x45
05DF  01C2     CLRF 0x42                          1269:      clrf    huns
05E0  01C3     CLRF 0x43                          1270:      clrf    tens
05E1  01C4     CLRF 0x44                          1271:      clrf    ones
                                                  1272:  
                                                  1273:  BCDadd3                             ; if any digit > 5, add3
05E2  3005     MOVLW 0x5                          1274:      movlw   0x5
05E3  0242     SUBWF 0x42, W                      1275:      subwf   huns, W
05E4  1803     BTFSC STATUS, 0x0                  1276:      btfsc   STATUS, C
05E5  25FF     CALL 0x5FF                         1277:      call    add3huns
                                                  1278:  
05E6  3005     MOVLW 0x5                          1279:      movlw   0x5
05E7  0243     SUBWF 0x43, W                      1280:      subwf   tens, W
05E8  1803     BTFSC STATUS, 0x0                  1281:      btfsc   STATUS, C
05E9  2602     CALL 0x602                         1282:      call    add3tens
                                                  1283:  
05EA  3005     MOVLW 0x5                          1284:      movlw   0x5
05EB  0244     SUBWF 0x44, W                      1285:      subwf   ones, W
05EC  1803     BTFSC STATUS, 0x0                  1286:      btfsc   STATUS, C
05ED  2605     CALL 0x605                         1287:      call    add3ones
                                                  1288:  
05EE  03C5     DECF 0x45, F                       1289:      decf    bignumcount, 1
05EF  1003     BCF STATUS, 0x0                    1290:      bcf     STATUS, C
05F0  0DB3     RLF 0x33, F                        1291:      rlf     op_time, 1              ; shift
05F1  0DC4     RLF 0x44, F                        1292:      rlf     ones, 1
05F2  1A44     BTFSC 0x44, 0x4                    1293:      btfsc   ones,4 ;
05F3  2608     CALL 0x608                         1294:      call    carryones               ; carry if too large
05F4  0DC3     RLF 0x43, F                        1295:      rlf     tens, 1
                                                  1296:  
05F5  1A43     BTFSC 0x43, 0x4                    1297:      btfsc   tens,4 ;
05F6  260B     CALL 0x60B                         1298:      call    carrytens
05F7  0DC2     RLF 0x42, F                        1299:      rlf     huns,1
05F8  1003     BCF STATUS, 0x0                    1300:      bcf     STATUS, C
                                                  1301:  
05F9  0845     MOVF 0x45, W                       1302:      movf    bignumcount, W
05FA  1D03     BTFSS STATUS, 0x2                  1303:      btfss   STATUS, Z
05FB  2DE2     GOTO 0x5E2                         1304:      goto    BCDadd3                 ; repeat until you've shifted it 8 times
                                                  1305:  
05FC  0841     MOVF 0x41, W                       1306:      movff    op_time_save, op_time     ;restore the original op_time
05FD  00B3     MOVWF 0x33
05FE  0008     RETURN                             1307:      return
                                                  1308:  
                                                  1309:  add3huns
05FF  3003     MOVLW 0x3                          1310:      movlw 0x3
0600  07C2     ADDWF 0x42, F                      1311:      addwf huns,F
0601  0008     RETURN                             1312:      return
                                                  1313:  add3tens
0602  3003     MOVLW 0x3                          1314:      movlw 0x3
0603  07C3     ADDWF 0x43, F                      1315:      addwf tens,F
0604  0008     RETURN                             1316:      return
                                                  1317:  add3ones
0605  3003     MOVLW 0x3                          1318:      movlw 0x3
0606  07C4     ADDWF 0x44, F                      1319:      addwf ones,F
0607  0008     RETURN                             1320:      return
                                                  1321:  carryones
0608  1244     BCF 0x44, 0x4                      1322:      bcf ones, 4
0609  1403     BSF STATUS, 0x0                    1323:      bsf STATUS, C
060A  0008     RETURN                             1324:      return
                                                  1325:  carrytens
060B  1243     BCF 0x43, 0x4                      1326:      bcf tens, 4
060C  1403     BSF STATUS, 0x0                    1327:      bsf STATUS, C
060D  0008     RETURN                             1328:      return
                                                  1329:  
                                                  1330:  
                                                  1331:  ; DELAY 0.5S SUBROUTINE (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                                                  1332:  ; Delays exactly 0.5sec
                                                  1333:  HalfS
060E  308A     MOVLW 0x8A                         1334:        movlf 0x8A, hdelH
060F  00BE     MOVWF 0x3E
0610  30BA     MOVLW 0xBA                         1335:        movlf 0xBA, hdelM
0611  00BF     MOVWF 0x3F
0612  3003     MOVLW 0x3                          1336:        movlf 0x03, hdelL
0613  00C0     MOVWF 0x40
                                                  1337:  HalfS_0
0614  0BBE     DECFSZ 0x3E, F                     1338:        decfsz	hdelH, F
0615  2E17     GOTO 0x617                         1339:  	  goto	$+2
0616  0BBF     DECFSZ 0x3F, F                     1340:  	  decfsz	hdelM, F
0617  2E19     GOTO 0x619                         1341:  	  goto	$+2
0618  0BC0     DECFSZ 0x40, F                     1342:  	  decfsz	hdelL, F
0619  2E14     GOTO 0x614                         1343:  	  goto	HalfS_0
                                                  1344:  
061A  2E1B     GOTO 0x61B                         1345:  	  goto	$+1
061B  0000     NOP                                1346:  	  nop
061C  0008     RETURN                             1347:  	  return
                                                  1348:  
                                                  1349:  ; DELAY 5ms SUBROUTINE. (from generator at http://www.piclist.com/techref/piclist/codegen/delay.htm)
                                                  1350:  ; Useful for LCD because PIC is way faster than it can handle
                                                  1351:  ; Delays exactly 5ms
                                                  1352:  delay5ms
061D  30C3     MOVLW 0xC3                         1353:  	movlf	0xC3, del1
061E  00BC     MOVWF 0x3C
061F  300A     MOVLW 0xA                          1354:  	movlf	0x0A, del2
0620  00BD     MOVWF 0x3D
                                                  1355:  Delay_0
0621  0BBC     DECFSZ 0x3C, F                     1356:  	decfsz	del1, f
0622  2E24     GOTO 0x624                         1357:  	goto	$+2
0623  0BBD     DECFSZ 0x3D, F                     1358:  	decfsz	del2, f
0624  2E21     GOTO 0x621                         1359:  	goto	Delay_0
0625  0008     RETURN                             1360:      return
                                                  1361:  
                                                  1362:  ;***************************************
                                                  1363:  ; LCD SUBROUTINES (from sample code)
                                                  1364:  ;***************************************
                                                  1365:  
                                                  1366:  ; Initialize the LCD
                                                  1367:  InitLCD
0626  1283     BCF STATUS, 0x5                    1368:  	bcf STATUS,RP0
0627  1588     BSF PORTD, 0x3                     1369:  	bsf E     ;E default high
                                                  1370:  
                                                  1371:  	;Wait for LCD POR to finish (~15ms)
0628  261D     CALL 0x61D                         1372:  	call delay5ms
0629  261D     CALL 0x61D                         1373:  	call delay5ms
062A  261D     CALL 0x61D                         1374:  	call delay5ms
                                                  1375:  
                                                  1376:  	;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
                                                  1377:  	; -> Send b'0011' 3 times
062B  3033     MOVLW 0x33                         1378:  	movlw	b'00110011'
062C  264A     CALL 0x64A                         1379:  	call	WR_INS
062D  261D     CALL 0x61D                         1380:  	call delay5ms
062E  261D     CALL 0x61D                         1381:  	call delay5ms
062F  3032     MOVLW 0x32                         1382:  	movlw	b'00110010'
0630  264A     CALL 0x64A                         1383:  	call	WR_INS
0631  261D     CALL 0x61D                         1384:  	call delay5ms
0632  261D     CALL 0x61D                         1385:  	call delay5ms
                                                  1386:  
                                                  1387:  	; 4 bits, 2 lines, 5x7 dots
0633  3028     MOVLW 0x28                         1388:  	movlw	b'00101000'
0634  264A     CALL 0x64A                         1389:  	call	WR_INS
0635  261D     CALL 0x61D                         1390:  	call delay5ms
0636  261D     CALL 0x61D                         1391:  	call delay5ms
                                                  1392:  
                                                  1393:  	; display on/off
0637  300C     MOVLW 0xC                          1394:  	movlw	b'00001100'
0638  264A     CALL 0x64A                         1395:  	call	WR_INS
0639  261D     CALL 0x61D                         1396:  	call delay5ms
063A  261D     CALL 0x61D                         1397:  	call delay5ms
                                                  1398:  
                                                  1399:  	; Entry mode
063B  3006     MOVLW 0x6                          1400:  	movlw	b'00000110'
063C  264A     CALL 0x64A                         1401:  	call	WR_INS
063D  261D     CALL 0x61D                         1402:  	call delay5ms
063E  261D     CALL 0x61D                         1403:  	call delay5ms
                                                  1404:  
                                                  1405:  	; Clear ram
063F  3001     MOVLW 0x1                          1406:  	movlw	b'00000001'
0640  264A     CALL 0x64A                         1407:  	call	WR_INS
0641  261D     CALL 0x61D                         1408:  	call delay5ms
0642  261D     CALL 0x61D                         1409:  	call delay5ms
0643  0008     RETURN                             1410:  	return
                                                  1411:  
                                                  1412:  ; Clear the display
                                                  1413:  Clear_Display
0644  3001     MOVLW 0x1                          1414:  		movlw	B'00000001'
0645  264A     CALL 0x64A                         1415:  		call	WR_INS
0646  0008     RETURN                             1416:  		return
                                                  1417:  
                                                  1418:  ;Switch lines
                                                  1419:  Switch_Lines
0647  30C0     MOVLW 0xC0                         1420:  		movlw	B'11000000'
0648  264A     CALL 0x64A                         1421:  		call	WR_INS
0649  0008     RETURN                             1422:  		return
                                                  1423:  
                                                  1424:  ; Write an instruction to the LCD (see page 7-104)
                                                  1425:  ; The instruction must be in W
                                                  1426:  WR_INS
064A  1108     BCF PORTD, 0x2                     1427:  	bcf		RS				;clear RS
064B  00BA     MOVWF 0x3A                         1428:  	movwf	com				;W --> com
064C  39F0     ANDLW 0xF0                         1429:  	andlw	0xF0			;mask 4 bits MSB w = X0
064D  0088     MOVWF PORTD                        1430:  	movwf	PORTD			;Send 4 bits MSB
064E  1588     BSF PORTD, 0x3                     1431:  	bsf		E				;
064F  261D     CALL 0x61D                         1432:  	call	delay5ms	;__    __
0650  1188     BCF PORTD, 0x3                     1433:  	bcf		E				;  |__|
0651  0E3A     SWAPF 0x3A, W                      1434:  	swapf	com,w
0652  39F0     ANDLW 0xF0                         1435:  	andlw	0xF0			;1111 0010
0653  0088     MOVWF PORTD                        1436:  	movwf	PORTD			;send 4 bits LSB
0654  1588     BSF PORTD, 0x3                     1437:  	bsf		E				;
0655  261D     CALL 0x61D                         1438:  	call	delay5ms	;__    __
0656  1188     BCF PORTD, 0x3                     1439:  	bcf		E				;  |__|
0657  261D     CALL 0x61D                         1440:  	call	delay5ms
0658  0008     RETURN                             1441:  	return
                                                  1442:  
                                                  1443:  ; Write data at current cursor location
                                                  1444:  ; Character code (see page 7-104) must be in W
                                                  1445:  WR_DATA
0659  1508     BSF PORTD, 0x2                     1446:  	bsf		RS
065A  00BB     MOVWF 0x3B                         1447:  	movwf	dat
065B  083B     MOVF 0x3B, W                       1448:  	movf	dat,w
065C  39F0     ANDLW 0xF0                         1449:  	andlw	0xF0
065D  3E04     ADDLW 0x4                          1450:  	addlw	4
065E  0088     MOVWF PORTD                        1451:  	movwf	PORTD
065F  1588     BSF PORTD, 0x3                     1452:  	bsf		E				;
0660  261D     CALL 0x61D                         1453:  	call	delay5ms	;__    __
0661  1188     BCF PORTD, 0x3                     1454:  	bcf		E				;  |__|
0662  0E3B     SWAPF 0x3B, W                      1455:  	swapf	dat,w
0663  39F0     ANDLW 0xF0                         1456:  	andlw	0xF0
0664  3E04     ADDLW 0x4                          1457:  	addlw	4
0665  0088     MOVWF PORTD                        1458:  	movwf	PORTD
0666  1588     BSF PORTD, 0x3                     1459:  	bsf		E				;
0667  261D     CALL 0x61D                         1460:  	call	delay5ms	;__    __
0668  1188     BCF PORTD, 0x3                     1461:  	bcf		E				;  |__|
0669  0008     RETURN                             1462:  	return
                                                  1463:  
                                                  1464:  
                                                  1465:  ;***************************************
                                                  1466:  ; PC INTERFACE SUBROUTINES (from sample code)
                                                  1467:  ;***************************************
                                                  1468:  InitUSART
066A  1683     BSF STATUS, 0x5                    1469:          bsf       STATUS,RP0     ; select bank 1
066B  300F     MOVLW 0xF                          1470:          movlw     d'15'          ; BAUD rate 9600, assuming 10MHz oscillator
066C  0099     MOVWF TXREG                        1471:          movwf     SPBRG
066D  0198     CLRF RCSTA                         1472:          clrf      TXSTA          ; 8 bits data ,no,1 stop
                                                  1473:  
066E  1283     BCF STATUS, 0x5                    1474:          bcf       STATUS,RP0     ; select bank 0
066F  1798     BSF RCSTA, 0x7                     1475:          bsf       RCSTA,SPEN     ; Asynchronous serial port enable
0670  1618     BSF RCSTA, 0x4                     1476:          bsf       RCSTA,CREN     ; continuous receive
                                                  1477:  
0671  1683     BSF STATUS, 0x5                    1478:          bsf       STATUS,RP0     ; select bank 1
0672  1698     BSF RCSTA, 0x5                     1479:          bsf       TXSTA,TXEN     ; Transmit enable
0673  0008     RETURN                             1480:          return
                                                  1481:  
                                                  1482:  
                                                  1483:  writetoPC
                                                  1484:  ; Writes the data in W to the PC
                                                  1485:  ; end up in bank1!
0674  1283     BCF STATUS, 0x5                    1486:          bcf       STATUS,RP0     ; Go to bank 0
0675  0099     MOVWF TXREG                        1487:          movwf     TXREG          ; Send contents of W to RS232
0676  1683     BSF STATUS, 0x5                    1488:          bsf       STATUS,RP0     ; Go to bank with TXSTA
0677  1C98     BTFSS RCSTA, 0x1                   1489:          btfss     TXSTA,1        ; check TRMT bit in TXSTA (FSR) until TRMT=1
0678  2E77     GOTO 0x677                         1490:          goto      $-1
0679  0008     RETURN                             1491:          return
                                                  1492:  
                                                  1493:  
                                                  1494:  ;***************************************
                                                  1495:  ; ISR
                                                  1496:  ; Currently only care about TMR0
                                                  1497:  ; TMR0 overflows at 256*256; each time, decrement count38
                                                  1498:  ; count38 thus hits 0 every 256*256*38 cycles = 1sec with 10MHz clock
                                                  1499:  ; When this hapens, op_time increments
                                                  1500:  ; Also check photodata every time for 2 sec = total of 76 reads
                                                  1501:  ;***************************************
                                                  1502:  isr
067A  00F9     MOVWF 0x79                         1503:      movwf   w_isr           ;save W and status
067B  0E03     SWAPF STATUS, W                    1504:      swapf   STATUS, W
067C  0183     CLRF STATUS                        1505:      clrf    STATUS
067D  00FA     MOVWF 0x7A                         1506:      movwf   status_isr
                                                  1507:  ;    movf    PCLATH, W      ;if using pages
                                                  1508:  ;    movwf   pclath_isr
                                                  1509:  ;    clrf    PCLATH
                                                  1510:  
067E  0BC6     DECFSZ 0x46, F                     1511:      decfsz  count38, F     ;if count38 gets to 38 it's been one second
067F  2E83     GOTO 0x683                         1512:      goto    end_isr
0680  3026     MOVLW 0x26                         1513:      movlf   D'38', count38  ;so reset count38
0681  00C6     MOVWF 0x46
0682  0AB3     INCF 0x33, F                       1514:      incf    op_time, F         ; and increment op_time
                                                  1515:  
                                                  1516:  end_isr
                                                  1517:  
0683  1889     BTFSC PORTE, 0x1                   1518:      btfsc   PHOTODATA       ;if PHOTODATA is 1, light is on
0684  0AC8     INCF 0x48, F                       1519:      incf    photocount, F       ;if it is 1, light is on so photocount++
                                                  1520:  
                                                  1521:  ;    movf    pclath_isr, W  ;if using pages
                                                  1522:  ;    movwf    PCLATH
0685  0E7A     SWAPF 0x7A, W                      1523:      swapf   status_isr, W   ;restore W and status
0686  0083     MOVWF STATUS                       1524:      movwf   STATUS
0687  0EF9     SWAPF 0x79, F                      1525:      swapf   w_isr, F
0688  0E79     SWAPF 0x79, W                      1526:      swapf   w_isr, W
0689  110B     BCF INTCON, 0x2                    1527:      bcf     INTCON, T0IF    ;clear the interrupt flag
068A  0009     RETFIE                             1528:      retfie
                                                  1529:  
                                                  1530:  
2007  0000     NOP                                1531:      END
                                                  1532:  
                                                  1533:  
                                                  1534:  
                                                  1535:  
                                                  1536:  
                                                  1537:  
                                                  1538:  
                                                  1539:  
---  C:/Users/David/Documents/GitHub/robot/go_go_gadget.X/i2c_common.asm  -------------------------------
                                                  1:         include <p16f877.inc>
                                                  2:     	errorlevel	-302
                                                  3:     	errorlevel	-305
                                                  4:     
                                                  5:     ;global labels
                                                  6:     
                                                  7:     	global	write_rtc,read_rtc,rtc_convert,i2c_common_setup,p2p_write,p2p_read
                                                  8:     
                                                  9:     ;Definition and variable declarations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  10:            cblock    0x71			;these variable names are for reference only. The following
                                                  11:            dt1			;0x71		 addresses are used for the RTC module
                                                  12:            dt2			;0x72
                                                  13:            ADD			;0x73
                                                  14:            DAT			;0x74
                                                  15:            DOUT		;0x75
                                                  16:            B1			;0x76
                                                  17:    		dig10		;0x77
                                                  18:    		dig1		;0x78
                                                  19:            endc
                                                  20:    
                                                  21:    ;I2C lowest layer macros;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  22:    
                                                  23:    i2c_common_check_ack	macro	err_address		;If bad ACK bit received, goto err_address
                                                  24:    	banksel		SSPCON2
                                                  25:        btfsc       SSPCON2,ACKSTAT
                                                  26:        goto        err_address
                                                  27:    	endm
                                                  28:    
                                                  29:    i2c_common_start	macro
                                                  30:    ;input:		none
                                                  31:    ;output:	none
                                                  32:    ;desc:		initiate start conditionon the bus
                                                  33:    	banksel     SSPCON2
                                                  34:        bsf         SSPCON2,SEN
                                                  35:        btfsc       SSPCON2,SEN
                                                  36:        goto        $-1
                                                  37:    	endm
                                                  38:    
                                                  39:    i2c_common_stop	macro
                                                  40:    ;input: 	none
                                                  41:    ;output:	none
                                                  42:    ;desc:		initiate stop condition on the bus
                                                  43:    	banksel     SSPCON2
                                                  44:        bsf         SSPCON2,PEN
                                                  45:        btfsc       SSPCON2,PEN
                                                  46:        goto        $-1
                                                  47:    	endm
                                                  48:    
                                                  49:    i2c_common_repeatedstart	macro
                                                  50:    ;input:		none
                                                  51:    ;output:	none
                                                  52:    ;desc:		initiate repeated start on the bus. Usually used for
                                                  53:    ;			changing direction of SDA without STOP event
                                                  54:    	banksel     SSPCON2
                                                  55:        bsf         SSPCON2,RSEN
                                                  56:        btfsc       SSPCON2,RSEN
                                                  57:        goto        $-1
                                                  58:    	endm
                                                  59:    
                                                  60:    i2c_common_ack		macro
                                                  61:    ;input:		none
                                                  62:    ;output:	none
                                                  63:    ;desc:		send an acknowledge to slave device
                                                  64:        banksel     SSPCON2
                                                  65:        bcf         SSPCON2,ACKDT
                                                  66:        bsf         SSPCON2,ACKEN
                                                  67:        btfsc       SSPCON2,ACKEN
                                                  68:        goto        $-1
                                                  69:        endm
                                                  70:    
                                                  71:    i2c_common_nack	macro
                                                  72:    ;input:		none
                                                  73:    ;output:	none
                                                  74:    ;desc:		send an not acknowledge to slave device
                                                  75:       banksel     SSPCON2
                                                  76:       bsf         SSPCON2,ACKDT
                                                  77:       bsf         SSPCON2,ACKEN
                                                  78:       btfsc       SSPCON2,ACKEN
                                                  79:       goto        $-1
                                                  80:       endm
                                                  81:    
                                                  82:    i2c_common_write	macro
                                                  83:    ;input:		W
                                                  84:    ;output:	to slave device
                                                  85:    ;desc:		writes W to SSPBUF and send to slave device. Make sure
                                                  86:    ;			transmit is finished before continuing
                                                  87:       banksel     SSPBUF
                                                  88:       movwf       SSPBUF
                                                  89:       banksel     SSPSTAT
                                                  90:       btfsc       SSPSTAT,R_W 		;While transmit is in progress, wait
                                                  91:       goto        $-1
                                                  92:       banksel     SSPCON2
                                                  93:       endm
                                                  94:    
                                                  95:    i2c_common_read	macro
                                                  96:    ;input:		none
                                                  97:    ;output:	W
                                                  98:    ;desc:		reads data from slave and saves it in W.
                                                  99:       banksel     SSPCON2
                                                  100:      bsf         SSPCON2,RCEN    ;Begin receiving byte from
                                                  101:      btfsc       SSPCON2,RCEN
                                                  102:      goto        $-1
                                                  103:      banksel     SSPBUF
                                                  104:      movf        SSPBUF,w
                                                  105:      endm
                                                  106:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  107:   
                                                  108:   	code
                                                  109:   
                                                  110:   i2c_common_setup
                                                  111:   ;input:		none
                                                  112:   ;output:	none
                                                  113:   ;desc:		sets up I2C as master device with 100kHz baud rate
068B  1683     BSF STATUS, 0x5                    114:   	banksel		SSPSTAT
068C  1303     BCF STATUS, 0x6
068D  0194     CLRF SSPCON                        115:       clrf        SSPSTAT         ;I2C line levels, and clear all flags
068E  3018     MOVLW 0x18                         116:       movlw       d'24'         	;100kHz baud rate: 10MHz osc / [4*(24+1)]
068F  1683     BSF STATUS, 0x5                    117:   	banksel		SSPADD
0690  1303     BCF STATUS, 0x6
0691  0093     MOVWF SSPBUF                       118:       movwf       SSPADD          ;RTC only supports 100kHz
                                                  119:   
0692  3008     MOVLW 0x8                          120:       movlw       b'00001000'     ;Config SSP for Master Mode I2C
0693  1283     BCF STATUS, 0x5                    121:   	banksel		SSPCON
0694  1303     BCF STATUS, 0x6
0695  0094     MOVWF SSPCON                       122:       movwf       SSPCON
0696  1694     BSF SSPCON, 0x5                    123:       bsf         SSPCON,SSPEN    ;Enable SSP module
0697  1683     BSF STATUS, 0x5                    124:       i2c_common_stop        		;Ensure the bus is free
0698  1303     BCF STATUS, 0x6
0699  1511     BSF TMR2, 0x2
069A  1911     BTFSC TMR2, 0x2
069B  2E9A     GOTO 0x69A
069C  0008     RETURN                             125:   	return
                                                  126:   
                                                  127:   ;rtc Algorithms;;;;;;
                                                  128:   
                                                  129:   write_rtc
                                                  130:   ;input:		address of register in RTC
                                                  131:   ;output:	none
                                                  132:   ;Desc:		handles writing data to RTC
                                                  133:           ;Select the DS1307 on the bus, in WRITE mode
069D  1683     BSF STATUS, 0x5                    134:           i2c_common_start
069E  1303     BCF STATUS, 0x6
069F  1411     BSF TMR2, 0x0
06A0  1811     BTFSC TMR2, 0x0
06A1  2EA0     GOTO 0x6A0
06A2  30D0     MOVLW 0xD0                         135:           movlw       0xD0        ;DS1307 address | WRITE bit
06A3  1283     BCF STATUS, 0x5                    136:           i2c_common_write
06A4  1303     BCF STATUS, 0x6
06A5  0093     MOVWF SSPBUF
06A6  1683     BSF STATUS, 0x5
06A7  1303     BCF STATUS, 0x6
06A8  1914     BTFSC SSPCON, 0x2
06A9  2EA8     GOTO 0x6A8
06AA  1683     BSF STATUS, 0x5
06AB  1303     BCF STATUS, 0x6
06AC  1683     BSF STATUS, 0x5                    137:           i2c_common_check_ack   WR_ERR
06AD  1303     BCF STATUS, 0x6
06AE  1B11     BTFSC TMR2, 0x6
06AF  2ED1     GOTO 0x6D1
                                                  138:   
                                                  139:           ;Write data to I2C bus (Register Address in RTC)
06B0  1283     BCF STATUS, 0x5                    140:   		banksel		0x73
06B1  1303     BCF STATUS, 0x6
06B2  0873     MOVF 0x73, W                       141:           movf        0x73,w       ;Set register pointer in RTC
06B3  1283     BCF STATUS, 0x5                    142:           i2c_common_write
06B4  1303     BCF STATUS, 0x6
06B5  0093     MOVWF SSPBUF
06B6  1683     BSF STATUS, 0x5
06B7  1303     BCF STATUS, 0x6
06B8  1914     BTFSC SSPCON, 0x2
06B9  2EB8     GOTO 0x6B8
06BA  1683     BSF STATUS, 0x5
06BB  1303     BCF STATUS, 0x6
06BC  1683     BSF STATUS, 0x5                    143:           i2c_common_check_ack   WR_ERR
06BD  1303     BCF STATUS, 0x6
06BE  1B11     BTFSC TMR2, 0x6
06BF  2ED1     GOTO 0x6D1
                                                  144:   
                                                  145:           ;Write data to I2C bus (Data to be placed in RTC register)
06C0  1283     BCF STATUS, 0x5                    146:   		banksel		0x74
06C1  1303     BCF STATUS, 0x6
06C2  0874     MOVF 0x74, W                       147:           movf        0x74,w       ;Write data to register in RTC
06C3  1283     BCF STATUS, 0x5                    148:           i2c_common_write
06C4  1303     BCF STATUS, 0x6
06C5  0093     MOVWF SSPBUF
06C6  1683     BSF STATUS, 0x5
06C7  1303     BCF STATUS, 0x6
06C8  1914     BTFSC SSPCON, 0x2
06C9  2EC8     GOTO 0x6C8
06CA  1683     BSF STATUS, 0x5
06CB  1303     BCF STATUS, 0x6
06CC  1683     BSF STATUS, 0x5                    149:           i2c_common_check_ack   WR_ERR
06CD  1303     BCF STATUS, 0x6
06CE  1B11     BTFSC TMR2, 0x6
06CF  2ED1     GOTO 0x6D1
06D0  2ED2     GOTO 0x6D2                         150:           goto        WR_END
                                                  151:   WR_ERR
06D1  0000     NOP                                152:           nop
                                                  153:   WR_END
06D2  1683     BSF STATUS, 0x5                    154:   		i2c_common_stop	;Release the I2C bus
06D3  1303     BCF STATUS, 0x6
06D4  1511     BSF TMR2, 0x2
06D5  1911     BTFSC TMR2, 0x2
06D6  2ED5     GOTO 0x6D5
06D7  0008     RETURN                             155:           return
                                                  156:   
                                                  157:   read_rtc
                                                  158:   ;input:		address of RTC
                                                  159:   ;output:	DOUT or 0x75
                                                  160:   ;Desc:		This reads from the selected address of the RTC
                                                  161:   ;			and saves it into DOUT or address 0x75
                                                  162:           ;Select the DS1307 on the bus, in WRITE mode
06D8  1683     BSF STATUS, 0x5                    163:           i2c_common_start
06D9  1303     BCF STATUS, 0x6
06DA  1411     BSF TMR2, 0x0
06DB  1811     BTFSC TMR2, 0x0
06DC  2EDB     GOTO 0x6DB
06DD  30D0     MOVLW 0xD0                         164:           movlw       0xD0        ;DS1307 address | WRITE bit
06DE  1283     BCF STATUS, 0x5                    165:           i2c_common_write
06DF  1303     BCF STATUS, 0x6
06E0  0093     MOVWF SSPBUF
06E1  1683     BSF STATUS, 0x5
06E2  1303     BCF STATUS, 0x6
06E3  1914     BTFSC SSPCON, 0x2
06E4  2EE3     GOTO 0x6E3
06E5  1683     BSF STATUS, 0x5
06E6  1303     BCF STATUS, 0x6
06E7  1683     BSF STATUS, 0x5                    166:           i2c_common_check_ack   RD_ERR
06E8  1303     BCF STATUS, 0x6
06E9  1B11     BTFSC TMR2, 0x6
06EA  2F20     GOTO 0x720
                                                  167:   
                                                  168:           ;Write data to I2C bus (Register Address in RTC)
06EB  1283     BCF STATUS, 0x5                    169:   		banksel		0x73
06EC  1303     BCF STATUS, 0x6
06ED  0873     MOVF 0x73, W                       170:           movf        0x73,w       ;Set register pointer in RTC
06EE  1283     BCF STATUS, 0x5                    171:           i2c_common_write
06EF  1303     BCF STATUS, 0x6
06F0  0093     MOVWF SSPBUF
06F1  1683     BSF STATUS, 0x5
06F2  1303     BCF STATUS, 0x6
06F3  1914     BTFSC SSPCON, 0x2
06F4  2EF3     GOTO 0x6F3
06F5  1683     BSF STATUS, 0x5
06F6  1303     BCF STATUS, 0x6
06F7  1683     BSF STATUS, 0x5                    172:           i2c_common_check_ack   RD_ERR
06F8  1303     BCF STATUS, 0x6
06F9  1B11     BTFSC TMR2, 0x6
06FA  2F20     GOTO 0x720
                                                  173:   
                                                  174:           ;Re-Select the DS1307 on the bus, in READ mode
06FB  1683     BSF STATUS, 0x5                    175:           i2c_common_repeatedstart
06FC  1303     BCF STATUS, 0x6
06FD  1491     BSF TMR2, 0x1
06FE  1891     BTFSC TMR2, 0x1
06FF  2EFE     GOTO 0x6FE
0700  30D1     MOVLW 0xD1                         176:           movlw       0xD1        ;DS1307 address | READ bit
0701  1283     BCF STATUS, 0x5                    177:           i2c_common_write
0702  1303     BCF STATUS, 0x6
0703  0093     MOVWF SSPBUF
0704  1683     BSF STATUS, 0x5
0705  1303     BCF STATUS, 0x6
0706  1914     BTFSC SSPCON, 0x2
0707  2F06     GOTO 0x706
0708  1683     BSF STATUS, 0x5
0709  1303     BCF STATUS, 0x6
070A  1683     BSF STATUS, 0x5                    178:           i2c_common_check_ack   RD_ERR
070B  1303     BCF STATUS, 0x6
070C  1B11     BTFSC TMR2, 0x6
070D  2F20     GOTO 0x720
                                                  179:   
                                                  180:           ;Read data from I2C bus (Contents of Register in RTC)
070E  1683     BSF STATUS, 0x5                    181:           i2c_common_read
070F  1303     BCF STATUS, 0x6
0710  1591     BSF TMR2, 0x3
0711  1991     BTFSC TMR2, 0x3
0712  2F11     GOTO 0x711
0713  1283     BCF STATUS, 0x5
0714  1303     BCF STATUS, 0x6
0715  0813     MOVF SSPBUF, W
0716  1283     BCF STATUS, 0x5                    182:   		banksel		0x75
0717  1303     BCF STATUS, 0x6
0718  00F5     MOVWF 0x75                         183:           movwf       0x75
0719  1683     BSF STATUS, 0x5                    184:           i2c_common_nack      ;Send acknowledgement of data reception
071A  1303     BCF STATUS, 0x6
071B  1691     BSF TMR2, 0x5
071C  1611     BSF TMR2, 0x4
071D  1A11     BTFSC TMR2, 0x4
071E  2F1D     GOTO 0x71D
                                                  185:   
071F  2F21     GOTO 0x721                         186:           goto        RD_END
                                                  187:   
                                                  188:   RD_ERR
0720  0000     NOP                                189:           nop
                                                  190:   
                                                  191:           ;Release the I2C bus
0721  1683     BSF STATUS, 0x5                    192:   RD_END  i2c_common_stop
0722  1303     BCF STATUS, 0x6
0723  1511     BSF TMR2, 0x2
0724  1911     BTFSC TMR2, 0x2
0725  2F24     GOTO 0x724
0726  0008     RETURN                             193:           return
                                                  194:   
                                                  195:   rtc_convert
                                                  196:   ;input:		W
                                                  197:   ;output:	dig10 (0x77), dig1 (0x78)
                                                  198:   ;desc:		This subroutine converts the binary number
                                                  199:   ;			in W into a two digit ASCII number and place
                                                  200:   ;			each digit into the corresponding registers
                                                  201:   ;			dig10 or dig1
0727  1283     BCF STATUS, 0x5                    202:   	banksel	0x76
0728  1303     BCF STATUS, 0x6
0729  00F6     MOVWF 0x76                         203:   	movwf   0x76             ; B1 = HHHH LLLL
072A  0E76     SWAPF 0x76, W                      204:       swapf   0x76,w           ; W  = LLLL HHHH
072B  390F     ANDLW 0xF                          205:       andlw   0x0f           ; Mask upper four bits 0000 HHHH
072C  3E30     ADDLW 0x30                         206:       addlw   0x30           ; convert to ASCII
072D  00F7     MOVWF 0x77                         207:       movwf	0x77		   ;saves into 10ths digit
                                                  208:   
072E  1283     BCF STATUS, 0x5                    209:   	banksel	0x76
072F  1303     BCF STATUS, 0x6
0730  0876     MOVF 0x76, W                       210:       movf    0x76,w
0731  390F     ANDLW 0xF                          211:       andlw   0x0f           ; w  = 0000 LLLL
0732  3E30     ADDLW 0x30                         212:       addlw   0x30           ; convert to ASCII
0733  00F8     MOVWF 0x78                         213:       movwf	0x78	       ; saves into 1s digit
0734  0008     RETURN                             214:      	return
                                                  215:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  216:   
                                                  217:   
                                                  218:   ;pic to pic subroutines;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  219:   p2p_write
                                                  220:           ;Select the DS1307 on the bus, in WRITE mode
0735  1683     BSF STATUS, 0x5                    221:           i2c_common_start
0736  1303     BCF STATUS, 0x6
0737  1411     BSF TMR2, 0x0
0738  1811     BTFSC TMR2, 0x0
0739  2F38     GOTO 0x738
073A  3010     MOVLW 0x10                         222:           movlw       b'00010000'
073B  1283     BCF STATUS, 0x5                    223:           i2c_common_write
073C  1303     BCF STATUS, 0x6
073D  0093     MOVWF SSPBUF
073E  1683     BSF STATUS, 0x5
073F  1303     BCF STATUS, 0x6
0740  1914     BTFSC SSPCON, 0x2
0741  2F40     GOTO 0x740
0742  1683     BSF STATUS, 0x5
0743  1303     BCF STATUS, 0x6
0744  1683     BSF STATUS, 0x5                    224:           i2c_common_check_ack   W_END
0745  1303     BCF STATUS, 0x6
0746  1B11     BTFSC TMR2, 0x6
0747  2F59     GOTO 0x759
                                                  225:   
0748  1283     BCF STATUS, 0x5                    226:   		banksel	0x70
0749  1303     BCF STATUS, 0x6
074A  0870     MOVF 0x70, W                       227:   		movf	0x70, W
074B  1283     BCF STATUS, 0x5                    228:           i2c_common_write
074C  1303     BCF STATUS, 0x6
074D  0093     MOVWF SSPBUF
074E  1683     BSF STATUS, 0x5
074F  1303     BCF STATUS, 0x6
0750  1914     BTFSC SSPCON, 0x2
0751  2F50     GOTO 0x750
0752  1683     BSF STATUS, 0x5
0753  1303     BCF STATUS, 0x6
0754  1683     BSF STATUS, 0x5                    229:           i2c_common_check_ack   W_END
0755  1303     BCF STATUS, 0x6
0756  1B11     BTFSC TMR2, 0x6
0757  2F59     GOTO 0x759
0758  2F59     GOTO 0x759                         230:           goto        W_END
                                                  231:   W_END
0759  1683     BSF STATUS, 0x5                    232:   		i2c_common_stop	;Release the I2C bus
075A  1303     BCF STATUS, 0x6
075B  1511     BSF TMR2, 0x2
075C  1911     BTFSC TMR2, 0x2
075D  2F5C     GOTO 0x75C
075E  0008     RETURN                             233:           return
                                                  234:   
                                                  235:   
                                                  236:   p2p_read
                                                  237:           ;Select the DS1307 on the bus, in WRITE mode
075F  1683     BSF STATUS, 0x5                    238:           i2c_common_start
0760  1303     BCF STATUS, 0x6
0761  1411     BSF TMR2, 0x0
0762  1811     BTFSC TMR2, 0x0
0763  2F62     GOTO 0x762
0764  3011     MOVLW 0x11                         239:   		movlw       b'00010001'
0765  1283     BCF STATUS, 0x5                    240:           i2c_common_write
0766  1303     BCF STATUS, 0x6
0767  0093     MOVWF SSPBUF
0768  1683     BSF STATUS, 0x5
0769  1303     BCF STATUS, 0x6
076A  1914     BTFSC SSPCON, 0x2
076B  2F6A     GOTO 0x76A
076C  1683     BSF STATUS, 0x5
076D  1303     BCF STATUS, 0x6
076E  1683     BSF STATUS, 0x5                    241:   		i2c_common_check_ack   R_END
076F  1303     BCF STATUS, 0x6
0770  1B11     BTFSC TMR2, 0x6
0771  2F83     GOTO 0x783
                                                  242:   
0772  1683     BSF STATUS, 0x5                    243:           i2c_common_read
0773  1303     BCF STATUS, 0x6
0774  1591     BSF TMR2, 0x3
0775  1991     BTFSC TMR2, 0x3
0776  2F75     GOTO 0x775
0777  1283     BCF STATUS, 0x5
0778  1303     BCF STATUS, 0x6
0779  0813     MOVF SSPBUF, W
077A  1283     BCF STATUS, 0x5                    244:   		banksel		0x70
077B  1303     BCF STATUS, 0x6
077C  00F0     MOVWF 0x70                         245:           movwf       0x70
077D  1683     BSF STATUS, 0x5                    246:           i2c_common_nack      ;Send acknowledgement of data reception
077E  1303     BCF STATUS, 0x6
077F  1691     BSF TMR2, 0x5
0780  1611     BSF TMR2, 0x4
0781  1A11     BTFSC TMR2, 0x4
0782  2F81     GOTO 0x781
                                                  247:   R_END
0783  1683     BSF STATUS, 0x5                    248:   		i2c_common_stop
0784  1303     BCF STATUS, 0x6
0785  1511     BSF TMR2, 0x2
0786  1911     BTFSC TMR2, 0x2
0787  2F86     GOTO 0x786
0788  0008     RETURN                             249:           return
                                                  250:   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                                  251:   
                                                  252:   	end
                                                  253:   
                                                  254:   
